
RTSpeed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000690  0800f498  0800f498  0001f498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb28  0800fb28  000207b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb28  0800fb28  0001fb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb30  0800fb30  000207b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800fb30  0800fb30  0001fb30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb38  0800fb38  0001fb38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007b0  20000000  0800fb3c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001824  200007b0  080102ec  000207b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001fd4  080102ec  00021fd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000207b0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000207e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129a1  00000000  00000000  00020823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032f8  00000000  00000000  000331c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  000364c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d35  00000000  00000000  00037628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019bbd  00000000  00000000  0003835d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d4e  00000000  00000000  00051f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091b74  00000000  00000000  00066c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006074  00000000  00000000  000f87dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000fe850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200007b0 	.word	0x200007b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f480 	.word	0x0800f480

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200007b4 	.word	0x200007b4
 80001dc:	0800f480 	.word	0x0800f480

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001006:	f000 fc59 	bl	80018bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100a:	f000 f897 	bl	800113c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100e:	f000 f9db 	bl	80013c8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8001012:	f006 fca1 	bl	8007958 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001016:	f000 f8f9 	bl	800120c <MX_TIM2_Init>
  MX_TIM3_Init();
 800101a:	f000 f95b 	bl	80012d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  float temp = 0;
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  char msg[8];
  char sign = ' ';
 8001024:	2320      	movs	r3, #32
 8001026:	72fb      	strb	r3, [r7, #11]

  strcpy(CDCbuffer, "50.0");
 8001028:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <main+0x128>)
 800102a:	4a40      	ldr	r2, [pc, #256]	; (800112c <main+0x12c>)
 800102c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001030:	6018      	str	r0, [r3, #0]
 8001032:	3304      	adds	r3, #4
 8001034:	7019      	strb	r1, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	temp = sin(HAL_GetTick()*1e-3 * 2*3.14159*atof(CDCbuffer));
 8001036:	f000 fca7 	bl	8001988 <HAL_GetTick>
 800103a:	4603      	mov	r3, r0
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff fa69 	bl	8000514 <__aeabi_ui2d>
 8001042:	a335      	add	r3, pc, #212	; (adr r3, 8001118 <main+0x118>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff fade 	bl	8000608 <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	f7ff f920 	bl	800029c <__adddf3>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	a32e      	add	r3, pc, #184	; (adr r3, 8001120 <main+0x120>)
 8001066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106a:	f7ff facd 	bl	8000608 <__aeabi_dmul>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4614      	mov	r4, r2
 8001074:	461d      	mov	r5, r3
 8001076:	482c      	ldr	r0, [pc, #176]	; (8001128 <main+0x128>)
 8001078:	f007 f994 	bl	80083a4 <atof>
 800107c:	ec53 2b10 	vmov	r2, r3, d0
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	f7ff fac0 	bl	8000608 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	ec43 2b17 	vmov	d7, r2, r3
 8001090:	eeb0 0a47 	vmov.f32	s0, s14
 8001094:	eef0 0a67 	vmov.f32	s1, s15
 8001098:	f00d f9b2 	bl	800e400 <sin>
 800109c:	ec53 2b10 	vmov	r2, r3, d0
 80010a0:	4610      	mov	r0, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fda8 	bl	8000bf8 <__aeabi_d2f>
 80010a8:	4603      	mov	r3, r0
 80010aa:	60fb      	str	r3, [r7, #12]

	strcpy(msg, "");
 80010ac:	2300      	movs	r3, #0
 80010ae:	703b      	strb	r3, [r7, #0]

	if (temp >= 0)
 80010b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80010b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	db0d      	blt.n	80010da <main+0xda>
		sprintf(msg, "%c%.3f", sign, temp);
 80010be:	7afc      	ldrb	r4, [r7, #11]
 80010c0:	68f8      	ldr	r0, [r7, #12]
 80010c2:	f7ff fa49 	bl	8000558 <__aeabi_f2d>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4638      	mov	r0, r7
 80010cc:	e9cd 2300 	strd	r2, r3, [sp]
 80010d0:	4622      	mov	r2, r4
 80010d2:	4917      	ldr	r1, [pc, #92]	; (8001130 <main+0x130>)
 80010d4:	f008 f846 	bl	8009164 <sprintf>
 80010d8:	e008      	b.n	80010ec <main+0xec>
	else
		sprintf(msg, "%.3f", temp); // Sign is already set
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f7ff fa3c 	bl	8000558 <__aeabi_f2d>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4638      	mov	r0, r7
 80010e6:	4913      	ldr	r1, [pc, #76]	; (8001134 <main+0x134>)
 80010e8:	f008 f83c 	bl	8009164 <sprintf>

	strcat(msg, "\r\n");
 80010ec:	463b      	mov	r3, r7
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff f876 	bl	80001e0 <strlen>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	463b      	mov	r3, r7
 80010fa:	4413      	add	r3, r2
 80010fc:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <main+0x138>)
 80010fe:	8811      	ldrh	r1, [r2, #0]
 8001100:	7892      	ldrb	r2, [r2, #2]
 8001102:	8019      	strh	r1, [r3, #0]
 8001104:	709a      	strb	r2, [r3, #2]
	CDC_Transmit_FS(msg, sizeof(msg));
 8001106:	463b      	mov	r3, r7
 8001108:	2108      	movs	r1, #8
 800110a:	4618      	mov	r0, r3
 800110c:	f006 fcf8 	bl	8007b00 <CDC_Transmit_FS>
	temp = sin(HAL_GetTick()*1e-3 * 2*3.14159*atof(CDCbuffer));
 8001110:	e791      	b.n	8001036 <main+0x36>
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	d2f1a9fc 	.word	0xd2f1a9fc
 800111c:	3f50624d 	.word	0x3f50624d
 8001120:	f01b866e 	.word	0xf01b866e
 8001124:	400921f9 	.word	0x400921f9
 8001128:	2000085c 	.word	0x2000085c
 800112c:	0800f498 	.word	0x0800f498
 8001130:	0800f4a0 	.word	0x0800f4a0
 8001134:	0800f4a8 	.word	0x0800f4a8
 8001138:	0800f4b0 	.word	0x0800f4b0

0800113c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b094      	sub	sp, #80	; 0x50
 8001140:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001142:	f107 0320 	add.w	r3, r7, #32
 8001146:	2230      	movs	r2, #48	; 0x30
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f008 f86d 	bl	800922a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <SystemClock_Config+0xc8>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a26      	ldr	r2, [pc, #152]	; (8001204 <SystemClock_Config+0xc8>)
 800116a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <SystemClock_Config+0xc8>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	4b21      	ldr	r3, [pc, #132]	; (8001208 <SystemClock_Config+0xcc>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a20      	ldr	r2, [pc, #128]	; (8001208 <SystemClock_Config+0xcc>)
 8001186:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b1e      	ldr	r3, [pc, #120]	; (8001208 <SystemClock_Config+0xcc>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001198:	2301      	movs	r3, #1
 800119a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800119c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a2:	2302      	movs	r3, #2
 80011a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80011ac:	230f      	movs	r3, #15
 80011ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80011b0:	2390      	movs	r3, #144	; 0x90
 80011b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b4:	2302      	movs	r3, #2
 80011b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80011b8:	2305      	movs	r3, #5
 80011ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 f8f7 	bl	80033b4 <HAL_RCC_OscConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011cc:	f000 f940 	bl	8001450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d0:	230f      	movs	r3, #15
 80011d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80011d4:	2301      	movs	r3, #1
 80011d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f002 fb5a 	bl	80038a4 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80011f6:	f000 f92b 	bl	8001450 <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	; 0x28
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
 800122a:	615a      	str	r2, [r3, #20]
 800122c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <MX_TIM2_Init+0xc4>)
 8001230:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001234:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <MX_TIM2_Init+0xc4>)
 8001238:	2200      	movs	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <MX_TIM2_Init+0xc4>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <MX_TIM2_Init+0xc4>)
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <MX_TIM2_Init+0xc4>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <MX_TIM2_Init+0xc4>)
 8001252:	2200      	movs	r2, #0
 8001254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001256:	481e      	ldr	r0, [pc, #120]	; (80012d0 <MX_TIM2_Init+0xc4>)
 8001258:	f002 fcdc 	bl	8003c14 <HAL_TIM_PWM_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001262:	f000 f8f5 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	4619      	mov	r1, r3
 8001274:	4816      	ldr	r0, [pc, #88]	; (80012d0 <MX_TIM2_Init+0xc4>)
 8001276:	f002 fff7 	bl	8004268 <HAL_TIMEx_MasterConfigSynchronization>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001280:	f000 f8e6 	bl	8001450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001284:	2360      	movs	r3, #96	; 0x60
 8001286:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128c:	2300      	movs	r3, #0
 800128e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	4619      	mov	r1, r3
 800129a:	480d      	ldr	r0, [pc, #52]	; (80012d0 <MX_TIM2_Init+0xc4>)
 800129c:	f002 fd0a 	bl	8003cb4 <HAL_TIM_PWM_ConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80012a6:	f000 f8d3 	bl	8001450 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2208      	movs	r2, #8
 80012ae:	4619      	mov	r1, r3
 80012b0:	4807      	ldr	r0, [pc, #28]	; (80012d0 <MX_TIM2_Init+0xc4>)
 80012b2:	f002 fcff 	bl	8003cb4 <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80012bc:	f000 f8c8 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <MX_TIM2_Init+0xc4>)
 80012c2:	f000 f929 	bl	8001518 <HAL_TIM_MspPostInit>

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200007cc 	.word	0x200007cc

080012d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	; 0x28
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	605a      	str	r2, [r3, #4]
 80012ec:	609a      	str	r2, [r3, #8]
 80012ee:	60da      	str	r2, [r3, #12]
 80012f0:	611a      	str	r2, [r3, #16]
 80012f2:	615a      	str	r2, [r3, #20]
 80012f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f6:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <MX_TIM3_Init+0xec>)
 80012f8:	4a32      	ldr	r2, [pc, #200]	; (80013c4 <MX_TIM3_Init+0xf0>)
 80012fa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <MX_TIM3_Init+0xec>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <MX_TIM3_Init+0xec>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001308:	4b2d      	ldr	r3, [pc, #180]	; (80013c0 <MX_TIM3_Init+0xec>)
 800130a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800130e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <MX_TIM3_Init+0xec>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <MX_TIM3_Init+0xec>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800131c:	4828      	ldr	r0, [pc, #160]	; (80013c0 <MX_TIM3_Init+0xec>)
 800131e:	f002 fc79 	bl	8003c14 <HAL_TIM_PWM_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001328:	f000 f892 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001334:	f107 0320 	add.w	r3, r7, #32
 8001338:	4619      	mov	r1, r3
 800133a:	4821      	ldr	r0, [pc, #132]	; (80013c0 <MX_TIM3_Init+0xec>)
 800133c:	f002 ff94 	bl	8004268 <HAL_TIMEx_MasterConfigSynchronization>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001346:	f000 f883 	bl	8001450 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800134a:	2360      	movs	r3, #96	; 0x60
 800134c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2200      	movs	r2, #0
 800135e:	4619      	mov	r1, r3
 8001360:	4817      	ldr	r0, [pc, #92]	; (80013c0 <MX_TIM3_Init+0xec>)
 8001362:	f002 fca7 	bl	8003cb4 <HAL_TIM_PWM_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800136c:	f000 f870 	bl	8001450 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2204      	movs	r2, #4
 8001374:	4619      	mov	r1, r3
 8001376:	4812      	ldr	r0, [pc, #72]	; (80013c0 <MX_TIM3_Init+0xec>)
 8001378:	f002 fc9c 	bl	8003cb4 <HAL_TIM_PWM_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001382:	f000 f865 	bl	8001450 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001386:	1d3b      	adds	r3, r7, #4
 8001388:	2208      	movs	r2, #8
 800138a:	4619      	mov	r1, r3
 800138c:	480c      	ldr	r0, [pc, #48]	; (80013c0 <MX_TIM3_Init+0xec>)
 800138e:	f002 fc91 	bl	8003cb4 <HAL_TIM_PWM_ConfigChannel>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001398:	f000 f85a 	bl	8001450 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	220c      	movs	r2, #12
 80013a0:	4619      	mov	r1, r3
 80013a2:	4807      	ldr	r0, [pc, #28]	; (80013c0 <MX_TIM3_Init+0xec>)
 80013a4:	f002 fc86 	bl	8003cb4 <HAL_TIM_PWM_ConfigChannel>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80013ae:	f000 f84f 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013b2:	4803      	ldr	r0, [pc, #12]	; (80013c0 <MX_TIM3_Init+0xec>)
 80013b4:	f000 f8b0 	bl	8001518 <HAL_TIM_MspPostInit>

}
 80013b8:	bf00      	nop
 80013ba:	3728      	adds	r7, #40	; 0x28
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20000814 	.word	0x20000814
 80013c4:	40000400 	.word	0x40000400

080013c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_GPIO_Init+0x84>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a1d      	ldr	r2, [pc, #116]	; (800144c <MX_GPIO_Init+0x84>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_GPIO_Init+0x84>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <MX_GPIO_Init+0x84>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a16      	ldr	r2, [pc, #88]	; (800144c <MX_GPIO_Init+0x84>)
 80013f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <MX_GPIO_Init+0x84>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <MX_GPIO_Init+0x84>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a0f      	ldr	r2, [pc, #60]	; (800144c <MX_GPIO_Init+0x84>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <MX_GPIO_Init+0x84>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	607b      	str	r3, [r7, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	603b      	str	r3, [r7, #0]
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <MX_GPIO_Init+0x84>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <MX_GPIO_Init+0x84>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <MX_GPIO_Init+0x84>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
}
 8001456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001458:	e7fe      	b.n	8001458 <Error_Handler+0x8>
	...

0800145c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <HAL_MspInit+0x4c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <HAL_MspInit+0x4c>)
 800146c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <HAL_MspInit+0x4c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <HAL_MspInit+0x4c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <HAL_MspInit+0x4c>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_MspInit+0x4c>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014bc:	d10e      	bne.n	80014dc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_TIM_PWM_MspInit+0x64>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <HAL_TIM_PWM_MspInit+0x64>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_TIM_PWM_MspInit+0x64>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014da:	e012      	b.n	8001502 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <HAL_TIM_PWM_MspInit+0x68>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d10d      	bne.n	8001502 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_TIM_PWM_MspInit+0x64>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_TIM_PWM_MspInit+0x64>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_TIM_PWM_MspInit+0x64>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40000400 	.word	0x40000400

08001518 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	; 0x30
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 031c 	add.w	r3, r7, #28
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001538:	d13d      	bne.n	80015b6 <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	4b40      	ldr	r3, [pc, #256]	; (8001640 <HAL_TIM_MspPostInit+0x128>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a3f      	ldr	r2, [pc, #252]	; (8001640 <HAL_TIM_MspPostInit+0x128>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <HAL_TIM_MspPostInit+0x128>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
 8001554:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	4b39      	ldr	r3, [pc, #228]	; (8001640 <HAL_TIM_MspPostInit+0x128>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a38      	ldr	r2, [pc, #224]	; (8001640 <HAL_TIM_MspPostInit+0x128>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b36      	ldr	r3, [pc, #216]	; (8001640 <HAL_TIM_MspPostInit+0x128>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = HIN_U_Pin;
 8001572:	2320      	movs	r3, #32
 8001574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001582:	2301      	movs	r3, #1
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(HIN_U_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	482d      	ldr	r0, [pc, #180]	; (8001644 <HAL_TIM_MspPostInit+0x12c>)
 800158e:	f000 fb3d 	bl	8001c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LIN_W_Pin;
 8001592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015a4:	2301      	movs	r3, #1
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LIN_W_GPIO_Port, &GPIO_InitStruct);
 80015a8:	f107 031c 	add.w	r3, r7, #28
 80015ac:	4619      	mov	r1, r3
 80015ae:	4826      	ldr	r0, [pc, #152]	; (8001648 <HAL_TIM_MspPostInit+0x130>)
 80015b0:	f000 fb2c 	bl	8001c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015b4:	e040      	b.n	8001638 <HAL_TIM_MspPostInit+0x120>
  else if(htim->Instance==TIM3)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a24      	ldr	r2, [pc, #144]	; (800164c <HAL_TIM_MspPostInit+0x134>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d13b      	bne.n	8001638 <HAL_TIM_MspPostInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c0:	2300      	movs	r3, #0
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <HAL_TIM_MspPostInit+0x128>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <HAL_TIM_MspPostInit+0x128>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6313      	str	r3, [r2, #48]	; 0x30
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <HAL_TIM_MspPostInit+0x128>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_TIM_MspPostInit+0x128>)
 80015e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e4:	4a16      	ldr	r2, [pc, #88]	; (8001640 <HAL_TIM_MspPostInit+0x128>)
 80015e6:	f043 0302 	orr.w	r3, r3, #2
 80015ea:	6313      	str	r3, [r2, #48]	; 0x30
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_TIM_MspPostInit+0x128>)
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LIN_U_Pin|HIN_V_Pin;
 80015f8:	23c0      	movs	r3, #192	; 0xc0
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001604:	2300      	movs	r3, #0
 8001606:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001608:	2302      	movs	r3, #2
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	4619      	mov	r1, r3
 8001612:	480c      	ldr	r0, [pc, #48]	; (8001644 <HAL_TIM_MspPostInit+0x12c>)
 8001614:	f000 fafa 	bl	8001c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LIN_V_Pin|HIN_W_Pin;
 8001618:	2303      	movs	r3, #3
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001628:	2302      	movs	r3, #2
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4619      	mov	r1, r3
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <HAL_TIM_MspPostInit+0x130>)
 8001634:	f000 faea 	bl	8001c0c <HAL_GPIO_Init>
}
 8001638:	bf00      	nop
 800163a:	3730      	adds	r7, #48	; 0x30
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000
 8001648:	40020400 	.word	0x40020400
 800164c:	40000400 	.word	0x40000400

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f000 f960 	bl	8001960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016a8:	4802      	ldr	r0, [pc, #8]	; (80016b4 <OTG_FS_IRQHandler+0x10>)
 80016aa:	f000 fd77 	bl	800219c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200015c4 	.word	0x200015c4

080016b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return 1;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_kill>:

int _kill(int pid, int sig)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016d2:	f007 fe11 	bl	80092f8 <__errno>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2216      	movs	r2, #22
 80016da:	601a      	str	r2, [r3, #0]
  return -1;
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <_exit>:

void _exit (int status)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016f0:	f04f 31ff 	mov.w	r1, #4294967295
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ffe7 	bl	80016c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016fa:	e7fe      	b.n	80016fa <_exit+0x12>

080016fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	e00a      	b.n	8001724 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800170e:	f3af 8000 	nop.w
 8001712:	4601      	mov	r1, r0
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	60ba      	str	r2, [r7, #8]
 800171a:	b2ca      	uxtb	r2, r1
 800171c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbf0      	blt.n	800170e <_read+0x12>
  }

  return len;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b086      	sub	sp, #24
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	e009      	b.n	800175c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	3301      	adds	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	429a      	cmp	r2, r3
 8001762:	dbf1      	blt.n	8001748 <_write+0x12>
  }
  return len;
 8001764:	687b      	ldr	r3, [r7, #4]
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <_close>:

int _close(int file)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001786:	b480      	push	{r7}
 8001788:	b083      	sub	sp, #12
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
 800178e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001796:	605a      	str	r2, [r3, #4]
  return 0;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_isatty>:

int _isatty(int file)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e0:	4a14      	ldr	r2, [pc, #80]	; (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ec:	4b13      	ldr	r3, [pc, #76]	; (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001808:	f007 fd76 	bl	80092f8 <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	220c      	movs	r2, #12
 8001810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	e009      	b.n	800182c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001818:	4b08      	ldr	r3, [pc, #32]	; (800183c <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181e:	4b07      	ldr	r3, [pc, #28]	; (800183c <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a05      	ldr	r2, [pc, #20]	; (800183c <_sbrk+0x64>)
 8001828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800182a:	68fb      	ldr	r3, [r7, #12]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20020000 	.word	0x20020000
 8001838:	00000400 	.word	0x00000400
 800183c:	2000089c 	.word	0x2000089c
 8001840:	20001fd8 	.word	0x20001fd8

08001844 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	; (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800186c:	f7ff ffea 	bl	8001844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001872:	490d      	ldr	r1, [pc, #52]	; (80018a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001874:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001888:	4c0a      	ldr	r4, [pc, #40]	; (80018b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f007 fd35 	bl	8009304 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189a:	f7ff fbb1 	bl	8001000 <main>
  bx  lr    
 800189e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80018a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a8:	200007b0 	.word	0x200007b0
  ldr r2, =_sidata
 80018ac:	0800fb3c 	.word	0x0800fb3c
  ldr r2, =_sbss
 80018b0:	200007b0 	.word	0x200007b0
  ldr r4, =_ebss
 80018b4:	20001fd4 	.word	0x20001fd4

080018b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b8:	e7fe      	b.n	80018b8 <ADC_IRQHandler>
	...

080018bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <HAL_Init+0x40>)
 80018c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <HAL_Init+0x40>)
 80018d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	; (80018fc <HAL_Init+0x40>)
 80018de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 f94f 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f000 f808 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f0:	f7ff fdb4 	bl	800145c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x54>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_InitTick+0x58>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f967 	bl	8001bf2 <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00e      	b.n	800194c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d80a      	bhi.n	800194a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f000 f92f 	bl	8001b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_InitTick+0x5c>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000000 	.word	0x20000000
 8001958:	20000008 	.word	0x20000008
 800195c:	20000004 	.word	0x20000004

08001960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x20>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x24>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_IncTick+0x24>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000008 	.word	0x20000008
 8001984:	200008a0 	.word	0x200008a0

08001988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return uwTick;
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <HAL_GetTick+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	200008a0 	.word	0x200008a0

080019a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a8:	f7ff ffee 	bl	8001988 <HAL_GetTick>
 80019ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b8:	d005      	beq.n	80019c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_Delay+0x44>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	461a      	mov	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4413      	add	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019c6:	bf00      	nop
 80019c8:	f7ff ffde 	bl	8001988 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d8f7      	bhi.n	80019c8 <HAL_Delay+0x28>
  {
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000008 	.word	0x20000008

080019e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	60d3      	str	r3, [r2, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <__NVIC_GetPriorityGrouping+0x18>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 0307 	and.w	r3, r3, #7
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	db0b      	blt.n	8001a76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <__NVIC_EnableIRQ+0x38>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e100 	.word	0xe000e100

08001a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db0a      	blt.n	8001ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <__NVIC_SetPriority+0x4c>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab0:	e00a      	b.n	8001ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <__NVIC_SetPriority+0x50>)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	761a      	strb	r2, [r3, #24]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f1c3 0307 	rsb	r3, r3, #7
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf28      	it	cs
 8001afa:	2304      	movcs	r3, #4
 8001afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3304      	adds	r3, #4
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d902      	bls.n	8001b0c <NVIC_EncodePriority+0x30>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3b03      	subs	r3, #3
 8001b0a:	e000      	b.n	8001b0e <NVIC_EncodePriority+0x32>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43d9      	mvns	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	4313      	orrs	r3, r2
         );
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b54:	d301      	bcc.n	8001b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00f      	b.n	8001b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <SysTick_Config+0x40>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b62:	210f      	movs	r1, #15
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f7ff ff8e 	bl	8001a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <SysTick_Config+0x40>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SysTick_Config+0x40>)
 8001b74:	2207      	movs	r2, #7
 8001b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	e000e010 	.word	0xe000e010

08001b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff29 	bl	80019e8 <__NVIC_SetPriorityGrouping>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb0:	f7ff ff3e 	bl	8001a30 <__NVIC_GetPriorityGrouping>
 8001bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f7ff ff8e 	bl	8001adc <NVIC_EncodePriority>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff5d 	bl	8001a88 <__NVIC_SetPriority>
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff31 	bl	8001a4c <__NVIC_EnableIRQ>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffa2 	bl	8001b44 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	e159      	b.n	8001edc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	f040 8148 	bne.w	8001ed6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d005      	beq.n	8001c5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d130      	bne.n	8001cc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	091b      	lsrs	r3, r3, #4
 8001caa:	f003 0201 	and.w	r2, r3, #1
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d017      	beq.n	8001cfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d123      	bne.n	8001d50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	08da      	lsrs	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3208      	adds	r2, #8
 8001d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	08da      	lsrs	r2, r3, #3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	3208      	adds	r2, #8
 8001d4a:	69b9      	ldr	r1, [r7, #24]
 8001d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4013      	ands	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0203 	and.w	r2, r3, #3
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 80a2 	beq.w	8001ed6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b57      	ldr	r3, [pc, #348]	; (8001ef4 <HAL_GPIO_Init+0x2e8>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a56      	ldr	r2, [pc, #344]	; (8001ef4 <HAL_GPIO_Init+0x2e8>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b54      	ldr	r3, [pc, #336]	; (8001ef4 <HAL_GPIO_Init+0x2e8>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dae:	4a52      	ldr	r2, [pc, #328]	; (8001ef8 <HAL_GPIO_Init+0x2ec>)
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	089b      	lsrs	r3, r3, #2
 8001db4:	3302      	adds	r3, #2
 8001db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	220f      	movs	r2, #15
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a49      	ldr	r2, [pc, #292]	; (8001efc <HAL_GPIO_Init+0x2f0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d019      	beq.n	8001e0e <HAL_GPIO_Init+0x202>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a48      	ldr	r2, [pc, #288]	; (8001f00 <HAL_GPIO_Init+0x2f4>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d013      	beq.n	8001e0a <HAL_GPIO_Init+0x1fe>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a47      	ldr	r2, [pc, #284]	; (8001f04 <HAL_GPIO_Init+0x2f8>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00d      	beq.n	8001e06 <HAL_GPIO_Init+0x1fa>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a46      	ldr	r2, [pc, #280]	; (8001f08 <HAL_GPIO_Init+0x2fc>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d007      	beq.n	8001e02 <HAL_GPIO_Init+0x1f6>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a45      	ldr	r2, [pc, #276]	; (8001f0c <HAL_GPIO_Init+0x300>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d101      	bne.n	8001dfe <HAL_GPIO_Init+0x1f2>
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	e008      	b.n	8001e10 <HAL_GPIO_Init+0x204>
 8001dfe:	2307      	movs	r3, #7
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x204>
 8001e02:	2303      	movs	r3, #3
 8001e04:	e004      	b.n	8001e10 <HAL_GPIO_Init+0x204>
 8001e06:	2302      	movs	r3, #2
 8001e08:	e002      	b.n	8001e10 <HAL_GPIO_Init+0x204>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <HAL_GPIO_Init+0x204>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	f002 0203 	and.w	r2, r2, #3
 8001e16:	0092      	lsls	r2, r2, #2
 8001e18:	4093      	lsls	r3, r2
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e20:	4935      	ldr	r1, [pc, #212]	; (8001ef8 <HAL_GPIO_Init+0x2ec>)
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	3302      	adds	r3, #2
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2e:	4b38      	ldr	r3, [pc, #224]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e52:	4a2f      	ldr	r2, [pc, #188]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e58:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e7c:	4a24      	ldr	r2, [pc, #144]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e82:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea6:	4a1a      	ldr	r2, [pc, #104]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eac:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed0:	4a0f      	ldr	r2, [pc, #60]	; (8001f10 <HAL_GPIO_Init+0x304>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	f67f aea2 	bls.w	8001c28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	bf00      	nop
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	40013800 	.word	0x40013800
 8001efc:	40020000 	.word	0x40020000
 8001f00:	40020400 	.word	0x40020400
 8001f04:	40020800 	.word	0x40020800
 8001f08:	40020c00 	.word	0x40020c00
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40013c00 	.word	0x40013c00

08001f14 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e101      	b.n	800212a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d106      	bne.n	8001f46 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f005 ff25 	bl	8007d90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2203      	movs	r2, #3
 8001f4a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f54:	d102      	bne.n	8001f5c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 fb06 	bl	8004572 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7c1a      	ldrb	r2, [r3, #16]
 8001f6e:	f88d 2000 	strb.w	r2, [sp]
 8001f72:	3304      	adds	r3, #4
 8001f74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f76:	f002 f9e5 	bl	8004344 <USB_CoreInit>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2202      	movs	r2, #2
 8001f84:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0ce      	b.n	800212a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 fafe 	bl	8004594 <USB_SetCurrentMode>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e0bf      	b.n	800212a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	73fb      	strb	r3, [r7, #15]
 8001fae:	e04a      	b.n	8002046 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3315      	adds	r3, #21
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	3314      	adds	r3, #20
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	7bfb      	ldrb	r3, [r7, #15]
 8001fdc:	b298      	uxth	r0, r3
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	440b      	add	r3, r1
 8001fea:	332e      	adds	r3, #46	; 0x2e
 8001fec:	4602      	mov	r2, r0
 8001fee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ff0:	7bfa      	ldrb	r2, [r7, #15]
 8001ff2:	6879      	ldr	r1, [r7, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	3318      	adds	r3, #24
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002004:	7bfa      	ldrb	r2, [r7, #15]
 8002006:	6879      	ldr	r1, [r7, #4]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	440b      	add	r3, r1
 8002012:	331c      	adds	r3, #28
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4413      	add	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	440b      	add	r3, r1
 8002026:	3320      	adds	r3, #32
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	3324      	adds	r3, #36	; 0x24
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	3301      	adds	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	791b      	ldrb	r3, [r3, #4]
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	429a      	cmp	r2, r3
 800204e:	d3af      	bcc.n	8001fb0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002050:	2300      	movs	r3, #0
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	e044      	b.n	80020e0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002094:	2200      	movs	r2, #0
 8002096:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020ae:	7bfa      	ldrb	r2, [r7, #15]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	4413      	add	r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4413      	add	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	3301      	adds	r3, #1
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	791b      	ldrb	r3, [r3, #4]
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d3b5      	bcc.n	8002056 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	7c1a      	ldrb	r2, [r3, #16]
 80020f2:	f88d 2000 	strb.w	r2, [sp]
 80020f6:	3304      	adds	r3, #4
 80020f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020fa:	f002 fa97 	bl	800462c <USB_DevInit>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d005      	beq.n	8002110 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2202      	movs	r2, #2
 8002108:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e00c      	b.n	800212a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f003 fadb 	bl	80056de <USB_DevDisconnect>

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_PCD_Start+0x1c>
 800214a:	2302      	movs	r3, #2
 800214c:	e022      	b.n	8002194 <HAL_PCD_Start+0x62>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002166:	2b01      	cmp	r3, #1
 8002168:	d105      	bne.n	8002176 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800216e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f002 f9e8 	bl	8004550 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f003 fa89 	bl	800569c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b08d      	sub	sp, #52	; 0x34
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 fb47 	bl	8005846 <USB_GetMode>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 848c 	bne.w	8002ad8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f003 faab 	bl	8005720 <USB_ReadInterrupts>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	f000 8482 	beq.w	8002ad6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 fa98 	bl	8005720 <USB_ReadInterrupts>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d107      	bne.n	800220a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	695a      	ldr	r2, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f002 0202 	and.w	r2, r2, #2
 8002208:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f003 fa86 	bl	8005720 <USB_ReadInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b10      	cmp	r3, #16
 800221c:	d161      	bne.n	80022e2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699a      	ldr	r2, [r3, #24]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0210 	bic.w	r2, r2, #16
 800222c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	f003 020f 	and.w	r2, r3, #15
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	3304      	adds	r3, #4
 800224c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	0c5b      	lsrs	r3, r3, #17
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	2b02      	cmp	r3, #2
 8002258:	d124      	bne.n	80022a4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002260:	4013      	ands	r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d035      	beq.n	80022d2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002274:	b29b      	uxth	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	6a38      	ldr	r0, [r7, #32]
 800227a:	f003 f8bd 	bl	80053f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800228a:	441a      	add	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800229c:	441a      	add	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	615a      	str	r2, [r3, #20]
 80022a2:	e016      	b.n	80022d2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	0c5b      	lsrs	r3, r3, #17
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	2b06      	cmp	r3, #6
 80022ae:	d110      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80022b6:	2208      	movs	r2, #8
 80022b8:	4619      	mov	r1, r3
 80022ba:	6a38      	ldr	r0, [r7, #32]
 80022bc:	f003 f89c 	bl	80053f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	695a      	ldr	r2, [r3, #20]
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	091b      	lsrs	r3, r3, #4
 80022c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022cc:	441a      	add	r2, r3
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699a      	ldr	r2, [r3, #24]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0210 	orr.w	r2, r2, #16
 80022e0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f003 fa1a 	bl	8005720 <USB_ReadInterrupts>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80022f6:	f040 80a7 	bne.w	8002448 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f003 fa1f 	bl	8005746 <USB_ReadDevAllOutEpInterrupt>
 8002308:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800230a:	e099      	b.n	8002440 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 808e 	beq.w	8002434 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	4611      	mov	r1, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f003 fa43 	bl	80057ae <USB_ReadDevOutEPInterrupt>
 8002328:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00c      	beq.n	800234e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	015a      	lsls	r2, r3, #5
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	4413      	add	r3, r2
 800233c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002340:	461a      	mov	r2, r3
 8002342:	2301      	movs	r3, #1
 8002344:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fea1 	bl	8003090 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00c      	beq.n	8002372 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	4413      	add	r3, r2
 8002360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002364:	461a      	mov	r2, r3
 8002366:	2308      	movs	r3, #8
 8002368:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800236a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 ff77 	bl	8003260 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d008      	beq.n	800238e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	015a      	lsls	r2, r3, #5
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	4413      	add	r3, r2
 8002384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002388:	461a      	mov	r2, r3
 800238a:	2310      	movs	r3, #16
 800238c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d030      	beq.n	80023fa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a0:	2b80      	cmp	r3, #128	; 0x80
 80023a2:	d109      	bne.n	80023b8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	3304      	adds	r3, #4
 80023cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	78db      	ldrb	r3, [r3, #3]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d108      	bne.n	80023e8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2200      	movs	r2, #0
 80023da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	4619      	mov	r1, r3
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f005 fdd0 	bl	8007f88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f4:	461a      	mov	r2, r3
 80023f6:	2302      	movs	r3, #2
 80023f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002406:	015a      	lsls	r2, r3, #5
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	4413      	add	r3, r2
 800240c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002410:	461a      	mov	r2, r3
 8002412:	2320      	movs	r3, #32
 8002414:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d009      	beq.n	8002434 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242c:	461a      	mov	r2, r3
 800242e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002432:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002436:	3301      	adds	r3, #1
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243c:	085b      	lsrs	r3, r3, #1
 800243e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	2b00      	cmp	r3, #0
 8002444:	f47f af62 	bne.w	800230c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4618      	mov	r0, r3
 800244e:	f003 f967 	bl	8005720 <USB_ReadInterrupts>
 8002452:	4603      	mov	r3, r0
 8002454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002458:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800245c:	f040 80db 	bne.w	8002616 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f003 f988 	bl	800577a <USB_ReadDevAllInEpInterrupt>
 800246a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002470:	e0cd      	b.n	800260e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80c2 	beq.w	8002602 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f003 f9ae 	bl	80057ea <USB_ReadDevInEPInterrupt>
 800248e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d057      	beq.n	800254a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	2201      	movs	r2, #1
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69f9      	ldr	r1, [r7, #28]
 80024b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80024ba:	4013      	ands	r3, r2
 80024bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ca:	461a      	mov	r2, r3
 80024cc:	2301      	movs	r3, #1
 80024ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	799b      	ldrb	r3, [r3, #6]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d132      	bne.n	800253e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024dc:	4613      	mov	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	3320      	adds	r3, #32
 80024e8:	6819      	ldr	r1, [r3, #0]
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4403      	add	r3, r0
 80024f8:	331c      	adds	r3, #28
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4419      	add	r1, r3
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002502:	4613      	mov	r3, r2
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4403      	add	r3, r0
 800250c:	3320      	adds	r3, #32
 800250e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	d113      	bne.n	800253e <HAL_PCD_IRQHandler+0x3a2>
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251a:	4613      	mov	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	3324      	adds	r3, #36	; 0x24
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d108      	bne.n	800253e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002536:	461a      	mov	r2, r3
 8002538:	2101      	movs	r1, #1
 800253a:	f003 f9b5 	bl	80058a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	b2db      	uxtb	r3, r3
 8002542:	4619      	mov	r1, r3
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f005 fca4 	bl	8007e92 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	4413      	add	r3, r2
 800255c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002560:	461a      	mov	r2, r3
 8002562:	2308      	movs	r3, #8
 8002564:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	4413      	add	r3, r2
 8002578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800257c:	461a      	mov	r2, r3
 800257e:	2310      	movs	r3, #16
 8002580:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002588:	2b00      	cmp	r3, #0
 800258a:	d008      	beq.n	800259e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	015a      	lsls	r2, r3, #5
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	4413      	add	r3, r2
 8002594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002598:	461a      	mov	r2, r3
 800259a:	2340      	movs	r3, #64	; 0x40
 800259c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d023      	beq.n	80025f0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025aa:	6a38      	ldr	r0, [r7, #32]
 80025ac:	f002 f9a2 	bl	80048f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b2:	4613      	mov	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	4413      	add	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	3310      	adds	r3, #16
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	4413      	add	r3, r2
 80025c0:	3304      	adds	r3, #4
 80025c2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	78db      	ldrb	r3, [r3, #3]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d108      	bne.n	80025de <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	2200      	movs	r2, #0
 80025d0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80025d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	4619      	mov	r1, r3
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f005 fce7 	bl	8007fac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ea:	461a      	mov	r2, r3
 80025ec:	2302      	movs	r3, #2
 80025ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80025fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 fcbb 	bl	8002f78 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	3301      	adds	r3, #1
 8002606:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	085b      	lsrs	r3, r3, #1
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800260e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002610:	2b00      	cmp	r3, #0
 8002612:	f47f af2e 	bne.w	8002472 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 f880 	bl	8005720 <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800262a:	d122      	bne.n	8002672 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	69fa      	ldr	r2, [r7, #28]
 8002636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800263a:	f023 0301 	bic.w	r3, r3, #1
 800263e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8002646:	2b01      	cmp	r3, #1
 8002648:	d108      	bne.n	800265c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002652:	2100      	movs	r1, #0
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 fea1 	bl	800339c <HAL_PCDEx_LPM_Callback>
 800265a:	e002      	b.n	8002662 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f005 fc85 	bl	8007f6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002670:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f003 f852 	bl	8005720 <USB_ReadInterrupts>
 800267c:	4603      	mov	r3, r0
 800267e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002686:	d112      	bne.n	80026ae <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d102      	bne.n	800269e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f005 fc41 	bl	8007f20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80026ac:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 f834 	bl	8005720 <USB_ReadInterrupts>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c2:	f040 80b7 	bne.w	8002834 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2110      	movs	r1, #16
 80026e0:	4618      	mov	r0, r3
 80026e2:	f002 f907 	bl	80048f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e6:	2300      	movs	r3, #0
 80026e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ea:	e046      	b.n	800277a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80026ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f8:	461a      	mov	r2, r3
 80026fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80026fe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	4413      	add	r3, r2
 8002708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002710:	0151      	lsls	r1, r2, #5
 8002712:	69fa      	ldr	r2, [r7, #28]
 8002714:	440a      	add	r2, r1
 8002716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800271a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800271e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	4413      	add	r3, r2
 8002728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800272c:	461a      	mov	r2, r3
 800272e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002732:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002736:	015a      	lsls	r2, r3, #5
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	4413      	add	r3, r2
 800273c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002744:	0151      	lsls	r1, r2, #5
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	440a      	add	r2, r1
 800274a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800274e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002752:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002756:	015a      	lsls	r2, r3, #5
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	4413      	add	r3, r2
 800275c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002764:	0151      	lsls	r1, r2, #5
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	440a      	add	r2, r1
 800276a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800276e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002772:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002776:	3301      	adds	r3, #1
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	791b      	ldrb	r3, [r3, #4]
 800277e:	461a      	mov	r2, r3
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	4293      	cmp	r3, r2
 8002784:	d3b2      	bcc.n	80026ec <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002794:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002798:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	7bdb      	ldrb	r3, [r3, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027b2:	f043 030b 	orr.w	r3, r3, #11
 80027b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c8:	f043 030b 	orr.w	r3, r3, #11
 80027cc:	6453      	str	r3, [r2, #68]	; 0x44
 80027ce:	e015      	b.n	80027fc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	69fa      	ldr	r2, [r7, #28]
 80027da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027de:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027e2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80027e6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f6:	f043 030b 	orr.w	r3, r3, #11
 80027fa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800280a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800280e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800281e:	461a      	mov	r2, r3
 8002820:	f003 f842 	bl	80058a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002832:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f002 ff71 	bl	8005720 <USB_ReadInterrupts>
 800283e:	4603      	mov	r3, r0
 8002840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002848:	d123      	bne.n	8002892 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f003 f807 	bl	8005862 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f002 f8c4 	bl	80049e6 <USB_GetDevSpeed>
 800285e:	4603      	mov	r3, r0
 8002860:	461a      	mov	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681c      	ldr	r4, [r3, #0]
 800286a:	f001 f9c7 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 800286e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002874:	461a      	mov	r2, r3
 8002876:	4620      	mov	r0, r4
 8002878:	f001 fdc8 	bl	800440c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f005 fb30 	bl	8007ee2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	695a      	ldr	r2, [r3, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002890:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f002 ff42 	bl	8005720 <USB_ReadInterrupts>
 800289c:	4603      	mov	r3, r0
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d10a      	bne.n	80028bc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f005 fb0d 	bl	8007ec6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695a      	ldr	r2, [r3, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f002 0208 	and.w	r2, r2, #8
 80028ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f002 ff2d 	bl	8005720 <USB_ReadInterrupts>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028cc:	2b80      	cmp	r3, #128	; 0x80
 80028ce:	d123      	bne.n	8002918 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028dc:	2301      	movs	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
 80028e0:	e014      	b.n	800290c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	440b      	add	r3, r1
 80028f0:	f203 2357 	addw	r3, r3, #599	; 0x257
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d105      	bne.n	8002906 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fb08 	bl	8002f16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	3301      	adds	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	791b      	ldrb	r3, [r3, #4]
 8002910:	461a      	mov	r2, r3
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	4293      	cmp	r3, r2
 8002916:	d3e4      	bcc.n	80028e2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f002 feff 	bl	8005720 <USB_ReadInterrupts>
 8002922:	4603      	mov	r3, r0
 8002924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800292c:	d13c      	bne.n	80029a8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800292e:	2301      	movs	r3, #1
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
 8002932:	e02b      	b.n	800298c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	4413      	add	r3, r2
 800293c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002948:	4613      	mov	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3318      	adds	r3, #24
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d115      	bne.n	8002986 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800295a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800295c:	2b00      	cmp	r3, #0
 800295e:	da12      	bge.n	8002986 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002964:	4613      	mov	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	3317      	adds	r3, #23
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800297c:	b2db      	uxtb	r3, r3
 800297e:	4619      	mov	r1, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fac8 	bl	8002f16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	3301      	adds	r3, #1
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	791b      	ldrb	r3, [r3, #4]
 8002990:	461a      	mov	r2, r3
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	4293      	cmp	r3, r2
 8002996:	d3cd      	bcc.n	8002934 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80029a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f002 feb7 	bl	8005720 <USB_ReadInterrupts>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029bc:	d156      	bne.n	8002a6c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029be:	2301      	movs	r3, #1
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
 80029c2:	e045      	b.n	8002a50 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d12e      	bne.n	8002a4a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029ec:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	da2b      	bge.n	8002a4a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 80029fe:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d121      	bne.n	8002a4a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002a18:	2201      	movs	r2, #1
 8002a1a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a24:	6a3b      	ldr	r3, [r7, #32]
 8002a26:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a46:	6053      	str	r3, [r2, #4]
            break;
 8002a48:	e008      	b.n	8002a5c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	791b      	ldrb	r3, [r3, #4]
 8002a54:	461a      	mov	r2, r3
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d3b3      	bcc.n	80029c4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695a      	ldr	r2, [r3, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 fe55 	bl	8005720 <USB_ReadInterrupts>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a80:	d10a      	bne.n	8002a98 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f005 faa4 	bl	8007fd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002a96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f002 fe3f 	bl	8005720 <USB_ReadInterrupts>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d115      	bne.n	8002ad8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f005 fa94 	bl	8007fec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6859      	ldr	r1, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	e000      	b.n	8002ad8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002ad6:	bf00      	nop
    }
  }
}
 8002ad8:	3734      	adds	r7, #52	; 0x34
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd90      	pop	{r4, r7, pc}

08002ade <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_PCD_SetAddress+0x1a>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e012      	b.n	8002b1e <HAL_PCD_SetAddress+0x40>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f002 fd9e 	bl	8005650 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b084      	sub	sp, #16
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	4608      	mov	r0, r1
 8002b30:	4611      	mov	r1, r2
 8002b32:	461a      	mov	r2, r3
 8002b34:	4603      	mov	r3, r0
 8002b36:	70fb      	strb	r3, [r7, #3]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	803b      	strh	r3, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	da0f      	bge.n	8002b6c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	f003 020f 	and.w	r2, r3, #15
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	3310      	adds	r3, #16
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	4413      	add	r3, r2
 8002b60:	3304      	adds	r3, #4
 8002b62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2201      	movs	r2, #1
 8002b68:	705a      	strb	r2, [r3, #1]
 8002b6a:	e00f      	b.n	8002b8c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	f003 020f 	and.w	r2, r3, #15
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	3304      	adds	r3, #4
 8002b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002b98:	883a      	ldrh	r2, [r7, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	78ba      	ldrb	r2, [r7, #2]
 8002ba2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	785b      	ldrb	r3, [r3, #1]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d004      	beq.n	8002bb6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bb6:	78bb      	ldrb	r3, [r7, #2]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d102      	bne.n	8002bc2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d101      	bne.n	8002bd0 <HAL_PCD_EP_Open+0xaa>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e00e      	b.n	8002bee <HAL_PCD_EP_Open+0xc8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68f9      	ldr	r1, [r7, #12]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 ff26 	bl	8004a30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002bec:	7afb      	ldrb	r3, [r7, #11]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	da0f      	bge.n	8002c2a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	f003 020f 	and.w	r2, r3, #15
 8002c10:	4613      	mov	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	3310      	adds	r3, #16
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3304      	adds	r3, #4
 8002c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	705a      	strb	r2, [r3, #1]
 8002c28:	e00f      	b.n	8002c4a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	f003 020f 	and.w	r2, r3, #15
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	3304      	adds	r3, #4
 8002c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_PCD_EP_Close+0x6e>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e00e      	b.n	8002c82 <HAL_PCD_EP_Close+0x8c>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68f9      	ldr	r1, [r7, #12]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f001 ff64 	bl	8004b40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b086      	sub	sp, #24
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	60f8      	str	r0, [r7, #12]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	460b      	mov	r3, r1
 8002c98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c9a:	7afb      	ldrb	r3, [r7, #11]
 8002c9c:	f003 020f 	and.w	r2, r3, #15
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ccc:	7afb      	ldrb	r3, [r7, #11]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	799b      	ldrb	r3, [r3, #6]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d102      	bne.n	8002ce6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	799b      	ldrb	r3, [r3, #6]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	6979      	ldr	r1, [r7, #20]
 8002cf2:	f002 f801 	bl	8004cf8 <USB_EPStartXfer>

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	f003 020f 	and.w	r2, r3, #15
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002d22:	681b      	ldr	r3, [r3, #0]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	603b      	str	r3, [r7, #0]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d40:	7afb      	ldrb	r3, [r7, #11]
 8002d42:	f003 020f 	and.w	r2, r3, #15
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	3310      	adds	r3, #16
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	4413      	add	r3, r2
 8002d54:	3304      	adds	r3, #4
 8002d56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2200      	movs	r2, #0
 8002d68:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d70:	7afb      	ldrb	r3, [r7, #11]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	799b      	ldrb	r3, [r3, #6]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d102      	bne.n	8002d8a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6818      	ldr	r0, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	799b      	ldrb	r3, [r3, #6]
 8002d92:	461a      	mov	r2, r3
 8002d94:	6979      	ldr	r1, [r7, #20]
 8002d96:	f001 ffaf 	bl	8004cf8 <USB_EPStartXfer>

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	7912      	ldrb	r2, [r2, #4]
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e04f      	b.n	8002e62 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	da0f      	bge.n	8002dea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	f003 020f 	and.w	r2, r3, #15
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	3310      	adds	r3, #16
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	3304      	adds	r3, #4
 8002de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	705a      	strb	r2, [r3, #1]
 8002de8:	e00d      	b.n	8002e06 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_PCD_EP_SetStall+0x82>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e01d      	b.n	8002e62 <HAL_PCD_EP_SetStall+0xbe>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68f9      	ldr	r1, [r7, #12]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f002 fb37 	bl	80054a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e3a:	78fb      	ldrb	r3, [r7, #3]
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	7999      	ldrb	r1, [r3, #6]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002e52:	461a      	mov	r2, r3
 8002e54:	f002 fd28 	bl	80058a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	f003 030f 	and.w	r3, r3, #15
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	7912      	ldrb	r2, [r2, #4]
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d901      	bls.n	8002e88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e042      	b.n	8002f0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	da0f      	bge.n	8002eb0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	f003 020f 	and.w	r2, r3, #15
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	3310      	adds	r3, #16
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	705a      	strb	r2, [r3, #1]
 8002eae:	e00f      	b.n	8002ed0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	f003 020f 	and.w	r2, r3, #15
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_PCD_EP_ClrStall+0x86>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e00e      	b.n	8002f0e <HAL_PCD_EP_ClrStall+0xa4>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68f9      	ldr	r1, [r7, #12]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f002 fb40 	bl	8005584 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002f22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	da0c      	bge.n	8002f44 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 020f 	and.w	r2, r3, #15
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	3310      	adds	r3, #16
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3304      	adds	r3, #4
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	e00c      	b.n	8002f5e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	f003 020f 	and.w	r2, r3, #15
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68f9      	ldr	r1, [r7, #12]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f002 f95f 	bl	8005228 <USB_EPStopXfer>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f6e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b08a      	sub	sp, #40	; 0x28
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	3310      	adds	r3, #16
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d901      	bls.n	8002fb0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e06b      	b.n	8003088 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	69fa      	ldr	r2, [r7, #28]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d902      	bls.n	8002fcc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	3303      	adds	r3, #3
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fd4:	e02a      	b.n	800302c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d902      	bls.n	8002ff2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3303      	adds	r3, #3
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	68d9      	ldr	r1, [r3, #12]
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	4603      	mov	r3, r0
 800300e:	6978      	ldr	r0, [r7, #20]
 8003010:	f002 f9b4 	bl	800537c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	441a      	add	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	695a      	ldr	r2, [r3, #20]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	441a      	add	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	429a      	cmp	r2, r3
 8003040:	d809      	bhi.n	8003056 <PCD_WriteEmptyTxFifo+0xde>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800304a:	429a      	cmp	r2, r3
 800304c:	d203      	bcs.n	8003056 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1bf      	bne.n	8002fd6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	691a      	ldr	r2, [r3, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	429a      	cmp	r2, r3
 8003060:	d811      	bhi.n	8003086 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	2201      	movs	r2, #1
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	43db      	mvns	r3, r3
 800307c:	6939      	ldr	r1, [r7, #16]
 800307e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003082:	4013      	ands	r3, r2
 8003084:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	333c      	adds	r3, #60	; 0x3c
 80030a8:	3304      	adds	r3, #4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	799b      	ldrb	r3, [r3, #6]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d17b      	bne.n	80031be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d015      	beq.n	80030fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	4a61      	ldr	r2, [pc, #388]	; (8003258 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	f240 80b9 	bls.w	800324c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80b3 	beq.w	800324c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f2:	461a      	mov	r2, r3
 80030f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030f8:	6093      	str	r3, [r2, #8]
 80030fa:	e0a7      	b.n	800324c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f003 0320 	and.w	r3, r3, #32
 8003102:	2b00      	cmp	r3, #0
 8003104:	d009      	beq.n	800311a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	4413      	add	r3, r2
 800310e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003112:	461a      	mov	r2, r3
 8003114:	2320      	movs	r3, #32
 8003116:	6093      	str	r3, [r2, #8]
 8003118:	e098      	b.n	800324c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003120:	2b00      	cmp	r3, #0
 8003122:	f040 8093 	bne.w	800324c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	4a4b      	ldr	r2, [pc, #300]	; (8003258 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d90f      	bls.n	800314e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00a      	beq.n	800314e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	4413      	add	r3, r2
 8003140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003144:	461a      	mov	r2, r3
 8003146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800314a:	6093      	str	r3, [r2, #8]
 800314c:	e07e      	b.n	800324c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	4413      	add	r3, r2
 8003160:	3304      	adds	r3, #4
 8003162:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	0159      	lsls	r1, r3, #5
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	440b      	add	r3, r1
 8003170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800317a:	1ad2      	subs	r2, r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d114      	bne.n	80031b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003198:	461a      	mov	r2, r3
 800319a:	2101      	movs	r1, #1
 800319c:	f002 fb84 	bl	80058a8 <USB_EP0_OutStart>
 80031a0:	e006      	b.n	80031b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	441a      	add	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f004 fe50 	bl	8007e5c <HAL_PCD_DataOutStageCallback>
 80031bc:	e046      	b.n	800324c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	4a26      	ldr	r2, [pc, #152]	; (800325c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d124      	bne.n	8003210 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031dc:	461a      	mov	r2, r3
 80031de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e2:	6093      	str	r3, [r2, #8]
 80031e4:	e032      	b.n	800324c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fc:	461a      	mov	r2, r3
 80031fe:	2320      	movs	r3, #32
 8003200:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	4619      	mov	r1, r3
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f004 fe27 	bl	8007e5c <HAL_PCD_DataOutStageCallback>
 800320e:	e01d      	b.n	800324c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d114      	bne.n	8003240 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d108      	bne.n	8003240 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003238:	461a      	mov	r2, r3
 800323a:	2100      	movs	r1, #0
 800323c:	f002 fb34 	bl	80058a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f004 fe08 	bl	8007e5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	4f54300a 	.word	0x4f54300a
 800325c:	4f54310a 	.word	0x4f54310a

08003260 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	333c      	adds	r3, #60	; 0x3c
 8003278:	3304      	adds	r3, #4
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	015a      	lsls	r2, r3, #5
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4413      	add	r3, r2
 8003286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d90e      	bls.n	80032b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800329c:	2b00      	cmp	r3, #0
 800329e:	d009      	beq.n	80032b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ac:	461a      	mov	r2, r3
 80032ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f004 fdbf 	bl	8007e38 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d90c      	bls.n	80032dc <PCD_EP_OutSetupPacket_int+0x7c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	799b      	ldrb	r3, [r3, #6]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d108      	bne.n	80032dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80032d4:	461a      	mov	r2, r3
 80032d6:	2101      	movs	r1, #1
 80032d8:	f002 fae6 	bl	80058a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	4f54300a 	.word	0x4f54300a

080032ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	70fb      	strb	r3, [r7, #3]
 80032f8:	4613      	mov	r3, r2
 80032fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d107      	bne.n	800331a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800330a:	883b      	ldrh	r3, [r7, #0]
 800330c:	0419      	lsls	r1, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	430a      	orrs	r2, r1
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
 8003318:	e028      	b.n	800336c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	4413      	add	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003328:	2300      	movs	r3, #0
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	e00d      	b.n	800334a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	3340      	adds	r3, #64	; 0x40
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	4413      	add	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003344:	7bfb      	ldrb	r3, [r7, #15]
 8003346:	3301      	adds	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
 800334a:	7bfa      	ldrb	r2, [r7, #15]
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	3b01      	subs	r3, #1
 8003350:	429a      	cmp	r2, r3
 8003352:	d3ec      	bcc.n	800332e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003354:	883b      	ldrh	r3, [r7, #0]
 8003356:	0418      	lsls	r0, r3, #16
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6819      	ldr	r1, [r3, #0]
 800335c:	78fb      	ldrb	r3, [r7, #3]
 800335e:	3b01      	subs	r3, #1
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	4302      	orrs	r2, r0
 8003364:	3340      	adds	r3, #64	; 0x40
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	460b      	mov	r3, r1
 8003384:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	887a      	ldrh	r2, [r7, #2]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b086      	sub	sp, #24
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e267      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d075      	beq.n	80034be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033d2:	4b88      	ldr	r3, [pc, #544]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d00c      	beq.n	80033f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b85      	ldr	r3, [pc, #532]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d112      	bne.n	8003410 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ea:	4b82      	ldr	r3, [pc, #520]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033f6:	d10b      	bne.n	8003410 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f8:	4b7e      	ldr	r3, [pc, #504]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d05b      	beq.n	80034bc <HAL_RCC_OscConfig+0x108>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d157      	bne.n	80034bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e242      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003418:	d106      	bne.n	8003428 <HAL_RCC_OscConfig+0x74>
 800341a:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a75      	ldr	r2, [pc, #468]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e01d      	b.n	8003464 <HAL_RCC_OscConfig+0xb0>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x98>
 8003432:	4b70      	ldr	r3, [pc, #448]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a6f      	ldr	r2, [pc, #444]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b6d      	ldr	r3, [pc, #436]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a6c      	ldr	r2, [pc, #432]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0xb0>
 800344c:	4b69      	ldr	r3, [pc, #420]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a68      	ldr	r2, [pc, #416]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b66      	ldr	r3, [pc, #408]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a65      	ldr	r2, [pc, #404]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 800345e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d013      	beq.n	8003494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe fa8c 	bl	8001988 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003474:	f7fe fa88 	bl	8001988 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	; 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e207      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	4b5b      	ldr	r3, [pc, #364]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0xc0>
 8003492:	e014      	b.n	80034be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe fa78 	bl	8001988 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800349c:	f7fe fa74 	bl	8001988 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e1f3      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ae:	4b51      	ldr	r3, [pc, #324]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0xe8>
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d063      	beq.n	8003592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034ca:	4b4a      	ldr	r3, [pc, #296]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d11c      	bne.n	800351c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034e2:	4b44      	ldr	r3, [pc, #272]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d116      	bne.n	800351c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	4b41      	ldr	r3, [pc, #260]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_RCC_OscConfig+0x152>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d001      	beq.n	8003506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e1c7      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003506:	4b3b      	ldr	r3, [pc, #236]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	4937      	ldr	r1, [pc, #220]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	e03a      	b.n	8003592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d020      	beq.n	8003566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003524:	4b34      	ldr	r3, [pc, #208]	; (80035f8 <HAL_RCC_OscConfig+0x244>)
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352a:	f7fe fa2d 	bl	8001988 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003530:	e008      	b.n	8003544 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003532:	f7fe fa29 	bl	8001988 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e1a8      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003544:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d0f0      	beq.n	8003532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003550:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4925      	ldr	r1, [pc, #148]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003560:	4313      	orrs	r3, r2
 8003562:	600b      	str	r3, [r1, #0]
 8003564:	e015      	b.n	8003592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <HAL_RCC_OscConfig+0x244>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe fa0c 	bl	8001988 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003574:	f7fe fa08 	bl	8001988 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e187      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003586:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d036      	beq.n	800360c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <HAL_RCC_OscConfig+0x248>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ac:	f7fe f9ec 	bl	8001988 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b4:	f7fe f9e8 	bl	8001988 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e167      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <HAL_RCC_OscConfig+0x240>)
 80035c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x200>
 80035d2:	e01b      	b.n	800360c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <HAL_RCC_OscConfig+0x248>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035da:	f7fe f9d5 	bl	8001988 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e0:	e00e      	b.n	8003600 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035e2:	f7fe f9d1 	bl	8001988 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d907      	bls.n	8003600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e150      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
 80035f4:	40023800 	.word	0x40023800
 80035f8:	42470000 	.word	0x42470000
 80035fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003600:	4b88      	ldr	r3, [pc, #544]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1ea      	bne.n	80035e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8097 	beq.w	8003748 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361e:	4b81      	ldr	r3, [pc, #516]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10f      	bne.n	800364a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	4b7d      	ldr	r3, [pc, #500]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	4a7c      	ldr	r2, [pc, #496]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003638:	6413      	str	r3, [r2, #64]	; 0x40
 800363a:	4b7a      	ldr	r3, [pc, #488]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364a:	4b77      	ldr	r3, [pc, #476]	; (8003828 <HAL_RCC_OscConfig+0x474>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d118      	bne.n	8003688 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003656:	4b74      	ldr	r3, [pc, #464]	; (8003828 <HAL_RCC_OscConfig+0x474>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a73      	ldr	r2, [pc, #460]	; (8003828 <HAL_RCC_OscConfig+0x474>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003662:	f7fe f991 	bl	8001988 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366a:	f7fe f98d 	bl	8001988 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e10c      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	4b6a      	ldr	r3, [pc, #424]	; (8003828 <HAL_RCC_OscConfig+0x474>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x2ea>
 8003690:	4b64      	ldr	r3, [pc, #400]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	4a63      	ldr	r2, [pc, #396]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6713      	str	r3, [r2, #112]	; 0x70
 800369c:	e01c      	b.n	80036d8 <HAL_RCC_OscConfig+0x324>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b05      	cmp	r3, #5
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x30c>
 80036a6:	4b5f      	ldr	r3, [pc, #380]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a5e      	ldr	r2, [pc, #376]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036ac:	f043 0304 	orr.w	r3, r3, #4
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
 80036b2:	4b5c      	ldr	r3, [pc, #368]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	4a5b      	ldr	r2, [pc, #364]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6713      	str	r3, [r2, #112]	; 0x70
 80036be:	e00b      	b.n	80036d8 <HAL_RCC_OscConfig+0x324>
 80036c0:	4b58      	ldr	r3, [pc, #352]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c4:	4a57      	ldr	r2, [pc, #348]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	6713      	str	r3, [r2, #112]	; 0x70
 80036cc:	4b55      	ldr	r3, [pc, #340]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d0:	4a54      	ldr	r2, [pc, #336]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80036d2:	f023 0304 	bic.w	r3, r3, #4
 80036d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d015      	beq.n	800370c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e0:	f7fe f952 	bl	8001988 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e8:	f7fe f94e 	bl	8001988 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e0cb      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fe:	4b49      	ldr	r3, [pc, #292]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0ee      	beq.n	80036e8 <HAL_RCC_OscConfig+0x334>
 800370a:	e014      	b.n	8003736 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800370c:	f7fe f93c 	bl	8001988 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003712:	e00a      	b.n	800372a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003714:	f7fe f938 	bl	8001988 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e0b5      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372a:	4b3e      	ldr	r3, [pc, #248]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1ee      	bne.n	8003714 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003736:	7dfb      	ldrb	r3, [r7, #23]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d105      	bne.n	8003748 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800373c:	4b39      	ldr	r3, [pc, #228]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	4a38      	ldr	r2, [pc, #224]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003742:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003746:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80a1 	beq.w	8003894 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003752:	4b34      	ldr	r3, [pc, #208]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 030c 	and.w	r3, r3, #12
 800375a:	2b08      	cmp	r3, #8
 800375c:	d05c      	beq.n	8003818 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d141      	bne.n	80037ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003766:	4b31      	ldr	r3, [pc, #196]	; (800382c <HAL_RCC_OscConfig+0x478>)
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800376c:	f7fe f90c 	bl	8001988 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003774:	f7fe f908 	bl	8001988 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e087      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003786:	4b27      	ldr	r3, [pc, #156]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f0      	bne.n	8003774 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69da      	ldr	r2, [r3, #28]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a0:	019b      	lsls	r3, r3, #6
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a8:	085b      	lsrs	r3, r3, #1
 80037aa:	3b01      	subs	r3, #1
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	061b      	lsls	r3, r3, #24
 80037b6:	491b      	ldr	r1, [pc, #108]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037bc:	4b1b      	ldr	r3, [pc, #108]	; (800382c <HAL_RCC_OscConfig+0x478>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c2:	f7fe f8e1 	bl	8001988 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ca:	f7fe f8dd 	bl	8001988 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e05c      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x416>
 80037e8:	e054      	b.n	8003894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ea:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_RCC_OscConfig+0x478>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f0:	f7fe f8ca 	bl	8001988 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f8:	f7fe f8c6 	bl	8001988 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e045      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_RCC_OscConfig+0x470>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x444>
 8003816:	e03d      	b.n	8003894 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d107      	bne.n	8003830 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e038      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
 8003824:	40023800 	.word	0x40023800
 8003828:	40007000 	.word	0x40007000
 800382c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <HAL_RCC_OscConfig+0x4ec>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d028      	beq.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003848:	429a      	cmp	r2, r3
 800384a:	d121      	bne.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d11a      	bne.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003860:	4013      	ands	r3, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003868:	4293      	cmp	r3, r2
 800386a:	d111      	bne.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	3b01      	subs	r3, #1
 800387a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d107      	bne.n	8003890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d001      	beq.n	8003894 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800

080038a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0cc      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b8:	4b68      	ldr	r3, [pc, #416]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0307 	and.w	r3, r3, #7
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d90c      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c6:	4b65      	ldr	r3, [pc, #404]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	b2d2      	uxtb	r2, r2
 80038cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ce:	4b63      	ldr	r3, [pc, #396]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e0b8      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d020      	beq.n	800392e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f8:	4b59      	ldr	r3, [pc, #356]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003902:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003910:	4b53      	ldr	r3, [pc, #332]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a52      	ldr	r2, [pc, #328]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800391a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391c:	4b50      	ldr	r3, [pc, #320]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	494d      	ldr	r1, [pc, #308]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d044      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003942:	4b47      	ldr	r3, [pc, #284]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d119      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e07f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d003      	beq.n	8003962 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800395e:	2b03      	cmp	r3, #3
 8003960:	d107      	bne.n	8003972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003962:	4b3f      	ldr	r3, [pc, #252]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e06f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003972:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e067      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003982:	4b37      	ldr	r3, [pc, #220]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f023 0203 	bic.w	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4934      	ldr	r1, [pc, #208]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	4313      	orrs	r3, r2
 8003992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003994:	f7fd fff8 	bl	8001988 <HAL_GetTick>
 8003998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	e00a      	b.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399c:	f7fd fff4 	bl	8001988 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e04f      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 020c 	and.w	r2, r3, #12
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d1eb      	bne.n	800399c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d20c      	bcs.n	80039ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e032      	b.n	8003a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f8:	4b19      	ldr	r3, [pc, #100]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	4916      	ldr	r1, [pc, #88]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	490e      	ldr	r1, [pc, #56]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a2a:	f000 f821 	bl	8003a70 <HAL_RCC_GetSysClockFreq>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	4b0b      	ldr	r3, [pc, #44]	; (8003a60 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	091b      	lsrs	r3, r3, #4
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	490a      	ldr	r1, [pc, #40]	; (8003a64 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3c:	5ccb      	ldrb	r3, [r1, r3]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a46:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCC_ClockConfig+0x1c8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7fd ff58 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023c00 	.word	0x40023c00
 8003a60:	40023800 	.word	0x40023800
 8003a64:	0800f4fc 	.word	0x0800f4fc
 8003a68:	20000000 	.word	0x20000000
 8003a6c:	20000004 	.word	0x20000004

08003a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a74:	b090      	sub	sp, #64	; 0x40
 8003a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a80:	2300      	movs	r3, #0
 8003a82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a88:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b08      	cmp	r3, #8
 8003a92:	d00d      	beq.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	f200 80a1 	bhi.w	8003bdc <HAL_RCC_GetSysClockFreq+0x16c>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8003aa2:	e09b      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aa4:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aa6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003aa8:	e09b      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aaa:	4b53      	ldr	r3, [pc, #332]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aae:	e098      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ab0:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aba:	4b4d      	ldr	r3, [pc, #308]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d028      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ac6:	4b4a      	ldr	r3, [pc, #296]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	099b      	lsrs	r3, r3, #6
 8003acc:	2200      	movs	r2, #0
 8003ace:	623b      	str	r3, [r7, #32]
 8003ad0:	627a      	str	r2, [r7, #36]	; 0x24
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003adc:	fb03 f201 	mul.w	r2, r3, r1
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	fb00 f303 	mul.w	r3, r0, r3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	4a43      	ldr	r2, [pc, #268]	; (8003bf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aea:	fba0 1202 	umull	r1, r2, r0, r2
 8003aee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af0:	460a      	mov	r2, r1
 8003af2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af6:	4413      	add	r3, r2
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afc:	2200      	movs	r2, #0
 8003afe:	61bb      	str	r3, [r7, #24]
 8003b00:	61fa      	str	r2, [r7, #28]
 8003b02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b0a:	f7fd f8c5 	bl	8000c98 <__aeabi_uldivmod>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	460b      	mov	r3, r1
 8003b12:	4613      	mov	r3, r2
 8003b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b16:	e053      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b18:	4b35      	ldr	r3, [pc, #212]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	099b      	lsrs	r3, r3, #6
 8003b1e:	2200      	movs	r2, #0
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	617a      	str	r2, [r7, #20]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b2a:	f04f 0b00 	mov.w	fp, #0
 8003b2e:	4652      	mov	r2, sl
 8003b30:	465b      	mov	r3, fp
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f04f 0100 	mov.w	r1, #0
 8003b3a:	0159      	lsls	r1, r3, #5
 8003b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b40:	0150      	lsls	r0, r2, #5
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	ebb2 080a 	subs.w	r8, r2, sl
 8003b4a:	eb63 090b 	sbc.w	r9, r3, fp
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b62:	ebb2 0408 	subs.w	r4, r2, r8
 8003b66:	eb63 0509 	sbc.w	r5, r3, r9
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	00eb      	lsls	r3, r5, #3
 8003b74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b78:	00e2      	lsls	r2, r4, #3
 8003b7a:	4614      	mov	r4, r2
 8003b7c:	461d      	mov	r5, r3
 8003b7e:	eb14 030a 	adds.w	r3, r4, sl
 8003b82:	603b      	str	r3, [r7, #0]
 8003b84:	eb45 030b 	adc.w	r3, r5, fp
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b96:	4629      	mov	r1, r5
 8003b98:	028b      	lsls	r3, r1, #10
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	028a      	lsls	r2, r1, #10
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003baa:	2200      	movs	r2, #0
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	60fa      	str	r2, [r7, #12]
 8003bb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bb4:	f7fd f870 	bl	8000c98 <__aeabi_uldivmod>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	0c1b      	lsrs	r3, r3, #16
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bda:	e002      	b.n	8003be2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4b05      	ldr	r3, [pc, #20]	; (8003bf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3740      	adds	r7, #64	; 0x40
 8003be8:	46bd      	mov	sp, r7
 8003bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	00f42400 	.word	0x00f42400
 8003bf8:	017d7840 	.word	0x017d7840

08003bfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c00:	4b03      	ldr	r3, [pc, #12]	; (8003c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000000 	.word	0x20000000

08003c14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e041      	b.n	8003caa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fc36 	bl	80014ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f000 f8f0 	bl	8003e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e0ae      	b.n	8003e30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2b0c      	cmp	r3, #12
 8003cde:	f200 809f 	bhi.w	8003e20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ce2:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce8:	08003d1d 	.word	0x08003d1d
 8003cec:	08003e21 	.word	0x08003e21
 8003cf0:	08003e21 	.word	0x08003e21
 8003cf4:	08003e21 	.word	0x08003e21
 8003cf8:	08003d5d 	.word	0x08003d5d
 8003cfc:	08003e21 	.word	0x08003e21
 8003d00:	08003e21 	.word	0x08003e21
 8003d04:	08003e21 	.word	0x08003e21
 8003d08:	08003d9f 	.word	0x08003d9f
 8003d0c:	08003e21 	.word	0x08003e21
 8003d10:	08003e21 	.word	0x08003e21
 8003d14:	08003e21 	.word	0x08003e21
 8003d18:	08003ddf 	.word	0x08003ddf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f914 	bl	8003f50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0208 	orr.w	r2, r2, #8
 8003d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0204 	bic.w	r2, r2, #4
 8003d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6999      	ldr	r1, [r3, #24]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	619a      	str	r2, [r3, #24]
      break;
 8003d5a:	e064      	b.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68b9      	ldr	r1, [r7, #8]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f95a 	bl	800401c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6999      	ldr	r1, [r3, #24]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	021a      	lsls	r2, r3, #8
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	619a      	str	r2, [r3, #24]
      break;
 8003d9c:	e043      	b.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 f9a5 	bl	80040f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0208 	orr.w	r2, r2, #8
 8003db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0204 	bic.w	r2, r2, #4
 8003dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69d9      	ldr	r1, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	61da      	str	r2, [r3, #28]
      break;
 8003ddc:	e023      	b.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68b9      	ldr	r1, [r7, #8]
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 f9ef 	bl	80041c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69d9      	ldr	r1, [r3, #28]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	021a      	lsls	r2, r3, #8
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	61da      	str	r2, [r3, #28]
      break;
 8003e1e:	e002      	b.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	75fb      	strb	r3, [r7, #23]
      break;
 8003e24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a3a      	ldr	r2, [pc, #232]	; (8003f34 <TIM_Base_SetConfig+0xfc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d00f      	beq.n	8003e70 <TIM_Base_SetConfig+0x38>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e56:	d00b      	beq.n	8003e70 <TIM_Base_SetConfig+0x38>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a37      	ldr	r2, [pc, #220]	; (8003f38 <TIM_Base_SetConfig+0x100>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d007      	beq.n	8003e70 <TIM_Base_SetConfig+0x38>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a36      	ldr	r2, [pc, #216]	; (8003f3c <TIM_Base_SetConfig+0x104>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d003      	beq.n	8003e70 <TIM_Base_SetConfig+0x38>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a35      	ldr	r2, [pc, #212]	; (8003f40 <TIM_Base_SetConfig+0x108>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d108      	bne.n	8003e82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <TIM_Base_SetConfig+0xfc>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01b      	beq.n	8003ec2 <TIM_Base_SetConfig+0x8a>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e90:	d017      	beq.n	8003ec2 <TIM_Base_SetConfig+0x8a>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a28      	ldr	r2, [pc, #160]	; (8003f38 <TIM_Base_SetConfig+0x100>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <TIM_Base_SetConfig+0x8a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <TIM_Base_SetConfig+0x104>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d00f      	beq.n	8003ec2 <TIM_Base_SetConfig+0x8a>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a26      	ldr	r2, [pc, #152]	; (8003f40 <TIM_Base_SetConfig+0x108>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00b      	beq.n	8003ec2 <TIM_Base_SetConfig+0x8a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a25      	ldr	r2, [pc, #148]	; (8003f44 <TIM_Base_SetConfig+0x10c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <TIM_Base_SetConfig+0x8a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a24      	ldr	r2, [pc, #144]	; (8003f48 <TIM_Base_SetConfig+0x110>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d003      	beq.n	8003ec2 <TIM_Base_SetConfig+0x8a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a23      	ldr	r2, [pc, #140]	; (8003f4c <TIM_Base_SetConfig+0x114>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d108      	bne.n	8003ed4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a0e      	ldr	r2, [pc, #56]	; (8003f34 <TIM_Base_SetConfig+0xfc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d103      	bne.n	8003f08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	691a      	ldr	r2, [r3, #16]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d105      	bne.n	8003f26 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	f023 0201 	bic.w	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	611a      	str	r2, [r3, #16]
  }
}
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40000400 	.word	0x40000400
 8003f3c:	40000800 	.word	0x40000800
 8003f40:	40000c00 	.word	0x40000c00
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40014400 	.word	0x40014400
 8003f4c:	40014800 	.word	0x40014800

08003f50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f023 0201 	bic.w	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f023 0302 	bic.w	r3, r3, #2
 8003f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a1c      	ldr	r2, [pc, #112]	; (8004018 <TIM_OC1_SetConfig+0xc8>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d10c      	bne.n	8003fc6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f023 0308 	bic.w	r3, r3, #8
 8003fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f023 0304 	bic.w	r3, r3, #4
 8003fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a13      	ldr	r2, [pc, #76]	; (8004018 <TIM_OC1_SetConfig+0xc8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d111      	bne.n	8003ff2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	621a      	str	r2, [r3, #32]
}
 800400c:	bf00      	nop
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	40010000 	.word	0x40010000

0800401c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f023 0210 	bic.w	r2, r3, #16
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800404a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f023 0320 	bic.w	r3, r3, #32
 8004066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	011b      	lsls	r3, r3, #4
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	4313      	orrs	r3, r2
 8004072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a1e      	ldr	r2, [pc, #120]	; (80040f0 <TIM_OC2_SetConfig+0xd4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d10d      	bne.n	8004098 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004096:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <TIM_OC2_SetConfig+0xd4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d113      	bne.n	80040c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	693a      	ldr	r2, [r7, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	621a      	str	r2, [r3, #32]
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40010000 	.word	0x40010000

080040f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800413c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a1d      	ldr	r2, [pc, #116]	; (80041c4 <TIM_OC3_SetConfig+0xd0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10d      	bne.n	800416e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004158:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	021b      	lsls	r3, r3, #8
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	4313      	orrs	r3, r2
 8004164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <TIM_OC3_SetConfig+0xd0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d113      	bne.n	800419e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800417c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	4313      	orrs	r3, r2
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685a      	ldr	r2, [r3, #4]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	621a      	str	r2, [r3, #32]
}
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40010000 	.word	0x40010000

080041c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	021b      	lsls	r3, r3, #8
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4313      	orrs	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	031b      	lsls	r3, r3, #12
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a10      	ldr	r2, [pc, #64]	; (8004264 <TIM_OC4_SetConfig+0x9c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d109      	bne.n	800423c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800422e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	019b      	lsls	r3, r3, #6
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40010000 	.word	0x40010000

08004268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d101      	bne.n	8004280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800427c:	2302      	movs	r3, #2
 800427e:	e050      	b.n	8004322 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1c      	ldr	r2, [pc, #112]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d018      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042cc:	d013      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a18      	ldr	r2, [pc, #96]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d00e      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a16      	ldr	r2, [pc, #88]	; (8004338 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d009      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a15      	ldr	r2, [pc, #84]	; (800433c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d004      	beq.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a13      	ldr	r2, [pc, #76]	; (8004340 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d10c      	bne.n	8004310 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	4313      	orrs	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	68ba      	ldr	r2, [r7, #8]
 800430e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	40010000 	.word	0x40010000
 8004334:	40000400 	.word	0x40000400
 8004338:	40000800 	.word	0x40000800
 800433c:	40000c00 	.word	0x40000c00
 8004340:	40014000 	.word	0x40014000

08004344 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004344:	b084      	sub	sp, #16
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	f107 001c 	add.w	r0, r7, #28
 8004352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004356:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800435a:	2b01      	cmp	r3, #1
 800435c:	d123      	bne.n	80043a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004386:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800438a:	2b01      	cmp	r3, #1
 800438c:	d105      	bne.n	800439a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f001 fae2 	bl	8005964 <USB_CoreReset>
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e01b      	b.n	80043de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f001 fad6 	bl	8005964 <USB_CoreReset>
 80043b8:	4603      	mov	r3, r0
 80043ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80043bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d106      	bne.n	80043d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38
 80043d0:	e005      	b.n	80043de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80043de:	7fbb      	ldrb	r3, [r7, #30]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d10b      	bne.n	80043fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f043 0206 	orr.w	r2, r3, #6
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f043 0220 	orr.w	r2, r3, #32
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004408:	b004      	add	sp, #16
 800440a:	4770      	bx	lr

0800440c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	4613      	mov	r3, r2
 8004418:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	2b02      	cmp	r3, #2
 800441e:	d165      	bne.n	80044ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4a41      	ldr	r2, [pc, #260]	; (8004528 <USB_SetTurnaroundTime+0x11c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d906      	bls.n	8004436 <USB_SetTurnaroundTime+0x2a>
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4a40      	ldr	r2, [pc, #256]	; (800452c <USB_SetTurnaroundTime+0x120>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d202      	bcs.n	8004436 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004430:	230f      	movs	r3, #15
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	e062      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	4a3c      	ldr	r2, [pc, #240]	; (800452c <USB_SetTurnaroundTime+0x120>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d306      	bcc.n	800444c <USB_SetTurnaroundTime+0x40>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4a3b      	ldr	r2, [pc, #236]	; (8004530 <USB_SetTurnaroundTime+0x124>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d202      	bcs.n	800444c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004446:	230e      	movs	r3, #14
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	e057      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4a38      	ldr	r2, [pc, #224]	; (8004530 <USB_SetTurnaroundTime+0x124>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d306      	bcc.n	8004462 <USB_SetTurnaroundTime+0x56>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4a37      	ldr	r2, [pc, #220]	; (8004534 <USB_SetTurnaroundTime+0x128>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d202      	bcs.n	8004462 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800445c:	230d      	movs	r3, #13
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	e04c      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4a33      	ldr	r2, [pc, #204]	; (8004534 <USB_SetTurnaroundTime+0x128>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d306      	bcc.n	8004478 <USB_SetTurnaroundTime+0x6c>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4a32      	ldr	r2, [pc, #200]	; (8004538 <USB_SetTurnaroundTime+0x12c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d802      	bhi.n	8004478 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004472:	230c      	movs	r3, #12
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	e041      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4a2f      	ldr	r2, [pc, #188]	; (8004538 <USB_SetTurnaroundTime+0x12c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d906      	bls.n	800448e <USB_SetTurnaroundTime+0x82>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4a2e      	ldr	r2, [pc, #184]	; (800453c <USB_SetTurnaroundTime+0x130>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d802      	bhi.n	800448e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004488:	230b      	movs	r3, #11
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	e036      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4a2a      	ldr	r2, [pc, #168]	; (800453c <USB_SetTurnaroundTime+0x130>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d906      	bls.n	80044a4 <USB_SetTurnaroundTime+0x98>
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4a29      	ldr	r2, [pc, #164]	; (8004540 <USB_SetTurnaroundTime+0x134>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d802      	bhi.n	80044a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800449e:	230a      	movs	r3, #10
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	e02b      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	4a26      	ldr	r2, [pc, #152]	; (8004540 <USB_SetTurnaroundTime+0x134>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d906      	bls.n	80044ba <USB_SetTurnaroundTime+0xae>
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4a25      	ldr	r2, [pc, #148]	; (8004544 <USB_SetTurnaroundTime+0x138>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d202      	bcs.n	80044ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80044b4:	2309      	movs	r3, #9
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	e020      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4a21      	ldr	r2, [pc, #132]	; (8004544 <USB_SetTurnaroundTime+0x138>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d306      	bcc.n	80044d0 <USB_SetTurnaroundTime+0xc4>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4a20      	ldr	r2, [pc, #128]	; (8004548 <USB_SetTurnaroundTime+0x13c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d802      	bhi.n	80044d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80044ca:	2308      	movs	r3, #8
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e015      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <USB_SetTurnaroundTime+0x13c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d906      	bls.n	80044e6 <USB_SetTurnaroundTime+0xda>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	4a1c      	ldr	r2, [pc, #112]	; (800454c <USB_SetTurnaroundTime+0x140>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d202      	bcs.n	80044e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044e0:	2307      	movs	r3, #7
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	e00a      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044e6:	2306      	movs	r3, #6
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	e007      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044ec:	79fb      	ldrb	r3, [r7, #7]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d102      	bne.n	80044f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044f2:	2309      	movs	r3, #9
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	e001      	b.n	80044fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044f8:	2309      	movs	r3, #9
 80044fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	029b      	lsls	r3, r3, #10
 8004510:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004514:	431a      	orrs	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	00d8acbf 	.word	0x00d8acbf
 800452c:	00e4e1c0 	.word	0x00e4e1c0
 8004530:	00f42400 	.word	0x00f42400
 8004534:	01067380 	.word	0x01067380
 8004538:	011a499f 	.word	0x011a499f
 800453c:	01312cff 	.word	0x01312cff
 8004540:	014ca43f 	.word	0x014ca43f
 8004544:	016e3600 	.word	0x016e3600
 8004548:	01a6ab1f 	.word	0x01a6ab1f
 800454c:	01e84800 	.word	0x01e84800

08004550 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f043 0201 	orr.w	r2, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 0201 	bic.w	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d115      	bne.n	80045e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045c2:	200a      	movs	r0, #10
 80045c4:	f7fd f9ec 	bl	80019a0 <HAL_Delay>
      ms += 10U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	330a      	adds	r3, #10
 80045cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f001 f939 	bl	8005846 <USB_GetMode>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d01e      	beq.n	8004618 <USB_SetCurrentMode+0x84>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2bc7      	cmp	r3, #199	; 0xc7
 80045de:	d9f0      	bls.n	80045c2 <USB_SetCurrentMode+0x2e>
 80045e0:	e01a      	b.n	8004618 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045e2:	78fb      	ldrb	r3, [r7, #3]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d115      	bne.n	8004614 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80045f4:	200a      	movs	r0, #10
 80045f6:	f7fd f9d3 	bl	80019a0 <HAL_Delay>
      ms += 10U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	330a      	adds	r3, #10
 80045fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f001 f920 	bl	8005846 <USB_GetMode>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d005      	beq.n	8004618 <USB_SetCurrentMode+0x84>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2bc7      	cmp	r3, #199	; 0xc7
 8004610:	d9f0      	bls.n	80045f4 <USB_SetCurrentMode+0x60>
 8004612:	e001      	b.n	8004618 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e005      	b.n	8004624 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2bc8      	cmp	r3, #200	; 0xc8
 800461c:	d101      	bne.n	8004622 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e000      	b.n	8004624 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800462c:	b084      	sub	sp, #16
 800462e:	b580      	push	{r7, lr}
 8004630:	b086      	sub	sp, #24
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800463a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004646:	2300      	movs	r3, #0
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	e009      	b.n	8004660 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	3340      	adds	r3, #64	; 0x40
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	2200      	movs	r2, #0
 8004658:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	3301      	adds	r3, #1
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b0e      	cmp	r3, #14
 8004664:	d9f2      	bls.n	800464c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004666:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800466a:	2b00      	cmp	r3, #0
 800466c:	d11c      	bne.n	80046a8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800467c:	f043 0302 	orr.w	r3, r3, #2
 8004680:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	639a      	str	r2, [r3, #56]	; 0x38
 80046a6:	e00b      	b.n	80046c0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046c6:	461a      	mov	r2, r3
 80046c8:	2300      	movs	r3, #0
 80046ca:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80046cc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d10d      	bne.n	80046f0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d104      	bne.n	80046e6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046dc:	2100      	movs	r1, #0
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f968 	bl	80049b4 <USB_SetDevSpeed>
 80046e4:	e008      	b.n	80046f8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046e6:	2101      	movs	r1, #1
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f963 	bl	80049b4 <USB_SetDevSpeed>
 80046ee:	e003      	b.n	80046f8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046f0:	2103      	movs	r1, #3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f95e 	bl	80049b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046f8:	2110      	movs	r1, #16
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8fa 	bl	80048f4 <USB_FlushTxFifo>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f924 	bl	8004958 <USB_FlushRxFifo>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004720:	461a      	mov	r2, r3
 8004722:	2300      	movs	r3, #0
 8004724:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800472c:	461a      	mov	r2, r3
 800472e:	2300      	movs	r3, #0
 8004730:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004738:	461a      	mov	r2, r3
 800473a:	2300      	movs	r3, #0
 800473c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	e043      	b.n	80047cc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800475a:	d118      	bne.n	800478e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10a      	bne.n	8004778 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476e:	461a      	mov	r2, r3
 8004770:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e013      	b.n	80047a0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	461a      	mov	r2, r3
 8004786:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	e008      	b.n	80047a0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479a:	461a      	mov	r2, r3
 800479c:	2300      	movs	r3, #0
 800479e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	461a      	mov	r2, r3
 80047ae:	2300      	movs	r3, #0
 80047b0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047be:	461a      	mov	r2, r3
 80047c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	3301      	adds	r3, #1
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80047d0:	461a      	mov	r2, r3
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d3b5      	bcc.n	8004744 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047d8:	2300      	movs	r3, #0
 80047da:	613b      	str	r3, [r7, #16]
 80047dc:	e043      	b.n	8004866 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047f4:	d118      	bne.n	8004828 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10a      	bne.n	8004812 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	461a      	mov	r2, r3
 800480a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	e013      	b.n	800483a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481e:	461a      	mov	r2, r3
 8004820:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e008      	b.n	800483a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4413      	add	r3, r2
 8004830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004834:	461a      	mov	r2, r3
 8004836:	2300      	movs	r3, #0
 8004838:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	015a      	lsls	r2, r3, #5
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	4413      	add	r3, r2
 8004842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004846:	461a      	mov	r2, r3
 8004848:	2300      	movs	r3, #0
 800484a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004858:	461a      	mov	r2, r3
 800485a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800485e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	3301      	adds	r3, #1
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800486a:	461a      	mov	r2, r3
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4293      	cmp	r3, r2
 8004870:	d3b5      	bcc.n	80047de <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004884:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004892:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004894:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	f043 0210 	orr.w	r2, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <USB_DevInit+0x2c4>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80048b4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f043 0208 	orr.w	r2, r3, #8
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80048c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048d8:	f043 0304 	orr.w	r3, r3, #4
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048ec:	b004      	add	sp, #16
 80048ee:	4770      	bx	lr
 80048f0:	803c3800 	.word	0x803c3800

080048f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3301      	adds	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800490e:	d901      	bls.n	8004914 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e01b      	b.n	800494c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	daf2      	bge.n	8004902 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	019b      	lsls	r3, r3, #6
 8004924:	f043 0220 	orr.w	r2, r3, #32
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3301      	adds	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004938:	d901      	bls.n	800493e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e006      	b.n	800494c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b20      	cmp	r3, #32
 8004948:	d0f0      	beq.n	800492c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	3301      	adds	r3, #1
 8004968:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004970:	d901      	bls.n	8004976 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e018      	b.n	80049a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	daf2      	bge.n	8004964 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2210      	movs	r2, #16
 8004986:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004994:	d901      	bls.n	800499a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e006      	b.n	80049a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b10      	cmp	r3, #16
 80049a4:	d0f0      	beq.n	8004988 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d4:	4313      	orrs	r3, r2
 80049d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b087      	sub	sp, #28
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f003 0306 	and.w	r3, r3, #6
 80049fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a06:	2300      	movs	r3, #0
 8004a08:	75fb      	strb	r3, [r7, #23]
 8004a0a:	e00a      	b.n	8004a22 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d002      	beq.n	8004a18 <USB_GetDevSpeed+0x32>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b06      	cmp	r3, #6
 8004a16:	d102      	bne.n	8004a1e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004a18:	2302      	movs	r3, #2
 8004a1a:	75fb      	strb	r3, [r7, #23]
 8004a1c:	e001      	b.n	8004a22 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004a1e:	230f      	movs	r3, #15
 8004a20:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	371c      	adds	r7, #28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	785b      	ldrb	r3, [r3, #1]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d13a      	bne.n	8004ac2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	68f9      	ldr	r1, [r7, #12]
 8004a66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d155      	bne.n	8004b30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	791b      	ldrb	r3, [r3, #4]
 8004a9e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aa0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	059b      	lsls	r3, r3, #22
 8004aa6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	0151      	lsls	r1, r2, #5
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	440a      	add	r2, r1
 8004ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	e036      	b.n	8004b30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac8:	69da      	ldr	r2, [r3, #28]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad8:	041b      	lsls	r3, r3, #16
 8004ada:	68f9      	ldr	r1, [r7, #12]
 8004adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d11a      	bne.n	8004b30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	791b      	ldrb	r3, [r3, #4]
 8004b14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b16:	430b      	orrs	r3, r1
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	0151      	lsls	r1, r2, #5
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	440a      	add	r2, r1
 8004b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
	...

08004b40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d161      	bne.n	8004c20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b72:	d11f      	bne.n	8004bb4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	0151      	lsls	r1, r2, #5
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	440a      	add	r2, r1
 8004b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004bb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	68f9      	ldr	r1, [r7, #12]
 8004bd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	2101      	movs	r1, #1
 8004bea:	fa01 f303 	lsl.w	r3, r1, r3
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	0159      	lsls	r1, r3, #5
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	440b      	add	r3, r1
 8004c12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c16:	4619      	mov	r1, r3
 8004c18:	4b35      	ldr	r3, [pc, #212]	; (8004cf0 <USB_DeactivateEndpoint+0x1b0>)
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]
 8004c1e:	e060      	b.n	8004ce2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c36:	d11f      	bne.n	8004c78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	015a      	lsls	r2, r3, #5
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	0151      	lsls	r1, r2, #5
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	440a      	add	r2, r1
 8004c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	2101      	movs	r1, #1
 8004c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8e:	041b      	lsls	r3, r3, #16
 8004c90:	43db      	mvns	r3, r3
 8004c92:	68f9      	ldr	r1, [r7, #12]
 8004c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c98:	4013      	ands	r3, r2
 8004c9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca2:	69da      	ldr	r2, [r3, #28]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	2101      	movs	r1, #1
 8004cae:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb2:	041b      	lsls	r3, r3, #16
 8004cb4:	43db      	mvns	r3, r3
 8004cb6:	68f9      	ldr	r1, [r7, #12]
 8004cb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	0159      	lsls	r1, r3, #5
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	440b      	add	r3, r1
 8004cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <USB_DeactivateEndpoint+0x1b4>)
 8004cde:	4013      	ands	r3, r2
 8004ce0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	ec337800 	.word	0xec337800
 8004cf4:	eff37800 	.word	0xeff37800

08004cf8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08a      	sub	sp, #40	; 0x28
 8004cfc:	af02      	add	r7, sp, #8
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	4613      	mov	r3, r2
 8004d04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	785b      	ldrb	r3, [r3, #1]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	f040 817a 	bne.w	800500e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d132      	bne.n	8004d88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	0151      	lsls	r1, r2, #5
 8004d34:	69fa      	ldr	r2, [r7, #28]
 8004d36:	440a      	add	r2, r1
 8004d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	0151      	lsls	r1, r2, #5
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	440a      	add	r2, r1
 8004d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	015a      	lsls	r2, r3, #5
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	0151      	lsls	r1, r2, #5
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	440a      	add	r2, r1
 8004d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d80:	0cdb      	lsrs	r3, r3, #19
 8004d82:	04db      	lsls	r3, r3, #19
 8004d84:	6113      	str	r3, [r2, #16]
 8004d86:	e092      	b.n	8004eae <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	0151      	lsls	r1, r2, #5
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	440a      	add	r2, r1
 8004d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da2:	0cdb      	lsrs	r3, r3, #19
 8004da4:	04db      	lsls	r3, r3, #19
 8004da6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	015a      	lsls	r2, r3, #5
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4413      	add	r3, r2
 8004db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	0151      	lsls	r1, r2, #5
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	440a      	add	r2, r1
 8004dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dca:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d11a      	bne.n	8004e08 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d903      	bls.n	8004de6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	0151      	lsls	r1, r2, #5
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e04:	6113      	str	r3, [r2, #16]
 8004e06:	e01b      	b.n	8004e40 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e14:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6919      	ldr	r1, [r3, #16]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	440b      	add	r3, r1
 8004e20:	1e59      	subs	r1, r3, #1
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e2a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e2c:	4ba2      	ldr	r3, [pc, #648]	; (80050b8 <USB_EPStartXfer+0x3c0>)
 8004e2e:	400b      	ands	r3, r1
 8004e30:	69b9      	ldr	r1, [r7, #24]
 8004e32:	0148      	lsls	r0, r1, #5
 8004e34:	69f9      	ldr	r1, [r7, #28]
 8004e36:	4401      	add	r1, r0
 8004e38:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e56:	69b9      	ldr	r1, [r7, #24]
 8004e58:	0148      	lsls	r0, r1, #5
 8004e5a:	69f9      	ldr	r1, [r7, #28]
 8004e5c:	4401      	add	r1, r0
 8004e5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e62:	4313      	orrs	r3, r2
 8004e64:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	791b      	ldrb	r3, [r3, #4]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d11f      	bne.n	8004eae <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	69fa      	ldr	r2, [r7, #28]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e88:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e8c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	0151      	lsls	r1, r2, #5
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004eac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d14b      	bne.n	8004f4c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d009      	beq.n	8004ed0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	461a      	mov	r2, r3
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	69db      	ldr	r3, [r3, #28]
 8004ece:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	791b      	ldrb	r3, [r3, #4]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d128      	bne.n	8004f2a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d110      	bne.n	8004f0a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	015a      	lsls	r2, r3, #5
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	4413      	add	r3, r2
 8004ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	0151      	lsls	r1, r2, #5
 8004efa:	69fa      	ldr	r2, [r7, #28]
 8004efc:	440a      	add	r2, r1
 8004efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e00f      	b.n	8004f2a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	015a      	lsls	r2, r3, #5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	4413      	add	r3, r2
 8004f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	69ba      	ldr	r2, [r7, #24]
 8004f1a:	0151      	lsls	r1, r2, #5
 8004f1c:	69fa      	ldr	r2, [r7, #28]
 8004f1e:	440a      	add	r2, r1
 8004f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f28:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e165      	b.n	8005218 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f6a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	791b      	ldrb	r3, [r3, #4]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d015      	beq.n	8004fa0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	f000 814d 	beq.w	8005218 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	2101      	movs	r1, #1
 8004f90:	fa01 f303 	lsl.w	r3, r1, r3
 8004f94:	69f9      	ldr	r1, [r7, #28]
 8004f96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	634b      	str	r3, [r1, #52]	; 0x34
 8004f9e:	e13b      	b.n	8005218 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d110      	bne.n	8004fd2 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	0151      	lsls	r1, r2, #5
 8004fc2:	69fa      	ldr	r2, [r7, #28]
 8004fc4:	440a      	add	r2, r1
 8004fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e00f      	b.n	8004ff2 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	68d9      	ldr	r1, [r3, #12]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	781a      	ldrb	r2, [r3, #0]
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	b298      	uxth	r0, r3
 8005000:	79fb      	ldrb	r3, [r7, #7]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	4603      	mov	r3, r0
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 f9b8 	bl	800537c <USB_WritePacket>
 800500c:	e104      	b.n	8005218 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	0151      	lsls	r1, r2, #5
 8005020:	69fa      	ldr	r2, [r7, #28]
 8005022:	440a      	add	r2, r1
 8005024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005028:	0cdb      	lsrs	r3, r3, #19
 800502a:	04db      	lsls	r3, r3, #19
 800502c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	4413      	add	r3, r2
 8005036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	0151      	lsls	r1, r2, #5
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	440a      	add	r2, r1
 8005044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005048:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800504c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005050:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d131      	bne.n	80050bc <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005086:	69b9      	ldr	r1, [r7, #24]
 8005088:	0148      	lsls	r0, r1, #5
 800508a:	69f9      	ldr	r1, [r7, #28]
 800508c:	4401      	add	r1, r0
 800508e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005092:	4313      	orrs	r3, r2
 8005094:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	015a      	lsls	r2, r3, #5
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	4413      	add	r3, r2
 800509e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	0151      	lsls	r1, r2, #5
 80050a8:	69fa      	ldr	r2, [r7, #28]
 80050aa:	440a      	add	r2, r1
 80050ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050b4:	6113      	str	r3, [r2, #16]
 80050b6:	e061      	b.n	800517c <USB_EPStartXfer+0x484>
 80050b8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d123      	bne.n	800510c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050da:	69b9      	ldr	r1, [r7, #24]
 80050dc:	0148      	lsls	r0, r1, #5
 80050de:	69f9      	ldr	r1, [r7, #28]
 80050e0:	4401      	add	r1, r0
 80050e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050e6:	4313      	orrs	r3, r2
 80050e8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005104:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005108:	6113      	str	r3, [r2, #16]
 800510a:	e037      	b.n	800517c <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	4413      	add	r3, r2
 8005116:	1e5a      	subs	r2, r3, #1
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005120:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	8afa      	ldrh	r2, [r7, #22]
 8005128:	fb03 f202 	mul.w	r2, r3, r2
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513c:	691a      	ldr	r2, [r3, #16]
 800513e:	8afb      	ldrh	r3, [r7, #22]
 8005140:	04d9      	lsls	r1, r3, #19
 8005142:	4b38      	ldr	r3, [pc, #224]	; (8005224 <USB_EPStartXfer+0x52c>)
 8005144:	400b      	ands	r3, r1
 8005146:	69b9      	ldr	r1, [r7, #24]
 8005148:	0148      	lsls	r0, r1, #5
 800514a:	69f9      	ldr	r1, [r7, #28]
 800514c:	4401      	add	r1, r0
 800514e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005152:	4313      	orrs	r3, r2
 8005154:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	691a      	ldr	r2, [r3, #16]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800516c:	69b9      	ldr	r1, [r7, #24]
 800516e:	0148      	lsls	r0, r1, #5
 8005170:	69f9      	ldr	r1, [r7, #28]
 8005172:	4401      	add	r1, r0
 8005174:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005178:	4313      	orrs	r3, r2
 800517a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10d      	bne.n	800519e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	68d9      	ldr	r1, [r3, #12]
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519a:	460a      	mov	r2, r1
 800519c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	791b      	ldrb	r3, [r3, #4]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d128      	bne.n	80051f8 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d110      	bne.n	80051d8 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	e00f      	b.n	80051f8 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	015a      	lsls	r2, r3, #5
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	4413      	add	r3, r2
 8005200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69ba      	ldr	r2, [r7, #24]
 8005208:	0151      	lsls	r1, r2, #5
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	440a      	add	r2, r1
 800520e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005212:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005216:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	1ff80000 	.word	0x1ff80000

08005228 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d14a      	bne.n	80052dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	4413      	add	r3, r2
 8005250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800525a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800525e:	f040 8086 	bne.w	800536e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	015a      	lsls	r2, r3, #5
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4413      	add	r3, r2
 800526c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	7812      	ldrb	r2, [r2, #0]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	440a      	add	r2, r1
 800527c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005280:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005284:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	7812      	ldrb	r2, [r2, #0]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3301      	adds	r3, #1
 80052ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d902      	bls.n	80052c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	75fb      	strb	r3, [r7, #23]
          break;
 80052be:	e056      	b.n	800536e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052d8:	d0e7      	beq.n	80052aa <USB_EPStopXfer+0x82>
 80052da:	e048      	b.n	800536e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052f4:	d13b      	bne.n	800536e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	7812      	ldrb	r2, [r2, #0]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005314:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005318:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	7812      	ldrb	r2, [r2, #0]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	440a      	add	r2, r1
 8005334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005338:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800533c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	3301      	adds	r3, #1
 8005342:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f242 7210 	movw	r2, #10000	; 0x2710
 800534a:	4293      	cmp	r3, r2
 800534c:	d902      	bls.n	8005354 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	75fb      	strb	r3, [r7, #23]
          break;
 8005352:	e00c      	b.n	800536e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800536c:	d0e7      	beq.n	800533e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800536e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005370:	4618      	mov	r0, r3
 8005372:	371c      	adds	r7, #28
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800537c:	b480      	push	{r7}
 800537e:	b089      	sub	sp, #36	; 0x24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	4611      	mov	r1, r2
 8005388:	461a      	mov	r2, r3
 800538a:	460b      	mov	r3, r1
 800538c:	71fb      	strb	r3, [r7, #7]
 800538e:	4613      	mov	r3, r2
 8005390:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800539a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d123      	bne.n	80053ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80053a2:	88bb      	ldrh	r3, [r7, #4]
 80053a4:	3303      	adds	r3, #3
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e018      	b.n	80053e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	031a      	lsls	r2, r3, #12
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053bc:	461a      	mov	r2, r3
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	3301      	adds	r3, #1
 80053c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	3301      	adds	r3, #1
 80053ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	3301      	adds	r3, #1
 80053d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	3301      	adds	r3, #1
 80053da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	3301      	adds	r3, #1
 80053e0:	61bb      	str	r3, [r7, #24]
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d3e2      	bcc.n	80053b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3724      	adds	r7, #36	; 0x24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b08b      	sub	sp, #44	; 0x2c
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	4613      	mov	r3, r2
 8005404:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800540e:	88fb      	ldrh	r3, [r7, #6]
 8005410:	089b      	lsrs	r3, r3, #2
 8005412:	b29b      	uxth	r3, r3
 8005414:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	f003 0303 	and.w	r3, r3, #3
 800541c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800541e:	2300      	movs	r3, #0
 8005420:	623b      	str	r3, [r7, #32]
 8005422:	e014      	b.n	800544e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005432:	3301      	adds	r3, #1
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	3301      	adds	r3, #1
 800543a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	3301      	adds	r3, #1
 8005440:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	3301      	adds	r3, #1
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	3301      	adds	r3, #1
 800544c:	623b      	str	r3, [r7, #32]
 800544e:	6a3a      	ldr	r2, [r7, #32]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	429a      	cmp	r2, r3
 8005454:	d3e6      	bcc.n	8005424 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005456:	8bfb      	ldrh	r3, [r7, #30]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d01e      	beq.n	800549a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005466:	461a      	mov	r2, r3
 8005468:	f107 0310 	add.w	r3, r7, #16
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
 800547c:	b2da      	uxtb	r2, r3
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	701a      	strb	r2, [r3, #0]
      i++;
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	3301      	adds	r3, #1
 8005486:	623b      	str	r3, [r7, #32]
      pDest++;
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	3301      	adds	r3, #1
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800548e:	8bfb      	ldrh	r3, [r7, #30]
 8005490:	3b01      	subs	r3, #1
 8005492:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005494:	8bfb      	ldrh	r3, [r7, #30]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1ea      	bne.n	8005470 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800549a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800549c:	4618      	mov	r0, r3
 800549e:	372c      	adds	r7, #44	; 0x2c
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	785b      	ldrb	r3, [r3, #1]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d12c      	bne.n	800551e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	015a      	lsls	r2, r3, #5
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	4413      	add	r3, r2
 80054cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	db12      	blt.n	80054fc <USB_EPSetStall+0x54>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00f      	beq.n	80054fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68ba      	ldr	r2, [r7, #8]
 800550c:	0151      	lsls	r1, r2, #5
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	440a      	add	r2, r1
 8005512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800551a:	6013      	str	r3, [r2, #0]
 800551c:	e02b      	b.n	8005576 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b00      	cmp	r3, #0
 800552e:	db12      	blt.n	8005556 <USB_EPSetStall+0xae>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00f      	beq.n	8005556 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	68fa      	ldr	r2, [r7, #12]
 800554a:	440a      	add	r2, r1
 800554c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005550:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005554:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	440a      	add	r2, r1
 800556c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005574:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d128      	bne.n	80055f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	0151      	lsls	r1, r2, #5
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	440a      	add	r2, r1
 80055b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	791b      	ldrb	r3, [r3, #4]
 80055c4:	2b03      	cmp	r3, #3
 80055c6:	d003      	beq.n	80055d0 <USB_EPClearStall+0x4c>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	791b      	ldrb	r3, [r3, #4]
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d138      	bne.n	8005642 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	0151      	lsls	r1, r2, #5
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	440a      	add	r2, r1
 80055e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055ee:	6013      	str	r3, [r2, #0]
 80055f0:	e027      	b.n	8005642 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	0151      	lsls	r1, r2, #5
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	440a      	add	r2, r1
 8005608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800560c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005610:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	791b      	ldrb	r3, [r3, #4]
 8005616:	2b03      	cmp	r3, #3
 8005618:	d003      	beq.n	8005622 <USB_EPClearStall+0x9e>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	791b      	ldrb	r3, [r3, #4]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d10f      	bne.n	8005642 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005640:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800566e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005672:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	78fb      	ldrb	r3, [r7, #3]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005684:	68f9      	ldr	r1, [r7, #12]
 8005686:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800568a:	4313      	orrs	r3, r2
 800568c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056b6:	f023 0303 	bic.w	r3, r3, #3
 80056ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ca:	f023 0302 	bic.w	r3, r3, #2
 80056ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80056de:	b480      	push	{r7}
 80056e0:	b085      	sub	sp, #20
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056f8:	f023 0303 	bic.w	r3, r3, #3
 80056fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800570c:	f043 0302 	orr.w	r3, r3, #2
 8005710:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4013      	ands	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005738:	68fb      	ldr	r3, [r7, #12]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	4013      	ands	r3, r2
 8005768:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	0c1b      	lsrs	r3, r3, #16
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr

0800577a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800577a:	b480      	push	{r7}
 800577c:	b085      	sub	sp, #20
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005796:	69db      	ldr	r3, [r3, #28]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	4013      	ands	r3, r2
 800579c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	b29b      	uxth	r3, r3
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	460b      	mov	r3, r1
 80057b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	4013      	ands	r3, r2
 80057da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057dc:	68bb      	ldr	r3, [r7, #8]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b087      	sub	sp, #28
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800580e:	78fb      	ldrb	r3, [r7, #3]
 8005810:	f003 030f 	and.w	r3, r3, #15
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	fa22 f303 	lsr.w	r3, r2, r3
 800581a:	01db      	lsls	r3, r3, #7
 800581c:	b2db      	uxtb	r3, r3
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4013      	ands	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005838:	68bb      	ldr	r3, [r7, #8]
}
 800583a:	4618      	mov	r0, r3
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	f003 0301 	and.w	r3, r3, #1
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005862:	b480      	push	{r7}
 8005864:	b085      	sub	sp, #20
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005880:	f023 0307 	bic.w	r3, r3, #7
 8005884:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005898:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	460b      	mov	r3, r1
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	333c      	adds	r3, #60	; 0x3c
 80058be:	3304      	adds	r3, #4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	4a26      	ldr	r2, [pc, #152]	; (8005960 <USB_EP0_OutStart+0xb8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d90a      	bls.n	80058e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058dc:	d101      	bne.n	80058e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e037      	b.n	8005952 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e8:	461a      	mov	r2, r3
 80058ea:	2300      	movs	r3, #0
 80058ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005900:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005910:	f043 0318 	orr.w	r3, r3, #24
 8005914:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005924:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005928:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800592a:	7afb      	ldrb	r3, [r7, #11]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d10f      	bne.n	8005950 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	461a      	mov	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800594a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800594e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	4f54300a 	.word	0x4f54300a

08005964 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3301      	adds	r3, #1
 8005974:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800597c:	d901      	bls.n	8005982 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e01b      	b.n	80059ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	daf2      	bge.n	8005970 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	f043 0201 	orr.w	r2, r3, #1
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3301      	adds	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80059a6:	d901      	bls.n	80059ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e006      	b.n	80059ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d0f0      	beq.n	800599a <USB_CoreReset+0x36>

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
	...

080059c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80059d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059d8:	f002 fca0 	bl	800831c <USBD_static_malloc>
 80059dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	32b0      	adds	r2, #176	; 0xb0
 80059ee:	2100      	movs	r1, #0
 80059f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80059f4:	2302      	movs	r3, #2
 80059f6:	e0d4      	b.n	8005ba2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80059f8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80059fc:	2100      	movs	r1, #0
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f003 fc13 	bl	800922a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	32b0      	adds	r2, #176	; 0xb0
 8005a0e:	68f9      	ldr	r1, [r7, #12]
 8005a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	32b0      	adds	r2, #176	; 0xb0
 8005a1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	7c1b      	ldrb	r3, [r3, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d138      	bne.n	8005aa2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a30:	4b5e      	ldr	r3, [pc, #376]	; (8005bac <USBD_CDC_Init+0x1e4>)
 8005a32:	7819      	ldrb	r1, [r3, #0]
 8005a34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a38:	2202      	movs	r2, #2
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f002 fb4b 	bl	80080d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a40:	4b5a      	ldr	r3, [pc, #360]	; (8005bac <USBD_CDC_Init+0x1e4>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	f003 020f 	and.w	r2, r3, #15
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	3324      	adds	r3, #36	; 0x24
 8005a56:	2201      	movs	r2, #1
 8005a58:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a5a:	4b55      	ldr	r3, [pc, #340]	; (8005bb0 <USBD_CDC_Init+0x1e8>)
 8005a5c:	7819      	ldrb	r1, [r3, #0]
 8005a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a62:	2202      	movs	r2, #2
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f002 fb36 	bl	80080d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a6a:	4b51      	ldr	r3, [pc, #324]	; (8005bb0 <USBD_CDC_Init+0x1e8>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	f003 020f 	and.w	r2, r3, #15
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a82:	2201      	movs	r2, #1
 8005a84:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a86:	4b4b      	ldr	r3, [pc, #300]	; (8005bb4 <USBD_CDC_Init+0x1ec>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f003 020f 	and.w	r2, r3, #15
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	4613      	mov	r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	3326      	adds	r3, #38	; 0x26
 8005a9c:	2210      	movs	r2, #16
 8005a9e:	801a      	strh	r2, [r3, #0]
 8005aa0:	e035      	b.n	8005b0e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005aa2:	4b42      	ldr	r3, [pc, #264]	; (8005bac <USBD_CDC_Init+0x1e4>)
 8005aa4:	7819      	ldrb	r1, [r3, #0]
 8005aa6:	2340      	movs	r3, #64	; 0x40
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f002 fb13 	bl	80080d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ab0:	4b3e      	ldr	r3, [pc, #248]	; (8005bac <USBD_CDC_Init+0x1e4>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	f003 020f 	and.w	r2, r3, #15
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	4613      	mov	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	3324      	adds	r3, #36	; 0x24
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005aca:	4b39      	ldr	r3, [pc, #228]	; (8005bb0 <USBD_CDC_Init+0x1e8>)
 8005acc:	7819      	ldrb	r1, [r3, #0]
 8005ace:	2340      	movs	r3, #64	; 0x40
 8005ad0:	2202      	movs	r2, #2
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f002 faff 	bl	80080d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005ad8:	4b35      	ldr	r3, [pc, #212]	; (8005bb0 <USBD_CDC_Init+0x1e8>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	f003 020f 	and.w	r2, r3, #15
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005af0:	2201      	movs	r2, #1
 8005af2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005af4:	4b2f      	ldr	r3, [pc, #188]	; (8005bb4 <USBD_CDC_Init+0x1ec>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	f003 020f 	and.w	r2, r3, #15
 8005afc:	6879      	ldr	r1, [r7, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	3326      	adds	r3, #38	; 0x26
 8005b0a:	2210      	movs	r2, #16
 8005b0c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005b0e:	4b29      	ldr	r3, [pc, #164]	; (8005bb4 <USBD_CDC_Init+0x1ec>)
 8005b10:	7819      	ldrb	r1, [r3, #0]
 8005b12:	2308      	movs	r3, #8
 8005b14:	2203      	movs	r2, #3
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f002 fadd 	bl	80080d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005b1c:	4b25      	ldr	r3, [pc, #148]	; (8005bb4 <USBD_CDC_Init+0x1ec>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	f003 020f 	and.w	r2, r3, #15
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	440b      	add	r3, r1
 8005b30:	3324      	adds	r3, #36	; 0x24
 8005b32:	2201      	movs	r2, #1
 8005b34:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b44:	687a      	ldr	r2, [r7, #4]
 8005b46:	33b0      	adds	r3, #176	; 0xb0
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d101      	bne.n	8005b70 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	e018      	b.n	8005ba2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	7c1b      	ldrb	r3, [r3, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10a      	bne.n	8005b8e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b78:	4b0d      	ldr	r3, [pc, #52]	; (8005bb0 <USBD_CDC_Init+0x1e8>)
 8005b7a:	7819      	ldrb	r1, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f002 fb94 	bl	80082b4 <USBD_LL_PrepareReceive>
 8005b8c:	e008      	b.n	8005ba0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b8e:	4b08      	ldr	r3, [pc, #32]	; (8005bb0 <USBD_CDC_Init+0x1e8>)
 8005b90:	7819      	ldrb	r1, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b98:	2340      	movs	r3, #64	; 0x40
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f002 fb8a 	bl	80082b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	20000093 	.word	0x20000093
 8005bb0:	20000094 	.word	0x20000094
 8005bb4:	20000095 	.word	0x20000095

08005bb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005bc4:	4b3a      	ldr	r3, [pc, #232]	; (8005cb0 <USBD_CDC_DeInit+0xf8>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f002 faa9 	bl	8008122 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005bd0:	4b37      	ldr	r3, [pc, #220]	; (8005cb0 <USBD_CDC_DeInit+0xf8>)
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	f003 020f 	and.w	r2, r3, #15
 8005bd8:	6879      	ldr	r1, [r7, #4]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	3324      	adds	r3, #36	; 0x24
 8005be6:	2200      	movs	r2, #0
 8005be8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005bea:	4b32      	ldr	r3, [pc, #200]	; (8005cb4 <USBD_CDC_DeInit+0xfc>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f002 fa96 	bl	8008122 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005bf6:	4b2f      	ldr	r3, [pc, #188]	; (8005cb4 <USBD_CDC_DeInit+0xfc>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	f003 020f 	and.w	r2, r3, #15
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c0e:	2200      	movs	r2, #0
 8005c10:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005c12:	4b29      	ldr	r3, [pc, #164]	; (8005cb8 <USBD_CDC_DeInit+0x100>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f002 fa82 	bl	8008122 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005c1e:	4b26      	ldr	r3, [pc, #152]	; (8005cb8 <USBD_CDC_DeInit+0x100>)
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	f003 020f 	and.w	r2, r3, #15
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	440b      	add	r3, r1
 8005c32:	3324      	adds	r3, #36	; 0x24
 8005c34:	2200      	movs	r2, #0
 8005c36:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005c38:	4b1f      	ldr	r3, [pc, #124]	; (8005cb8 <USBD_CDC_DeInit+0x100>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	f003 020f 	and.w	r2, r3, #15
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	3326      	adds	r3, #38	; 0x26
 8005c4e:	2200      	movs	r2, #0
 8005c50:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	32b0      	adds	r2, #176	; 0xb0
 8005c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01f      	beq.n	8005ca4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	33b0      	adds	r3, #176	; 0xb0
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	32b0      	adds	r2, #176	; 0xb0
 8005c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f002 fb56 	bl	8008338 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	32b0      	adds	r2, #176	; 0xb0
 8005c96:	2100      	movs	r1, #0
 8005c98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	20000093 	.word	0x20000093
 8005cb4:	20000094 	.word	0x20000094
 8005cb8:	20000095 	.word	0x20000095

08005cbc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	32b0      	adds	r2, #176	; 0xb0
 8005cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e0bf      	b.n	8005e6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d050      	beq.n	8005d9a <USBD_CDC_Setup+0xde>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	f040 80af 	bne.w	8005e5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	88db      	ldrh	r3, [r3, #6]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d03a      	beq.n	8005d7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	b25b      	sxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	da1b      	bge.n	8005d48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	33b0      	adds	r3, #176	; 0xb0
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4413      	add	r3, r2
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005d26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	88d2      	ldrh	r2, [r2, #6]
 8005d2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	88db      	ldrh	r3, [r3, #6]
 8005d32:	2b07      	cmp	r3, #7
 8005d34:	bf28      	it	cs
 8005d36:	2307      	movcs	r3, #7
 8005d38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	89fa      	ldrh	r2, [r7, #14]
 8005d3e:	4619      	mov	r1, r3
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f001 fd89 	bl	8007858 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005d46:	e090      	b.n	8005e6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	785a      	ldrb	r2, [r3, #1]
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	88db      	ldrh	r3, [r3, #6]
 8005d56:	2b3f      	cmp	r3, #63	; 0x3f
 8005d58:	d803      	bhi.n	8005d62 <USBD_CDC_Setup+0xa6>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	88db      	ldrh	r3, [r3, #6]
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	e000      	b.n	8005d64 <USBD_CDC_Setup+0xa8>
 8005d62:	2240      	movs	r2, #64	; 0x40
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005d6a:	6939      	ldr	r1, [r7, #16]
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005d72:	461a      	mov	r2, r3
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f001 fd9b 	bl	80078b0 <USBD_CtlPrepareRx>
      break;
 8005d7a:	e076      	b.n	8005e6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	33b0      	adds	r3, #176	; 0xb0
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	7850      	ldrb	r0, [r2, #1]
 8005d92:	2200      	movs	r2, #0
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	4798      	blx	r3
      break;
 8005d98:	e067      	b.n	8005e6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	785b      	ldrb	r3, [r3, #1]
 8005d9e:	2b0b      	cmp	r3, #11
 8005da0:	d851      	bhi.n	8005e46 <USBD_CDC_Setup+0x18a>
 8005da2:	a201      	add	r2, pc, #4	; (adr r2, 8005da8 <USBD_CDC_Setup+0xec>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005dd9 	.word	0x08005dd9
 8005dac:	08005e55 	.word	0x08005e55
 8005db0:	08005e47 	.word	0x08005e47
 8005db4:	08005e47 	.word	0x08005e47
 8005db8:	08005e47 	.word	0x08005e47
 8005dbc:	08005e47 	.word	0x08005e47
 8005dc0:	08005e47 	.word	0x08005e47
 8005dc4:	08005e47 	.word	0x08005e47
 8005dc8:	08005e47 	.word	0x08005e47
 8005dcc:	08005e47 	.word	0x08005e47
 8005dd0:	08005e03 	.word	0x08005e03
 8005dd4:	08005e2d 	.word	0x08005e2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d107      	bne.n	8005df4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005de4:	f107 030a 	add.w	r3, r7, #10
 8005de8:	2202      	movs	r2, #2
 8005dea:	4619      	mov	r1, r3
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f001 fd33 	bl	8007858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005df2:	e032      	b.n	8005e5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f001 fcbd 	bl	8007776 <USBD_CtlError>
            ret = USBD_FAIL;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	75fb      	strb	r3, [r7, #23]
          break;
 8005e00:	e02b      	b.n	8005e5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d107      	bne.n	8005e1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005e0e:	f107 030d 	add.w	r3, r7, #13
 8005e12:	2201      	movs	r2, #1
 8005e14:	4619      	mov	r1, r3
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f001 fd1e 	bl	8007858 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e1c:	e01d      	b.n	8005e5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005e1e:	6839      	ldr	r1, [r7, #0]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f001 fca8 	bl	8007776 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e26:	2303      	movs	r3, #3
 8005e28:	75fb      	strb	r3, [r7, #23]
          break;
 8005e2a:	e016      	b.n	8005e5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d00f      	beq.n	8005e58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f001 fc9b 	bl	8007776 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e40:	2303      	movs	r3, #3
 8005e42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e44:	e008      	b.n	8005e58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e46:	6839      	ldr	r1, [r7, #0]
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f001 fc94 	bl	8007776 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	75fb      	strb	r3, [r7, #23]
          break;
 8005e52:	e002      	b.n	8005e5a <USBD_CDC_Setup+0x19e>
          break;
 8005e54:	bf00      	nop
 8005e56:	e008      	b.n	8005e6a <USBD_CDC_Setup+0x1ae>
          break;
 8005e58:	bf00      	nop
      }
      break;
 8005e5a:	e006      	b.n	8005e6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f001 fc89 	bl	8007776 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e64:	2303      	movs	r3, #3
 8005e66:	75fb      	strb	r3, [r7, #23]
      break;
 8005e68:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3718      	adds	r7, #24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005e86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	32b0      	adds	r2, #176	; 0xb0
 8005e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e065      	b.n	8005f6a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	32b0      	adds	r2, #176	; 0xb0
 8005ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	f003 020f 	and.w	r2, r3, #15
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	3318      	adds	r3, #24
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d02f      	beq.n	8005f28 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	f003 020f 	and.w	r2, r3, #15
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4413      	add	r3, r2
 8005ed6:	009b      	lsls	r3, r3, #2
 8005ed8:	440b      	add	r3, r1
 8005eda:	3318      	adds	r3, #24
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	f003 010f 	and.w	r1, r3, #15
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	440b      	add	r3, r1
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	4403      	add	r3, r0
 8005ef0:	331c      	adds	r3, #28
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ef8:	fb01 f303 	mul.w	r3, r1, r3
 8005efc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d112      	bne.n	8005f28 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	f003 020f 	and.w	r2, r3, #15
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	440b      	add	r3, r1
 8005f14:	3318      	adds	r3, #24
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005f1a:	78f9      	ldrb	r1, [r7, #3]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	2200      	movs	r2, #0
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f002 f9a6 	bl	8008272 <USBD_LL_Transmit>
 8005f26:	e01f      	b.n	8005f68 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	33b0      	adds	r3, #176	; 0xb0
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d010      	beq.n	8005f68 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	33b0      	adds	r3, #176	; 0xb0
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	32b0      	adds	r2, #176	; 0xb0
 8005f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	32b0      	adds	r2, #176	; 0xb0
 8005f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d101      	bne.n	8005fa4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e01a      	b.n	8005fda <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f002 f9a4 	bl	80082f6 <USBD_LL_GetRxDataSize>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	33b0      	adds	r3, #176	; 0xb0
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	32b0      	adds	r2, #176	; 0xb0
 8005ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006000:	2303      	movs	r3, #3
 8006002:	e025      	b.n	8006050 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	33b0      	adds	r3, #176	; 0xb0
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01a      	beq.n	800604e <USBD_CDC_EP0_RxReady+0x6c>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800601e:	2bff      	cmp	r3, #255	; 0xff
 8006020:	d015      	beq.n	800604e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	33b0      	adds	r3, #176	; 0xb0
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800603a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006042:	b292      	uxth	r2, r2
 8006044:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	22ff      	movs	r2, #255	; 0xff
 800604a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b086      	sub	sp, #24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006060:	2182      	movs	r1, #130	; 0x82
 8006062:	4818      	ldr	r0, [pc, #96]	; (80060c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006064:	f000 fd4f 	bl	8006b06 <USBD_GetEpDesc>
 8006068:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800606a:	2101      	movs	r1, #1
 800606c:	4815      	ldr	r0, [pc, #84]	; (80060c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800606e:	f000 fd4a 	bl	8006b06 <USBD_GetEpDesc>
 8006072:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006074:	2181      	movs	r1, #129	; 0x81
 8006076:	4813      	ldr	r0, [pc, #76]	; (80060c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006078:	f000 fd45 	bl	8006b06 <USBD_GetEpDesc>
 800607c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2210      	movs	r2, #16
 8006088:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d006      	beq.n	800609e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2200      	movs	r2, #0
 8006094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006098:	711a      	strb	r2, [r3, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d006      	beq.n	80060b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ac:	711a      	strb	r2, [r3, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2243      	movs	r2, #67	; 0x43
 80060b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060b8:	4b02      	ldr	r3, [pc, #8]	; (80060c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000050 	.word	0x20000050

080060c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80060d0:	2182      	movs	r1, #130	; 0x82
 80060d2:	4818      	ldr	r0, [pc, #96]	; (8006134 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060d4:	f000 fd17 	bl	8006b06 <USBD_GetEpDesc>
 80060d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060da:	2101      	movs	r1, #1
 80060dc:	4815      	ldr	r0, [pc, #84]	; (8006134 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060de:	f000 fd12 	bl	8006b06 <USBD_GetEpDesc>
 80060e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060e4:	2181      	movs	r1, #129	; 0x81
 80060e6:	4813      	ldr	r0, [pc, #76]	; (8006134 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060e8:	f000 fd0d 	bl	8006b06 <USBD_GetEpDesc>
 80060ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d002      	beq.n	80060fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	2210      	movs	r2, #16
 80060f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d006      	beq.n	800610e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2200      	movs	r2, #0
 8006104:	711a      	strb	r2, [r3, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f042 0202 	orr.w	r2, r2, #2
 800610c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d006      	beq.n	8006122 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2200      	movs	r2, #0
 8006118:	711a      	strb	r2, [r3, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	f042 0202 	orr.w	r2, r2, #2
 8006120:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2243      	movs	r2, #67	; 0x43
 8006126:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006128:	4b02      	ldr	r3, [pc, #8]	; (8006134 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20000050 	.word	0x20000050

08006138 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006140:	2182      	movs	r1, #130	; 0x82
 8006142:	4818      	ldr	r0, [pc, #96]	; (80061a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006144:	f000 fcdf 	bl	8006b06 <USBD_GetEpDesc>
 8006148:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800614a:	2101      	movs	r1, #1
 800614c:	4815      	ldr	r0, [pc, #84]	; (80061a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800614e:	f000 fcda 	bl	8006b06 <USBD_GetEpDesc>
 8006152:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006154:	2181      	movs	r1, #129	; 0x81
 8006156:	4813      	ldr	r0, [pc, #76]	; (80061a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006158:	f000 fcd5 	bl	8006b06 <USBD_GetEpDesc>
 800615c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2210      	movs	r2, #16
 8006168:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d006      	beq.n	800617e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2200      	movs	r2, #0
 8006174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006178:	711a      	strb	r2, [r3, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d006      	beq.n	8006192 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800618c:	711a      	strb	r2, [r3, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2243      	movs	r2, #67	; 0x43
 8006196:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006198:	4b02      	ldr	r3, [pc, #8]	; (80061a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20000050 	.word	0x20000050

080061a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	220a      	movs	r2, #10
 80061b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80061b6:	4b03      	ldr	r3, [pc, #12]	; (80061c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	2000000c 	.word	0x2000000c

080061c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80061d8:	2303      	movs	r3, #3
 80061da:	e009      	b.n	80061f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	33b0      	adds	r3, #176	; 0xb0
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	4413      	add	r3, r2
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	32b0      	adds	r2, #176	; 0xb0
 8006212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006216:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800621e:	2303      	movs	r3, #3
 8006220:	e008      	b.n	8006234 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	32b0      	adds	r2, #176	; 0xb0
 8006254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006258:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006260:	2303      	movs	r3, #3
 8006262:	e004      	b.n	800626e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3714      	adds	r7, #20
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	32b0      	adds	r2, #176	; 0xb0
 800628e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006292:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006294:	2301      	movs	r3, #1
 8006296:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800629e:	2303      	movs	r3, #3
 80062a0:	e025      	b.n	80062ee <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d11f      	bne.n	80062ec <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80062b4:	4b10      	ldr	r3, [pc, #64]	; (80062f8 <USBD_CDC_TransmitPacket+0x7c>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	f003 020f 	and.w	r2, r3, #15
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4403      	add	r3, r0
 80062ce:	3318      	adds	r3, #24
 80062d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80062d2:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <USBD_CDC_TransmitPacket+0x7c>)
 80062d4:	7819      	ldrb	r1, [r3, #0]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f001 ffc5 	bl	8008272 <USBD_LL_Transmit>

    ret = USBD_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20000093 	.word	0x20000093

080062fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	32b0      	adds	r2, #176	; 0xb0
 800630e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006312:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	32b0      	adds	r2, #176	; 0xb0
 800631e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006326:	2303      	movs	r3, #3
 8006328:	e018      	b.n	800635c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	7c1b      	ldrb	r3, [r3, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006332:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <USBD_CDC_ReceivePacket+0x68>)
 8006334:	7819      	ldrb	r1, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800633c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f001 ffb7 	bl	80082b4 <USBD_LL_PrepareReceive>
 8006346:	e008      	b.n	800635a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006348:	4b06      	ldr	r3, [pc, #24]	; (8006364 <USBD_CDC_ReceivePacket+0x68>)
 800634a:	7819      	ldrb	r1, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006352:	2340      	movs	r3, #64	; 0x40
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 ffad 	bl	80082b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20000094 	.word	0x20000094

08006368 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	4613      	mov	r3, r2
 8006374:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800637c:	2303      	movs	r3, #3
 800637e:	e01f      	b.n	80063c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	79fa      	ldrb	r2, [r7, #7]
 80063b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f001 fe27 	bl	8008008 <USBD_LL_Init>
 80063ba:	4603      	mov	r3, r0
 80063bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063be:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3718      	adds	r7, #24
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80063dc:	2303      	movs	r3, #3
 80063de:	e025      	b.n	800642c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	32ae      	adds	r2, #174	; 0xae
 80063f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00f      	beq.n	800641c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	32ae      	adds	r2, #174	; 0xae
 8006406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	f107 020e 	add.w	r2, r7, #14
 8006410:	4610      	mov	r0, r2
 8006412:	4798      	blx	r3
 8006414:	4602      	mov	r2, r0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fe2f 	bl	80080a0 <USBD_LL_Start>
 8006442:	4603      	mov	r3, r0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006454:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006478:	2b00      	cmp	r3, #0
 800647a:	d009      	beq.n	8006490 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	78fa      	ldrb	r2, [r7, #3]
 8006486:	4611      	mov	r1, r2
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
 800648c:	4603      	mov	r3, r0
 800648e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006490:	7bfb      	ldrb	r3, [r7, #15]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	460b      	mov	r3, r1
 80064a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	78fa      	ldrb	r2, [r7, #3]
 80064b4:	4611      	mov	r1, r2
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	4798      	blx	r3
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80064c0:	2303      	movs	r3, #3
 80064c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b084      	sub	sp, #16
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
 80064d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f001 f90e 	bl	8007702 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80064f4:	461a      	mov	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	2b02      	cmp	r3, #2
 8006508:	d01a      	beq.n	8006540 <USBD_LL_SetupStage+0x72>
 800650a:	2b02      	cmp	r3, #2
 800650c:	d822      	bhi.n	8006554 <USBD_LL_SetupStage+0x86>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <USBD_LL_SetupStage+0x4a>
 8006512:	2b01      	cmp	r3, #1
 8006514:	d00a      	beq.n	800652c <USBD_LL_SetupStage+0x5e>
 8006516:	e01d      	b.n	8006554 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800651e:	4619      	mov	r1, r3
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fb65 	bl	8006bf0 <USBD_StdDevReq>
 8006526:	4603      	mov	r3, r0
 8006528:	73fb      	strb	r3, [r7, #15]
      break;
 800652a:	e020      	b.n	800656e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006532:	4619      	mov	r1, r3
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fbcd 	bl	8006cd4 <USBD_StdItfReq>
 800653a:	4603      	mov	r3, r0
 800653c:	73fb      	strb	r3, [r7, #15]
      break;
 800653e:	e016      	b.n	800656e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fc2f 	bl	8006dac <USBD_StdEPReq>
 800654e:	4603      	mov	r3, r0
 8006550:	73fb      	strb	r3, [r7, #15]
      break;
 8006552:	e00c      	b.n	800656e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800655a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800655e:	b2db      	uxtb	r3, r3
 8006560:	4619      	mov	r1, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f001 fdfc 	bl	8008160 <USBD_LL_StallEP>
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]
      break;
 800656c:	bf00      	nop
  }

  return ret;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	460b      	mov	r3, r1
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800658a:	7afb      	ldrb	r3, [r7, #11]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d16e      	bne.n	800666e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006596:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800659e:	2b03      	cmp	r3, #3
 80065a0:	f040 8098 	bne.w	80066d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d913      	bls.n	80065d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	1ad2      	subs	r2, r2, r3
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	68da      	ldr	r2, [r3, #12]
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	4293      	cmp	r3, r2
 80065c8:	bf28      	it	cs
 80065ca:	4613      	movcs	r3, r2
 80065cc:	461a      	mov	r2, r3
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f001 f98a 	bl	80078ea <USBD_CtlContinueRx>
 80065d6:	e07d      	b.n	80066d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d014      	beq.n	8006610 <USBD_LL_DataOutStage+0x98>
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d81d      	bhi.n	8006626 <USBD_LL_DataOutStage+0xae>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <USBD_LL_DataOutStage+0x7c>
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d003      	beq.n	80065fa <USBD_LL_DataOutStage+0x82>
 80065f2:	e018      	b.n	8006626 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80065f4:	2300      	movs	r3, #0
 80065f6:	75bb      	strb	r3, [r7, #22]
            break;
 80065f8:	e018      	b.n	800662c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006600:	b2db      	uxtb	r3, r3
 8006602:	4619      	mov	r1, r3
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 fa64 	bl	8006ad2 <USBD_CoreFindIF>
 800660a:	4603      	mov	r3, r0
 800660c:	75bb      	strb	r3, [r7, #22]
            break;
 800660e:	e00d      	b.n	800662c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006616:	b2db      	uxtb	r3, r3
 8006618:	4619      	mov	r1, r3
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 fa66 	bl	8006aec <USBD_CoreFindEP>
 8006620:	4603      	mov	r3, r0
 8006622:	75bb      	strb	r3, [r7, #22]
            break;
 8006624:	e002      	b.n	800662c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	75bb      	strb	r3, [r7, #22]
            break;
 800662a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800662c:	7dbb      	ldrb	r3, [r7, #22]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d119      	bne.n	8006666 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b03      	cmp	r3, #3
 800663c:	d113      	bne.n	8006666 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800663e:	7dba      	ldrb	r2, [r7, #22]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	32ae      	adds	r2, #174	; 0xae
 8006644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00b      	beq.n	8006666 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800664e:	7dba      	ldrb	r2, [r7, #22]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006656:	7dba      	ldrb	r2, [r7, #22]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	32ae      	adds	r2, #174	; 0xae
 800665c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f001 f950 	bl	800790c <USBD_CtlSendStatus>
 800666c:	e032      	b.n	80066d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800666e:	7afb      	ldrb	r3, [r7, #11]
 8006670:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006674:	b2db      	uxtb	r3, r3
 8006676:	4619      	mov	r1, r3
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 fa37 	bl	8006aec <USBD_CoreFindEP>
 800667e:	4603      	mov	r3, r0
 8006680:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006682:	7dbb      	ldrb	r3, [r7, #22]
 8006684:	2bff      	cmp	r3, #255	; 0xff
 8006686:	d025      	beq.n	80066d4 <USBD_LL_DataOutStage+0x15c>
 8006688:	7dbb      	ldrb	r3, [r7, #22]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d122      	bne.n	80066d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b03      	cmp	r3, #3
 8006698:	d117      	bne.n	80066ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800669a:	7dba      	ldrb	r2, [r7, #22]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	32ae      	adds	r2, #174	; 0xae
 80066a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00f      	beq.n	80066ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80066aa:	7dba      	ldrb	r2, [r7, #22]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80066b2:	7dba      	ldrb	r2, [r7, #22]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	32ae      	adds	r2, #174	; 0xae
 80066b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	7afa      	ldrb	r2, [r7, #11]
 80066c0:	4611      	mov	r1, r2
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	4798      	blx	r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80066ca:	7dfb      	ldrb	r3, [r7, #23]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d001      	beq.n	80066d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
 80066d2:	e000      	b.n	80066d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3718      	adds	r7, #24
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	460b      	mov	r3, r1
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80066ec:	7afb      	ldrb	r3, [r7, #11]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d16f      	bne.n	80067d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	3314      	adds	r3, #20
 80066f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d15a      	bne.n	80067b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	429a      	cmp	r2, r3
 800670c:	d914      	bls.n	8006738 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	1ad2      	subs	r2, r2, r3
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	461a      	mov	r2, r3
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f001 f8b2 	bl	800788e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800672a:	2300      	movs	r3, #0
 800672c:	2200      	movs	r2, #0
 800672e:	2100      	movs	r1, #0
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f001 fdbf 	bl	80082b4 <USBD_LL_PrepareReceive>
 8006736:	e03f      	b.n	80067b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	68da      	ldr	r2, [r3, #12]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	429a      	cmp	r2, r3
 8006742:	d11c      	bne.n	800677e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	685a      	ldr	r2, [r3, #4]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800674c:	429a      	cmp	r2, r3
 800674e:	d316      	bcc.n	800677e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	685a      	ldr	r2, [r3, #4]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800675a:	429a      	cmp	r2, r3
 800675c:	d20f      	bcs.n	800677e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800675e:	2200      	movs	r2, #0
 8006760:	2100      	movs	r1, #0
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f001 f893 	bl	800788e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006770:	2300      	movs	r3, #0
 8006772:	2200      	movs	r2, #0
 8006774:	2100      	movs	r1, #0
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f001 fd9c 	bl	80082b4 <USBD_LL_PrepareReceive>
 800677c:	e01c      	b.n	80067b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b03      	cmp	r3, #3
 8006788:	d10f      	bne.n	80067aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d009      	beq.n	80067aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80067aa:	2180      	movs	r1, #128	; 0x80
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f001 fcd7 	bl	8008160 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f001 f8bd 	bl	8007932 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d03a      	beq.n	8006838 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff fe42 	bl	800644c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067d0:	e032      	b.n	8006838 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80067d2:	7afb      	ldrb	r3, [r7, #11]
 80067d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	4619      	mov	r1, r3
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f000 f985 	bl	8006aec <USBD_CoreFindEP>
 80067e2:	4603      	mov	r3, r0
 80067e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067e6:	7dfb      	ldrb	r3, [r7, #23]
 80067e8:	2bff      	cmp	r3, #255	; 0xff
 80067ea:	d025      	beq.n	8006838 <USBD_LL_DataInStage+0x15a>
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d122      	bne.n	8006838 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d11c      	bne.n	8006838 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80067fe:	7dfa      	ldrb	r2, [r7, #23]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	32ae      	adds	r2, #174	; 0xae
 8006804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d014      	beq.n	8006838 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800680e:	7dfa      	ldrb	r2, [r7, #23]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006816:	7dfa      	ldrb	r2, [r7, #23]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	32ae      	adds	r2, #174	; 0xae
 800681c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	7afa      	ldrb	r2, [r7, #11]
 8006824:	4611      	mov	r1, r2
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	4798      	blx	r3
 800682a:	4603      	mov	r3, r0
 800682c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800682e:	7dbb      	ldrb	r3, [r7, #22]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006834:	7dbb      	ldrb	r3, [r7, #22]
 8006836:	e000      	b.n	800683a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d014      	beq.n	80068a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00e      	beq.n	80068a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6852      	ldr	r2, [r2, #4]
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	4611      	mov	r1, r2
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80068a4:	2303      	movs	r3, #3
 80068a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068a8:	2340      	movs	r3, #64	; 0x40
 80068aa:	2200      	movs	r2, #0
 80068ac:	2100      	movs	r1, #0
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f001 fc11 	bl	80080d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2240      	movs	r2, #64	; 0x40
 80068c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068c4:	2340      	movs	r3, #64	; 0x40
 80068c6:	2200      	movs	r2, #0
 80068c8:	2180      	movs	r1, #128	; 0x80
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fc03 	bl	80080d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2240      	movs	r2, #64	; 0x40
 80068da:	621a      	str	r2, [r3, #32]

  return ret;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	460b      	mov	r3, r1
 80068f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	78fa      	ldrb	r2, [r7, #3]
 80068f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	370c      	adds	r7, #12
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr

08006906 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006906:	b480      	push	{r7}
 8006908:	b083      	sub	sp, #12
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b04      	cmp	r3, #4
 8006918:	d006      	beq.n	8006928 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006920:	b2da      	uxtb	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2204      	movs	r2, #4
 800692c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800693e:	b480      	push	{r7}
 8006940:	b083      	sub	sp, #12
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b04      	cmp	r3, #4
 8006950:	d106      	bne.n	8006960 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006958:	b2da      	uxtb	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	370c      	adds	r7, #12
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr

0800696e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b082      	sub	sp, #8
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800697c:	b2db      	uxtb	r3, r3
 800697e:	2b03      	cmp	r3, #3
 8006980:	d110      	bne.n	80069a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006988:	2b00      	cmp	r3, #0
 800698a:	d00b      	beq.n	80069a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006992:	69db      	ldr	r3, [r3, #28]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d005      	beq.n	80069a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b082      	sub	sp, #8
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	460b      	mov	r3, r1
 80069b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	32ae      	adds	r2, #174	; 0xae
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e01c      	b.n	8006a0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d115      	bne.n	8006a08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	32ae      	adds	r2, #174	; 0xae
 80069e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00b      	beq.n	8006a08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	32ae      	adds	r2, #174	; 0xae
 80069fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	78fa      	ldrb	r2, [r7, #3]
 8006a02:	4611      	mov	r1, r2
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}

08006a12 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006a12:	b580      	push	{r7, lr}
 8006a14:	b082      	sub	sp, #8
 8006a16:	af00      	add	r7, sp, #0
 8006a18:	6078      	str	r0, [r7, #4]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	32ae      	adds	r2, #174	; 0xae
 8006a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e01c      	b.n	8006a6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d115      	bne.n	8006a6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	32ae      	adds	r2, #174	; 0xae
 8006a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00b      	beq.n	8006a6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	32ae      	adds	r2, #174	; 0xae
 8006a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a64:	78fa      	ldrb	r2, [r7, #3]
 8006a66:	4611      	mov	r1, r2
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00e      	beq.n	8006ac8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	687a      	ldr	r2, [r7, #4]
 8006ab4:	6852      	ldr	r2, [r2, #4]
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	4611      	mov	r1, r2
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	4798      	blx	r3
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b083      	sub	sp, #12
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ade:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006af8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b086      	sub	sp, #24
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	885b      	ldrh	r3, [r3, #2]
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d920      	bls.n	8006b70 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006b36:	e013      	b.n	8006b60 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006b38:	f107 030a 	add.w	r3, r7, #10
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6978      	ldr	r0, [r7, #20]
 8006b40:	f000 f81b 	bl	8006b7a <USBD_GetNextDesc>
 8006b44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b05      	cmp	r3, #5
 8006b4c:	d108      	bne.n	8006b60 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	789b      	ldrb	r3, [r3, #2]
 8006b56:	78fa      	ldrb	r2, [r7, #3]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d008      	beq.n	8006b6e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	885b      	ldrh	r3, [r3, #2]
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	897b      	ldrh	r3, [r7, #10]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d8e5      	bhi.n	8006b38 <USBD_GetEpDesc+0x32>
 8006b6c:	e000      	b.n	8006b70 <USBD_GetEpDesc+0x6a>
          break;
 8006b6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006b70:	693b      	ldr	r3, [r7, #16]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	881a      	ldrh	r2, [r3, #0]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	4413      	add	r3, r2
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3714      	adds	r7, #20
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006bd2:	8a3b      	ldrh	r3, [r7, #16]
 8006bd4:	021b      	lsls	r3, r3, #8
 8006bd6:	b21a      	sxth	r2, r3
 8006bd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	b21b      	sxth	r3, r3
 8006be0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006be2:	89fb      	ldrh	r3, [r7, #14]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c06:	2b40      	cmp	r3, #64	; 0x40
 8006c08:	d005      	beq.n	8006c16 <USBD_StdDevReq+0x26>
 8006c0a:	2b40      	cmp	r3, #64	; 0x40
 8006c0c:	d857      	bhi.n	8006cbe <USBD_StdDevReq+0xce>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d00f      	beq.n	8006c32 <USBD_StdDevReq+0x42>
 8006c12:	2b20      	cmp	r3, #32
 8006c14:	d153      	bne.n	8006cbe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	32ae      	adds	r2, #174	; 0xae
 8006c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	6839      	ldr	r1, [r7, #0]
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c30:	e04a      	b.n	8006cc8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	785b      	ldrb	r3, [r3, #1]
 8006c36:	2b09      	cmp	r3, #9
 8006c38:	d83b      	bhi.n	8006cb2 <USBD_StdDevReq+0xc2>
 8006c3a:	a201      	add	r2, pc, #4	; (adr r2, 8006c40 <USBD_StdDevReq+0x50>)
 8006c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c40:	08006c95 	.word	0x08006c95
 8006c44:	08006ca9 	.word	0x08006ca9
 8006c48:	08006cb3 	.word	0x08006cb3
 8006c4c:	08006c9f 	.word	0x08006c9f
 8006c50:	08006cb3 	.word	0x08006cb3
 8006c54:	08006c73 	.word	0x08006c73
 8006c58:	08006c69 	.word	0x08006c69
 8006c5c:	08006cb3 	.word	0x08006cb3
 8006c60:	08006c8b 	.word	0x08006c8b
 8006c64:	08006c7d 	.word	0x08006c7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fa3c 	bl	80070e8 <USBD_GetDescriptor>
          break;
 8006c70:	e024      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fba1 	bl	80073bc <USBD_SetAddress>
          break;
 8006c7a:	e01f      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fbe0 	bl	8007444 <USBD_SetConfig>
 8006c84:	4603      	mov	r3, r0
 8006c86:	73fb      	strb	r3, [r7, #15]
          break;
 8006c88:	e018      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fc83 	bl	8007598 <USBD_GetConfig>
          break;
 8006c92:	e013      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fcb4 	bl	8007604 <USBD_GetStatus>
          break;
 8006c9c:	e00e      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fce3 	bl	800766c <USBD_SetFeature>
          break;
 8006ca6:	e009      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fd07 	bl	80076be <USBD_ClrFeature>
          break;
 8006cb0:	e004      	b.n	8006cbc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006cb2:	6839      	ldr	r1, [r7, #0]
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 fd5e 	bl	8007776 <USBD_CtlError>
          break;
 8006cba:	bf00      	nop
      }
      break;
 8006cbc:	e004      	b.n	8006cc8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fd58 	bl	8007776 <USBD_CtlError>
      break;
 8006cc6:	bf00      	nop
  }

  return ret;
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop

08006cd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cea:	2b40      	cmp	r3, #64	; 0x40
 8006cec:	d005      	beq.n	8006cfa <USBD_StdItfReq+0x26>
 8006cee:	2b40      	cmp	r3, #64	; 0x40
 8006cf0:	d852      	bhi.n	8006d98 <USBD_StdItfReq+0xc4>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <USBD_StdItfReq+0x26>
 8006cf6:	2b20      	cmp	r3, #32
 8006cf8:	d14e      	bne.n	8006d98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	3b01      	subs	r3, #1
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d840      	bhi.n	8006d8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	889b      	ldrh	r3, [r3, #4]
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d836      	bhi.n	8006d80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	889b      	ldrh	r3, [r3, #4]
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff fed9 	bl	8006ad2 <USBD_CoreFindIF>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d24:	7bbb      	ldrb	r3, [r7, #14]
 8006d26:	2bff      	cmp	r3, #255	; 0xff
 8006d28:	d01d      	beq.n	8006d66 <USBD_StdItfReq+0x92>
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d11a      	bne.n	8006d66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006d30:	7bba      	ldrb	r2, [r7, #14]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	32ae      	adds	r2, #174	; 0xae
 8006d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00f      	beq.n	8006d60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006d40:	7bba      	ldrb	r2, [r7, #14]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d48:	7bba      	ldrb	r2, [r7, #14]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	32ae      	adds	r2, #174	; 0xae
 8006d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	4798      	blx	r3
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d5e:	e004      	b.n	8006d6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006d60:	2303      	movs	r3, #3
 8006d62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006d64:	e001      	b.n	8006d6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006d66:	2303      	movs	r3, #3
 8006d68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	88db      	ldrh	r3, [r3, #6]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d110      	bne.n	8006d94 <USBD_StdItfReq+0xc0>
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10d      	bne.n	8006d94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fdc7 	bl	800790c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d7e:	e009      	b.n	8006d94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006d80:	6839      	ldr	r1, [r7, #0]
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 fcf7 	bl	8007776 <USBD_CtlError>
          break;
 8006d88:	e004      	b.n	8006d94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fcf2 	bl	8007776 <USBD_CtlError>
          break;
 8006d92:	e000      	b.n	8006d96 <USBD_StdItfReq+0xc2>
          break;
 8006d94:	bf00      	nop
      }
      break;
 8006d96:	e004      	b.n	8006da2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006d98:	6839      	ldr	r1, [r7, #0]
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 fceb 	bl	8007776 <USBD_CtlError>
      break;
 8006da0:	bf00      	nop
  }

  return ret;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	889b      	ldrh	r3, [r3, #4]
 8006dbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006dc8:	2b40      	cmp	r3, #64	; 0x40
 8006dca:	d007      	beq.n	8006ddc <USBD_StdEPReq+0x30>
 8006dcc:	2b40      	cmp	r3, #64	; 0x40
 8006dce:	f200 817f 	bhi.w	80070d0 <USBD_StdEPReq+0x324>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d02a      	beq.n	8006e2c <USBD_StdEPReq+0x80>
 8006dd6:	2b20      	cmp	r3, #32
 8006dd8:	f040 817a 	bne.w	80070d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff fe83 	bl	8006aec <USBD_CoreFindEP>
 8006de6:	4603      	mov	r3, r0
 8006de8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dea:	7b7b      	ldrb	r3, [r7, #13]
 8006dec:	2bff      	cmp	r3, #255	; 0xff
 8006dee:	f000 8174 	beq.w	80070da <USBD_StdEPReq+0x32e>
 8006df2:	7b7b      	ldrb	r3, [r7, #13]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f040 8170 	bne.w	80070da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006dfa:	7b7a      	ldrb	r2, [r7, #13]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006e02:	7b7a      	ldrb	r2, [r7, #13]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	32ae      	adds	r2, #174	; 0xae
 8006e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 8163 	beq.w	80070da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006e14:	7b7a      	ldrb	r2, [r7, #13]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	32ae      	adds	r2, #174	; 0xae
 8006e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
 8006e26:	4603      	mov	r3, r0
 8006e28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e2a:	e156      	b.n	80070da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	785b      	ldrb	r3, [r3, #1]
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d008      	beq.n	8006e46 <USBD_StdEPReq+0x9a>
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	f300 8145 	bgt.w	80070c4 <USBD_StdEPReq+0x318>
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 809b 	beq.w	8006f76 <USBD_StdEPReq+0x1ca>
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d03c      	beq.n	8006ebe <USBD_StdEPReq+0x112>
 8006e44:	e13e      	b.n	80070c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d002      	beq.n	8006e58 <USBD_StdEPReq+0xac>
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d016      	beq.n	8006e84 <USBD_StdEPReq+0xd8>
 8006e56:	e02c      	b.n	8006eb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00d      	beq.n	8006e7a <USBD_StdEPReq+0xce>
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	2b80      	cmp	r3, #128	; 0x80
 8006e62:	d00a      	beq.n	8006e7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 f979 	bl	8008160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e6e:	2180      	movs	r1, #128	; 0x80
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 f975 	bl	8008160 <USBD_LL_StallEP>
 8006e76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e78:	e020      	b.n	8006ebc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fc7a 	bl	8007776 <USBD_CtlError>
              break;
 8006e82:	e01b      	b.n	8006ebc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	885b      	ldrh	r3, [r3, #2]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10e      	bne.n	8006eaa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00b      	beq.n	8006eaa <USBD_StdEPReq+0xfe>
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
 8006e94:	2b80      	cmp	r3, #128	; 0x80
 8006e96:	d008      	beq.n	8006eaa <USBD_StdEPReq+0xfe>
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	88db      	ldrh	r3, [r3, #6]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 f95b 	bl	8008160 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fd2e 	bl	800790c <USBD_CtlSendStatus>

              break;
 8006eb0:	e004      	b.n	8006ebc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fc5e 	bl	8007776 <USBD_CtlError>
              break;
 8006eba:	bf00      	nop
          }
          break;
 8006ebc:	e107      	b.n	80070ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d002      	beq.n	8006ed0 <USBD_StdEPReq+0x124>
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d016      	beq.n	8006efc <USBD_StdEPReq+0x150>
 8006ece:	e04b      	b.n	8006f68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ed0:	7bbb      	ldrb	r3, [r7, #14]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d00d      	beq.n	8006ef2 <USBD_StdEPReq+0x146>
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	2b80      	cmp	r3, #128	; 0x80
 8006eda:	d00a      	beq.n	8006ef2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006edc:	7bbb      	ldrb	r3, [r7, #14]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 f93d 	bl	8008160 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ee6:	2180      	movs	r1, #128	; 0x80
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 f939 	bl	8008160 <USBD_LL_StallEP>
 8006eee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ef0:	e040      	b.n	8006f74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ef2:	6839      	ldr	r1, [r7, #0]
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fc3e 	bl	8007776 <USBD_CtlError>
              break;
 8006efa:	e03b      	b.n	8006f74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	885b      	ldrh	r3, [r3, #2]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d136      	bne.n	8006f72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d004      	beq.n	8006f18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006f0e:	7bbb      	ldrb	r3, [r7, #14]
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f001 f943 	bl	800819e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fcf7 	bl	800790c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	4619      	mov	r1, r3
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7ff fde2 	bl	8006aec <USBD_CoreFindEP>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f2c:	7b7b      	ldrb	r3, [r7, #13]
 8006f2e:	2bff      	cmp	r3, #255	; 0xff
 8006f30:	d01f      	beq.n	8006f72 <USBD_StdEPReq+0x1c6>
 8006f32:	7b7b      	ldrb	r3, [r7, #13]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d11c      	bne.n	8006f72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006f38:	7b7a      	ldrb	r2, [r7, #13]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006f40:	7b7a      	ldrb	r2, [r7, #13]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	32ae      	adds	r2, #174	; 0xae
 8006f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d010      	beq.n	8006f72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f50:	7b7a      	ldrb	r2, [r7, #13]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	32ae      	adds	r2, #174	; 0xae
 8006f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	4798      	blx	r3
 8006f62:	4603      	mov	r3, r0
 8006f64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006f66:	e004      	b.n	8006f72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006f68:	6839      	ldr	r1, [r7, #0]
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fc03 	bl	8007776 <USBD_CtlError>
              break;
 8006f70:	e000      	b.n	8006f74 <USBD_StdEPReq+0x1c8>
              break;
 8006f72:	bf00      	nop
          }
          break;
 8006f74:	e0ab      	b.n	80070ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d002      	beq.n	8006f88 <USBD_StdEPReq+0x1dc>
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d032      	beq.n	8006fec <USBD_StdEPReq+0x240>
 8006f86:	e097      	b.n	80070b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f88:	7bbb      	ldrb	r3, [r7, #14]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d007      	beq.n	8006f9e <USBD_StdEPReq+0x1f2>
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
 8006f90:	2b80      	cmp	r3, #128	; 0x80
 8006f92:	d004      	beq.n	8006f9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fbed 	bl	8007776 <USBD_CtlError>
                break;
 8006f9c:	e091      	b.n	80070c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	da0b      	bge.n	8006fbe <USBD_StdEPReq+0x212>
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fac:	4613      	mov	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4413      	add	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	3310      	adds	r3, #16
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	4413      	add	r3, r2
 8006fba:	3304      	adds	r3, #4
 8006fbc:	e00b      	b.n	8006fd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fc4:	4613      	mov	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	4413      	add	r3, r2
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc37 	bl	8007858 <USBD_CtlSendData>
              break;
 8006fea:	e06a      	b.n	80070c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006fec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	da11      	bge.n	8007018 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	f003 020f 	and.w	r2, r3, #15
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	3324      	adds	r3, #36	; 0x24
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d117      	bne.n	800703e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fbb0 	bl	8007776 <USBD_CtlError>
                  break;
 8007016:	e054      	b.n	80070c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007018:	7bbb      	ldrb	r3, [r7, #14]
 800701a:	f003 020f 	and.w	r2, r3, #15
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	4613      	mov	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	4413      	add	r3, r2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	440b      	add	r3, r1
 800702a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d104      	bne.n	800703e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007034:	6839      	ldr	r1, [r7, #0]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fb9d 	bl	8007776 <USBD_CtlError>
                  break;
 800703c:	e041      	b.n	80070c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800703e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007042:	2b00      	cmp	r3, #0
 8007044:	da0b      	bge.n	800705e <USBD_StdEPReq+0x2b2>
 8007046:	7bbb      	ldrb	r3, [r7, #14]
 8007048:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800704c:	4613      	mov	r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	3310      	adds	r3, #16
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4413      	add	r3, r2
 800705a:	3304      	adds	r3, #4
 800705c:	e00b      	b.n	8007076 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007064:	4613      	mov	r3, r2
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	4413      	add	r3, r2
 8007074:	3304      	adds	r3, #4
 8007076:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <USBD_StdEPReq+0x2d8>
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	2b80      	cmp	r3, #128	; 0x80
 8007082:	d103      	bne.n	800708c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2200      	movs	r2, #0
 8007088:	601a      	str	r2, [r3, #0]
 800708a:	e00e      	b.n	80070aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	4619      	mov	r1, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 f8a3 	bl	80081dc <USBD_LL_IsStallEP>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d003      	beq.n	80070a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2201      	movs	r2, #1
 80070a0:	601a      	str	r2, [r3, #0]
 80070a2:	e002      	b.n	80070aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2200      	movs	r2, #0
 80070a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2202      	movs	r2, #2
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fbd1 	bl	8007858 <USBD_CtlSendData>
              break;
 80070b6:	e004      	b.n	80070c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fb5b 	bl	8007776 <USBD_CtlError>
              break;
 80070c0:	bf00      	nop
          }
          break;
 80070c2:	e004      	b.n	80070ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fb55 	bl	8007776 <USBD_CtlError>
          break;
 80070cc:	bf00      	nop
      }
      break;
 80070ce:	e005      	b.n	80070dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80070d0:	6839      	ldr	r1, [r7, #0]
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fb4f 	bl	8007776 <USBD_CtlError>
      break;
 80070d8:	e000      	b.n	80070dc <USBD_StdEPReq+0x330>
      break;
 80070da:	bf00      	nop
  }

  return ret;
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80070f2:	2300      	movs	r3, #0
 80070f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80070f6:	2300      	movs	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	885b      	ldrh	r3, [r3, #2]
 8007102:	0a1b      	lsrs	r3, r3, #8
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	2b06      	cmp	r3, #6
 800710a:	f200 8128 	bhi.w	800735e <USBD_GetDescriptor+0x276>
 800710e:	a201      	add	r2, pc, #4	; (adr r2, 8007114 <USBD_GetDescriptor+0x2c>)
 8007110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007114:	08007131 	.word	0x08007131
 8007118:	08007149 	.word	0x08007149
 800711c:	08007189 	.word	0x08007189
 8007120:	0800735f 	.word	0x0800735f
 8007124:	0800735f 	.word	0x0800735f
 8007128:	080072ff 	.word	0x080072ff
 800712c:	0800732b 	.word	0x0800732b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	7c12      	ldrb	r2, [r2, #16]
 800713c:	f107 0108 	add.w	r1, r7, #8
 8007140:	4610      	mov	r0, r2
 8007142:	4798      	blx	r3
 8007144:	60f8      	str	r0, [r7, #12]
      break;
 8007146:	e112      	b.n	800736e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	7c1b      	ldrb	r3, [r3, #16]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10d      	bne.n	800716c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007158:	f107 0208 	add.w	r2, r7, #8
 800715c:	4610      	mov	r0, r2
 800715e:	4798      	blx	r3
 8007160:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3301      	adds	r3, #1
 8007166:	2202      	movs	r2, #2
 8007168:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800716a:	e100      	b.n	800736e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	f107 0208 	add.w	r2, r7, #8
 8007178:	4610      	mov	r0, r2
 800717a:	4798      	blx	r3
 800717c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3301      	adds	r3, #1
 8007182:	2202      	movs	r2, #2
 8007184:	701a      	strb	r2, [r3, #0]
      break;
 8007186:	e0f2      	b.n	800736e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	885b      	ldrh	r3, [r3, #2]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b05      	cmp	r3, #5
 8007190:	f200 80ac 	bhi.w	80072ec <USBD_GetDescriptor+0x204>
 8007194:	a201      	add	r2, pc, #4	; (adr r2, 800719c <USBD_GetDescriptor+0xb4>)
 8007196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719a:	bf00      	nop
 800719c:	080071b5 	.word	0x080071b5
 80071a0:	080071e9 	.word	0x080071e9
 80071a4:	0800721d 	.word	0x0800721d
 80071a8:	08007251 	.word	0x08007251
 80071ac:	08007285 	.word	0x08007285
 80071b0:	080072b9 	.word	0x080072b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	7c12      	ldrb	r2, [r2, #16]
 80071cc:	f107 0108 	add.w	r1, r7, #8
 80071d0:	4610      	mov	r0, r2
 80071d2:	4798      	blx	r3
 80071d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071d6:	e091      	b.n	80072fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 facb 	bl	8007776 <USBD_CtlError>
            err++;
 80071e0:	7afb      	ldrb	r3, [r7, #11]
 80071e2:	3301      	adds	r3, #1
 80071e4:	72fb      	strb	r3, [r7, #11]
          break;
 80071e6:	e089      	b.n	80072fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d00b      	beq.n	800720c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	7c12      	ldrb	r2, [r2, #16]
 8007200:	f107 0108 	add.w	r1, r7, #8
 8007204:	4610      	mov	r0, r2
 8007206:	4798      	blx	r3
 8007208:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800720a:	e077      	b.n	80072fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800720c:	6839      	ldr	r1, [r7, #0]
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fab1 	bl	8007776 <USBD_CtlError>
            err++;
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	3301      	adds	r3, #1
 8007218:	72fb      	strb	r3, [r7, #11]
          break;
 800721a:	e06f      	b.n	80072fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00b      	beq.n	8007240 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	7c12      	ldrb	r2, [r2, #16]
 8007234:	f107 0108 	add.w	r1, r7, #8
 8007238:	4610      	mov	r0, r2
 800723a:	4798      	blx	r3
 800723c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800723e:	e05d      	b.n	80072fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 fa97 	bl	8007776 <USBD_CtlError>
            err++;
 8007248:	7afb      	ldrb	r3, [r7, #11]
 800724a:	3301      	adds	r3, #1
 800724c:	72fb      	strb	r3, [r7, #11]
          break;
 800724e:	e055      	b.n	80072fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	7c12      	ldrb	r2, [r2, #16]
 8007268:	f107 0108 	add.w	r1, r7, #8
 800726c:	4610      	mov	r0, r2
 800726e:	4798      	blx	r3
 8007270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007272:	e043      	b.n	80072fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007274:	6839      	ldr	r1, [r7, #0]
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fa7d 	bl	8007776 <USBD_CtlError>
            err++;
 800727c:	7afb      	ldrb	r3, [r7, #11]
 800727e:	3301      	adds	r3, #1
 8007280:	72fb      	strb	r3, [r7, #11]
          break;
 8007282:	e03b      	b.n	80072fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007296:	695b      	ldr	r3, [r3, #20]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	7c12      	ldrb	r2, [r2, #16]
 800729c:	f107 0108 	add.w	r1, r7, #8
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
 80072a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072a6:	e029      	b.n	80072fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa63 	bl	8007776 <USBD_CtlError>
            err++;
 80072b0:	7afb      	ldrb	r3, [r7, #11]
 80072b2:	3301      	adds	r3, #1
 80072b4:	72fb      	strb	r3, [r7, #11]
          break;
 80072b6:	e021      	b.n	80072fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072be:	699b      	ldr	r3, [r3, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00b      	beq.n	80072dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	7c12      	ldrb	r2, [r2, #16]
 80072d0:	f107 0108 	add.w	r1, r7, #8
 80072d4:	4610      	mov	r0, r2
 80072d6:	4798      	blx	r3
 80072d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072da:	e00f      	b.n	80072fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072dc:	6839      	ldr	r1, [r7, #0]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 fa49 	bl	8007776 <USBD_CtlError>
            err++;
 80072e4:	7afb      	ldrb	r3, [r7, #11]
 80072e6:	3301      	adds	r3, #1
 80072e8:	72fb      	strb	r3, [r7, #11]
          break;
 80072ea:	e007      	b.n	80072fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa41 	bl	8007776 <USBD_CtlError>
          err++;
 80072f4:	7afb      	ldrb	r3, [r7, #11]
 80072f6:	3301      	adds	r3, #1
 80072f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80072fa:	bf00      	nop
      }
      break;
 80072fc:	e037      	b.n	800736e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	7c1b      	ldrb	r3, [r3, #16]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730e:	f107 0208 	add.w	r2, r7, #8
 8007312:	4610      	mov	r0, r2
 8007314:	4798      	blx	r3
 8007316:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007318:	e029      	b.n	800736e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800731a:	6839      	ldr	r1, [r7, #0]
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fa2a 	bl	8007776 <USBD_CtlError>
        err++;
 8007322:	7afb      	ldrb	r3, [r7, #11]
 8007324:	3301      	adds	r3, #1
 8007326:	72fb      	strb	r3, [r7, #11]
      break;
 8007328:	e021      	b.n	800736e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	7c1b      	ldrb	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10d      	bne.n	800734e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733a:	f107 0208 	add.w	r2, r7, #8
 800733e:	4610      	mov	r0, r2
 8007340:	4798      	blx	r3
 8007342:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3301      	adds	r3, #1
 8007348:	2207      	movs	r2, #7
 800734a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800734c:	e00f      	b.n	800736e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fa10 	bl	8007776 <USBD_CtlError>
        err++;
 8007356:	7afb      	ldrb	r3, [r7, #11]
 8007358:	3301      	adds	r3, #1
 800735a:	72fb      	strb	r3, [r7, #11]
      break;
 800735c:	e007      	b.n	800736e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fa08 	bl	8007776 <USBD_CtlError>
      err++;
 8007366:	7afb      	ldrb	r3, [r7, #11]
 8007368:	3301      	adds	r3, #1
 800736a:	72fb      	strb	r3, [r7, #11]
      break;
 800736c:	bf00      	nop
  }

  if (err != 0U)
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d11e      	bne.n	80073b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	88db      	ldrh	r3, [r3, #6]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d016      	beq.n	80073aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800737c:	893b      	ldrh	r3, [r7, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00e      	beq.n	80073a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	88da      	ldrh	r2, [r3, #6]
 8007386:	893b      	ldrh	r3, [r7, #8]
 8007388:	4293      	cmp	r3, r2
 800738a:	bf28      	it	cs
 800738c:	4613      	movcs	r3, r2
 800738e:	b29b      	uxth	r3, r3
 8007390:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007392:	893b      	ldrh	r3, [r7, #8]
 8007394:	461a      	mov	r2, r3
 8007396:	68f9      	ldr	r1, [r7, #12]
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fa5d 	bl	8007858 <USBD_CtlSendData>
 800739e:	e009      	b.n	80073b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80073a0:	6839      	ldr	r1, [r7, #0]
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f9e7 	bl	8007776 <USBD_CtlError>
 80073a8:	e004      	b.n	80073b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 faae 	bl	800790c <USBD_CtlSendStatus>
 80073b0:	e000      	b.n	80073b4 <USBD_GetDescriptor+0x2cc>
    return;
 80073b2:	bf00      	nop
  }
}
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop

080073bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	889b      	ldrh	r3, [r3, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d131      	bne.n	8007432 <USBD_SetAddress+0x76>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	88db      	ldrh	r3, [r3, #6]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d12d      	bne.n	8007432 <USBD_SetAddress+0x76>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	885b      	ldrh	r3, [r3, #2]
 80073da:	2b7f      	cmp	r3, #127	; 0x7f
 80073dc:	d829      	bhi.n	8007432 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	885b      	ldrh	r3, [r3, #2]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d104      	bne.n	8007400 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f9bc 	bl	8007776 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073fe:	e01d      	b.n	800743c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	7bfa      	ldrb	r2, [r7, #15]
 8007404:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 ff11 	bl	8008234 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fa7a 	bl	800790c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007418:	7bfb      	ldrb	r3, [r7, #15]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d004      	beq.n	8007428 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2202      	movs	r2, #2
 8007422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007426:	e009      	b.n	800743c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007430:	e004      	b.n	800743c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007432:	6839      	ldr	r1, [r7, #0]
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f99e 	bl	8007776 <USBD_CtlError>
  }
}
 800743a:	bf00      	nop
 800743c:	bf00      	nop
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800744e:	2300      	movs	r3, #0
 8007450:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	885b      	ldrh	r3, [r3, #2]
 8007456:	b2da      	uxtb	r2, r3
 8007458:	4b4e      	ldr	r3, [pc, #312]	; (8007594 <USBD_SetConfig+0x150>)
 800745a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800745c:	4b4d      	ldr	r3, [pc, #308]	; (8007594 <USBD_SetConfig+0x150>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d905      	bls.n	8007470 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007464:	6839      	ldr	r1, [r7, #0]
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f985 	bl	8007776 <USBD_CtlError>
    return USBD_FAIL;
 800746c:	2303      	movs	r3, #3
 800746e:	e08c      	b.n	800758a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b02      	cmp	r3, #2
 800747a:	d002      	beq.n	8007482 <USBD_SetConfig+0x3e>
 800747c:	2b03      	cmp	r3, #3
 800747e:	d029      	beq.n	80074d4 <USBD_SetConfig+0x90>
 8007480:	e075      	b.n	800756e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007482:	4b44      	ldr	r3, [pc, #272]	; (8007594 <USBD_SetConfig+0x150>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d020      	beq.n	80074cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800748a:	4b42      	ldr	r3, [pc, #264]	; (8007594 <USBD_SetConfig+0x150>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007494:	4b3f      	ldr	r3, [pc, #252]	; (8007594 <USBD_SetConfig+0x150>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	4619      	mov	r1, r3
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7fe ffe1 	bl	8006462 <USBD_SetClassConfig>
 80074a0:	4603      	mov	r3, r0
 80074a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d008      	beq.n	80074bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f962 	bl	8007776 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2202      	movs	r2, #2
 80074b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80074ba:	e065      	b.n	8007588 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fa25 	bl	800790c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2203      	movs	r2, #3
 80074c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80074ca:	e05d      	b.n	8007588 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fa1d 	bl	800790c <USBD_CtlSendStatus>
      break;
 80074d2:	e059      	b.n	8007588 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80074d4:	4b2f      	ldr	r3, [pc, #188]	; (8007594 <USBD_SetConfig+0x150>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d112      	bne.n	8007502 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80074e4:	4b2b      	ldr	r3, [pc, #172]	; (8007594 <USBD_SetConfig+0x150>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	461a      	mov	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074ee:	4b29      	ldr	r3, [pc, #164]	; (8007594 <USBD_SetConfig+0x150>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	4619      	mov	r1, r3
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7fe ffd0 	bl	800649a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fa06 	bl	800790c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007500:	e042      	b.n	8007588 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007502:	4b24      	ldr	r3, [pc, #144]	; (8007594 <USBD_SetConfig+0x150>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	461a      	mov	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	429a      	cmp	r2, r3
 800750e:	d02a      	beq.n	8007566 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	b2db      	uxtb	r3, r3
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7fe ffbe 	bl	800649a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800751e:	4b1d      	ldr	r3, [pc, #116]	; (8007594 <USBD_SetConfig+0x150>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007528:	4b1a      	ldr	r3, [pc, #104]	; (8007594 <USBD_SetConfig+0x150>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fe ff97 	bl	8006462 <USBD_SetClassConfig>
 8007534:	4603      	mov	r3, r0
 8007536:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00f      	beq.n	800755e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f918 	bl	8007776 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	4619      	mov	r1, r3
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fe ffa3 	bl	800649a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800755c:	e014      	b.n	8007588 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f9d4 	bl	800790c <USBD_CtlSendStatus>
      break;
 8007564:	e010      	b.n	8007588 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f9d0 	bl	800790c <USBD_CtlSendStatus>
      break;
 800756c:	e00c      	b.n	8007588 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f900 	bl	8007776 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007576:	4b07      	ldr	r3, [pc, #28]	; (8007594 <USBD_SetConfig+0x150>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	4619      	mov	r1, r3
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7fe ff8c 	bl	800649a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007582:	2303      	movs	r3, #3
 8007584:	73fb      	strb	r3, [r7, #15]
      break;
 8007586:	bf00      	nop
  }

  return ret;
 8007588:	7bfb      	ldrb	r3, [r7, #15]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	200008a4 	.word	0x200008a4

08007598 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	88db      	ldrh	r3, [r3, #6]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d004      	beq.n	80075b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 f8e2 	bl	8007776 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80075b2:	e023      	b.n	80075fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b02      	cmp	r3, #2
 80075be:	dc02      	bgt.n	80075c6 <USBD_GetConfig+0x2e>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	dc03      	bgt.n	80075cc <USBD_GetConfig+0x34>
 80075c4:	e015      	b.n	80075f2 <USBD_GetConfig+0x5a>
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d00b      	beq.n	80075e2 <USBD_GetConfig+0x4a>
 80075ca:	e012      	b.n	80075f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3308      	adds	r3, #8
 80075d6:	2201      	movs	r2, #1
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f93c 	bl	8007858 <USBD_CtlSendData>
        break;
 80075e0:	e00c      	b.n	80075fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3304      	adds	r3, #4
 80075e6:	2201      	movs	r2, #1
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f934 	bl	8007858 <USBD_CtlSendData>
        break;
 80075f0:	e004      	b.n	80075fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80075f2:	6839      	ldr	r1, [r7, #0]
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 f8be 	bl	8007776 <USBD_CtlError>
        break;
 80075fa:	bf00      	nop
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007614:	b2db      	uxtb	r3, r3
 8007616:	3b01      	subs	r3, #1
 8007618:	2b02      	cmp	r3, #2
 800761a:	d81e      	bhi.n	800765a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	88db      	ldrh	r3, [r3, #6]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d004      	beq.n	800762e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f8a5 	bl	8007776 <USBD_CtlError>
        break;
 800762c:	e01a      	b.n	8007664 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2201      	movs	r2, #1
 8007632:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800763a:	2b00      	cmp	r3, #0
 800763c:	d005      	beq.n	800764a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	f043 0202 	orr.w	r2, r3, #2
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	330c      	adds	r3, #12
 800764e:	2202      	movs	r2, #2
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f900 	bl	8007858 <USBD_CtlSendData>
      break;
 8007658:	e004      	b.n	8007664 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800765a:	6839      	ldr	r1, [r7, #0]
 800765c:	6878      	ldr	r0, [r7, #4]
 800765e:	f000 f88a 	bl	8007776 <USBD_CtlError>
      break;
 8007662:	bf00      	nop
  }
}
 8007664:	bf00      	nop
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	885b      	ldrh	r3, [r3, #2]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d107      	bne.n	800768e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f940 	bl	800790c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800768c:	e013      	b.n	80076b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	885b      	ldrh	r3, [r3, #2]
 8007692:	2b02      	cmp	r3, #2
 8007694:	d10b      	bne.n	80076ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	889b      	ldrh	r3, [r3, #4]
 800769a:	0a1b      	lsrs	r3, r3, #8
 800769c:	b29b      	uxth	r3, r3
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f930 	bl	800790c <USBD_CtlSendStatus>
}
 80076ac:	e003      	b.n	80076b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f860 	bl	8007776 <USBD_CtlError>
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b082      	sub	sp, #8
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	3b01      	subs	r3, #1
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d80b      	bhi.n	80076ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	885b      	ldrh	r3, [r3, #2]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d10c      	bne.n	80076f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f910 	bl	800790c <USBD_CtlSendStatus>
      }
      break;
 80076ec:	e004      	b.n	80076f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f840 	bl	8007776 <USBD_CtlError>
      break;
 80076f6:	e000      	b.n	80076fa <USBD_ClrFeature+0x3c>
      break;
 80076f8:	bf00      	nop
  }
}
 80076fa:	bf00      	nop
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b084      	sub	sp, #16
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3301      	adds	r3, #1
 800771c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	781a      	ldrb	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	3301      	adds	r3, #1
 800772a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f7ff fa41 	bl	8006bb4 <SWAPBYTE>
 8007732:	4603      	mov	r3, r0
 8007734:	461a      	mov	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3301      	adds	r3, #1
 8007744:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f7ff fa34 	bl	8006bb4 <SWAPBYTE>
 800774c:	4603      	mov	r3, r0
 800774e:	461a      	mov	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3301      	adds	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	3301      	adds	r3, #1
 800775e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f7ff fa27 	bl	8006bb4 <SWAPBYTE>
 8007766:	4603      	mov	r3, r0
 8007768:	461a      	mov	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	80da      	strh	r2, [r3, #6]
}
 800776e:	bf00      	nop
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007780:	2180      	movs	r1, #128	; 0x80
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fcec 	bl	8008160 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007788:	2100      	movs	r1, #0
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fce8 	bl	8008160 <USBD_LL_StallEP>
}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80077a4:	2300      	movs	r3, #0
 80077a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d036      	beq.n	800781c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80077b2:	6938      	ldr	r0, [r7, #16]
 80077b4:	f000 f836 	bl	8007824 <USBD_GetLen>
 80077b8:	4603      	mov	r3, r0
 80077ba:	3301      	adds	r3, #1
 80077bc:	b29b      	uxth	r3, r3
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	4413      	add	r3, r2
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	7812      	ldrb	r2, [r2, #0]
 80077d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80077d2:	7dfb      	ldrb	r3, [r7, #23]
 80077d4:	3301      	adds	r3, #1
 80077d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	4413      	add	r3, r2
 80077de:	2203      	movs	r2, #3
 80077e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	3301      	adds	r3, #1
 80077e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80077e8:	e013      	b.n	8007812 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	4413      	add	r3, r2
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	7812      	ldrb	r2, [r2, #0]
 80077f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	3301      	adds	r3, #1
 80077fa:	613b      	str	r3, [r7, #16]
    idx++;
 80077fc:	7dfb      	ldrb	r3, [r7, #23]
 80077fe:	3301      	adds	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007802:	7dfb      	ldrb	r3, [r7, #23]
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	4413      	add	r3, r2
 8007808:	2200      	movs	r2, #0
 800780a:	701a      	strb	r2, [r3, #0]
    idx++;
 800780c:	7dfb      	ldrb	r3, [r7, #23]
 800780e:	3301      	adds	r3, #1
 8007810:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e7      	bne.n	80077ea <USBD_GetString+0x52>
 800781a:	e000      	b.n	800781e <USBD_GetString+0x86>
    return;
 800781c:	bf00      	nop
  }
}
 800781e:	3718      	adds	r7, #24
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007834:	e005      	b.n	8007842 <USBD_GetLen+0x1e>
  {
    len++;
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	3301      	adds	r3, #1
 800783a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	3301      	adds	r3, #1
 8007840:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1f5      	bne.n	8007836 <USBD_GetLen+0x12>
  }

  return len;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2202      	movs	r2, #2
 8007868:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	2100      	movs	r1, #0
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 fcf7 	bl	8008272 <USBD_LL_Transmit>

  return USBD_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	60f8      	str	r0, [r7, #12]
 8007896:	60b9      	str	r1, [r7, #8]
 8007898:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	2100      	movs	r1, #0
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 fce6 	bl	8008272 <USBD_LL_Transmit>

  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2203      	movs	r2, #3
 80078c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	2100      	movs	r1, #0
 80078da:	68f8      	ldr	r0, [r7, #12]
 80078dc:	f000 fcea 	bl	80082b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	60f8      	str	r0, [r7, #12]
 80078f2:	60b9      	str	r1, [r7, #8]
 80078f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	2100      	movs	r1, #0
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 fcd9 	bl	80082b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007902:	2300      	movs	r3, #0
}
 8007904:	4618      	mov	r0, r3
 8007906:	3710      	adds	r7, #16
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2204      	movs	r2, #4
 8007918:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800791c:	2300      	movs	r3, #0
 800791e:	2200      	movs	r2, #0
 8007920:	2100      	movs	r1, #0
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fca5 	bl	8008272 <USBD_LL_Transmit>

  return USBD_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3708      	adds	r7, #8
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b082      	sub	sp, #8
 8007936:	af00      	add	r7, sp, #0
 8007938:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2205      	movs	r2, #5
 800793e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007942:	2300      	movs	r3, #0
 8007944:	2200      	movs	r2, #0
 8007946:	2100      	movs	r1, #0
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fcb3 	bl	80082b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800795c:	2200      	movs	r2, #0
 800795e:	4912      	ldr	r1, [pc, #72]	; (80079a8 <MX_USB_DEVICE_Init+0x50>)
 8007960:	4812      	ldr	r0, [pc, #72]	; (80079ac <MX_USB_DEVICE_Init+0x54>)
 8007962:	f7fe fd01 	bl	8006368 <USBD_Init>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800796c:	f7f9 fd70 	bl	8001450 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007970:	490f      	ldr	r1, [pc, #60]	; (80079b0 <MX_USB_DEVICE_Init+0x58>)
 8007972:	480e      	ldr	r0, [pc, #56]	; (80079ac <MX_USB_DEVICE_Init+0x54>)
 8007974:	f7fe fd28 	bl	80063c8 <USBD_RegisterClass>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800797e:	f7f9 fd67 	bl	8001450 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007982:	490c      	ldr	r1, [pc, #48]	; (80079b4 <MX_USB_DEVICE_Init+0x5c>)
 8007984:	4809      	ldr	r0, [pc, #36]	; (80079ac <MX_USB_DEVICE_Init+0x54>)
 8007986:	f7fe fc1f 	bl	80061c8 <USBD_CDC_RegisterInterface>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007990:	f7f9 fd5e 	bl	8001450 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007994:	4805      	ldr	r0, [pc, #20]	; (80079ac <MX_USB_DEVICE_Init+0x54>)
 8007996:	f7fe fd4d 	bl	8006434 <USBD_Start>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80079a0:	f7f9 fd56 	bl	8001450 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80079a4:	bf00      	nop
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	200000ac 	.word	0x200000ac
 80079ac:	200008a8 	.word	0x200008a8
 80079b0:	20000018 	.word	0x20000018
 80079b4:	20000098 	.word	0x20000098

080079b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80079bc:	2200      	movs	r2, #0
 80079be:	4905      	ldr	r1, [pc, #20]	; (80079d4 <CDC_Init_FS+0x1c>)
 80079c0:	4805      	ldr	r0, [pc, #20]	; (80079d8 <CDC_Init_FS+0x20>)
 80079c2:	f7fe fc1b 	bl	80061fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80079c6:	4905      	ldr	r1, [pc, #20]	; (80079dc <CDC_Init_FS+0x24>)
 80079c8:	4803      	ldr	r0, [pc, #12]	; (80079d8 <CDC_Init_FS+0x20>)
 80079ca:	f7fe fc39 	bl	8006240 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80079ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	20000bc4 	.word	0x20000bc4
 80079d8:	200008a8 	.word	0x200008a8
 80079dc:	20000b84 	.word	0x20000b84

080079e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80079e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	4603      	mov	r3, r0
 80079f8:	6039      	str	r1, [r7, #0]
 80079fa:	71fb      	strb	r3, [r7, #7]
 80079fc:	4613      	mov	r3, r2
 80079fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a00:	79fb      	ldrb	r3, [r7, #7]
 8007a02:	2b23      	cmp	r3, #35	; 0x23
 8007a04:	d84a      	bhi.n	8007a9c <CDC_Control_FS+0xac>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <CDC_Control_FS+0x1c>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a9d 	.word	0x08007a9d
 8007a10:	08007a9d 	.word	0x08007a9d
 8007a14:	08007a9d 	.word	0x08007a9d
 8007a18:	08007a9d 	.word	0x08007a9d
 8007a1c:	08007a9d 	.word	0x08007a9d
 8007a20:	08007a9d 	.word	0x08007a9d
 8007a24:	08007a9d 	.word	0x08007a9d
 8007a28:	08007a9d 	.word	0x08007a9d
 8007a2c:	08007a9d 	.word	0x08007a9d
 8007a30:	08007a9d 	.word	0x08007a9d
 8007a34:	08007a9d 	.word	0x08007a9d
 8007a38:	08007a9d 	.word	0x08007a9d
 8007a3c:	08007a9d 	.word	0x08007a9d
 8007a40:	08007a9d 	.word	0x08007a9d
 8007a44:	08007a9d 	.word	0x08007a9d
 8007a48:	08007a9d 	.word	0x08007a9d
 8007a4c:	08007a9d 	.word	0x08007a9d
 8007a50:	08007a9d 	.word	0x08007a9d
 8007a54:	08007a9d 	.word	0x08007a9d
 8007a58:	08007a9d 	.word	0x08007a9d
 8007a5c:	08007a9d 	.word	0x08007a9d
 8007a60:	08007a9d 	.word	0x08007a9d
 8007a64:	08007a9d 	.word	0x08007a9d
 8007a68:	08007a9d 	.word	0x08007a9d
 8007a6c:	08007a9d 	.word	0x08007a9d
 8007a70:	08007a9d 	.word	0x08007a9d
 8007a74:	08007a9d 	.word	0x08007a9d
 8007a78:	08007a9d 	.word	0x08007a9d
 8007a7c:	08007a9d 	.word	0x08007a9d
 8007a80:	08007a9d 	.word	0x08007a9d
 8007a84:	08007a9d 	.word	0x08007a9d
 8007a88:	08007a9d 	.word	0x08007a9d
 8007a8c:	08007a9d 	.word	0x08007a9d
 8007a90:	08007a9d 	.word	0x08007a9d
 8007a94:	08007a9d 	.word	0x08007a9d
 8007a98:	08007a9d 	.word	0x08007a9d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007a9c:	bf00      	nop
  }

  return (USBD_OK);
 8007a9e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007ab6:	6879      	ldr	r1, [r7, #4]
 8007ab8:	480f      	ldr	r0, [pc, #60]	; (8007af8 <CDC_Receive_FS+0x4c>)
 8007aba:	f7fe fbc1 	bl	8006240 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007abe:	480e      	ldr	r0, [pc, #56]	; (8007af8 <CDC_Receive_FS+0x4c>)
 8007ac0:	f7fe fc1c 	bl	80062fc <USBD_CDC_ReceivePacket>

  memset (CDCbuffer, '\0', 64);  // clear the buffer
 8007ac4:	2240      	movs	r2, #64	; 0x40
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	480c      	ldr	r0, [pc, #48]	; (8007afc <CDC_Receive_FS+0x50>)
 8007aca:	f001 fbae 	bl	800922a <memset>
  uint8_t len = (uint8_t)*Len;
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	73fb      	strb	r3, [r7, #15]
  memcpy(CDCbuffer, Buf, len);  // copy the data to the buffer
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	6879      	ldr	r1, [r7, #4]
 8007ada:	4808      	ldr	r0, [pc, #32]	; (8007afc <CDC_Receive_FS+0x50>)
 8007adc:	f001 fc3a 	bl	8009354 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 fb9f 	bl	800922a <memset>

  return (USBD_OK);
 8007aec:	2300      	movs	r3, #0
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	200008a8 	.word	0x200008a8
 8007afc:	2000085c 	.word	0x2000085c

08007b00 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007b10:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <CDC_Transmit_FS+0x48>)
 8007b12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d001      	beq.n	8007b26 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e00b      	b.n	8007b3e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007b26:	887b      	ldrh	r3, [r7, #2]
 8007b28:	461a      	mov	r2, r3
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	4806      	ldr	r0, [pc, #24]	; (8007b48 <CDC_Transmit_FS+0x48>)
 8007b2e:	f7fe fb65 	bl	80061fc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007b32:	4805      	ldr	r0, [pc, #20]	; (8007b48 <CDC_Transmit_FS+0x48>)
 8007b34:	f7fe fba2 	bl	800627c <USBD_CDC_TransmitPacket>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3710      	adds	r7, #16
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	200008a8 	.word	0x200008a8

08007b4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	4613      	mov	r3, r2
 8007b58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007b5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
	...

08007b70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	6039      	str	r1, [r7, #0]
 8007b7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	2212      	movs	r2, #18
 8007b80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b82:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	370c      	adds	r7, #12
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	200000c8 	.word	0x200000c8

08007b94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	6039      	str	r1, [r7, #0]
 8007b9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2204      	movs	r2, #4
 8007ba4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ba6:	4b03      	ldr	r3, [pc, #12]	; (8007bb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr
 8007bb4:	200000dc 	.word	0x200000dc

08007bb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	6039      	str	r1, [r7, #0]
 8007bc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d105      	bne.n	8007bd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	4907      	ldr	r1, [pc, #28]	; (8007bec <USBD_FS_ProductStrDescriptor+0x34>)
 8007bce:	4808      	ldr	r0, [pc, #32]	; (8007bf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bd0:	f7ff fde2 	bl	8007798 <USBD_GetString>
 8007bd4:	e004      	b.n	8007be0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	4904      	ldr	r1, [pc, #16]	; (8007bec <USBD_FS_ProductStrDescriptor+0x34>)
 8007bda:	4805      	ldr	r0, [pc, #20]	; (8007bf0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bdc:	f7ff fddc 	bl	8007798 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007be0:	4b02      	ldr	r3, [pc, #8]	; (8007bec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	200013c4 	.word	0x200013c4
 8007bf0:	0800f4b4 	.word	0x0800f4b4

08007bf4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	6039      	str	r1, [r7, #0]
 8007bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c00:	683a      	ldr	r2, [r7, #0]
 8007c02:	4904      	ldr	r1, [pc, #16]	; (8007c14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c04:	4804      	ldr	r0, [pc, #16]	; (8007c18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c06:	f7ff fdc7 	bl	8007798 <USBD_GetString>
  return USBD_StrDesc;
 8007c0a:	4b02      	ldr	r3, [pc, #8]	; (8007c14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	200013c4 	.word	0x200013c4
 8007c18:	0800f4cc 	.word	0x0800f4cc

08007c1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	4603      	mov	r3, r0
 8007c24:	6039      	str	r1, [r7, #0]
 8007c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	221a      	movs	r2, #26
 8007c2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c2e:	f000 f843 	bl	8007cb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c32:	4b02      	ldr	r3, [pc, #8]	; (8007c3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	200000e0 	.word	0x200000e0

08007c40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	6039      	str	r1, [r7, #0]
 8007c4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d105      	bne.n	8007c5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c52:	683a      	ldr	r2, [r7, #0]
 8007c54:	4907      	ldr	r1, [pc, #28]	; (8007c74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c56:	4808      	ldr	r0, [pc, #32]	; (8007c78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c58:	f7ff fd9e 	bl	8007798 <USBD_GetString>
 8007c5c:	e004      	b.n	8007c68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	4904      	ldr	r1, [pc, #16]	; (8007c74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c62:	4805      	ldr	r0, [pc, #20]	; (8007c78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c64:	f7ff fd98 	bl	8007798 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c68:	4b02      	ldr	r3, [pc, #8]	; (8007c74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3708      	adds	r7, #8
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	200013c4 	.word	0x200013c4
 8007c78:	0800f4e0 	.word	0x0800f4e0

08007c7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	4603      	mov	r3, r0
 8007c84:	6039      	str	r1, [r7, #0]
 8007c86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c88:	79fb      	ldrb	r3, [r7, #7]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d105      	bne.n	8007c9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c8e:	683a      	ldr	r2, [r7, #0]
 8007c90:	4907      	ldr	r1, [pc, #28]	; (8007cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c92:	4808      	ldr	r0, [pc, #32]	; (8007cb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c94:	f7ff fd80 	bl	8007798 <USBD_GetString>
 8007c98:	e004      	b.n	8007ca4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	4904      	ldr	r1, [pc, #16]	; (8007cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c9e:	4805      	ldr	r0, [pc, #20]	; (8007cb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ca0:	f7ff fd7a 	bl	8007798 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ca4:	4b02      	ldr	r3, [pc, #8]	; (8007cb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	bf00      	nop
 8007cb0:	200013c4 	.word	0x200013c4
 8007cb4:	0800f4ec 	.word	0x0800f4ec

08007cb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <Get_SerialNum+0x44>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007cc4:	4b0e      	ldr	r3, [pc, #56]	; (8007d00 <Get_SerialNum+0x48>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007cca:	4b0e      	ldr	r3, [pc, #56]	; (8007d04 <Get_SerialNum+0x4c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d009      	beq.n	8007cf2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cde:	2208      	movs	r2, #8
 8007ce0:	4909      	ldr	r1, [pc, #36]	; (8007d08 <Get_SerialNum+0x50>)
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f000 f814 	bl	8007d10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ce8:	2204      	movs	r2, #4
 8007cea:	4908      	ldr	r1, [pc, #32]	; (8007d0c <Get_SerialNum+0x54>)
 8007cec:	68b8      	ldr	r0, [r7, #8]
 8007cee:	f000 f80f 	bl	8007d10 <IntToUnicode>
  }
}
 8007cf2:	bf00      	nop
 8007cf4:	3710      	adds	r7, #16
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	1fff7a10 	.word	0x1fff7a10
 8007d00:	1fff7a14 	.word	0x1fff7a14
 8007d04:	1fff7a18 	.word	0x1fff7a18
 8007d08:	200000e2 	.word	0x200000e2
 8007d0c:	200000f2 	.word	0x200000f2

08007d10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b087      	sub	sp, #28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d22:	2300      	movs	r3, #0
 8007d24:	75fb      	strb	r3, [r7, #23]
 8007d26:	e027      	b.n	8007d78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	0f1b      	lsrs	r3, r3, #28
 8007d2c:	2b09      	cmp	r3, #9
 8007d2e:	d80b      	bhi.n	8007d48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	0f1b      	lsrs	r3, r3, #28
 8007d34:	b2da      	uxtb	r2, r3
 8007d36:	7dfb      	ldrb	r3, [r7, #23]
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	440b      	add	r3, r1
 8007d40:	3230      	adds	r2, #48	; 0x30
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	701a      	strb	r2, [r3, #0]
 8007d46:	e00a      	b.n	8007d5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	0f1b      	lsrs	r3, r3, #28
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	4619      	mov	r1, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	440b      	add	r3, r1
 8007d58:	3237      	adds	r2, #55	; 0x37
 8007d5a:	b2d2      	uxtb	r2, r2
 8007d5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	011b      	lsls	r3, r3, #4
 8007d62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	3301      	adds	r3, #1
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	2200      	movs	r2, #0
 8007d70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
 8007d74:	3301      	adds	r3, #1
 8007d76:	75fb      	strb	r3, [r7, #23]
 8007d78:	7dfa      	ldrb	r2, [r7, #23]
 8007d7a:	79fb      	ldrb	r3, [r7, #7]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d3d3      	bcc.n	8007d28 <IntToUnicode+0x18>
  }
}
 8007d80:	bf00      	nop
 8007d82:	bf00      	nop
 8007d84:	371c      	adds	r7, #28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr
	...

08007d90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08a      	sub	sp, #40	; 0x28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d98:	f107 0314 	add.w	r3, r7, #20
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	605a      	str	r2, [r3, #4]
 8007da2:	609a      	str	r2, [r3, #8]
 8007da4:	60da      	str	r2, [r3, #12]
 8007da6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007db0:	d13a      	bne.n	8007e28 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007db2:	2300      	movs	r3, #0
 8007db4:	613b      	str	r3, [r7, #16]
 8007db6:	4b1e      	ldr	r3, [pc, #120]	; (8007e30 <HAL_PCD_MspInit+0xa0>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	4a1d      	ldr	r2, [pc, #116]	; (8007e30 <HAL_PCD_MspInit+0xa0>)
 8007dbc:	f043 0301 	orr.w	r3, r3, #1
 8007dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8007dc2:	4b1b      	ldr	r3, [pc, #108]	; (8007e30 <HAL_PCD_MspInit+0xa0>)
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	613b      	str	r3, [r7, #16]
 8007dcc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007dce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007de0:	230a      	movs	r3, #10
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007de4:	f107 0314 	add.w	r3, r7, #20
 8007de8:	4619      	mov	r1, r3
 8007dea:	4812      	ldr	r0, [pc, #72]	; (8007e34 <HAL_PCD_MspInit+0xa4>)
 8007dec:	f7f9 ff0e 	bl	8001c0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007df0:	4b0f      	ldr	r3, [pc, #60]	; (8007e30 <HAL_PCD_MspInit+0xa0>)
 8007df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007df4:	4a0e      	ldr	r2, [pc, #56]	; (8007e30 <HAL_PCD_MspInit+0xa0>)
 8007df6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dfa:	6353      	str	r3, [r2, #52]	; 0x34
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <HAL_PCD_MspInit+0xa0>)
 8007e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e04:	4a0a      	ldr	r2, [pc, #40]	; (8007e30 <HAL_PCD_MspInit+0xa0>)
 8007e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e0a:	6453      	str	r3, [r2, #68]	; 0x44
 8007e0c:	4b08      	ldr	r3, [pc, #32]	; (8007e30 <HAL_PCD_MspInit+0xa0>)
 8007e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007e18:	2200      	movs	r2, #0
 8007e1a:	2100      	movs	r1, #0
 8007e1c:	2043      	movs	r0, #67	; 0x43
 8007e1e:	f7f9 febe 	bl	8001b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007e22:	2043      	movs	r0, #67	; 0x43
 8007e24:	f7f9 fed7 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007e28:	bf00      	nop
 8007e2a:	3728      	adds	r7, #40	; 0x28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	40023800 	.word	0x40023800
 8007e34:	40020000 	.word	0x40020000

08007e38 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4610      	mov	r0, r2
 8007e50:	f7fe fb3d 	bl	80064ce <USBD_LL_SetupStage>
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007e6e:	78fa      	ldrb	r2, [r7, #3]
 8007e70:	6879      	ldr	r1, [r7, #4]
 8007e72:	4613      	mov	r3, r2
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	440b      	add	r3, r1
 8007e7c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	4619      	mov	r1, r3
 8007e86:	f7fe fb77 	bl	8006578 <USBD_LL_DataOutStage>
}
 8007e8a:	bf00      	nop
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007ea4:	78fa      	ldrb	r2, [r7, #3]
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	440b      	add	r3, r1
 8007eb2:	3320      	adds	r3, #32
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	78fb      	ldrb	r3, [r7, #3]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	f7fe fc10 	bl	80066de <USBD_LL_DataInStage>
}
 8007ebe:	bf00      	nop
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b082      	sub	sp, #8
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f7fe fd4a 	bl	800696e <USBD_LL_SOF>
}
 8007eda:	bf00      	nop
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007eea:	2301      	movs	r3, #1
 8007eec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	79db      	ldrb	r3, [r3, #7]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d001      	beq.n	8007efa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007ef6:	f7f9 faab 	bl	8001450 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007f00:	7bfa      	ldrb	r2, [r7, #15]
 8007f02:	4611      	mov	r1, r2
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fcee 	bl	80068e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fe fc96 	bl	8006842 <USBD_LL_Reset>
}
 8007f16:	bf00      	nop
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe fce9 	bl	8006906 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	6812      	ldr	r2, [r2, #0]
 8007f42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f46:	f043 0301 	orr.w	r3, r3, #1
 8007f4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	7adb      	ldrb	r3, [r3, #11]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f54:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <HAL_PCD_SuspendCallback+0x48>)
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	4a03      	ldr	r2, [pc, #12]	; (8007f68 <HAL_PCD_SuspendCallback+0x48>)
 8007f5a:	f043 0306 	orr.w	r3, r3, #6
 8007f5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f60:	bf00      	nop
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	e000ed00 	.word	0xe000ed00

08007f6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe fcdf 	bl	800693e <USBD_LL_Resume>
}
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007f9a:	78fa      	ldrb	r2, [r7, #3]
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe fd37 	bl	8006a12 <USBD_LL_IsoOUTIncomplete>
}
 8007fa4:	bf00      	nop
 8007fa6:	3708      	adds	r7, #8
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007fbe:	78fa      	ldrb	r2, [r7, #3]
 8007fc0:	4611      	mov	r1, r2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe fcf3 	bl	80069ae <USBD_LL_IsoINIncomplete>
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fd49 	bl	8006a76 <USBD_LL_DevConnected>
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe fd46 	bl	8006a8c <USBD_LL_DevDisconnected>
}
 8008000:	bf00      	nop
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d13c      	bne.n	8008092 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008018:	4a20      	ldr	r2, [pc, #128]	; (800809c <USBD_LL_Init+0x94>)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a1e      	ldr	r2, [pc, #120]	; (800809c <USBD_LL_Init+0x94>)
 8008024:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008028:	4b1c      	ldr	r3, [pc, #112]	; (800809c <USBD_LL_Init+0x94>)
 800802a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800802e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008030:	4b1a      	ldr	r3, [pc, #104]	; (800809c <USBD_LL_Init+0x94>)
 8008032:	2204      	movs	r2, #4
 8008034:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008036:	4b19      	ldr	r3, [pc, #100]	; (800809c <USBD_LL_Init+0x94>)
 8008038:	2202      	movs	r2, #2
 800803a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800803c:	4b17      	ldr	r3, [pc, #92]	; (800809c <USBD_LL_Init+0x94>)
 800803e:	2200      	movs	r2, #0
 8008040:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008042:	4b16      	ldr	r3, [pc, #88]	; (800809c <USBD_LL_Init+0x94>)
 8008044:	2202      	movs	r2, #2
 8008046:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008048:	4b14      	ldr	r3, [pc, #80]	; (800809c <USBD_LL_Init+0x94>)
 800804a:	2200      	movs	r2, #0
 800804c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800804e:	4b13      	ldr	r3, [pc, #76]	; (800809c <USBD_LL_Init+0x94>)
 8008050:	2200      	movs	r2, #0
 8008052:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008054:	4b11      	ldr	r3, [pc, #68]	; (800809c <USBD_LL_Init+0x94>)
 8008056:	2200      	movs	r2, #0
 8008058:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800805a:	4b10      	ldr	r3, [pc, #64]	; (800809c <USBD_LL_Init+0x94>)
 800805c:	2200      	movs	r2, #0
 800805e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008060:	4b0e      	ldr	r3, [pc, #56]	; (800809c <USBD_LL_Init+0x94>)
 8008062:	2200      	movs	r2, #0
 8008064:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008066:	480d      	ldr	r0, [pc, #52]	; (800809c <USBD_LL_Init+0x94>)
 8008068:	f7f9 ff54 	bl	8001f14 <HAL_PCD_Init>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d001      	beq.n	8008076 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008072:	f7f9 f9ed 	bl	8001450 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008076:	2180      	movs	r1, #128	; 0x80
 8008078:	4808      	ldr	r0, [pc, #32]	; (800809c <USBD_LL_Init+0x94>)
 800807a:	f7fb f97e 	bl	800337a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800807e:	2240      	movs	r2, #64	; 0x40
 8008080:	2100      	movs	r1, #0
 8008082:	4806      	ldr	r0, [pc, #24]	; (800809c <USBD_LL_Init+0x94>)
 8008084:	f7fb f932 	bl	80032ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008088:	2280      	movs	r2, #128	; 0x80
 800808a:	2101      	movs	r1, #1
 800808c:	4803      	ldr	r0, [pc, #12]	; (800809c <USBD_LL_Init+0x94>)
 800808e:	f7fb f92d 	bl	80032ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008092:	2300      	movs	r3, #0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	200015c4 	.word	0x200015c4

080080a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fa f83b 	bl	8002132 <HAL_PCD_Start>
 80080bc:	4603      	mov	r3, r0
 80080be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 f942 	bl	800834c <USBD_Get_USB_Status>
 80080c8:	4603      	mov	r3, r0
 80080ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	4608      	mov	r0, r1
 80080e0:	4611      	mov	r1, r2
 80080e2:	461a      	mov	r2, r3
 80080e4:	4603      	mov	r3, r0
 80080e6:	70fb      	strb	r3, [r7, #3]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70bb      	strb	r3, [r7, #2]
 80080ec:	4613      	mov	r3, r2
 80080ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80080fe:	78bb      	ldrb	r3, [r7, #2]
 8008100:	883a      	ldrh	r2, [r7, #0]
 8008102:	78f9      	ldrb	r1, [r7, #3]
 8008104:	f7fa fd0f 	bl	8002b26 <HAL_PCD_EP_Open>
 8008108:	4603      	mov	r3, r0
 800810a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800810c:	7bfb      	ldrb	r3, [r7, #15]
 800810e:	4618      	mov	r0, r3
 8008110:	f000 f91c 	bl	800834c <USBD_Get_USB_Status>
 8008114:	4603      	mov	r3, r0
 8008116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008118:	7bbb      	ldrb	r3, [r7, #14]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b084      	sub	sp, #16
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800813c:	78fa      	ldrb	r2, [r7, #3]
 800813e:	4611      	mov	r1, r2
 8008140:	4618      	mov	r0, r3
 8008142:	f7fa fd58 	bl	8002bf6 <HAL_PCD_EP_Close>
 8008146:	4603      	mov	r3, r0
 8008148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800814a:	7bfb      	ldrb	r3, [r7, #15]
 800814c:	4618      	mov	r0, r3
 800814e:	f000 f8fd 	bl	800834c <USBD_Get_USB_Status>
 8008152:	4603      	mov	r3, r0
 8008154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008156:	7bbb      	ldrb	r3, [r7, #14]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008170:	2300      	movs	r3, #0
 8008172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800817a:	78fa      	ldrb	r2, [r7, #3]
 800817c:	4611      	mov	r1, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f7fa fe10 	bl	8002da4 <HAL_PCD_EP_SetStall>
 8008184:	4603      	mov	r3, r0
 8008186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008188:	7bfb      	ldrb	r3, [r7, #15]
 800818a:	4618      	mov	r0, r3
 800818c:	f000 f8de 	bl	800834c <USBD_Get_USB_Status>
 8008190:	4603      	mov	r3, r0
 8008192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008194:	7bbb      	ldrb	r3, [r7, #14]
}
 8008196:	4618      	mov	r0, r3
 8008198:	3710      	adds	r7, #16
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b084      	sub	sp, #16
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	460b      	mov	r3, r1
 80081a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ae:	2300      	movs	r3, #0
 80081b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081b8:	78fa      	ldrb	r2, [r7, #3]
 80081ba:	4611      	mov	r1, r2
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fa fe54 	bl	8002e6a <HAL_PCD_EP_ClrStall>
 80081c2:	4603      	mov	r3, r0
 80081c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 f8bf 	bl	800834c <USBD_Get_USB_Status>
 80081ce:	4603      	mov	r3, r0
 80081d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80081ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80081f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	da0b      	bge.n	8008210 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80081f8:	78fb      	ldrb	r3, [r7, #3]
 80081fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081fe:	68f9      	ldr	r1, [r7, #12]
 8008200:	4613      	mov	r3, r2
 8008202:	00db      	lsls	r3, r3, #3
 8008204:	4413      	add	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	440b      	add	r3, r1
 800820a:	3316      	adds	r3, #22
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	e00b      	b.n	8008228 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008210:	78fb      	ldrb	r3, [r7, #3]
 8008212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008216:	68f9      	ldr	r1, [r7, #12]
 8008218:	4613      	mov	r3, r2
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	4413      	add	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	440b      	add	r3, r1
 8008222:	f203 2356 	addw	r3, r3, #598	; 0x256
 8008226:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	4611      	mov	r1, r2
 8008252:	4618      	mov	r0, r3
 8008254:	f7fa fc43 	bl	8002ade <HAL_PCD_SetAddress>
 8008258:	4603      	mov	r3, r0
 800825a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	4618      	mov	r0, r3
 8008260:	f000 f874 	bl	800834c <USBD_Get_USB_Status>
 8008264:	4603      	mov	r3, r0
 8008266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008268:	7bbb      	ldrb	r3, [r7, #14]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b086      	sub	sp, #24
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	607a      	str	r2, [r7, #4]
 800827c:	603b      	str	r3, [r7, #0]
 800827e:	460b      	mov	r3, r1
 8008280:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008282:	2300      	movs	r3, #0
 8008284:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008290:	7af9      	ldrb	r1, [r7, #11]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	f7fa fd4b 	bl	8002d30 <HAL_PCD_EP_Transmit>
 800829a:	4603      	mov	r3, r0
 800829c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800829e:	7dfb      	ldrb	r3, [r7, #23]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 f853 	bl	800834c <USBD_Get_USB_Status>
 80082a6:	4603      	mov	r3, r0
 80082a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	607a      	str	r2, [r7, #4]
 80082be:	603b      	str	r3, [r7, #0]
 80082c0:	460b      	mov	r3, r1
 80082c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082d2:	7af9      	ldrb	r1, [r7, #11]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	f7fa fcd7 	bl	8002c8a <HAL_PCD_EP_Receive>
 80082dc:	4603      	mov	r3, r0
 80082de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 f832 	bl	800834c <USBD_Get_USB_Status>
 80082e8:	4603      	mov	r3, r0
 80082ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80082ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3718      	adds	r7, #24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b082      	sub	sp, #8
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	460b      	mov	r3, r1
 8008300:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008308:	78fa      	ldrb	r2, [r7, #3]
 800830a:	4611      	mov	r1, r2
 800830c:	4618      	mov	r0, r3
 800830e:	f7fa fcf7 	bl	8002d00 <HAL_PCD_EP_GetRxCount>
 8008312:	4603      	mov	r3, r0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008324:	4b03      	ldr	r3, [pc, #12]	; (8008334 <USBD_static_malloc+0x18>)
}
 8008326:	4618      	mov	r0, r3
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	20001aa8 	.word	0x20001aa8

08008338 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]

}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800835a:	79fb      	ldrb	r3, [r7, #7]
 800835c:	2b03      	cmp	r3, #3
 800835e:	d817      	bhi.n	8008390 <USBD_Get_USB_Status+0x44>
 8008360:	a201      	add	r2, pc, #4	; (adr r2, 8008368 <USBD_Get_USB_Status+0x1c>)
 8008362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008366:	bf00      	nop
 8008368:	08008379 	.word	0x08008379
 800836c:	0800837f 	.word	0x0800837f
 8008370:	08008385 	.word	0x08008385
 8008374:	0800838b 	.word	0x0800838b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]
    break;
 800837c:	e00b      	b.n	8008396 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800837e:	2303      	movs	r3, #3
 8008380:	73fb      	strb	r3, [r7, #15]
    break;
 8008382:	e008      	b.n	8008396 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008384:	2301      	movs	r3, #1
 8008386:	73fb      	strb	r3, [r7, #15]
    break;
 8008388:	e005      	b.n	8008396 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800838a:	2303      	movs	r3, #3
 800838c:	73fb      	strb	r3, [r7, #15]
    break;
 800838e:	e002      	b.n	8008396 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008390:	2303      	movs	r3, #3
 8008392:	73fb      	strb	r3, [r7, #15]
    break;
 8008394:	bf00      	nop
  }
  return usb_status;
 8008396:	7bfb      	ldrb	r3, [r7, #15]
}
 8008398:	4618      	mov	r0, r3
 800839a:	3714      	adds	r7, #20
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr

080083a4 <atof>:
 80083a4:	2100      	movs	r1, #0
 80083a6:	f000 be0f 	b.w	8008fc8 <strtod>

080083aa <sulp>:
 80083aa:	b570      	push	{r4, r5, r6, lr}
 80083ac:	4604      	mov	r4, r0
 80083ae:	460d      	mov	r5, r1
 80083b0:	ec45 4b10 	vmov	d0, r4, r5
 80083b4:	4616      	mov	r6, r2
 80083b6:	f002 f9d5 	bl	800a764 <__ulp>
 80083ba:	ec51 0b10 	vmov	r0, r1, d0
 80083be:	b17e      	cbz	r6, 80083e0 <sulp+0x36>
 80083c0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80083c4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	dd09      	ble.n	80083e0 <sulp+0x36>
 80083cc:	051b      	lsls	r3, r3, #20
 80083ce:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80083d2:	2400      	movs	r4, #0
 80083d4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80083d8:	4622      	mov	r2, r4
 80083da:	462b      	mov	r3, r5
 80083dc:	f7f8 f914 	bl	8000608 <__aeabi_dmul>
 80083e0:	bd70      	pop	{r4, r5, r6, pc}
 80083e2:	0000      	movs	r0, r0
 80083e4:	0000      	movs	r0, r0
	...

080083e8 <_strtod_l>:
 80083e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ec:	ed2d 8b02 	vpush	{d8}
 80083f0:	b09b      	sub	sp, #108	; 0x6c
 80083f2:	4604      	mov	r4, r0
 80083f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80083f6:	2200      	movs	r2, #0
 80083f8:	9216      	str	r2, [sp, #88]	; 0x58
 80083fa:	460d      	mov	r5, r1
 80083fc:	f04f 0800 	mov.w	r8, #0
 8008400:	f04f 0900 	mov.w	r9, #0
 8008404:	460a      	mov	r2, r1
 8008406:	9215      	str	r2, [sp, #84]	; 0x54
 8008408:	7811      	ldrb	r1, [r2, #0]
 800840a:	292b      	cmp	r1, #43	; 0x2b
 800840c:	d04c      	beq.n	80084a8 <_strtod_l+0xc0>
 800840e:	d83a      	bhi.n	8008486 <_strtod_l+0x9e>
 8008410:	290d      	cmp	r1, #13
 8008412:	d834      	bhi.n	800847e <_strtod_l+0x96>
 8008414:	2908      	cmp	r1, #8
 8008416:	d834      	bhi.n	8008482 <_strtod_l+0x9a>
 8008418:	2900      	cmp	r1, #0
 800841a:	d03d      	beq.n	8008498 <_strtod_l+0xb0>
 800841c:	2200      	movs	r2, #0
 800841e:	920a      	str	r2, [sp, #40]	; 0x28
 8008420:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8008422:	7832      	ldrb	r2, [r6, #0]
 8008424:	2a30      	cmp	r2, #48	; 0x30
 8008426:	f040 80b4 	bne.w	8008592 <_strtod_l+0x1aa>
 800842a:	7872      	ldrb	r2, [r6, #1]
 800842c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008430:	2a58      	cmp	r2, #88	; 0x58
 8008432:	d170      	bne.n	8008516 <_strtod_l+0x12e>
 8008434:	9302      	str	r3, [sp, #8]
 8008436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008438:	9301      	str	r3, [sp, #4]
 800843a:	ab16      	add	r3, sp, #88	; 0x58
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	4a8e      	ldr	r2, [pc, #568]	; (8008678 <_strtod_l+0x290>)
 8008440:	ab17      	add	r3, sp, #92	; 0x5c
 8008442:	a915      	add	r1, sp, #84	; 0x54
 8008444:	4620      	mov	r0, r4
 8008446:	f001 f927 	bl	8009698 <__gethex>
 800844a:	f010 070f 	ands.w	r7, r0, #15
 800844e:	4605      	mov	r5, r0
 8008450:	d005      	beq.n	800845e <_strtod_l+0x76>
 8008452:	2f06      	cmp	r7, #6
 8008454:	d12a      	bne.n	80084ac <_strtod_l+0xc4>
 8008456:	3601      	adds	r6, #1
 8008458:	2300      	movs	r3, #0
 800845a:	9615      	str	r6, [sp, #84]	; 0x54
 800845c:	930a      	str	r3, [sp, #40]	; 0x28
 800845e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008460:	2b00      	cmp	r3, #0
 8008462:	f040 857f 	bne.w	8008f64 <_strtod_l+0xb7c>
 8008466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008468:	b1db      	cbz	r3, 80084a2 <_strtod_l+0xba>
 800846a:	4642      	mov	r2, r8
 800846c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008470:	ec43 2b10 	vmov	d0, r2, r3
 8008474:	b01b      	add	sp, #108	; 0x6c
 8008476:	ecbd 8b02 	vpop	{d8}
 800847a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847e:	2920      	cmp	r1, #32
 8008480:	d1cc      	bne.n	800841c <_strtod_l+0x34>
 8008482:	3201      	adds	r2, #1
 8008484:	e7bf      	b.n	8008406 <_strtod_l+0x1e>
 8008486:	292d      	cmp	r1, #45	; 0x2d
 8008488:	d1c8      	bne.n	800841c <_strtod_l+0x34>
 800848a:	2101      	movs	r1, #1
 800848c:	910a      	str	r1, [sp, #40]	; 0x28
 800848e:	1c51      	adds	r1, r2, #1
 8008490:	9115      	str	r1, [sp, #84]	; 0x54
 8008492:	7852      	ldrb	r2, [r2, #1]
 8008494:	2a00      	cmp	r2, #0
 8008496:	d1c3      	bne.n	8008420 <_strtod_l+0x38>
 8008498:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800849a:	9515      	str	r5, [sp, #84]	; 0x54
 800849c:	2b00      	cmp	r3, #0
 800849e:	f040 855f 	bne.w	8008f60 <_strtod_l+0xb78>
 80084a2:	4642      	mov	r2, r8
 80084a4:	464b      	mov	r3, r9
 80084a6:	e7e3      	b.n	8008470 <_strtod_l+0x88>
 80084a8:	2100      	movs	r1, #0
 80084aa:	e7ef      	b.n	800848c <_strtod_l+0xa4>
 80084ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80084ae:	b13a      	cbz	r2, 80084c0 <_strtod_l+0xd8>
 80084b0:	2135      	movs	r1, #53	; 0x35
 80084b2:	a818      	add	r0, sp, #96	; 0x60
 80084b4:	f002 fa53 	bl	800a95e <__copybits>
 80084b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80084ba:	4620      	mov	r0, r4
 80084bc:	f001 fe59 	bl	800a172 <_Bfree>
 80084c0:	3f01      	subs	r7, #1
 80084c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80084c4:	2f04      	cmp	r7, #4
 80084c6:	d806      	bhi.n	80084d6 <_strtod_l+0xee>
 80084c8:	e8df f007 	tbb	[pc, r7]
 80084cc:	201d0314 	.word	0x201d0314
 80084d0:	14          	.byte	0x14
 80084d1:	00          	.byte	0x00
 80084d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80084d6:	05e9      	lsls	r1, r5, #23
 80084d8:	bf48      	it	mi
 80084da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80084de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084e2:	0d1b      	lsrs	r3, r3, #20
 80084e4:	051b      	lsls	r3, r3, #20
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1b9      	bne.n	800845e <_strtod_l+0x76>
 80084ea:	f000 ff05 	bl	80092f8 <__errno>
 80084ee:	2322      	movs	r3, #34	; 0x22
 80084f0:	6003      	str	r3, [r0, #0]
 80084f2:	e7b4      	b.n	800845e <_strtod_l+0x76>
 80084f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80084f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80084fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008500:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008504:	e7e7      	b.n	80084d6 <_strtod_l+0xee>
 8008506:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008680 <_strtod_l+0x298>
 800850a:	e7e4      	b.n	80084d6 <_strtod_l+0xee>
 800850c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008510:	f04f 38ff 	mov.w	r8, #4294967295
 8008514:	e7df      	b.n	80084d6 <_strtod_l+0xee>
 8008516:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	9215      	str	r2, [sp, #84]	; 0x54
 800851c:	785b      	ldrb	r3, [r3, #1]
 800851e:	2b30      	cmp	r3, #48	; 0x30
 8008520:	d0f9      	beq.n	8008516 <_strtod_l+0x12e>
 8008522:	2b00      	cmp	r3, #0
 8008524:	d09b      	beq.n	800845e <_strtod_l+0x76>
 8008526:	2301      	movs	r3, #1
 8008528:	f04f 0a00 	mov.w	sl, #0
 800852c:	9304      	str	r3, [sp, #16]
 800852e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008530:	930b      	str	r3, [sp, #44]	; 0x2c
 8008532:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008536:	46d3      	mov	fp, sl
 8008538:	220a      	movs	r2, #10
 800853a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800853c:	7806      	ldrb	r6, [r0, #0]
 800853e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008542:	b2d9      	uxtb	r1, r3
 8008544:	2909      	cmp	r1, #9
 8008546:	d926      	bls.n	8008596 <_strtod_l+0x1ae>
 8008548:	494c      	ldr	r1, [pc, #304]	; (800867c <_strtod_l+0x294>)
 800854a:	2201      	movs	r2, #1
 800854c:	f000 fe75 	bl	800923a <strncmp>
 8008550:	2800      	cmp	r0, #0
 8008552:	d030      	beq.n	80085b6 <_strtod_l+0x1ce>
 8008554:	2000      	movs	r0, #0
 8008556:	4632      	mov	r2, r6
 8008558:	9005      	str	r0, [sp, #20]
 800855a:	465e      	mov	r6, fp
 800855c:	4603      	mov	r3, r0
 800855e:	2a65      	cmp	r2, #101	; 0x65
 8008560:	d001      	beq.n	8008566 <_strtod_l+0x17e>
 8008562:	2a45      	cmp	r2, #69	; 0x45
 8008564:	d113      	bne.n	800858e <_strtod_l+0x1a6>
 8008566:	b91e      	cbnz	r6, 8008570 <_strtod_l+0x188>
 8008568:	9a04      	ldr	r2, [sp, #16]
 800856a:	4302      	orrs	r2, r0
 800856c:	d094      	beq.n	8008498 <_strtod_l+0xb0>
 800856e:	2600      	movs	r6, #0
 8008570:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8008572:	1c6a      	adds	r2, r5, #1
 8008574:	9215      	str	r2, [sp, #84]	; 0x54
 8008576:	786a      	ldrb	r2, [r5, #1]
 8008578:	2a2b      	cmp	r2, #43	; 0x2b
 800857a:	d074      	beq.n	8008666 <_strtod_l+0x27e>
 800857c:	2a2d      	cmp	r2, #45	; 0x2d
 800857e:	d078      	beq.n	8008672 <_strtod_l+0x28a>
 8008580:	f04f 0c00 	mov.w	ip, #0
 8008584:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008588:	2909      	cmp	r1, #9
 800858a:	d97f      	bls.n	800868c <_strtod_l+0x2a4>
 800858c:	9515      	str	r5, [sp, #84]	; 0x54
 800858e:	2700      	movs	r7, #0
 8008590:	e09e      	b.n	80086d0 <_strtod_l+0x2e8>
 8008592:	2300      	movs	r3, #0
 8008594:	e7c8      	b.n	8008528 <_strtod_l+0x140>
 8008596:	f1bb 0f08 	cmp.w	fp, #8
 800859a:	bfd8      	it	le
 800859c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800859e:	f100 0001 	add.w	r0, r0, #1
 80085a2:	bfda      	itte	le
 80085a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80085a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80085aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80085ae:	f10b 0b01 	add.w	fp, fp, #1
 80085b2:	9015      	str	r0, [sp, #84]	; 0x54
 80085b4:	e7c1      	b.n	800853a <_strtod_l+0x152>
 80085b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085b8:	1c5a      	adds	r2, r3, #1
 80085ba:	9215      	str	r2, [sp, #84]	; 0x54
 80085bc:	785a      	ldrb	r2, [r3, #1]
 80085be:	f1bb 0f00 	cmp.w	fp, #0
 80085c2:	d037      	beq.n	8008634 <_strtod_l+0x24c>
 80085c4:	9005      	str	r0, [sp, #20]
 80085c6:	465e      	mov	r6, fp
 80085c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80085cc:	2b09      	cmp	r3, #9
 80085ce:	d912      	bls.n	80085f6 <_strtod_l+0x20e>
 80085d0:	2301      	movs	r3, #1
 80085d2:	e7c4      	b.n	800855e <_strtod_l+0x176>
 80085d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085d6:	1c5a      	adds	r2, r3, #1
 80085d8:	9215      	str	r2, [sp, #84]	; 0x54
 80085da:	785a      	ldrb	r2, [r3, #1]
 80085dc:	3001      	adds	r0, #1
 80085de:	2a30      	cmp	r2, #48	; 0x30
 80085e0:	d0f8      	beq.n	80085d4 <_strtod_l+0x1ec>
 80085e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80085e6:	2b08      	cmp	r3, #8
 80085e8:	f200 84c1 	bhi.w	8008f6e <_strtod_l+0xb86>
 80085ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80085ee:	9005      	str	r0, [sp, #20]
 80085f0:	2000      	movs	r0, #0
 80085f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f4:	4606      	mov	r6, r0
 80085f6:	3a30      	subs	r2, #48	; 0x30
 80085f8:	f100 0301 	add.w	r3, r0, #1
 80085fc:	d014      	beq.n	8008628 <_strtod_l+0x240>
 80085fe:	9905      	ldr	r1, [sp, #20]
 8008600:	4419      	add	r1, r3
 8008602:	9105      	str	r1, [sp, #20]
 8008604:	4633      	mov	r3, r6
 8008606:	eb00 0c06 	add.w	ip, r0, r6
 800860a:	210a      	movs	r1, #10
 800860c:	4563      	cmp	r3, ip
 800860e:	d113      	bne.n	8008638 <_strtod_l+0x250>
 8008610:	1833      	adds	r3, r6, r0
 8008612:	2b08      	cmp	r3, #8
 8008614:	f106 0601 	add.w	r6, r6, #1
 8008618:	4406      	add	r6, r0
 800861a:	dc1a      	bgt.n	8008652 <_strtod_l+0x26a>
 800861c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800861e:	230a      	movs	r3, #10
 8008620:	fb03 2301 	mla	r3, r3, r1, r2
 8008624:	9309      	str	r3, [sp, #36]	; 0x24
 8008626:	2300      	movs	r3, #0
 8008628:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800862a:	1c51      	adds	r1, r2, #1
 800862c:	9115      	str	r1, [sp, #84]	; 0x54
 800862e:	7852      	ldrb	r2, [r2, #1]
 8008630:	4618      	mov	r0, r3
 8008632:	e7c9      	b.n	80085c8 <_strtod_l+0x1e0>
 8008634:	4658      	mov	r0, fp
 8008636:	e7d2      	b.n	80085de <_strtod_l+0x1f6>
 8008638:	2b08      	cmp	r3, #8
 800863a:	f103 0301 	add.w	r3, r3, #1
 800863e:	dc03      	bgt.n	8008648 <_strtod_l+0x260>
 8008640:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008642:	434f      	muls	r7, r1
 8008644:	9709      	str	r7, [sp, #36]	; 0x24
 8008646:	e7e1      	b.n	800860c <_strtod_l+0x224>
 8008648:	2b10      	cmp	r3, #16
 800864a:	bfd8      	it	le
 800864c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8008650:	e7dc      	b.n	800860c <_strtod_l+0x224>
 8008652:	2e10      	cmp	r6, #16
 8008654:	bfdc      	itt	le
 8008656:	230a      	movle	r3, #10
 8008658:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800865c:	e7e3      	b.n	8008626 <_strtod_l+0x23e>
 800865e:	2300      	movs	r3, #0
 8008660:	9305      	str	r3, [sp, #20]
 8008662:	2301      	movs	r3, #1
 8008664:	e780      	b.n	8008568 <_strtod_l+0x180>
 8008666:	f04f 0c00 	mov.w	ip, #0
 800866a:	1caa      	adds	r2, r5, #2
 800866c:	9215      	str	r2, [sp, #84]	; 0x54
 800866e:	78aa      	ldrb	r2, [r5, #2]
 8008670:	e788      	b.n	8008584 <_strtod_l+0x19c>
 8008672:	f04f 0c01 	mov.w	ip, #1
 8008676:	e7f8      	b.n	800866a <_strtod_l+0x282>
 8008678:	0800f510 	.word	0x0800f510
 800867c:	0800f50c 	.word	0x0800f50c
 8008680:	7ff00000 	.word	0x7ff00000
 8008684:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008686:	1c51      	adds	r1, r2, #1
 8008688:	9115      	str	r1, [sp, #84]	; 0x54
 800868a:	7852      	ldrb	r2, [r2, #1]
 800868c:	2a30      	cmp	r2, #48	; 0x30
 800868e:	d0f9      	beq.n	8008684 <_strtod_l+0x29c>
 8008690:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008694:	2908      	cmp	r1, #8
 8008696:	f63f af7a 	bhi.w	800858e <_strtod_l+0x1a6>
 800869a:	3a30      	subs	r2, #48	; 0x30
 800869c:	9208      	str	r2, [sp, #32]
 800869e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80086a0:	920c      	str	r2, [sp, #48]	; 0x30
 80086a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80086a4:	1c57      	adds	r7, r2, #1
 80086a6:	9715      	str	r7, [sp, #84]	; 0x54
 80086a8:	7852      	ldrb	r2, [r2, #1]
 80086aa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80086ae:	f1be 0f09 	cmp.w	lr, #9
 80086b2:	d938      	bls.n	8008726 <_strtod_l+0x33e>
 80086b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80086b6:	1a7f      	subs	r7, r7, r1
 80086b8:	2f08      	cmp	r7, #8
 80086ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80086be:	dc03      	bgt.n	80086c8 <_strtod_l+0x2e0>
 80086c0:	9908      	ldr	r1, [sp, #32]
 80086c2:	428f      	cmp	r7, r1
 80086c4:	bfa8      	it	ge
 80086c6:	460f      	movge	r7, r1
 80086c8:	f1bc 0f00 	cmp.w	ip, #0
 80086cc:	d000      	beq.n	80086d0 <_strtod_l+0x2e8>
 80086ce:	427f      	negs	r7, r7
 80086d0:	2e00      	cmp	r6, #0
 80086d2:	d14f      	bne.n	8008774 <_strtod_l+0x38c>
 80086d4:	9904      	ldr	r1, [sp, #16]
 80086d6:	4301      	orrs	r1, r0
 80086d8:	f47f aec1 	bne.w	800845e <_strtod_l+0x76>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f47f aedb 	bne.w	8008498 <_strtod_l+0xb0>
 80086e2:	2a69      	cmp	r2, #105	; 0x69
 80086e4:	d029      	beq.n	800873a <_strtod_l+0x352>
 80086e6:	dc26      	bgt.n	8008736 <_strtod_l+0x34e>
 80086e8:	2a49      	cmp	r2, #73	; 0x49
 80086ea:	d026      	beq.n	800873a <_strtod_l+0x352>
 80086ec:	2a4e      	cmp	r2, #78	; 0x4e
 80086ee:	f47f aed3 	bne.w	8008498 <_strtod_l+0xb0>
 80086f2:	499b      	ldr	r1, [pc, #620]	; (8008960 <_strtod_l+0x578>)
 80086f4:	a815      	add	r0, sp, #84	; 0x54
 80086f6:	f001 fa0f 	bl	8009b18 <__match>
 80086fa:	2800      	cmp	r0, #0
 80086fc:	f43f aecc 	beq.w	8008498 <_strtod_l+0xb0>
 8008700:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008702:	781b      	ldrb	r3, [r3, #0]
 8008704:	2b28      	cmp	r3, #40	; 0x28
 8008706:	d12f      	bne.n	8008768 <_strtod_l+0x380>
 8008708:	4996      	ldr	r1, [pc, #600]	; (8008964 <_strtod_l+0x57c>)
 800870a:	aa18      	add	r2, sp, #96	; 0x60
 800870c:	a815      	add	r0, sp, #84	; 0x54
 800870e:	f001 fa17 	bl	8009b40 <__hexnan>
 8008712:	2805      	cmp	r0, #5
 8008714:	d128      	bne.n	8008768 <_strtod_l+0x380>
 8008716:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008718:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800871c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008720:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008724:	e69b      	b.n	800845e <_strtod_l+0x76>
 8008726:	9f08      	ldr	r7, [sp, #32]
 8008728:	210a      	movs	r1, #10
 800872a:	fb01 2107 	mla	r1, r1, r7, r2
 800872e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008732:	9208      	str	r2, [sp, #32]
 8008734:	e7b5      	b.n	80086a2 <_strtod_l+0x2ba>
 8008736:	2a6e      	cmp	r2, #110	; 0x6e
 8008738:	e7d9      	b.n	80086ee <_strtod_l+0x306>
 800873a:	498b      	ldr	r1, [pc, #556]	; (8008968 <_strtod_l+0x580>)
 800873c:	a815      	add	r0, sp, #84	; 0x54
 800873e:	f001 f9eb 	bl	8009b18 <__match>
 8008742:	2800      	cmp	r0, #0
 8008744:	f43f aea8 	beq.w	8008498 <_strtod_l+0xb0>
 8008748:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800874a:	4988      	ldr	r1, [pc, #544]	; (800896c <_strtod_l+0x584>)
 800874c:	3b01      	subs	r3, #1
 800874e:	a815      	add	r0, sp, #84	; 0x54
 8008750:	9315      	str	r3, [sp, #84]	; 0x54
 8008752:	f001 f9e1 	bl	8009b18 <__match>
 8008756:	b910      	cbnz	r0, 800875e <_strtod_l+0x376>
 8008758:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800875a:	3301      	adds	r3, #1
 800875c:	9315      	str	r3, [sp, #84]	; 0x54
 800875e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800897c <_strtod_l+0x594>
 8008762:	f04f 0800 	mov.w	r8, #0
 8008766:	e67a      	b.n	800845e <_strtod_l+0x76>
 8008768:	4881      	ldr	r0, [pc, #516]	; (8008970 <_strtod_l+0x588>)
 800876a:	f000 fe01 	bl	8009370 <nan>
 800876e:	ec59 8b10 	vmov	r8, r9, d0
 8008772:	e674      	b.n	800845e <_strtod_l+0x76>
 8008774:	9b05      	ldr	r3, [sp, #20]
 8008776:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008778:	1afb      	subs	r3, r7, r3
 800877a:	f1bb 0f00 	cmp.w	fp, #0
 800877e:	bf08      	it	eq
 8008780:	46b3      	moveq	fp, r6
 8008782:	2e10      	cmp	r6, #16
 8008784:	9308      	str	r3, [sp, #32]
 8008786:	4635      	mov	r5, r6
 8008788:	bfa8      	it	ge
 800878a:	2510      	movge	r5, #16
 800878c:	f7f7 fec2 	bl	8000514 <__aeabi_ui2d>
 8008790:	2e09      	cmp	r6, #9
 8008792:	4680      	mov	r8, r0
 8008794:	4689      	mov	r9, r1
 8008796:	dd13      	ble.n	80087c0 <_strtod_l+0x3d8>
 8008798:	4b76      	ldr	r3, [pc, #472]	; (8008974 <_strtod_l+0x58c>)
 800879a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800879e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80087a2:	f7f7 ff31 	bl	8000608 <__aeabi_dmul>
 80087a6:	4680      	mov	r8, r0
 80087a8:	4650      	mov	r0, sl
 80087aa:	4689      	mov	r9, r1
 80087ac:	f7f7 feb2 	bl	8000514 <__aeabi_ui2d>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4640      	mov	r0, r8
 80087b6:	4649      	mov	r1, r9
 80087b8:	f7f7 fd70 	bl	800029c <__adddf3>
 80087bc:	4680      	mov	r8, r0
 80087be:	4689      	mov	r9, r1
 80087c0:	2e0f      	cmp	r6, #15
 80087c2:	dc38      	bgt.n	8008836 <_strtod_l+0x44e>
 80087c4:	9b08      	ldr	r3, [sp, #32]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f43f ae49 	beq.w	800845e <_strtod_l+0x76>
 80087cc:	dd24      	ble.n	8008818 <_strtod_l+0x430>
 80087ce:	2b16      	cmp	r3, #22
 80087d0:	dc0b      	bgt.n	80087ea <_strtod_l+0x402>
 80087d2:	4968      	ldr	r1, [pc, #416]	; (8008974 <_strtod_l+0x58c>)
 80087d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087dc:	4642      	mov	r2, r8
 80087de:	464b      	mov	r3, r9
 80087e0:	f7f7 ff12 	bl	8000608 <__aeabi_dmul>
 80087e4:	4680      	mov	r8, r0
 80087e6:	4689      	mov	r9, r1
 80087e8:	e639      	b.n	800845e <_strtod_l+0x76>
 80087ea:	9a08      	ldr	r2, [sp, #32]
 80087ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80087f0:	4293      	cmp	r3, r2
 80087f2:	db20      	blt.n	8008836 <_strtod_l+0x44e>
 80087f4:	4c5f      	ldr	r4, [pc, #380]	; (8008974 <_strtod_l+0x58c>)
 80087f6:	f1c6 060f 	rsb	r6, r6, #15
 80087fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80087fe:	4642      	mov	r2, r8
 8008800:	464b      	mov	r3, r9
 8008802:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008806:	f7f7 feff 	bl	8000608 <__aeabi_dmul>
 800880a:	9b08      	ldr	r3, [sp, #32]
 800880c:	1b9e      	subs	r6, r3, r6
 800880e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008812:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008816:	e7e3      	b.n	80087e0 <_strtod_l+0x3f8>
 8008818:	9b08      	ldr	r3, [sp, #32]
 800881a:	3316      	adds	r3, #22
 800881c:	db0b      	blt.n	8008836 <_strtod_l+0x44e>
 800881e:	9b05      	ldr	r3, [sp, #20]
 8008820:	1bdf      	subs	r7, r3, r7
 8008822:	4b54      	ldr	r3, [pc, #336]	; (8008974 <_strtod_l+0x58c>)
 8008824:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800882c:	4640      	mov	r0, r8
 800882e:	4649      	mov	r1, r9
 8008830:	f7f8 f814 	bl	800085c <__aeabi_ddiv>
 8008834:	e7d6      	b.n	80087e4 <_strtod_l+0x3fc>
 8008836:	9b08      	ldr	r3, [sp, #32]
 8008838:	1b75      	subs	r5, r6, r5
 800883a:	441d      	add	r5, r3
 800883c:	2d00      	cmp	r5, #0
 800883e:	dd70      	ble.n	8008922 <_strtod_l+0x53a>
 8008840:	f015 030f 	ands.w	r3, r5, #15
 8008844:	d00a      	beq.n	800885c <_strtod_l+0x474>
 8008846:	494b      	ldr	r1, [pc, #300]	; (8008974 <_strtod_l+0x58c>)
 8008848:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800884c:	4642      	mov	r2, r8
 800884e:	464b      	mov	r3, r9
 8008850:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008854:	f7f7 fed8 	bl	8000608 <__aeabi_dmul>
 8008858:	4680      	mov	r8, r0
 800885a:	4689      	mov	r9, r1
 800885c:	f035 050f 	bics.w	r5, r5, #15
 8008860:	d04d      	beq.n	80088fe <_strtod_l+0x516>
 8008862:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008866:	dd22      	ble.n	80088ae <_strtod_l+0x4c6>
 8008868:	2500      	movs	r5, #0
 800886a:	46ab      	mov	fp, r5
 800886c:	9509      	str	r5, [sp, #36]	; 0x24
 800886e:	9505      	str	r5, [sp, #20]
 8008870:	2322      	movs	r3, #34	; 0x22
 8008872:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800897c <_strtod_l+0x594>
 8008876:	6023      	str	r3, [r4, #0]
 8008878:	f04f 0800 	mov.w	r8, #0
 800887c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800887e:	2b00      	cmp	r3, #0
 8008880:	f43f aded 	beq.w	800845e <_strtod_l+0x76>
 8008884:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008886:	4620      	mov	r0, r4
 8008888:	f001 fc73 	bl	800a172 <_Bfree>
 800888c:	9905      	ldr	r1, [sp, #20]
 800888e:	4620      	mov	r0, r4
 8008890:	f001 fc6f 	bl	800a172 <_Bfree>
 8008894:	4659      	mov	r1, fp
 8008896:	4620      	mov	r0, r4
 8008898:	f001 fc6b 	bl	800a172 <_Bfree>
 800889c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800889e:	4620      	mov	r0, r4
 80088a0:	f001 fc67 	bl	800a172 <_Bfree>
 80088a4:	4629      	mov	r1, r5
 80088a6:	4620      	mov	r0, r4
 80088a8:	f001 fc63 	bl	800a172 <_Bfree>
 80088ac:	e5d7      	b.n	800845e <_strtod_l+0x76>
 80088ae:	4b32      	ldr	r3, [pc, #200]	; (8008978 <_strtod_l+0x590>)
 80088b0:	9304      	str	r3, [sp, #16]
 80088b2:	2300      	movs	r3, #0
 80088b4:	112d      	asrs	r5, r5, #4
 80088b6:	4640      	mov	r0, r8
 80088b8:	4649      	mov	r1, r9
 80088ba:	469a      	mov	sl, r3
 80088bc:	2d01      	cmp	r5, #1
 80088be:	dc21      	bgt.n	8008904 <_strtod_l+0x51c>
 80088c0:	b10b      	cbz	r3, 80088c6 <_strtod_l+0x4de>
 80088c2:	4680      	mov	r8, r0
 80088c4:	4689      	mov	r9, r1
 80088c6:	492c      	ldr	r1, [pc, #176]	; (8008978 <_strtod_l+0x590>)
 80088c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80088cc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80088d0:	4642      	mov	r2, r8
 80088d2:	464b      	mov	r3, r9
 80088d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088d8:	f7f7 fe96 	bl	8000608 <__aeabi_dmul>
 80088dc:	4b27      	ldr	r3, [pc, #156]	; (800897c <_strtod_l+0x594>)
 80088de:	460a      	mov	r2, r1
 80088e0:	400b      	ands	r3, r1
 80088e2:	4927      	ldr	r1, [pc, #156]	; (8008980 <_strtod_l+0x598>)
 80088e4:	428b      	cmp	r3, r1
 80088e6:	4680      	mov	r8, r0
 80088e8:	d8be      	bhi.n	8008868 <_strtod_l+0x480>
 80088ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80088ee:	428b      	cmp	r3, r1
 80088f0:	bf86      	itte	hi
 80088f2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008984 <_strtod_l+0x59c>
 80088f6:	f04f 38ff 	movhi.w	r8, #4294967295
 80088fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80088fe:	2300      	movs	r3, #0
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	e07b      	b.n	80089fc <_strtod_l+0x614>
 8008904:	07ea      	lsls	r2, r5, #31
 8008906:	d505      	bpl.n	8008914 <_strtod_l+0x52c>
 8008908:	9b04      	ldr	r3, [sp, #16]
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	f7f7 fe7b 	bl	8000608 <__aeabi_dmul>
 8008912:	2301      	movs	r3, #1
 8008914:	9a04      	ldr	r2, [sp, #16]
 8008916:	3208      	adds	r2, #8
 8008918:	f10a 0a01 	add.w	sl, sl, #1
 800891c:	106d      	asrs	r5, r5, #1
 800891e:	9204      	str	r2, [sp, #16]
 8008920:	e7cc      	b.n	80088bc <_strtod_l+0x4d4>
 8008922:	d0ec      	beq.n	80088fe <_strtod_l+0x516>
 8008924:	426d      	negs	r5, r5
 8008926:	f015 020f 	ands.w	r2, r5, #15
 800892a:	d00a      	beq.n	8008942 <_strtod_l+0x55a>
 800892c:	4b11      	ldr	r3, [pc, #68]	; (8008974 <_strtod_l+0x58c>)
 800892e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008932:	4640      	mov	r0, r8
 8008934:	4649      	mov	r1, r9
 8008936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893a:	f7f7 ff8f 	bl	800085c <__aeabi_ddiv>
 800893e:	4680      	mov	r8, r0
 8008940:	4689      	mov	r9, r1
 8008942:	112d      	asrs	r5, r5, #4
 8008944:	d0db      	beq.n	80088fe <_strtod_l+0x516>
 8008946:	2d1f      	cmp	r5, #31
 8008948:	dd1e      	ble.n	8008988 <_strtod_l+0x5a0>
 800894a:	2500      	movs	r5, #0
 800894c:	46ab      	mov	fp, r5
 800894e:	9509      	str	r5, [sp, #36]	; 0x24
 8008950:	9505      	str	r5, [sp, #20]
 8008952:	2322      	movs	r3, #34	; 0x22
 8008954:	f04f 0800 	mov.w	r8, #0
 8008958:	f04f 0900 	mov.w	r9, #0
 800895c:	6023      	str	r3, [r4, #0]
 800895e:	e78d      	b.n	800887c <_strtod_l+0x494>
 8008960:	0800f842 	.word	0x0800f842
 8008964:	0800f524 	.word	0x0800f524
 8008968:	0800f83a 	.word	0x0800f83a
 800896c:	0800f8c8 	.word	0x0800f8c8
 8008970:	0800f8c4 	.word	0x0800f8c4
 8008974:	0800f660 	.word	0x0800f660
 8008978:	0800f638 	.word	0x0800f638
 800897c:	7ff00000 	.word	0x7ff00000
 8008980:	7ca00000 	.word	0x7ca00000
 8008984:	7fefffff 	.word	0x7fefffff
 8008988:	f015 0310 	ands.w	r3, r5, #16
 800898c:	bf18      	it	ne
 800898e:	236a      	movne	r3, #106	; 0x6a
 8008990:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008d34 <_strtod_l+0x94c>
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	4640      	mov	r0, r8
 8008998:	4649      	mov	r1, r9
 800899a:	2300      	movs	r3, #0
 800899c:	07ea      	lsls	r2, r5, #31
 800899e:	d504      	bpl.n	80089aa <_strtod_l+0x5c2>
 80089a0:	e9da 2300 	ldrd	r2, r3, [sl]
 80089a4:	f7f7 fe30 	bl	8000608 <__aeabi_dmul>
 80089a8:	2301      	movs	r3, #1
 80089aa:	106d      	asrs	r5, r5, #1
 80089ac:	f10a 0a08 	add.w	sl, sl, #8
 80089b0:	d1f4      	bne.n	800899c <_strtod_l+0x5b4>
 80089b2:	b10b      	cbz	r3, 80089b8 <_strtod_l+0x5d0>
 80089b4:	4680      	mov	r8, r0
 80089b6:	4689      	mov	r9, r1
 80089b8:	9b04      	ldr	r3, [sp, #16]
 80089ba:	b1bb      	cbz	r3, 80089ec <_strtod_l+0x604>
 80089bc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80089c0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	4649      	mov	r1, r9
 80089c8:	dd10      	ble.n	80089ec <_strtod_l+0x604>
 80089ca:	2b1f      	cmp	r3, #31
 80089cc:	f340 811e 	ble.w	8008c0c <_strtod_l+0x824>
 80089d0:	2b34      	cmp	r3, #52	; 0x34
 80089d2:	bfde      	ittt	le
 80089d4:	f04f 33ff 	movle.w	r3, #4294967295
 80089d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80089dc:	4093      	lslle	r3, r2
 80089de:	f04f 0800 	mov.w	r8, #0
 80089e2:	bfcc      	ite	gt
 80089e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80089e8:	ea03 0901 	andle.w	r9, r3, r1
 80089ec:	2200      	movs	r2, #0
 80089ee:	2300      	movs	r3, #0
 80089f0:	4640      	mov	r0, r8
 80089f2:	4649      	mov	r1, r9
 80089f4:	f7f8 f870 	bl	8000ad8 <__aeabi_dcmpeq>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d1a6      	bne.n	800894a <_strtod_l+0x562>
 80089fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a02:	4633      	mov	r3, r6
 8008a04:	465a      	mov	r2, fp
 8008a06:	4620      	mov	r0, r4
 8008a08:	f001 fc02 	bl	800a210 <__s2b>
 8008a0c:	9009      	str	r0, [sp, #36]	; 0x24
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	f43f af2a 	beq.w	8008868 <_strtod_l+0x480>
 8008a14:	9a08      	ldr	r2, [sp, #32]
 8008a16:	9b05      	ldr	r3, [sp, #20]
 8008a18:	2a00      	cmp	r2, #0
 8008a1a:	eba3 0307 	sub.w	r3, r3, r7
 8008a1e:	bfa8      	it	ge
 8008a20:	2300      	movge	r3, #0
 8008a22:	930c      	str	r3, [sp, #48]	; 0x30
 8008a24:	2500      	movs	r5, #0
 8008a26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008a2a:	9312      	str	r3, [sp, #72]	; 0x48
 8008a2c:	46ab      	mov	fp, r5
 8008a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a30:	4620      	mov	r0, r4
 8008a32:	6859      	ldr	r1, [r3, #4]
 8008a34:	f001 fb78 	bl	800a128 <_Balloc>
 8008a38:	9005      	str	r0, [sp, #20]
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	f43f af18 	beq.w	8008870 <_strtod_l+0x488>
 8008a40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a42:	691a      	ldr	r2, [r3, #16]
 8008a44:	3202      	adds	r2, #2
 8008a46:	f103 010c 	add.w	r1, r3, #12
 8008a4a:	0092      	lsls	r2, r2, #2
 8008a4c:	300c      	adds	r0, #12
 8008a4e:	f000 fc81 	bl	8009354 <memcpy>
 8008a52:	ec49 8b10 	vmov	d0, r8, r9
 8008a56:	aa18      	add	r2, sp, #96	; 0x60
 8008a58:	a917      	add	r1, sp, #92	; 0x5c
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f001 fef2 	bl	800a844 <__d2b>
 8008a60:	ec49 8b18 	vmov	d8, r8, r9
 8008a64:	9016      	str	r0, [sp, #88]	; 0x58
 8008a66:	2800      	cmp	r0, #0
 8008a68:	f43f af02 	beq.w	8008870 <_strtod_l+0x488>
 8008a6c:	2101      	movs	r1, #1
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f001 fc66 	bl	800a340 <__i2b>
 8008a74:	4683      	mov	fp, r0
 8008a76:	2800      	cmp	r0, #0
 8008a78:	f43f aefa 	beq.w	8008870 <_strtod_l+0x488>
 8008a7c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008a7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a80:	2e00      	cmp	r6, #0
 8008a82:	bfab      	itete	ge
 8008a84:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008a86:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008a88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008a8a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008a8e:	bfac      	ite	ge
 8008a90:	eb06 0a03 	addge.w	sl, r6, r3
 8008a94:	1b9f      	sublt	r7, r3, r6
 8008a96:	9b04      	ldr	r3, [sp, #16]
 8008a98:	1af6      	subs	r6, r6, r3
 8008a9a:	4416      	add	r6, r2
 8008a9c:	4ba0      	ldr	r3, [pc, #640]	; (8008d20 <_strtod_l+0x938>)
 8008a9e:	3e01      	subs	r6, #1
 8008aa0:	429e      	cmp	r6, r3
 8008aa2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008aa6:	f280 80c4 	bge.w	8008c32 <_strtod_l+0x84a>
 8008aaa:	1b9b      	subs	r3, r3, r6
 8008aac:	2b1f      	cmp	r3, #31
 8008aae:	eba2 0203 	sub.w	r2, r2, r3
 8008ab2:	f04f 0101 	mov.w	r1, #1
 8008ab6:	f300 80b0 	bgt.w	8008c1a <_strtod_l+0x832>
 8008aba:	fa01 f303 	lsl.w	r3, r1, r3
 8008abe:	930e      	str	r3, [sp, #56]	; 0x38
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	930d      	str	r3, [sp, #52]	; 0x34
 8008ac4:	eb0a 0602 	add.w	r6, sl, r2
 8008ac8:	9b04      	ldr	r3, [sp, #16]
 8008aca:	45b2      	cmp	sl, r6
 8008acc:	4417      	add	r7, r2
 8008ace:	441f      	add	r7, r3
 8008ad0:	4653      	mov	r3, sl
 8008ad2:	bfa8      	it	ge
 8008ad4:	4633      	movge	r3, r6
 8008ad6:	42bb      	cmp	r3, r7
 8008ad8:	bfa8      	it	ge
 8008ada:	463b      	movge	r3, r7
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	bfc2      	ittt	gt
 8008ae0:	1af6      	subgt	r6, r6, r3
 8008ae2:	1aff      	subgt	r7, r7, r3
 8008ae4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8008ae8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dd17      	ble.n	8008b1e <_strtod_l+0x736>
 8008aee:	4659      	mov	r1, fp
 8008af0:	461a      	mov	r2, r3
 8008af2:	4620      	mov	r0, r4
 8008af4:	f001 fce4 	bl	800a4c0 <__pow5mult>
 8008af8:	4683      	mov	fp, r0
 8008afa:	2800      	cmp	r0, #0
 8008afc:	f43f aeb8 	beq.w	8008870 <_strtod_l+0x488>
 8008b00:	4601      	mov	r1, r0
 8008b02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008b04:	4620      	mov	r0, r4
 8008b06:	f001 fc31 	bl	800a36c <__multiply>
 8008b0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	f43f aeaf 	beq.w	8008870 <_strtod_l+0x488>
 8008b12:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b14:	4620      	mov	r0, r4
 8008b16:	f001 fb2c 	bl	800a172 <_Bfree>
 8008b1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b1c:	9316      	str	r3, [sp, #88]	; 0x58
 8008b1e:	2e00      	cmp	r6, #0
 8008b20:	f300 808c 	bgt.w	8008c3c <_strtod_l+0x854>
 8008b24:	9b08      	ldr	r3, [sp, #32]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	dd08      	ble.n	8008b3c <_strtod_l+0x754>
 8008b2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b2c:	9905      	ldr	r1, [sp, #20]
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f001 fcc6 	bl	800a4c0 <__pow5mult>
 8008b34:	9005      	str	r0, [sp, #20]
 8008b36:	2800      	cmp	r0, #0
 8008b38:	f43f ae9a 	beq.w	8008870 <_strtod_l+0x488>
 8008b3c:	2f00      	cmp	r7, #0
 8008b3e:	dd08      	ble.n	8008b52 <_strtod_l+0x76a>
 8008b40:	9905      	ldr	r1, [sp, #20]
 8008b42:	463a      	mov	r2, r7
 8008b44:	4620      	mov	r0, r4
 8008b46:	f001 fcfb 	bl	800a540 <__lshift>
 8008b4a:	9005      	str	r0, [sp, #20]
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f43f ae8f 	beq.w	8008870 <_strtod_l+0x488>
 8008b52:	f1ba 0f00 	cmp.w	sl, #0
 8008b56:	dd08      	ble.n	8008b6a <_strtod_l+0x782>
 8008b58:	4659      	mov	r1, fp
 8008b5a:	4652      	mov	r2, sl
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f001 fcef 	bl	800a540 <__lshift>
 8008b62:	4683      	mov	fp, r0
 8008b64:	2800      	cmp	r0, #0
 8008b66:	f43f ae83 	beq.w	8008870 <_strtod_l+0x488>
 8008b6a:	9a05      	ldr	r2, [sp, #20]
 8008b6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f001 fd6e 	bl	800a650 <__mdiff>
 8008b74:	4605      	mov	r5, r0
 8008b76:	2800      	cmp	r0, #0
 8008b78:	f43f ae7a 	beq.w	8008870 <_strtod_l+0x488>
 8008b7c:	68c3      	ldr	r3, [r0, #12]
 8008b7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b80:	2300      	movs	r3, #0
 8008b82:	60c3      	str	r3, [r0, #12]
 8008b84:	4659      	mov	r1, fp
 8008b86:	f001 fd47 	bl	800a618 <__mcmp>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	da60      	bge.n	8008c50 <_strtod_l+0x868>
 8008b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b90:	ea53 0308 	orrs.w	r3, r3, r8
 8008b94:	f040 8084 	bne.w	8008ca0 <_strtod_l+0x8b8>
 8008b98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d17f      	bne.n	8008ca0 <_strtod_l+0x8b8>
 8008ba0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008ba4:	0d1b      	lsrs	r3, r3, #20
 8008ba6:	051b      	lsls	r3, r3, #20
 8008ba8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008bac:	d978      	bls.n	8008ca0 <_strtod_l+0x8b8>
 8008bae:	696b      	ldr	r3, [r5, #20]
 8008bb0:	b913      	cbnz	r3, 8008bb8 <_strtod_l+0x7d0>
 8008bb2:	692b      	ldr	r3, [r5, #16]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	dd73      	ble.n	8008ca0 <_strtod_l+0x8b8>
 8008bb8:	4629      	mov	r1, r5
 8008bba:	2201      	movs	r2, #1
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	f001 fcbf 	bl	800a540 <__lshift>
 8008bc2:	4659      	mov	r1, fp
 8008bc4:	4605      	mov	r5, r0
 8008bc6:	f001 fd27 	bl	800a618 <__mcmp>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	dd68      	ble.n	8008ca0 <_strtod_l+0x8b8>
 8008bce:	9904      	ldr	r1, [sp, #16]
 8008bd0:	4a54      	ldr	r2, [pc, #336]	; (8008d24 <_strtod_l+0x93c>)
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	f000 8084 	beq.w	8008ce2 <_strtod_l+0x8fa>
 8008bda:	ea02 0109 	and.w	r1, r2, r9
 8008bde:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008be2:	dc7e      	bgt.n	8008ce2 <_strtod_l+0x8fa>
 8008be4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008be8:	f77f aeb3 	ble.w	8008952 <_strtod_l+0x56a>
 8008bec:	4b4e      	ldr	r3, [pc, #312]	; (8008d28 <_strtod_l+0x940>)
 8008bee:	4640      	mov	r0, r8
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f7f7 fd08 	bl	8000608 <__aeabi_dmul>
 8008bf8:	4b4a      	ldr	r3, [pc, #296]	; (8008d24 <_strtod_l+0x93c>)
 8008bfa:	400b      	ands	r3, r1
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	4689      	mov	r9, r1
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f47f ae3f 	bne.w	8008884 <_strtod_l+0x49c>
 8008c06:	2322      	movs	r3, #34	; 0x22
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	e63b      	b.n	8008884 <_strtod_l+0x49c>
 8008c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c10:	fa02 f303 	lsl.w	r3, r2, r3
 8008c14:	ea03 0808 	and.w	r8, r3, r8
 8008c18:	e6e8      	b.n	80089ec <_strtod_l+0x604>
 8008c1a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008c1e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008c22:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008c26:	36e2      	adds	r6, #226	; 0xe2
 8008c28:	fa01 f306 	lsl.w	r3, r1, r6
 8008c2c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008c30:	e748      	b.n	8008ac4 <_strtod_l+0x6dc>
 8008c32:	2100      	movs	r1, #0
 8008c34:	2301      	movs	r3, #1
 8008c36:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008c3a:	e743      	b.n	8008ac4 <_strtod_l+0x6dc>
 8008c3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008c3e:	4632      	mov	r2, r6
 8008c40:	4620      	mov	r0, r4
 8008c42:	f001 fc7d 	bl	800a540 <__lshift>
 8008c46:	9016      	str	r0, [sp, #88]	; 0x58
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	f47f af6b 	bne.w	8008b24 <_strtod_l+0x73c>
 8008c4e:	e60f      	b.n	8008870 <_strtod_l+0x488>
 8008c50:	46ca      	mov	sl, r9
 8008c52:	d171      	bne.n	8008d38 <_strtod_l+0x950>
 8008c54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c5a:	b352      	cbz	r2, 8008cb2 <_strtod_l+0x8ca>
 8008c5c:	4a33      	ldr	r2, [pc, #204]	; (8008d2c <_strtod_l+0x944>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d12a      	bne.n	8008cb8 <_strtod_l+0x8d0>
 8008c62:	9b04      	ldr	r3, [sp, #16]
 8008c64:	4641      	mov	r1, r8
 8008c66:	b1fb      	cbz	r3, 8008ca8 <_strtod_l+0x8c0>
 8008c68:	4b2e      	ldr	r3, [pc, #184]	; (8008d24 <_strtod_l+0x93c>)
 8008c6a:	ea09 0303 	and.w	r3, r9, r3
 8008c6e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c72:	f04f 32ff 	mov.w	r2, #4294967295
 8008c76:	d81a      	bhi.n	8008cae <_strtod_l+0x8c6>
 8008c78:	0d1b      	lsrs	r3, r3, #20
 8008c7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c82:	4299      	cmp	r1, r3
 8008c84:	d118      	bne.n	8008cb8 <_strtod_l+0x8d0>
 8008c86:	4b2a      	ldr	r3, [pc, #168]	; (8008d30 <_strtod_l+0x948>)
 8008c88:	459a      	cmp	sl, r3
 8008c8a:	d102      	bne.n	8008c92 <_strtod_l+0x8aa>
 8008c8c:	3101      	adds	r1, #1
 8008c8e:	f43f adef 	beq.w	8008870 <_strtod_l+0x488>
 8008c92:	4b24      	ldr	r3, [pc, #144]	; (8008d24 <_strtod_l+0x93c>)
 8008c94:	ea0a 0303 	and.w	r3, sl, r3
 8008c98:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008c9c:	f04f 0800 	mov.w	r8, #0
 8008ca0:	9b04      	ldr	r3, [sp, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d1a2      	bne.n	8008bec <_strtod_l+0x804>
 8008ca6:	e5ed      	b.n	8008884 <_strtod_l+0x49c>
 8008ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8008cac:	e7e9      	b.n	8008c82 <_strtod_l+0x89a>
 8008cae:	4613      	mov	r3, r2
 8008cb0:	e7e7      	b.n	8008c82 <_strtod_l+0x89a>
 8008cb2:	ea53 0308 	orrs.w	r3, r3, r8
 8008cb6:	d08a      	beq.n	8008bce <_strtod_l+0x7e6>
 8008cb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cba:	b1e3      	cbz	r3, 8008cf6 <_strtod_l+0x90e>
 8008cbc:	ea13 0f0a 	tst.w	r3, sl
 8008cc0:	d0ee      	beq.n	8008ca0 <_strtod_l+0x8b8>
 8008cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cc4:	9a04      	ldr	r2, [sp, #16]
 8008cc6:	4640      	mov	r0, r8
 8008cc8:	4649      	mov	r1, r9
 8008cca:	b1c3      	cbz	r3, 8008cfe <_strtod_l+0x916>
 8008ccc:	f7ff fb6d 	bl	80083aa <sulp>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	ec51 0b18 	vmov	r0, r1, d8
 8008cd8:	f7f7 fae0 	bl	800029c <__adddf3>
 8008cdc:	4680      	mov	r8, r0
 8008cde:	4689      	mov	r9, r1
 8008ce0:	e7de      	b.n	8008ca0 <_strtod_l+0x8b8>
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008ce8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008cec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008cf0:	f04f 38ff 	mov.w	r8, #4294967295
 8008cf4:	e7d4      	b.n	8008ca0 <_strtod_l+0x8b8>
 8008cf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cf8:	ea13 0f08 	tst.w	r3, r8
 8008cfc:	e7e0      	b.n	8008cc0 <_strtod_l+0x8d8>
 8008cfe:	f7ff fb54 	bl	80083aa <sulp>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	ec51 0b18 	vmov	r0, r1, d8
 8008d0a:	f7f7 fac5 	bl	8000298 <__aeabi_dsub>
 8008d0e:	2200      	movs	r2, #0
 8008d10:	2300      	movs	r3, #0
 8008d12:	4680      	mov	r8, r0
 8008d14:	4689      	mov	r9, r1
 8008d16:	f7f7 fedf 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	d0c0      	beq.n	8008ca0 <_strtod_l+0x8b8>
 8008d1e:	e618      	b.n	8008952 <_strtod_l+0x56a>
 8008d20:	fffffc02 	.word	0xfffffc02
 8008d24:	7ff00000 	.word	0x7ff00000
 8008d28:	39500000 	.word	0x39500000
 8008d2c:	000fffff 	.word	0x000fffff
 8008d30:	7fefffff 	.word	0x7fefffff
 8008d34:	0800f538 	.word	0x0800f538
 8008d38:	4659      	mov	r1, fp
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f001 fddc 	bl	800a8f8 <__ratio>
 8008d40:	ec57 6b10 	vmov	r6, r7, d0
 8008d44:	ee10 0a10 	vmov	r0, s0
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d4e:	4639      	mov	r1, r7
 8008d50:	f7f7 fed6 	bl	8000b00 <__aeabi_dcmple>
 8008d54:	2800      	cmp	r0, #0
 8008d56:	d071      	beq.n	8008e3c <_strtod_l+0xa54>
 8008d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d17c      	bne.n	8008e58 <_strtod_l+0xa70>
 8008d5e:	f1b8 0f00 	cmp.w	r8, #0
 8008d62:	d15a      	bne.n	8008e1a <_strtod_l+0xa32>
 8008d64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d15d      	bne.n	8008e28 <_strtod_l+0xa40>
 8008d6c:	4b90      	ldr	r3, [pc, #576]	; (8008fb0 <_strtod_l+0xbc8>)
 8008d6e:	2200      	movs	r2, #0
 8008d70:	4630      	mov	r0, r6
 8008d72:	4639      	mov	r1, r7
 8008d74:	f7f7 feba 	bl	8000aec <__aeabi_dcmplt>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d15c      	bne.n	8008e36 <_strtod_l+0xa4e>
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	4639      	mov	r1, r7
 8008d80:	4b8c      	ldr	r3, [pc, #560]	; (8008fb4 <_strtod_l+0xbcc>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	f7f7 fc40 	bl	8000608 <__aeabi_dmul>
 8008d88:	4606      	mov	r6, r0
 8008d8a:	460f      	mov	r7, r1
 8008d8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008d90:	9606      	str	r6, [sp, #24]
 8008d92:	9307      	str	r3, [sp, #28]
 8008d94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d98:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008d9c:	4b86      	ldr	r3, [pc, #536]	; (8008fb8 <_strtod_l+0xbd0>)
 8008d9e:	ea0a 0303 	and.w	r3, sl, r3
 8008da2:	930d      	str	r3, [sp, #52]	; 0x34
 8008da4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008da6:	4b85      	ldr	r3, [pc, #532]	; (8008fbc <_strtod_l+0xbd4>)
 8008da8:	429a      	cmp	r2, r3
 8008daa:	f040 8090 	bne.w	8008ece <_strtod_l+0xae6>
 8008dae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8008db2:	ec49 8b10 	vmov	d0, r8, r9
 8008db6:	f001 fcd5 	bl	800a764 <__ulp>
 8008dba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dbe:	ec51 0b10 	vmov	r0, r1, d0
 8008dc2:	f7f7 fc21 	bl	8000608 <__aeabi_dmul>
 8008dc6:	4642      	mov	r2, r8
 8008dc8:	464b      	mov	r3, r9
 8008dca:	f7f7 fa67 	bl	800029c <__adddf3>
 8008dce:	460b      	mov	r3, r1
 8008dd0:	4979      	ldr	r1, [pc, #484]	; (8008fb8 <_strtod_l+0xbd0>)
 8008dd2:	4a7b      	ldr	r2, [pc, #492]	; (8008fc0 <_strtod_l+0xbd8>)
 8008dd4:	4019      	ands	r1, r3
 8008dd6:	4291      	cmp	r1, r2
 8008dd8:	4680      	mov	r8, r0
 8008dda:	d944      	bls.n	8008e66 <_strtod_l+0xa7e>
 8008ddc:	ee18 2a90 	vmov	r2, s17
 8008de0:	4b78      	ldr	r3, [pc, #480]	; (8008fc4 <_strtod_l+0xbdc>)
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d104      	bne.n	8008df0 <_strtod_l+0xa08>
 8008de6:	ee18 3a10 	vmov	r3, s16
 8008dea:	3301      	adds	r3, #1
 8008dec:	f43f ad40 	beq.w	8008870 <_strtod_l+0x488>
 8008df0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8008fc4 <_strtod_l+0xbdc>
 8008df4:	f04f 38ff 	mov.w	r8, #4294967295
 8008df8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f001 f9b9 	bl	800a172 <_Bfree>
 8008e00:	9905      	ldr	r1, [sp, #20]
 8008e02:	4620      	mov	r0, r4
 8008e04:	f001 f9b5 	bl	800a172 <_Bfree>
 8008e08:	4659      	mov	r1, fp
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f001 f9b1 	bl	800a172 <_Bfree>
 8008e10:	4629      	mov	r1, r5
 8008e12:	4620      	mov	r0, r4
 8008e14:	f001 f9ad 	bl	800a172 <_Bfree>
 8008e18:	e609      	b.n	8008a2e <_strtod_l+0x646>
 8008e1a:	f1b8 0f01 	cmp.w	r8, #1
 8008e1e:	d103      	bne.n	8008e28 <_strtod_l+0xa40>
 8008e20:	f1b9 0f00 	cmp.w	r9, #0
 8008e24:	f43f ad95 	beq.w	8008952 <_strtod_l+0x56a>
 8008e28:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008f80 <_strtod_l+0xb98>
 8008e2c:	4f60      	ldr	r7, [pc, #384]	; (8008fb0 <_strtod_l+0xbc8>)
 8008e2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e32:	2600      	movs	r6, #0
 8008e34:	e7ae      	b.n	8008d94 <_strtod_l+0x9ac>
 8008e36:	4f5f      	ldr	r7, [pc, #380]	; (8008fb4 <_strtod_l+0xbcc>)
 8008e38:	2600      	movs	r6, #0
 8008e3a:	e7a7      	b.n	8008d8c <_strtod_l+0x9a4>
 8008e3c:	4b5d      	ldr	r3, [pc, #372]	; (8008fb4 <_strtod_l+0xbcc>)
 8008e3e:	4630      	mov	r0, r6
 8008e40:	4639      	mov	r1, r7
 8008e42:	2200      	movs	r2, #0
 8008e44:	f7f7 fbe0 	bl	8000608 <__aeabi_dmul>
 8008e48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d09c      	beq.n	8008d8c <_strtod_l+0x9a4>
 8008e52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008e56:	e79d      	b.n	8008d94 <_strtod_l+0x9ac>
 8008e58:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008f88 <_strtod_l+0xba0>
 8008e5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008e60:	ec57 6b17 	vmov	r6, r7, d7
 8008e64:	e796      	b.n	8008d94 <_strtod_l+0x9ac>
 8008e66:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008e6a:	9b04      	ldr	r3, [sp, #16]
 8008e6c:	46ca      	mov	sl, r9
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1c2      	bne.n	8008df8 <_strtod_l+0xa10>
 8008e72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e78:	0d1b      	lsrs	r3, r3, #20
 8008e7a:	051b      	lsls	r3, r3, #20
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d1bb      	bne.n	8008df8 <_strtod_l+0xa10>
 8008e80:	4630      	mov	r0, r6
 8008e82:	4639      	mov	r1, r7
 8008e84:	f7f7 ff20 	bl	8000cc8 <__aeabi_d2lz>
 8008e88:	f7f7 fb90 	bl	80005ac <__aeabi_l2d>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4630      	mov	r0, r6
 8008e92:	4639      	mov	r1, r7
 8008e94:	f7f7 fa00 	bl	8000298 <__aeabi_dsub>
 8008e98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e9e:	ea43 0308 	orr.w	r3, r3, r8
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	460f      	mov	r7, r1
 8008ea8:	d054      	beq.n	8008f54 <_strtod_l+0xb6c>
 8008eaa:	a339      	add	r3, pc, #228	; (adr r3, 8008f90 <_strtod_l+0xba8>)
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	f7f7 fe1c 	bl	8000aec <__aeabi_dcmplt>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	f47f ace5 	bne.w	8008884 <_strtod_l+0x49c>
 8008eba:	a337      	add	r3, pc, #220	; (adr r3, 8008f98 <_strtod_l+0xbb0>)
 8008ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	4639      	mov	r1, r7
 8008ec4:	f7f7 fe30 	bl	8000b28 <__aeabi_dcmpgt>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d095      	beq.n	8008df8 <_strtod_l+0xa10>
 8008ecc:	e4da      	b.n	8008884 <_strtod_l+0x49c>
 8008ece:	9b04      	ldr	r3, [sp, #16]
 8008ed0:	b333      	cbz	r3, 8008f20 <_strtod_l+0xb38>
 8008ed2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ed4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ed8:	d822      	bhi.n	8008f20 <_strtod_l+0xb38>
 8008eda:	a331      	add	r3, pc, #196	; (adr r3, 8008fa0 <_strtod_l+0xbb8>)
 8008edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	4639      	mov	r1, r7
 8008ee4:	f7f7 fe0c 	bl	8000b00 <__aeabi_dcmple>
 8008ee8:	b1a0      	cbz	r0, 8008f14 <_strtod_l+0xb2c>
 8008eea:	4639      	mov	r1, r7
 8008eec:	4630      	mov	r0, r6
 8008eee:	f7f7 fe63 	bl	8000bb8 <__aeabi_d2uiz>
 8008ef2:	2801      	cmp	r0, #1
 8008ef4:	bf38      	it	cc
 8008ef6:	2001      	movcc	r0, #1
 8008ef8:	f7f7 fb0c 	bl	8000514 <__aeabi_ui2d>
 8008efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008efe:	4606      	mov	r6, r0
 8008f00:	460f      	mov	r7, r1
 8008f02:	bb23      	cbnz	r3, 8008f4e <_strtod_l+0xb66>
 8008f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f08:	9010      	str	r0, [sp, #64]	; 0x40
 8008f0a:	9311      	str	r3, [sp, #68]	; 0x44
 8008f0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008f14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008f1c:	1a9b      	subs	r3, r3, r2
 8008f1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008f24:	eeb0 0a48 	vmov.f32	s0, s16
 8008f28:	eef0 0a68 	vmov.f32	s1, s17
 8008f2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008f30:	f001 fc18 	bl	800a764 <__ulp>
 8008f34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008f38:	ec53 2b10 	vmov	r2, r3, d0
 8008f3c:	f7f7 fb64 	bl	8000608 <__aeabi_dmul>
 8008f40:	ec53 2b18 	vmov	r2, r3, d8
 8008f44:	f7f7 f9aa 	bl	800029c <__adddf3>
 8008f48:	4680      	mov	r8, r0
 8008f4a:	4689      	mov	r9, r1
 8008f4c:	e78d      	b.n	8008e6a <_strtod_l+0xa82>
 8008f4e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008f52:	e7db      	b.n	8008f0c <_strtod_l+0xb24>
 8008f54:	a314      	add	r3, pc, #80	; (adr r3, 8008fa8 <_strtod_l+0xbc0>)
 8008f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5a:	f7f7 fdc7 	bl	8000aec <__aeabi_dcmplt>
 8008f5e:	e7b3      	b.n	8008ec8 <_strtod_l+0xae0>
 8008f60:	2300      	movs	r3, #0
 8008f62:	930a      	str	r3, [sp, #40]	; 0x28
 8008f64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	f7ff ba7c 	b.w	8008466 <_strtod_l+0x7e>
 8008f6e:	2a65      	cmp	r2, #101	; 0x65
 8008f70:	f43f ab75 	beq.w	800865e <_strtod_l+0x276>
 8008f74:	2a45      	cmp	r2, #69	; 0x45
 8008f76:	f43f ab72 	beq.w	800865e <_strtod_l+0x276>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f7ff bbaa 	b.w	80086d4 <_strtod_l+0x2ec>
 8008f80:	00000000 	.word	0x00000000
 8008f84:	bff00000 	.word	0xbff00000
 8008f88:	00000000 	.word	0x00000000
 8008f8c:	3ff00000 	.word	0x3ff00000
 8008f90:	94a03595 	.word	0x94a03595
 8008f94:	3fdfffff 	.word	0x3fdfffff
 8008f98:	35afe535 	.word	0x35afe535
 8008f9c:	3fe00000 	.word	0x3fe00000
 8008fa0:	ffc00000 	.word	0xffc00000
 8008fa4:	41dfffff 	.word	0x41dfffff
 8008fa8:	94a03595 	.word	0x94a03595
 8008fac:	3fcfffff 	.word	0x3fcfffff
 8008fb0:	3ff00000 	.word	0x3ff00000
 8008fb4:	3fe00000 	.word	0x3fe00000
 8008fb8:	7ff00000 	.word	0x7ff00000
 8008fbc:	7fe00000 	.word	0x7fe00000
 8008fc0:	7c9fffff 	.word	0x7c9fffff
 8008fc4:	7fefffff 	.word	0x7fefffff

08008fc8 <strtod>:
 8008fc8:	460a      	mov	r2, r1
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4802      	ldr	r0, [pc, #8]	; (8008fd8 <strtod+0x10>)
 8008fce:	4b03      	ldr	r3, [pc, #12]	; (8008fdc <strtod+0x14>)
 8008fd0:	6800      	ldr	r0, [r0, #0]
 8008fd2:	f7ff ba09 	b.w	80083e8 <_strtod_l>
 8008fd6:	bf00      	nop
 8008fd8:	20000398 	.word	0x20000398
 8008fdc:	20000108 	.word	0x20000108

08008fe0 <std>:
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	b510      	push	{r4, lr}
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	e9c0 3300 	strd	r3, r3, [r0]
 8008fea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fee:	6083      	str	r3, [r0, #8]
 8008ff0:	8181      	strh	r1, [r0, #12]
 8008ff2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ff4:	81c2      	strh	r2, [r0, #14]
 8008ff6:	6183      	str	r3, [r0, #24]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	2208      	movs	r2, #8
 8008ffc:	305c      	adds	r0, #92	; 0x5c
 8008ffe:	f000 f914 	bl	800922a <memset>
 8009002:	4b0d      	ldr	r3, [pc, #52]	; (8009038 <std+0x58>)
 8009004:	6223      	str	r3, [r4, #32]
 8009006:	4b0d      	ldr	r3, [pc, #52]	; (800903c <std+0x5c>)
 8009008:	6263      	str	r3, [r4, #36]	; 0x24
 800900a:	4b0d      	ldr	r3, [pc, #52]	; (8009040 <std+0x60>)
 800900c:	62a3      	str	r3, [r4, #40]	; 0x28
 800900e:	4b0d      	ldr	r3, [pc, #52]	; (8009044 <std+0x64>)
 8009010:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009012:	4b0d      	ldr	r3, [pc, #52]	; (8009048 <std+0x68>)
 8009014:	61e4      	str	r4, [r4, #28]
 8009016:	429c      	cmp	r4, r3
 8009018:	d006      	beq.n	8009028 <std+0x48>
 800901a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800901e:	4294      	cmp	r4, r2
 8009020:	d002      	beq.n	8009028 <std+0x48>
 8009022:	33d0      	adds	r3, #208	; 0xd0
 8009024:	429c      	cmp	r4, r3
 8009026:	d105      	bne.n	8009034 <std+0x54>
 8009028:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800902c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009030:	f000 b98c 	b.w	800934c <__retarget_lock_init_recursive>
 8009034:	bd10      	pop	{r4, pc}
 8009036:	bf00      	nop
 8009038:	080091a5 	.word	0x080091a5
 800903c:	080091c7 	.word	0x080091c7
 8009040:	080091ff 	.word	0x080091ff
 8009044:	08009223 	.word	0x08009223
 8009048:	20001cc8 	.word	0x20001cc8

0800904c <stdio_exit_handler>:
 800904c:	4a02      	ldr	r2, [pc, #8]	; (8009058 <stdio_exit_handler+0xc>)
 800904e:	4903      	ldr	r1, [pc, #12]	; (800905c <stdio_exit_handler+0x10>)
 8009050:	4803      	ldr	r0, [pc, #12]	; (8009060 <stdio_exit_handler+0x14>)
 8009052:	f000 b869 	b.w	8009128 <_fwalk_sglue>
 8009056:	bf00      	nop
 8009058:	200000fc 	.word	0x200000fc
 800905c:	0800bddd 	.word	0x0800bddd
 8009060:	20000278 	.word	0x20000278

08009064 <cleanup_stdio>:
 8009064:	6841      	ldr	r1, [r0, #4]
 8009066:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <cleanup_stdio+0x34>)
 8009068:	4299      	cmp	r1, r3
 800906a:	b510      	push	{r4, lr}
 800906c:	4604      	mov	r4, r0
 800906e:	d001      	beq.n	8009074 <cleanup_stdio+0x10>
 8009070:	f002 feb4 	bl	800bddc <_fclose_r>
 8009074:	68a1      	ldr	r1, [r4, #8]
 8009076:	4b09      	ldr	r3, [pc, #36]	; (800909c <cleanup_stdio+0x38>)
 8009078:	4299      	cmp	r1, r3
 800907a:	d002      	beq.n	8009082 <cleanup_stdio+0x1e>
 800907c:	4620      	mov	r0, r4
 800907e:	f002 fead 	bl	800bddc <_fclose_r>
 8009082:	68e1      	ldr	r1, [r4, #12]
 8009084:	4b06      	ldr	r3, [pc, #24]	; (80090a0 <cleanup_stdio+0x3c>)
 8009086:	4299      	cmp	r1, r3
 8009088:	d004      	beq.n	8009094 <cleanup_stdio+0x30>
 800908a:	4620      	mov	r0, r4
 800908c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009090:	f002 bea4 	b.w	800bddc <_fclose_r>
 8009094:	bd10      	pop	{r4, pc}
 8009096:	bf00      	nop
 8009098:	20001cc8 	.word	0x20001cc8
 800909c:	20001d30 	.word	0x20001d30
 80090a0:	20001d98 	.word	0x20001d98

080090a4 <global_stdio_init.part.0>:
 80090a4:	b510      	push	{r4, lr}
 80090a6:	4b0b      	ldr	r3, [pc, #44]	; (80090d4 <global_stdio_init.part.0+0x30>)
 80090a8:	4c0b      	ldr	r4, [pc, #44]	; (80090d8 <global_stdio_init.part.0+0x34>)
 80090aa:	4a0c      	ldr	r2, [pc, #48]	; (80090dc <global_stdio_init.part.0+0x38>)
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	4620      	mov	r0, r4
 80090b0:	2200      	movs	r2, #0
 80090b2:	2104      	movs	r1, #4
 80090b4:	f7ff ff94 	bl	8008fe0 <std>
 80090b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80090bc:	2201      	movs	r2, #1
 80090be:	2109      	movs	r1, #9
 80090c0:	f7ff ff8e 	bl	8008fe0 <std>
 80090c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80090c8:	2202      	movs	r2, #2
 80090ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090ce:	2112      	movs	r1, #18
 80090d0:	f7ff bf86 	b.w	8008fe0 <std>
 80090d4:	20001e00 	.word	0x20001e00
 80090d8:	20001cc8 	.word	0x20001cc8
 80090dc:	0800904d 	.word	0x0800904d

080090e0 <__sfp_lock_acquire>:
 80090e0:	4801      	ldr	r0, [pc, #4]	; (80090e8 <__sfp_lock_acquire+0x8>)
 80090e2:	f000 b935 	b.w	8009350 <__retarget_lock_acquire_recursive>
 80090e6:	bf00      	nop
 80090e8:	20001e0a 	.word	0x20001e0a

080090ec <__sfp_lock_release>:
 80090ec:	4801      	ldr	r0, [pc, #4]	; (80090f4 <__sfp_lock_release+0x8>)
 80090ee:	f000 b930 	b.w	8009352 <__retarget_lock_release_recursive>
 80090f2:	bf00      	nop
 80090f4:	20001e0a 	.word	0x20001e0a

080090f8 <__sinit>:
 80090f8:	b510      	push	{r4, lr}
 80090fa:	4604      	mov	r4, r0
 80090fc:	f7ff fff0 	bl	80090e0 <__sfp_lock_acquire>
 8009100:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009102:	b11b      	cbz	r3, 800910c <__sinit+0x14>
 8009104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009108:	f7ff bff0 	b.w	80090ec <__sfp_lock_release>
 800910c:	4b04      	ldr	r3, [pc, #16]	; (8009120 <__sinit+0x28>)
 800910e:	6363      	str	r3, [r4, #52]	; 0x34
 8009110:	4b04      	ldr	r3, [pc, #16]	; (8009124 <__sinit+0x2c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1f5      	bne.n	8009104 <__sinit+0xc>
 8009118:	f7ff ffc4 	bl	80090a4 <global_stdio_init.part.0>
 800911c:	e7f2      	b.n	8009104 <__sinit+0xc>
 800911e:	bf00      	nop
 8009120:	08009065 	.word	0x08009065
 8009124:	20001e00 	.word	0x20001e00

08009128 <_fwalk_sglue>:
 8009128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800912c:	4607      	mov	r7, r0
 800912e:	4688      	mov	r8, r1
 8009130:	4614      	mov	r4, r2
 8009132:	2600      	movs	r6, #0
 8009134:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009138:	f1b9 0901 	subs.w	r9, r9, #1
 800913c:	d505      	bpl.n	800914a <_fwalk_sglue+0x22>
 800913e:	6824      	ldr	r4, [r4, #0]
 8009140:	2c00      	cmp	r4, #0
 8009142:	d1f7      	bne.n	8009134 <_fwalk_sglue+0xc>
 8009144:	4630      	mov	r0, r6
 8009146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800914a:	89ab      	ldrh	r3, [r5, #12]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d907      	bls.n	8009160 <_fwalk_sglue+0x38>
 8009150:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009154:	3301      	adds	r3, #1
 8009156:	d003      	beq.n	8009160 <_fwalk_sglue+0x38>
 8009158:	4629      	mov	r1, r5
 800915a:	4638      	mov	r0, r7
 800915c:	47c0      	blx	r8
 800915e:	4306      	orrs	r6, r0
 8009160:	3568      	adds	r5, #104	; 0x68
 8009162:	e7e9      	b.n	8009138 <_fwalk_sglue+0x10>

08009164 <sprintf>:
 8009164:	b40e      	push	{r1, r2, r3}
 8009166:	b500      	push	{lr}
 8009168:	b09c      	sub	sp, #112	; 0x70
 800916a:	ab1d      	add	r3, sp, #116	; 0x74
 800916c:	9002      	str	r0, [sp, #8]
 800916e:	9006      	str	r0, [sp, #24]
 8009170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009174:	4809      	ldr	r0, [pc, #36]	; (800919c <sprintf+0x38>)
 8009176:	9107      	str	r1, [sp, #28]
 8009178:	9104      	str	r1, [sp, #16]
 800917a:	4909      	ldr	r1, [pc, #36]	; (80091a0 <sprintf+0x3c>)
 800917c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009180:	9105      	str	r1, [sp, #20]
 8009182:	6800      	ldr	r0, [r0, #0]
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	a902      	add	r1, sp, #8
 8009188:	f001 fc3a 	bl	800aa00 <_svfprintf_r>
 800918c:	9b02      	ldr	r3, [sp, #8]
 800918e:	2200      	movs	r2, #0
 8009190:	701a      	strb	r2, [r3, #0]
 8009192:	b01c      	add	sp, #112	; 0x70
 8009194:	f85d eb04 	ldr.w	lr, [sp], #4
 8009198:	b003      	add	sp, #12
 800919a:	4770      	bx	lr
 800919c:	20000398 	.word	0x20000398
 80091a0:	ffff0208 	.word	0xffff0208

080091a4 <__sread>:
 80091a4:	b510      	push	{r4, lr}
 80091a6:	460c      	mov	r4, r1
 80091a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091ac:	f000 f880 	bl	80092b0 <_read_r>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	bfab      	itete	ge
 80091b4:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80091b6:	89a3      	ldrhlt	r3, [r4, #12]
 80091b8:	181b      	addge	r3, r3, r0
 80091ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80091be:	bfac      	ite	ge
 80091c0:	6523      	strge	r3, [r4, #80]	; 0x50
 80091c2:	81a3      	strhlt	r3, [r4, #12]
 80091c4:	bd10      	pop	{r4, pc}

080091c6 <__swrite>:
 80091c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ca:	461f      	mov	r7, r3
 80091cc:	898b      	ldrh	r3, [r1, #12]
 80091ce:	05db      	lsls	r3, r3, #23
 80091d0:	4605      	mov	r5, r0
 80091d2:	460c      	mov	r4, r1
 80091d4:	4616      	mov	r6, r2
 80091d6:	d505      	bpl.n	80091e4 <__swrite+0x1e>
 80091d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091dc:	2302      	movs	r3, #2
 80091de:	2200      	movs	r2, #0
 80091e0:	f000 f854 	bl	800928c <_lseek_r>
 80091e4:	89a3      	ldrh	r3, [r4, #12]
 80091e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091ee:	81a3      	strh	r3, [r4, #12]
 80091f0:	4632      	mov	r2, r6
 80091f2:	463b      	mov	r3, r7
 80091f4:	4628      	mov	r0, r5
 80091f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091fa:	f000 b86b 	b.w	80092d4 <_write_r>

080091fe <__sseek>:
 80091fe:	b510      	push	{r4, lr}
 8009200:	460c      	mov	r4, r1
 8009202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009206:	f000 f841 	bl	800928c <_lseek_r>
 800920a:	1c43      	adds	r3, r0, #1
 800920c:	89a3      	ldrh	r3, [r4, #12]
 800920e:	bf15      	itete	ne
 8009210:	6520      	strne	r0, [r4, #80]	; 0x50
 8009212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800921a:	81a3      	strheq	r3, [r4, #12]
 800921c:	bf18      	it	ne
 800921e:	81a3      	strhne	r3, [r4, #12]
 8009220:	bd10      	pop	{r4, pc}

08009222 <__sclose>:
 8009222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009226:	f000 b821 	b.w	800926c <_close_r>

0800922a <memset>:
 800922a:	4402      	add	r2, r0
 800922c:	4603      	mov	r3, r0
 800922e:	4293      	cmp	r3, r2
 8009230:	d100      	bne.n	8009234 <memset+0xa>
 8009232:	4770      	bx	lr
 8009234:	f803 1b01 	strb.w	r1, [r3], #1
 8009238:	e7f9      	b.n	800922e <memset+0x4>

0800923a <strncmp>:
 800923a:	b510      	push	{r4, lr}
 800923c:	b16a      	cbz	r2, 800925a <strncmp+0x20>
 800923e:	3901      	subs	r1, #1
 8009240:	1884      	adds	r4, r0, r2
 8009242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009246:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800924a:	429a      	cmp	r2, r3
 800924c:	d103      	bne.n	8009256 <strncmp+0x1c>
 800924e:	42a0      	cmp	r0, r4
 8009250:	d001      	beq.n	8009256 <strncmp+0x1c>
 8009252:	2a00      	cmp	r2, #0
 8009254:	d1f5      	bne.n	8009242 <strncmp+0x8>
 8009256:	1ad0      	subs	r0, r2, r3
 8009258:	bd10      	pop	{r4, pc}
 800925a:	4610      	mov	r0, r2
 800925c:	e7fc      	b.n	8009258 <strncmp+0x1e>
	...

08009260 <__locale_mb_cur_max>:
 8009260:	4b01      	ldr	r3, [pc, #4]	; (8009268 <__locale_mb_cur_max+0x8>)
 8009262:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8009266:	4770      	bx	lr
 8009268:	20000108 	.word	0x20000108

0800926c <_close_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4d06      	ldr	r5, [pc, #24]	; (8009288 <_close_r+0x1c>)
 8009270:	2300      	movs	r3, #0
 8009272:	4604      	mov	r4, r0
 8009274:	4608      	mov	r0, r1
 8009276:	602b      	str	r3, [r5, #0]
 8009278:	f7f8 fa79 	bl	800176e <_close>
 800927c:	1c43      	adds	r3, r0, #1
 800927e:	d102      	bne.n	8009286 <_close_r+0x1a>
 8009280:	682b      	ldr	r3, [r5, #0]
 8009282:	b103      	cbz	r3, 8009286 <_close_r+0x1a>
 8009284:	6023      	str	r3, [r4, #0]
 8009286:	bd38      	pop	{r3, r4, r5, pc}
 8009288:	20001e04 	.word	0x20001e04

0800928c <_lseek_r>:
 800928c:	b538      	push	{r3, r4, r5, lr}
 800928e:	4d07      	ldr	r5, [pc, #28]	; (80092ac <_lseek_r+0x20>)
 8009290:	4604      	mov	r4, r0
 8009292:	4608      	mov	r0, r1
 8009294:	4611      	mov	r1, r2
 8009296:	2200      	movs	r2, #0
 8009298:	602a      	str	r2, [r5, #0]
 800929a:	461a      	mov	r2, r3
 800929c:	f7f8 fa8e 	bl	80017bc <_lseek>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_lseek_r+0x1e>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_lseek_r+0x1e>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	20001e04 	.word	0x20001e04

080092b0 <_read_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d07      	ldr	r5, [pc, #28]	; (80092d0 <_read_r+0x20>)
 80092b4:	4604      	mov	r4, r0
 80092b6:	4608      	mov	r0, r1
 80092b8:	4611      	mov	r1, r2
 80092ba:	2200      	movs	r2, #0
 80092bc:	602a      	str	r2, [r5, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	f7f8 fa1c 	bl	80016fc <_read>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d102      	bne.n	80092ce <_read_r+0x1e>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	b103      	cbz	r3, 80092ce <_read_r+0x1e>
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	20001e04 	.word	0x20001e04

080092d4 <_write_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	; (80092f4 <_write_r+0x20>)
 80092d8:	4604      	mov	r4, r0
 80092da:	4608      	mov	r0, r1
 80092dc:	4611      	mov	r1, r2
 80092de:	2200      	movs	r2, #0
 80092e0:	602a      	str	r2, [r5, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f7f8 fa27 	bl	8001736 <_write>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d102      	bne.n	80092f2 <_write_r+0x1e>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	b103      	cbz	r3, 80092f2 <_write_r+0x1e>
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	20001e04 	.word	0x20001e04

080092f8 <__errno>:
 80092f8:	4b01      	ldr	r3, [pc, #4]	; (8009300 <__errno+0x8>)
 80092fa:	6818      	ldr	r0, [r3, #0]
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	20000398 	.word	0x20000398

08009304 <__libc_init_array>:
 8009304:	b570      	push	{r4, r5, r6, lr}
 8009306:	4d0d      	ldr	r5, [pc, #52]	; (800933c <__libc_init_array+0x38>)
 8009308:	4c0d      	ldr	r4, [pc, #52]	; (8009340 <__libc_init_array+0x3c>)
 800930a:	1b64      	subs	r4, r4, r5
 800930c:	10a4      	asrs	r4, r4, #2
 800930e:	2600      	movs	r6, #0
 8009310:	42a6      	cmp	r6, r4
 8009312:	d109      	bne.n	8009328 <__libc_init_array+0x24>
 8009314:	4d0b      	ldr	r5, [pc, #44]	; (8009344 <__libc_init_array+0x40>)
 8009316:	4c0c      	ldr	r4, [pc, #48]	; (8009348 <__libc_init_array+0x44>)
 8009318:	f006 f8b2 	bl	800f480 <_init>
 800931c:	1b64      	subs	r4, r4, r5
 800931e:	10a4      	asrs	r4, r4, #2
 8009320:	2600      	movs	r6, #0
 8009322:	42a6      	cmp	r6, r4
 8009324:	d105      	bne.n	8009332 <__libc_init_array+0x2e>
 8009326:	bd70      	pop	{r4, r5, r6, pc}
 8009328:	f855 3b04 	ldr.w	r3, [r5], #4
 800932c:	4798      	blx	r3
 800932e:	3601      	adds	r6, #1
 8009330:	e7ee      	b.n	8009310 <__libc_init_array+0xc>
 8009332:	f855 3b04 	ldr.w	r3, [r5], #4
 8009336:	4798      	blx	r3
 8009338:	3601      	adds	r6, #1
 800933a:	e7f2      	b.n	8009322 <__libc_init_array+0x1e>
 800933c:	0800fb30 	.word	0x0800fb30
 8009340:	0800fb30 	.word	0x0800fb30
 8009344:	0800fb30 	.word	0x0800fb30
 8009348:	0800fb38 	.word	0x0800fb38

0800934c <__retarget_lock_init_recursive>:
 800934c:	4770      	bx	lr

0800934e <__retarget_lock_close_recursive>:
 800934e:	4770      	bx	lr

08009350 <__retarget_lock_acquire_recursive>:
 8009350:	4770      	bx	lr

08009352 <__retarget_lock_release_recursive>:
 8009352:	4770      	bx	lr

08009354 <memcpy>:
 8009354:	440a      	add	r2, r1
 8009356:	4291      	cmp	r1, r2
 8009358:	f100 33ff 	add.w	r3, r0, #4294967295
 800935c:	d100      	bne.n	8009360 <memcpy+0xc>
 800935e:	4770      	bx	lr
 8009360:	b510      	push	{r4, lr}
 8009362:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009366:	f803 4f01 	strb.w	r4, [r3, #1]!
 800936a:	4291      	cmp	r1, r2
 800936c:	d1f9      	bne.n	8009362 <memcpy+0xe>
 800936e:	bd10      	pop	{r4, pc}

08009370 <nan>:
 8009370:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009378 <nan+0x8>
 8009374:	4770      	bx	lr
 8009376:	bf00      	nop
 8009378:	00000000 	.word	0x00000000
 800937c:	7ff80000 	.word	0x7ff80000

08009380 <register_fini>:
 8009380:	4b02      	ldr	r3, [pc, #8]	; (800938c <register_fini+0xc>)
 8009382:	b113      	cbz	r3, 800938a <register_fini+0xa>
 8009384:	4802      	ldr	r0, [pc, #8]	; (8009390 <register_fini+0x10>)
 8009386:	f000 b805 	b.w	8009394 <atexit>
 800938a:	4770      	bx	lr
 800938c:	00000000 	.word	0x00000000
 8009390:	0800c041 	.word	0x0800c041

08009394 <atexit>:
 8009394:	2300      	movs	r3, #0
 8009396:	4601      	mov	r1, r0
 8009398:	461a      	mov	r2, r3
 800939a:	4618      	mov	r0, r3
 800939c:	f002 bea8 	b.w	800c0f0 <__register_exitproc>

080093a0 <_malloc_trim_r>:
 80093a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a4:	4606      	mov	r6, r0
 80093a6:	2008      	movs	r0, #8
 80093a8:	460c      	mov	r4, r1
 80093aa:	f002 fe5d 	bl	800c068 <sysconf>
 80093ae:	4f23      	ldr	r7, [pc, #140]	; (800943c <_malloc_trim_r+0x9c>)
 80093b0:	4680      	mov	r8, r0
 80093b2:	4630      	mov	r0, r6
 80093b4:	f000 feac 	bl	800a110 <__malloc_lock>
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	685d      	ldr	r5, [r3, #4]
 80093bc:	f025 0503 	bic.w	r5, r5, #3
 80093c0:	1b2c      	subs	r4, r5, r4
 80093c2:	3c11      	subs	r4, #17
 80093c4:	4444      	add	r4, r8
 80093c6:	fbb4 f4f8 	udiv	r4, r4, r8
 80093ca:	3c01      	subs	r4, #1
 80093cc:	fb08 f404 	mul.w	r4, r8, r4
 80093d0:	45a0      	cmp	r8, r4
 80093d2:	dd05      	ble.n	80093e0 <_malloc_trim_r+0x40>
 80093d4:	4630      	mov	r0, r6
 80093d6:	f000 fea1 	bl	800a11c <__malloc_unlock>
 80093da:	2000      	movs	r0, #0
 80093dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093e0:	2100      	movs	r1, #0
 80093e2:	4630      	mov	r0, r6
 80093e4:	f002 fe1c 	bl	800c020 <_sbrk_r>
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	442b      	add	r3, r5
 80093ec:	4298      	cmp	r0, r3
 80093ee:	d1f1      	bne.n	80093d4 <_malloc_trim_r+0x34>
 80093f0:	4261      	negs	r1, r4
 80093f2:	4630      	mov	r0, r6
 80093f4:	f002 fe14 	bl	800c020 <_sbrk_r>
 80093f8:	3001      	adds	r0, #1
 80093fa:	d110      	bne.n	800941e <_malloc_trim_r+0x7e>
 80093fc:	2100      	movs	r1, #0
 80093fe:	4630      	mov	r0, r6
 8009400:	f002 fe0e 	bl	800c020 <_sbrk_r>
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	1a83      	subs	r3, r0, r2
 8009408:	2b0f      	cmp	r3, #15
 800940a:	dde3      	ble.n	80093d4 <_malloc_trim_r+0x34>
 800940c:	490c      	ldr	r1, [pc, #48]	; (8009440 <_malloc_trim_r+0xa0>)
 800940e:	6809      	ldr	r1, [r1, #0]
 8009410:	1a40      	subs	r0, r0, r1
 8009412:	490c      	ldr	r1, [pc, #48]	; (8009444 <_malloc_trim_r+0xa4>)
 8009414:	f043 0301 	orr.w	r3, r3, #1
 8009418:	6008      	str	r0, [r1, #0]
 800941a:	6053      	str	r3, [r2, #4]
 800941c:	e7da      	b.n	80093d4 <_malloc_trim_r+0x34>
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	4a08      	ldr	r2, [pc, #32]	; (8009444 <_malloc_trim_r+0xa4>)
 8009422:	1b2d      	subs	r5, r5, r4
 8009424:	f045 0501 	orr.w	r5, r5, #1
 8009428:	605d      	str	r5, [r3, #4]
 800942a:	6813      	ldr	r3, [r2, #0]
 800942c:	4630      	mov	r0, r6
 800942e:	1b1b      	subs	r3, r3, r4
 8009430:	6013      	str	r3, [r2, #0]
 8009432:	f000 fe73 	bl	800a11c <__malloc_unlock>
 8009436:	2001      	movs	r0, #1
 8009438:	e7d0      	b.n	80093dc <_malloc_trim_r+0x3c>
 800943a:	bf00      	nop
 800943c:	200003a0 	.word	0x200003a0
 8009440:	200007a8 	.word	0x200007a8
 8009444:	20001e10 	.word	0x20001e10

08009448 <_free_r>:
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944a:	4605      	mov	r5, r0
 800944c:	460f      	mov	r7, r1
 800944e:	2900      	cmp	r1, #0
 8009450:	f000 80b1 	beq.w	80095b6 <_free_r+0x16e>
 8009454:	f000 fe5c 	bl	800a110 <__malloc_lock>
 8009458:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800945c:	4856      	ldr	r0, [pc, #344]	; (80095b8 <_free_r+0x170>)
 800945e:	f022 0401 	bic.w	r4, r2, #1
 8009462:	f1a7 0308 	sub.w	r3, r7, #8
 8009466:	eb03 0c04 	add.w	ip, r3, r4
 800946a:	6881      	ldr	r1, [r0, #8]
 800946c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8009470:	4561      	cmp	r1, ip
 8009472:	f026 0603 	bic.w	r6, r6, #3
 8009476:	f002 0201 	and.w	r2, r2, #1
 800947a:	d11b      	bne.n	80094b4 <_free_r+0x6c>
 800947c:	4426      	add	r6, r4
 800947e:	b93a      	cbnz	r2, 8009490 <_free_r+0x48>
 8009480:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8009484:	1a9b      	subs	r3, r3, r2
 8009486:	4416      	add	r6, r2
 8009488:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800948c:	60ca      	str	r2, [r1, #12]
 800948e:	6091      	str	r1, [r2, #8]
 8009490:	f046 0201 	orr.w	r2, r6, #1
 8009494:	605a      	str	r2, [r3, #4]
 8009496:	6083      	str	r3, [r0, #8]
 8009498:	4b48      	ldr	r3, [pc, #288]	; (80095bc <_free_r+0x174>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	42b3      	cmp	r3, r6
 800949e:	d804      	bhi.n	80094aa <_free_r+0x62>
 80094a0:	4b47      	ldr	r3, [pc, #284]	; (80095c0 <_free_r+0x178>)
 80094a2:	4628      	mov	r0, r5
 80094a4:	6819      	ldr	r1, [r3, #0]
 80094a6:	f7ff ff7b 	bl	80093a0 <_malloc_trim_r>
 80094aa:	4628      	mov	r0, r5
 80094ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094b0:	f000 be34 	b.w	800a11c <__malloc_unlock>
 80094b4:	f8cc 6004 	str.w	r6, [ip, #4]
 80094b8:	2a00      	cmp	r2, #0
 80094ba:	d138      	bne.n	800952e <_free_r+0xe6>
 80094bc:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80094c0:	1a5b      	subs	r3, r3, r1
 80094c2:	440c      	add	r4, r1
 80094c4:	6899      	ldr	r1, [r3, #8]
 80094c6:	f100 0708 	add.w	r7, r0, #8
 80094ca:	42b9      	cmp	r1, r7
 80094cc:	d031      	beq.n	8009532 <_free_r+0xea>
 80094ce:	68df      	ldr	r7, [r3, #12]
 80094d0:	60cf      	str	r7, [r1, #12]
 80094d2:	60b9      	str	r1, [r7, #8]
 80094d4:	eb0c 0106 	add.w	r1, ip, r6
 80094d8:	6849      	ldr	r1, [r1, #4]
 80094da:	07c9      	lsls	r1, r1, #31
 80094dc:	d40b      	bmi.n	80094f6 <_free_r+0xae>
 80094de:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80094e2:	4434      	add	r4, r6
 80094e4:	bb3a      	cbnz	r2, 8009536 <_free_r+0xee>
 80094e6:	4e37      	ldr	r6, [pc, #220]	; (80095c4 <_free_r+0x17c>)
 80094e8:	42b1      	cmp	r1, r6
 80094ea:	d124      	bne.n	8009536 <_free_r+0xee>
 80094ec:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094f0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f044 0101 	orr.w	r1, r4, #1
 80094fa:	6059      	str	r1, [r3, #4]
 80094fc:	511c      	str	r4, [r3, r4]
 80094fe:	2a00      	cmp	r2, #0
 8009500:	d1d3      	bne.n	80094aa <_free_r+0x62>
 8009502:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8009506:	d21b      	bcs.n	8009540 <_free_r+0xf8>
 8009508:	08e2      	lsrs	r2, r4, #3
 800950a:	2101      	movs	r1, #1
 800950c:	0964      	lsrs	r4, r4, #5
 800950e:	40a1      	lsls	r1, r4
 8009510:	6844      	ldr	r4, [r0, #4]
 8009512:	3201      	adds	r2, #1
 8009514:	4321      	orrs	r1, r4
 8009516:	6041      	str	r1, [r0, #4]
 8009518:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800951c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8009520:	3908      	subs	r1, #8
 8009522:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8009526:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800952a:	60e3      	str	r3, [r4, #12]
 800952c:	e7bd      	b.n	80094aa <_free_r+0x62>
 800952e:	2200      	movs	r2, #0
 8009530:	e7d0      	b.n	80094d4 <_free_r+0x8c>
 8009532:	2201      	movs	r2, #1
 8009534:	e7ce      	b.n	80094d4 <_free_r+0x8c>
 8009536:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800953a:	60ce      	str	r6, [r1, #12]
 800953c:	60b1      	str	r1, [r6, #8]
 800953e:	e7da      	b.n	80094f6 <_free_r+0xae>
 8009540:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8009544:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8009548:	d214      	bcs.n	8009574 <_free_r+0x12c>
 800954a:	09a2      	lsrs	r2, r4, #6
 800954c:	3238      	adds	r2, #56	; 0x38
 800954e:	1c51      	adds	r1, r2, #1
 8009550:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8009554:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8009558:	428e      	cmp	r6, r1
 800955a:	d125      	bne.n	80095a8 <_free_r+0x160>
 800955c:	2401      	movs	r4, #1
 800955e:	1092      	asrs	r2, r2, #2
 8009560:	fa04 f202 	lsl.w	r2, r4, r2
 8009564:	6844      	ldr	r4, [r0, #4]
 8009566:	4322      	orrs	r2, r4
 8009568:	6042      	str	r2, [r0, #4]
 800956a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800956e:	60b3      	str	r3, [r6, #8]
 8009570:	60cb      	str	r3, [r1, #12]
 8009572:	e79a      	b.n	80094aa <_free_r+0x62>
 8009574:	2a14      	cmp	r2, #20
 8009576:	d801      	bhi.n	800957c <_free_r+0x134>
 8009578:	325b      	adds	r2, #91	; 0x5b
 800957a:	e7e8      	b.n	800954e <_free_r+0x106>
 800957c:	2a54      	cmp	r2, #84	; 0x54
 800957e:	d802      	bhi.n	8009586 <_free_r+0x13e>
 8009580:	0b22      	lsrs	r2, r4, #12
 8009582:	326e      	adds	r2, #110	; 0x6e
 8009584:	e7e3      	b.n	800954e <_free_r+0x106>
 8009586:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800958a:	d802      	bhi.n	8009592 <_free_r+0x14a>
 800958c:	0be2      	lsrs	r2, r4, #15
 800958e:	3277      	adds	r2, #119	; 0x77
 8009590:	e7dd      	b.n	800954e <_free_r+0x106>
 8009592:	f240 5154 	movw	r1, #1364	; 0x554
 8009596:	428a      	cmp	r2, r1
 8009598:	bf9a      	itte	ls
 800959a:	0ca2      	lsrls	r2, r4, #18
 800959c:	327c      	addls	r2, #124	; 0x7c
 800959e:	227e      	movhi	r2, #126	; 0x7e
 80095a0:	e7d5      	b.n	800954e <_free_r+0x106>
 80095a2:	6889      	ldr	r1, [r1, #8]
 80095a4:	428e      	cmp	r6, r1
 80095a6:	d004      	beq.n	80095b2 <_free_r+0x16a>
 80095a8:	684a      	ldr	r2, [r1, #4]
 80095aa:	f022 0203 	bic.w	r2, r2, #3
 80095ae:	42a2      	cmp	r2, r4
 80095b0:	d8f7      	bhi.n	80095a2 <_free_r+0x15a>
 80095b2:	68ce      	ldr	r6, [r1, #12]
 80095b4:	e7d9      	b.n	800956a <_free_r+0x122>
 80095b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b8:	200003a0 	.word	0x200003a0
 80095bc:	200007ac 	.word	0x200007ac
 80095c0:	20001e40 	.word	0x20001e40
 80095c4:	200003a8 	.word	0x200003a8

080095c8 <rshift>:
 80095c8:	6903      	ldr	r3, [r0, #16]
 80095ca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80095ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095d2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80095d6:	f100 0414 	add.w	r4, r0, #20
 80095da:	dd45      	ble.n	8009668 <rshift+0xa0>
 80095dc:	f011 011f 	ands.w	r1, r1, #31
 80095e0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095e4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095e8:	d10c      	bne.n	8009604 <rshift+0x3c>
 80095ea:	f100 0710 	add.w	r7, r0, #16
 80095ee:	4629      	mov	r1, r5
 80095f0:	42b1      	cmp	r1, r6
 80095f2:	d334      	bcc.n	800965e <rshift+0x96>
 80095f4:	1a9b      	subs	r3, r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	1eea      	subs	r2, r5, #3
 80095fa:	4296      	cmp	r6, r2
 80095fc:	bf38      	it	cc
 80095fe:	2300      	movcc	r3, #0
 8009600:	4423      	add	r3, r4
 8009602:	e015      	b.n	8009630 <rshift+0x68>
 8009604:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009608:	f1c1 0820 	rsb	r8, r1, #32
 800960c:	40cf      	lsrs	r7, r1
 800960e:	f105 0e04 	add.w	lr, r5, #4
 8009612:	46a1      	mov	r9, r4
 8009614:	4576      	cmp	r6, lr
 8009616:	46f4      	mov	ip, lr
 8009618:	d815      	bhi.n	8009646 <rshift+0x7e>
 800961a:	1a9a      	subs	r2, r3, r2
 800961c:	0092      	lsls	r2, r2, #2
 800961e:	3a04      	subs	r2, #4
 8009620:	3501      	adds	r5, #1
 8009622:	42ae      	cmp	r6, r5
 8009624:	bf38      	it	cc
 8009626:	2200      	movcc	r2, #0
 8009628:	18a3      	adds	r3, r4, r2
 800962a:	50a7      	str	r7, [r4, r2]
 800962c:	b107      	cbz	r7, 8009630 <rshift+0x68>
 800962e:	3304      	adds	r3, #4
 8009630:	1b1a      	subs	r2, r3, r4
 8009632:	42a3      	cmp	r3, r4
 8009634:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009638:	bf08      	it	eq
 800963a:	2300      	moveq	r3, #0
 800963c:	6102      	str	r2, [r0, #16]
 800963e:	bf08      	it	eq
 8009640:	6143      	streq	r3, [r0, #20]
 8009642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009646:	f8dc c000 	ldr.w	ip, [ip]
 800964a:	fa0c fc08 	lsl.w	ip, ip, r8
 800964e:	ea4c 0707 	orr.w	r7, ip, r7
 8009652:	f849 7b04 	str.w	r7, [r9], #4
 8009656:	f85e 7b04 	ldr.w	r7, [lr], #4
 800965a:	40cf      	lsrs	r7, r1
 800965c:	e7da      	b.n	8009614 <rshift+0x4c>
 800965e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009662:	f847 cf04 	str.w	ip, [r7, #4]!
 8009666:	e7c3      	b.n	80095f0 <rshift+0x28>
 8009668:	4623      	mov	r3, r4
 800966a:	e7e1      	b.n	8009630 <rshift+0x68>

0800966c <__hexdig_fun>:
 800966c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009670:	2b09      	cmp	r3, #9
 8009672:	d802      	bhi.n	800967a <__hexdig_fun+0xe>
 8009674:	3820      	subs	r0, #32
 8009676:	b2c0      	uxtb	r0, r0
 8009678:	4770      	bx	lr
 800967a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800967e:	2b05      	cmp	r3, #5
 8009680:	d801      	bhi.n	8009686 <__hexdig_fun+0x1a>
 8009682:	3847      	subs	r0, #71	; 0x47
 8009684:	e7f7      	b.n	8009676 <__hexdig_fun+0xa>
 8009686:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800968a:	2b05      	cmp	r3, #5
 800968c:	d801      	bhi.n	8009692 <__hexdig_fun+0x26>
 800968e:	3827      	subs	r0, #39	; 0x27
 8009690:	e7f1      	b.n	8009676 <__hexdig_fun+0xa>
 8009692:	2000      	movs	r0, #0
 8009694:	4770      	bx	lr
	...

08009698 <__gethex>:
 8009698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	4617      	mov	r7, r2
 800969e:	680a      	ldr	r2, [r1, #0]
 80096a0:	b085      	sub	sp, #20
 80096a2:	f102 0b02 	add.w	fp, r2, #2
 80096a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80096aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80096ae:	4681      	mov	r9, r0
 80096b0:	468a      	mov	sl, r1
 80096b2:	9302      	str	r3, [sp, #8]
 80096b4:	32fe      	adds	r2, #254	; 0xfe
 80096b6:	eb02 030b 	add.w	r3, r2, fp
 80096ba:	46d8      	mov	r8, fp
 80096bc:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80096c0:	9301      	str	r3, [sp, #4]
 80096c2:	2830      	cmp	r0, #48	; 0x30
 80096c4:	d0f7      	beq.n	80096b6 <__gethex+0x1e>
 80096c6:	f7ff ffd1 	bl	800966c <__hexdig_fun>
 80096ca:	4604      	mov	r4, r0
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d138      	bne.n	8009742 <__gethex+0xaa>
 80096d0:	49a7      	ldr	r1, [pc, #668]	; (8009970 <__gethex+0x2d8>)
 80096d2:	2201      	movs	r2, #1
 80096d4:	4640      	mov	r0, r8
 80096d6:	f7ff fdb0 	bl	800923a <strncmp>
 80096da:	4606      	mov	r6, r0
 80096dc:	2800      	cmp	r0, #0
 80096de:	d169      	bne.n	80097b4 <__gethex+0x11c>
 80096e0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80096e4:	465d      	mov	r5, fp
 80096e6:	f7ff ffc1 	bl	800966c <__hexdig_fun>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	d064      	beq.n	80097b8 <__gethex+0x120>
 80096ee:	465a      	mov	r2, fp
 80096f0:	7810      	ldrb	r0, [r2, #0]
 80096f2:	2830      	cmp	r0, #48	; 0x30
 80096f4:	4690      	mov	r8, r2
 80096f6:	f102 0201 	add.w	r2, r2, #1
 80096fa:	d0f9      	beq.n	80096f0 <__gethex+0x58>
 80096fc:	f7ff ffb6 	bl	800966c <__hexdig_fun>
 8009700:	2301      	movs	r3, #1
 8009702:	fab0 f480 	clz	r4, r0
 8009706:	0964      	lsrs	r4, r4, #5
 8009708:	465e      	mov	r6, fp
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	4642      	mov	r2, r8
 800970e:	4615      	mov	r5, r2
 8009710:	3201      	adds	r2, #1
 8009712:	7828      	ldrb	r0, [r5, #0]
 8009714:	f7ff ffaa 	bl	800966c <__hexdig_fun>
 8009718:	2800      	cmp	r0, #0
 800971a:	d1f8      	bne.n	800970e <__gethex+0x76>
 800971c:	4994      	ldr	r1, [pc, #592]	; (8009970 <__gethex+0x2d8>)
 800971e:	2201      	movs	r2, #1
 8009720:	4628      	mov	r0, r5
 8009722:	f7ff fd8a 	bl	800923a <strncmp>
 8009726:	b978      	cbnz	r0, 8009748 <__gethex+0xb0>
 8009728:	b946      	cbnz	r6, 800973c <__gethex+0xa4>
 800972a:	1c6e      	adds	r6, r5, #1
 800972c:	4632      	mov	r2, r6
 800972e:	4615      	mov	r5, r2
 8009730:	3201      	adds	r2, #1
 8009732:	7828      	ldrb	r0, [r5, #0]
 8009734:	f7ff ff9a 	bl	800966c <__hexdig_fun>
 8009738:	2800      	cmp	r0, #0
 800973a:	d1f8      	bne.n	800972e <__gethex+0x96>
 800973c:	1b73      	subs	r3, r6, r5
 800973e:	009e      	lsls	r6, r3, #2
 8009740:	e004      	b.n	800974c <__gethex+0xb4>
 8009742:	2400      	movs	r4, #0
 8009744:	4626      	mov	r6, r4
 8009746:	e7e1      	b.n	800970c <__gethex+0x74>
 8009748:	2e00      	cmp	r6, #0
 800974a:	d1f7      	bne.n	800973c <__gethex+0xa4>
 800974c:	782b      	ldrb	r3, [r5, #0]
 800974e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009752:	2b50      	cmp	r3, #80	; 0x50
 8009754:	d13d      	bne.n	80097d2 <__gethex+0x13a>
 8009756:	786b      	ldrb	r3, [r5, #1]
 8009758:	2b2b      	cmp	r3, #43	; 0x2b
 800975a:	d02f      	beq.n	80097bc <__gethex+0x124>
 800975c:	2b2d      	cmp	r3, #45	; 0x2d
 800975e:	d031      	beq.n	80097c4 <__gethex+0x12c>
 8009760:	1c69      	adds	r1, r5, #1
 8009762:	f04f 0b00 	mov.w	fp, #0
 8009766:	7808      	ldrb	r0, [r1, #0]
 8009768:	f7ff ff80 	bl	800966c <__hexdig_fun>
 800976c:	1e42      	subs	r2, r0, #1
 800976e:	b2d2      	uxtb	r2, r2
 8009770:	2a18      	cmp	r2, #24
 8009772:	d82e      	bhi.n	80097d2 <__gethex+0x13a>
 8009774:	f1a0 0210 	sub.w	r2, r0, #16
 8009778:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800977c:	f7ff ff76 	bl	800966c <__hexdig_fun>
 8009780:	f100 3cff 	add.w	ip, r0, #4294967295
 8009784:	fa5f fc8c 	uxtb.w	ip, ip
 8009788:	f1bc 0f18 	cmp.w	ip, #24
 800978c:	d91d      	bls.n	80097ca <__gethex+0x132>
 800978e:	f1bb 0f00 	cmp.w	fp, #0
 8009792:	d000      	beq.n	8009796 <__gethex+0xfe>
 8009794:	4252      	negs	r2, r2
 8009796:	4416      	add	r6, r2
 8009798:	f8ca 1000 	str.w	r1, [sl]
 800979c:	b1dc      	cbz	r4, 80097d6 <__gethex+0x13e>
 800979e:	9b01      	ldr	r3, [sp, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	bf14      	ite	ne
 80097a4:	f04f 0800 	movne.w	r8, #0
 80097a8:	f04f 0806 	moveq.w	r8, #6
 80097ac:	4640      	mov	r0, r8
 80097ae:	b005      	add	sp, #20
 80097b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b4:	4645      	mov	r5, r8
 80097b6:	4626      	mov	r6, r4
 80097b8:	2401      	movs	r4, #1
 80097ba:	e7c7      	b.n	800974c <__gethex+0xb4>
 80097bc:	f04f 0b00 	mov.w	fp, #0
 80097c0:	1ca9      	adds	r1, r5, #2
 80097c2:	e7d0      	b.n	8009766 <__gethex+0xce>
 80097c4:	f04f 0b01 	mov.w	fp, #1
 80097c8:	e7fa      	b.n	80097c0 <__gethex+0x128>
 80097ca:	230a      	movs	r3, #10
 80097cc:	fb03 0002 	mla	r0, r3, r2, r0
 80097d0:	e7d0      	b.n	8009774 <__gethex+0xdc>
 80097d2:	4629      	mov	r1, r5
 80097d4:	e7e0      	b.n	8009798 <__gethex+0x100>
 80097d6:	eba5 0308 	sub.w	r3, r5, r8
 80097da:	3b01      	subs	r3, #1
 80097dc:	4621      	mov	r1, r4
 80097de:	2b07      	cmp	r3, #7
 80097e0:	dc0a      	bgt.n	80097f8 <__gethex+0x160>
 80097e2:	4648      	mov	r0, r9
 80097e4:	f000 fca0 	bl	800a128 <_Balloc>
 80097e8:	4604      	mov	r4, r0
 80097ea:	b940      	cbnz	r0, 80097fe <__gethex+0x166>
 80097ec:	4b61      	ldr	r3, [pc, #388]	; (8009974 <__gethex+0x2dc>)
 80097ee:	4602      	mov	r2, r0
 80097f0:	21e4      	movs	r1, #228	; 0xe4
 80097f2:	4861      	ldr	r0, [pc, #388]	; (8009978 <__gethex+0x2e0>)
 80097f4:	f002 fcbc 	bl	800c170 <__assert_func>
 80097f8:	3101      	adds	r1, #1
 80097fa:	105b      	asrs	r3, r3, #1
 80097fc:	e7ef      	b.n	80097de <__gethex+0x146>
 80097fe:	f100 0a14 	add.w	sl, r0, #20
 8009802:	2300      	movs	r3, #0
 8009804:	495a      	ldr	r1, [pc, #360]	; (8009970 <__gethex+0x2d8>)
 8009806:	f8cd a004 	str.w	sl, [sp, #4]
 800980a:	469b      	mov	fp, r3
 800980c:	45a8      	cmp	r8, r5
 800980e:	d342      	bcc.n	8009896 <__gethex+0x1fe>
 8009810:	9801      	ldr	r0, [sp, #4]
 8009812:	f840 bb04 	str.w	fp, [r0], #4
 8009816:	eba0 000a 	sub.w	r0, r0, sl
 800981a:	1080      	asrs	r0, r0, #2
 800981c:	6120      	str	r0, [r4, #16]
 800981e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8009822:	4658      	mov	r0, fp
 8009824:	f000 fd3e 	bl	800a2a4 <__hi0bits>
 8009828:	683d      	ldr	r5, [r7, #0]
 800982a:	eba8 0000 	sub.w	r0, r8, r0
 800982e:	42a8      	cmp	r0, r5
 8009830:	dd59      	ble.n	80098e6 <__gethex+0x24e>
 8009832:	eba0 0805 	sub.w	r8, r0, r5
 8009836:	4641      	mov	r1, r8
 8009838:	4620      	mov	r0, r4
 800983a:	f001 f8b3 	bl	800a9a4 <__any_on>
 800983e:	4683      	mov	fp, r0
 8009840:	b1b8      	cbz	r0, 8009872 <__gethex+0x1da>
 8009842:	f108 33ff 	add.w	r3, r8, #4294967295
 8009846:	1159      	asrs	r1, r3, #5
 8009848:	f003 021f 	and.w	r2, r3, #31
 800984c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009850:	f04f 0b01 	mov.w	fp, #1
 8009854:	fa0b f202 	lsl.w	r2, fp, r2
 8009858:	420a      	tst	r2, r1
 800985a:	d00a      	beq.n	8009872 <__gethex+0x1da>
 800985c:	455b      	cmp	r3, fp
 800985e:	dd06      	ble.n	800986e <__gethex+0x1d6>
 8009860:	f1a8 0102 	sub.w	r1, r8, #2
 8009864:	4620      	mov	r0, r4
 8009866:	f001 f89d 	bl	800a9a4 <__any_on>
 800986a:	2800      	cmp	r0, #0
 800986c:	d138      	bne.n	80098e0 <__gethex+0x248>
 800986e:	f04f 0b02 	mov.w	fp, #2
 8009872:	4641      	mov	r1, r8
 8009874:	4620      	mov	r0, r4
 8009876:	f7ff fea7 	bl	80095c8 <rshift>
 800987a:	4446      	add	r6, r8
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	42b3      	cmp	r3, r6
 8009880:	da41      	bge.n	8009906 <__gethex+0x26e>
 8009882:	4621      	mov	r1, r4
 8009884:	4648      	mov	r0, r9
 8009886:	f000 fc74 	bl	800a172 <_Bfree>
 800988a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800988c:	2300      	movs	r3, #0
 800988e:	6013      	str	r3, [r2, #0]
 8009890:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009894:	e78a      	b.n	80097ac <__gethex+0x114>
 8009896:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800989a:	2a2e      	cmp	r2, #46	; 0x2e
 800989c:	d014      	beq.n	80098c8 <__gethex+0x230>
 800989e:	2b20      	cmp	r3, #32
 80098a0:	d106      	bne.n	80098b0 <__gethex+0x218>
 80098a2:	9b01      	ldr	r3, [sp, #4]
 80098a4:	f843 bb04 	str.w	fp, [r3], #4
 80098a8:	f04f 0b00 	mov.w	fp, #0
 80098ac:	9301      	str	r3, [sp, #4]
 80098ae:	465b      	mov	r3, fp
 80098b0:	7828      	ldrb	r0, [r5, #0]
 80098b2:	9303      	str	r3, [sp, #12]
 80098b4:	f7ff feda 	bl	800966c <__hexdig_fun>
 80098b8:	9b03      	ldr	r3, [sp, #12]
 80098ba:	f000 000f 	and.w	r0, r0, #15
 80098be:	4098      	lsls	r0, r3
 80098c0:	ea4b 0b00 	orr.w	fp, fp, r0
 80098c4:	3304      	adds	r3, #4
 80098c6:	e7a1      	b.n	800980c <__gethex+0x174>
 80098c8:	45a8      	cmp	r8, r5
 80098ca:	d8e8      	bhi.n	800989e <__gethex+0x206>
 80098cc:	2201      	movs	r2, #1
 80098ce:	4628      	mov	r0, r5
 80098d0:	9303      	str	r3, [sp, #12]
 80098d2:	f7ff fcb2 	bl	800923a <strncmp>
 80098d6:	4926      	ldr	r1, [pc, #152]	; (8009970 <__gethex+0x2d8>)
 80098d8:	9b03      	ldr	r3, [sp, #12]
 80098da:	2800      	cmp	r0, #0
 80098dc:	d1df      	bne.n	800989e <__gethex+0x206>
 80098de:	e795      	b.n	800980c <__gethex+0x174>
 80098e0:	f04f 0b03 	mov.w	fp, #3
 80098e4:	e7c5      	b.n	8009872 <__gethex+0x1da>
 80098e6:	da0b      	bge.n	8009900 <__gethex+0x268>
 80098e8:	eba5 0800 	sub.w	r8, r5, r0
 80098ec:	4621      	mov	r1, r4
 80098ee:	4642      	mov	r2, r8
 80098f0:	4648      	mov	r0, r9
 80098f2:	f000 fe25 	bl	800a540 <__lshift>
 80098f6:	eba6 0608 	sub.w	r6, r6, r8
 80098fa:	4604      	mov	r4, r0
 80098fc:	f100 0a14 	add.w	sl, r0, #20
 8009900:	f04f 0b00 	mov.w	fp, #0
 8009904:	e7ba      	b.n	800987c <__gethex+0x1e4>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	42b3      	cmp	r3, r6
 800990a:	dd73      	ble.n	80099f4 <__gethex+0x35c>
 800990c:	1b9e      	subs	r6, r3, r6
 800990e:	42b5      	cmp	r5, r6
 8009910:	dc34      	bgt.n	800997c <__gethex+0x2e4>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2b02      	cmp	r3, #2
 8009916:	d023      	beq.n	8009960 <__gethex+0x2c8>
 8009918:	2b03      	cmp	r3, #3
 800991a:	d025      	beq.n	8009968 <__gethex+0x2d0>
 800991c:	2b01      	cmp	r3, #1
 800991e:	d115      	bne.n	800994c <__gethex+0x2b4>
 8009920:	42b5      	cmp	r5, r6
 8009922:	d113      	bne.n	800994c <__gethex+0x2b4>
 8009924:	2d01      	cmp	r5, #1
 8009926:	d10b      	bne.n	8009940 <__gethex+0x2a8>
 8009928:	9a02      	ldr	r2, [sp, #8]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	2301      	movs	r3, #1
 8009930:	6123      	str	r3, [r4, #16]
 8009932:	f8ca 3000 	str.w	r3, [sl]
 8009936:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009938:	f04f 0862 	mov.w	r8, #98	; 0x62
 800993c:	601c      	str	r4, [r3, #0]
 800993e:	e735      	b.n	80097ac <__gethex+0x114>
 8009940:	1e69      	subs	r1, r5, #1
 8009942:	4620      	mov	r0, r4
 8009944:	f001 f82e 	bl	800a9a4 <__any_on>
 8009948:	2800      	cmp	r0, #0
 800994a:	d1ed      	bne.n	8009928 <__gethex+0x290>
 800994c:	4621      	mov	r1, r4
 800994e:	4648      	mov	r0, r9
 8009950:	f000 fc0f 	bl	800a172 <_Bfree>
 8009954:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009956:	2300      	movs	r3, #0
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800995e:	e725      	b.n	80097ac <__gethex+0x114>
 8009960:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1f2      	bne.n	800994c <__gethex+0x2b4>
 8009966:	e7df      	b.n	8009928 <__gethex+0x290>
 8009968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1dc      	bne.n	8009928 <__gethex+0x290>
 800996e:	e7ed      	b.n	800994c <__gethex+0x2b4>
 8009970:	0800f50c 	.word	0x0800f50c
 8009974:	0800f568 	.word	0x0800f568
 8009978:	0800f579 	.word	0x0800f579
 800997c:	f106 38ff 	add.w	r8, r6, #4294967295
 8009980:	f1bb 0f00 	cmp.w	fp, #0
 8009984:	d133      	bne.n	80099ee <__gethex+0x356>
 8009986:	f1b8 0f00 	cmp.w	r8, #0
 800998a:	d004      	beq.n	8009996 <__gethex+0x2fe>
 800998c:	4641      	mov	r1, r8
 800998e:	4620      	mov	r0, r4
 8009990:	f001 f808 	bl	800a9a4 <__any_on>
 8009994:	4683      	mov	fp, r0
 8009996:	ea4f 1268 	mov.w	r2, r8, asr #5
 800999a:	2301      	movs	r3, #1
 800999c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80099a0:	f008 081f 	and.w	r8, r8, #31
 80099a4:	fa03 f308 	lsl.w	r3, r3, r8
 80099a8:	4213      	tst	r3, r2
 80099aa:	4631      	mov	r1, r6
 80099ac:	4620      	mov	r0, r4
 80099ae:	bf18      	it	ne
 80099b0:	f04b 0b02 	orrne.w	fp, fp, #2
 80099b4:	1bad      	subs	r5, r5, r6
 80099b6:	f7ff fe07 	bl	80095c8 <rshift>
 80099ba:	687e      	ldr	r6, [r7, #4]
 80099bc:	f04f 0802 	mov.w	r8, #2
 80099c0:	f1bb 0f00 	cmp.w	fp, #0
 80099c4:	d04a      	beq.n	8009a5c <__gethex+0x3c4>
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2b02      	cmp	r3, #2
 80099ca:	d016      	beq.n	80099fa <__gethex+0x362>
 80099cc:	2b03      	cmp	r3, #3
 80099ce:	d018      	beq.n	8009a02 <__gethex+0x36a>
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d109      	bne.n	80099e8 <__gethex+0x350>
 80099d4:	f01b 0f02 	tst.w	fp, #2
 80099d8:	d006      	beq.n	80099e8 <__gethex+0x350>
 80099da:	f8da 3000 	ldr.w	r3, [sl]
 80099de:	ea4b 0b03 	orr.w	fp, fp, r3
 80099e2:	f01b 0f01 	tst.w	fp, #1
 80099e6:	d10f      	bne.n	8009a08 <__gethex+0x370>
 80099e8:	f048 0810 	orr.w	r8, r8, #16
 80099ec:	e036      	b.n	8009a5c <__gethex+0x3c4>
 80099ee:	f04f 0b01 	mov.w	fp, #1
 80099f2:	e7d0      	b.n	8009996 <__gethex+0x2fe>
 80099f4:	f04f 0801 	mov.w	r8, #1
 80099f8:	e7e2      	b.n	80099c0 <__gethex+0x328>
 80099fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099fc:	f1c3 0301 	rsb	r3, r3, #1
 8009a00:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d0ef      	beq.n	80099e8 <__gethex+0x350>
 8009a08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009a0c:	f104 0214 	add.w	r2, r4, #20
 8009a10:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009a14:	9301      	str	r3, [sp, #4]
 8009a16:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	4694      	mov	ip, r2
 8009a1e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009a22:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009a26:	d01e      	beq.n	8009a66 <__gethex+0x3ce>
 8009a28:	3101      	adds	r1, #1
 8009a2a:	f8cc 1000 	str.w	r1, [ip]
 8009a2e:	f1b8 0f02 	cmp.w	r8, #2
 8009a32:	f104 0214 	add.w	r2, r4, #20
 8009a36:	d13d      	bne.n	8009ab4 <__gethex+0x41c>
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	3b01      	subs	r3, #1
 8009a3c:	42ab      	cmp	r3, r5
 8009a3e:	d10b      	bne.n	8009a58 <__gethex+0x3c0>
 8009a40:	1169      	asrs	r1, r5, #5
 8009a42:	2301      	movs	r3, #1
 8009a44:	f005 051f 	and.w	r5, r5, #31
 8009a48:	fa03 f505 	lsl.w	r5, r3, r5
 8009a4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a50:	421d      	tst	r5, r3
 8009a52:	bf18      	it	ne
 8009a54:	f04f 0801 	movne.w	r8, #1
 8009a58:	f048 0820 	orr.w	r8, r8, #32
 8009a5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a5e:	601c      	str	r4, [r3, #0]
 8009a60:	9b02      	ldr	r3, [sp, #8]
 8009a62:	601e      	str	r6, [r3, #0]
 8009a64:	e6a2      	b.n	80097ac <__gethex+0x114>
 8009a66:	4290      	cmp	r0, r2
 8009a68:	f842 3c04 	str.w	r3, [r2, #-4]
 8009a6c:	d8d6      	bhi.n	8009a1c <__gethex+0x384>
 8009a6e:	68a2      	ldr	r2, [r4, #8]
 8009a70:	4593      	cmp	fp, r2
 8009a72:	db17      	blt.n	8009aa4 <__gethex+0x40c>
 8009a74:	6861      	ldr	r1, [r4, #4]
 8009a76:	4648      	mov	r0, r9
 8009a78:	3101      	adds	r1, #1
 8009a7a:	f000 fb55 	bl	800a128 <_Balloc>
 8009a7e:	4682      	mov	sl, r0
 8009a80:	b918      	cbnz	r0, 8009a8a <__gethex+0x3f2>
 8009a82:	4b1b      	ldr	r3, [pc, #108]	; (8009af0 <__gethex+0x458>)
 8009a84:	4602      	mov	r2, r0
 8009a86:	2184      	movs	r1, #132	; 0x84
 8009a88:	e6b3      	b.n	80097f2 <__gethex+0x15a>
 8009a8a:	6922      	ldr	r2, [r4, #16]
 8009a8c:	3202      	adds	r2, #2
 8009a8e:	f104 010c 	add.w	r1, r4, #12
 8009a92:	0092      	lsls	r2, r2, #2
 8009a94:	300c      	adds	r0, #12
 8009a96:	f7ff fc5d 	bl	8009354 <memcpy>
 8009a9a:	4621      	mov	r1, r4
 8009a9c:	4648      	mov	r0, r9
 8009a9e:	f000 fb68 	bl	800a172 <_Bfree>
 8009aa2:	4654      	mov	r4, sl
 8009aa4:	6922      	ldr	r2, [r4, #16]
 8009aa6:	1c51      	adds	r1, r2, #1
 8009aa8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009aac:	6121      	str	r1, [r4, #16]
 8009aae:	2101      	movs	r1, #1
 8009ab0:	6151      	str	r1, [r2, #20]
 8009ab2:	e7bc      	b.n	8009a2e <__gethex+0x396>
 8009ab4:	6921      	ldr	r1, [r4, #16]
 8009ab6:	4559      	cmp	r1, fp
 8009ab8:	dd0b      	ble.n	8009ad2 <__gethex+0x43a>
 8009aba:	2101      	movs	r1, #1
 8009abc:	4620      	mov	r0, r4
 8009abe:	f7ff fd83 	bl	80095c8 <rshift>
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	3601      	adds	r6, #1
 8009ac6:	42b3      	cmp	r3, r6
 8009ac8:	f6ff aedb 	blt.w	8009882 <__gethex+0x1ea>
 8009acc:	f04f 0801 	mov.w	r8, #1
 8009ad0:	e7c2      	b.n	8009a58 <__gethex+0x3c0>
 8009ad2:	f015 051f 	ands.w	r5, r5, #31
 8009ad6:	d0f9      	beq.n	8009acc <__gethex+0x434>
 8009ad8:	9b01      	ldr	r3, [sp, #4]
 8009ada:	441a      	add	r2, r3
 8009adc:	f1c5 0520 	rsb	r5, r5, #32
 8009ae0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009ae4:	f000 fbde 	bl	800a2a4 <__hi0bits>
 8009ae8:	42a8      	cmp	r0, r5
 8009aea:	dbe6      	blt.n	8009aba <__gethex+0x422>
 8009aec:	e7ee      	b.n	8009acc <__gethex+0x434>
 8009aee:	bf00      	nop
 8009af0:	0800f568 	.word	0x0800f568

08009af4 <L_shift>:
 8009af4:	f1c2 0208 	rsb	r2, r2, #8
 8009af8:	0092      	lsls	r2, r2, #2
 8009afa:	b570      	push	{r4, r5, r6, lr}
 8009afc:	f1c2 0620 	rsb	r6, r2, #32
 8009b00:	6843      	ldr	r3, [r0, #4]
 8009b02:	6804      	ldr	r4, [r0, #0]
 8009b04:	fa03 f506 	lsl.w	r5, r3, r6
 8009b08:	432c      	orrs	r4, r5
 8009b0a:	40d3      	lsrs	r3, r2
 8009b0c:	6004      	str	r4, [r0, #0]
 8009b0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009b12:	4288      	cmp	r0, r1
 8009b14:	d3f4      	bcc.n	8009b00 <L_shift+0xc>
 8009b16:	bd70      	pop	{r4, r5, r6, pc}

08009b18 <__match>:
 8009b18:	b530      	push	{r4, r5, lr}
 8009b1a:	6803      	ldr	r3, [r0, #0]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b22:	b914      	cbnz	r4, 8009b2a <__match+0x12>
 8009b24:	6003      	str	r3, [r0, #0]
 8009b26:	2001      	movs	r0, #1
 8009b28:	bd30      	pop	{r4, r5, pc}
 8009b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009b32:	2d19      	cmp	r5, #25
 8009b34:	bf98      	it	ls
 8009b36:	3220      	addls	r2, #32
 8009b38:	42a2      	cmp	r2, r4
 8009b3a:	d0f0      	beq.n	8009b1e <__match+0x6>
 8009b3c:	2000      	movs	r0, #0
 8009b3e:	e7f3      	b.n	8009b28 <__match+0x10>

08009b40 <__hexnan>:
 8009b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	680b      	ldr	r3, [r1, #0]
 8009b46:	6801      	ldr	r1, [r0, #0]
 8009b48:	115e      	asrs	r6, r3, #5
 8009b4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b4e:	f013 031f 	ands.w	r3, r3, #31
 8009b52:	b087      	sub	sp, #28
 8009b54:	bf18      	it	ne
 8009b56:	3604      	addne	r6, #4
 8009b58:	2500      	movs	r5, #0
 8009b5a:	1f37      	subs	r7, r6, #4
 8009b5c:	4682      	mov	sl, r0
 8009b5e:	4690      	mov	r8, r2
 8009b60:	9301      	str	r3, [sp, #4]
 8009b62:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b66:	46b9      	mov	r9, r7
 8009b68:	463c      	mov	r4, r7
 8009b6a:	9502      	str	r5, [sp, #8]
 8009b6c:	46ab      	mov	fp, r5
 8009b6e:	784a      	ldrb	r2, [r1, #1]
 8009b70:	1c4b      	adds	r3, r1, #1
 8009b72:	9303      	str	r3, [sp, #12]
 8009b74:	b342      	cbz	r2, 8009bc8 <__hexnan+0x88>
 8009b76:	4610      	mov	r0, r2
 8009b78:	9105      	str	r1, [sp, #20]
 8009b7a:	9204      	str	r2, [sp, #16]
 8009b7c:	f7ff fd76 	bl	800966c <__hexdig_fun>
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d14f      	bne.n	8009c24 <__hexnan+0xe4>
 8009b84:	9a04      	ldr	r2, [sp, #16]
 8009b86:	9905      	ldr	r1, [sp, #20]
 8009b88:	2a20      	cmp	r2, #32
 8009b8a:	d818      	bhi.n	8009bbe <__hexnan+0x7e>
 8009b8c:	9b02      	ldr	r3, [sp, #8]
 8009b8e:	459b      	cmp	fp, r3
 8009b90:	dd13      	ble.n	8009bba <__hexnan+0x7a>
 8009b92:	454c      	cmp	r4, r9
 8009b94:	d206      	bcs.n	8009ba4 <__hexnan+0x64>
 8009b96:	2d07      	cmp	r5, #7
 8009b98:	dc04      	bgt.n	8009ba4 <__hexnan+0x64>
 8009b9a:	462a      	mov	r2, r5
 8009b9c:	4649      	mov	r1, r9
 8009b9e:	4620      	mov	r0, r4
 8009ba0:	f7ff ffa8 	bl	8009af4 <L_shift>
 8009ba4:	4544      	cmp	r4, r8
 8009ba6:	d950      	bls.n	8009c4a <__hexnan+0x10a>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	f1a4 0904 	sub.w	r9, r4, #4
 8009bae:	f844 3c04 	str.w	r3, [r4, #-4]
 8009bb2:	f8cd b008 	str.w	fp, [sp, #8]
 8009bb6:	464c      	mov	r4, r9
 8009bb8:	461d      	mov	r5, r3
 8009bba:	9903      	ldr	r1, [sp, #12]
 8009bbc:	e7d7      	b.n	8009b6e <__hexnan+0x2e>
 8009bbe:	2a29      	cmp	r2, #41	; 0x29
 8009bc0:	d155      	bne.n	8009c6e <__hexnan+0x12e>
 8009bc2:	3102      	adds	r1, #2
 8009bc4:	f8ca 1000 	str.w	r1, [sl]
 8009bc8:	f1bb 0f00 	cmp.w	fp, #0
 8009bcc:	d04f      	beq.n	8009c6e <__hexnan+0x12e>
 8009bce:	454c      	cmp	r4, r9
 8009bd0:	d206      	bcs.n	8009be0 <__hexnan+0xa0>
 8009bd2:	2d07      	cmp	r5, #7
 8009bd4:	dc04      	bgt.n	8009be0 <__hexnan+0xa0>
 8009bd6:	462a      	mov	r2, r5
 8009bd8:	4649      	mov	r1, r9
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f7ff ff8a 	bl	8009af4 <L_shift>
 8009be0:	4544      	cmp	r4, r8
 8009be2:	d934      	bls.n	8009c4e <__hexnan+0x10e>
 8009be4:	f1a8 0204 	sub.w	r2, r8, #4
 8009be8:	4623      	mov	r3, r4
 8009bea:	f853 1b04 	ldr.w	r1, [r3], #4
 8009bee:	f842 1f04 	str.w	r1, [r2, #4]!
 8009bf2:	429f      	cmp	r7, r3
 8009bf4:	d2f9      	bcs.n	8009bea <__hexnan+0xaa>
 8009bf6:	1b3b      	subs	r3, r7, r4
 8009bf8:	f023 0303 	bic.w	r3, r3, #3
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	3e03      	subs	r6, #3
 8009c00:	3401      	adds	r4, #1
 8009c02:	42a6      	cmp	r6, r4
 8009c04:	bf38      	it	cc
 8009c06:	2304      	movcc	r3, #4
 8009c08:	4443      	add	r3, r8
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f843 2b04 	str.w	r2, [r3], #4
 8009c10:	429f      	cmp	r7, r3
 8009c12:	d2fb      	bcs.n	8009c0c <__hexnan+0xcc>
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	b91b      	cbnz	r3, 8009c20 <__hexnan+0xe0>
 8009c18:	4547      	cmp	r7, r8
 8009c1a:	d126      	bne.n	8009c6a <__hexnan+0x12a>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	603b      	str	r3, [r7, #0]
 8009c20:	2005      	movs	r0, #5
 8009c22:	e025      	b.n	8009c70 <__hexnan+0x130>
 8009c24:	3501      	adds	r5, #1
 8009c26:	2d08      	cmp	r5, #8
 8009c28:	f10b 0b01 	add.w	fp, fp, #1
 8009c2c:	dd06      	ble.n	8009c3c <__hexnan+0xfc>
 8009c2e:	4544      	cmp	r4, r8
 8009c30:	d9c3      	bls.n	8009bba <__hexnan+0x7a>
 8009c32:	2300      	movs	r3, #0
 8009c34:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c38:	2501      	movs	r5, #1
 8009c3a:	3c04      	subs	r4, #4
 8009c3c:	6822      	ldr	r2, [r4, #0]
 8009c3e:	f000 000f 	and.w	r0, r0, #15
 8009c42:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c46:	6020      	str	r0, [r4, #0]
 8009c48:	e7b7      	b.n	8009bba <__hexnan+0x7a>
 8009c4a:	2508      	movs	r5, #8
 8009c4c:	e7b5      	b.n	8009bba <__hexnan+0x7a>
 8009c4e:	9b01      	ldr	r3, [sp, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d0df      	beq.n	8009c14 <__hexnan+0xd4>
 8009c54:	f1c3 0320 	rsb	r3, r3, #32
 8009c58:	f04f 32ff 	mov.w	r2, #4294967295
 8009c5c:	40da      	lsrs	r2, r3
 8009c5e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c62:	4013      	ands	r3, r2
 8009c64:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c68:	e7d4      	b.n	8009c14 <__hexnan+0xd4>
 8009c6a:	3f04      	subs	r7, #4
 8009c6c:	e7d2      	b.n	8009c14 <__hexnan+0xd4>
 8009c6e:	2004      	movs	r0, #4
 8009c70:	b007      	add	sp, #28
 8009c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009c78 <_malloc_r>:
 8009c78:	f101 030b 	add.w	r3, r1, #11
 8009c7c:	2b16      	cmp	r3, #22
 8009c7e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c82:	4605      	mov	r5, r0
 8009c84:	d906      	bls.n	8009c94 <_malloc_r+0x1c>
 8009c86:	f033 0707 	bics.w	r7, r3, #7
 8009c8a:	d504      	bpl.n	8009c96 <_malloc_r+0x1e>
 8009c8c:	230c      	movs	r3, #12
 8009c8e:	602b      	str	r3, [r5, #0]
 8009c90:	2400      	movs	r4, #0
 8009c92:	e1a3      	b.n	8009fdc <_malloc_r+0x364>
 8009c94:	2710      	movs	r7, #16
 8009c96:	42b9      	cmp	r1, r7
 8009c98:	d8f8      	bhi.n	8009c8c <_malloc_r+0x14>
 8009c9a:	4628      	mov	r0, r5
 8009c9c:	f000 fa38 	bl	800a110 <__malloc_lock>
 8009ca0:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8009ca4:	4eaf      	ldr	r6, [pc, #700]	; (8009f64 <_malloc_r+0x2ec>)
 8009ca6:	d237      	bcs.n	8009d18 <_malloc_r+0xa0>
 8009ca8:	f107 0208 	add.w	r2, r7, #8
 8009cac:	4432      	add	r2, r6
 8009cae:	f1a2 0108 	sub.w	r1, r2, #8
 8009cb2:	6854      	ldr	r4, [r2, #4]
 8009cb4:	428c      	cmp	r4, r1
 8009cb6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8009cba:	d102      	bne.n	8009cc2 <_malloc_r+0x4a>
 8009cbc:	68d4      	ldr	r4, [r2, #12]
 8009cbe:	42a2      	cmp	r2, r4
 8009cc0:	d010      	beq.n	8009ce4 <_malloc_r+0x6c>
 8009cc2:	6863      	ldr	r3, [r4, #4]
 8009cc4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009cc8:	f023 0303 	bic.w	r3, r3, #3
 8009ccc:	60ca      	str	r2, [r1, #12]
 8009cce:	4423      	add	r3, r4
 8009cd0:	6091      	str	r1, [r2, #8]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	f042 0201 	orr.w	r2, r2, #1
 8009cd8:	605a      	str	r2, [r3, #4]
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f000 fa1e 	bl	800a11c <__malloc_unlock>
 8009ce0:	3408      	adds	r4, #8
 8009ce2:	e17b      	b.n	8009fdc <_malloc_r+0x364>
 8009ce4:	3302      	adds	r3, #2
 8009ce6:	6934      	ldr	r4, [r6, #16]
 8009ce8:	499f      	ldr	r1, [pc, #636]	; (8009f68 <_malloc_r+0x2f0>)
 8009cea:	428c      	cmp	r4, r1
 8009cec:	d077      	beq.n	8009dde <_malloc_r+0x166>
 8009cee:	6862      	ldr	r2, [r4, #4]
 8009cf0:	f022 0c03 	bic.w	ip, r2, #3
 8009cf4:	ebac 0007 	sub.w	r0, ip, r7
 8009cf8:	280f      	cmp	r0, #15
 8009cfa:	dd48      	ble.n	8009d8e <_malloc_r+0x116>
 8009cfc:	19e2      	adds	r2, r4, r7
 8009cfe:	f040 0301 	orr.w	r3, r0, #1
 8009d02:	f047 0701 	orr.w	r7, r7, #1
 8009d06:	6067      	str	r7, [r4, #4]
 8009d08:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009d0c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009d10:	6053      	str	r3, [r2, #4]
 8009d12:	f844 000c 	str.w	r0, [r4, ip]
 8009d16:	e7e0      	b.n	8009cda <_malloc_r+0x62>
 8009d18:	0a7b      	lsrs	r3, r7, #9
 8009d1a:	d02a      	beq.n	8009d72 <_malloc_r+0xfa>
 8009d1c:	2b04      	cmp	r3, #4
 8009d1e:	d812      	bhi.n	8009d46 <_malloc_r+0xce>
 8009d20:	09bb      	lsrs	r3, r7, #6
 8009d22:	3338      	adds	r3, #56	; 0x38
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8009d2a:	f1a2 0c08 	sub.w	ip, r2, #8
 8009d2e:	6854      	ldr	r4, [r2, #4]
 8009d30:	4564      	cmp	r4, ip
 8009d32:	d006      	beq.n	8009d42 <_malloc_r+0xca>
 8009d34:	6862      	ldr	r2, [r4, #4]
 8009d36:	f022 0203 	bic.w	r2, r2, #3
 8009d3a:	1bd0      	subs	r0, r2, r7
 8009d3c:	280f      	cmp	r0, #15
 8009d3e:	dd1c      	ble.n	8009d7a <_malloc_r+0x102>
 8009d40:	3b01      	subs	r3, #1
 8009d42:	3301      	adds	r3, #1
 8009d44:	e7cf      	b.n	8009ce6 <_malloc_r+0x6e>
 8009d46:	2b14      	cmp	r3, #20
 8009d48:	d801      	bhi.n	8009d4e <_malloc_r+0xd6>
 8009d4a:	335b      	adds	r3, #91	; 0x5b
 8009d4c:	e7ea      	b.n	8009d24 <_malloc_r+0xac>
 8009d4e:	2b54      	cmp	r3, #84	; 0x54
 8009d50:	d802      	bhi.n	8009d58 <_malloc_r+0xe0>
 8009d52:	0b3b      	lsrs	r3, r7, #12
 8009d54:	336e      	adds	r3, #110	; 0x6e
 8009d56:	e7e5      	b.n	8009d24 <_malloc_r+0xac>
 8009d58:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009d5c:	d802      	bhi.n	8009d64 <_malloc_r+0xec>
 8009d5e:	0bfb      	lsrs	r3, r7, #15
 8009d60:	3377      	adds	r3, #119	; 0x77
 8009d62:	e7df      	b.n	8009d24 <_malloc_r+0xac>
 8009d64:	f240 5254 	movw	r2, #1364	; 0x554
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d804      	bhi.n	8009d76 <_malloc_r+0xfe>
 8009d6c:	0cbb      	lsrs	r3, r7, #18
 8009d6e:	337c      	adds	r3, #124	; 0x7c
 8009d70:	e7d8      	b.n	8009d24 <_malloc_r+0xac>
 8009d72:	233f      	movs	r3, #63	; 0x3f
 8009d74:	e7d6      	b.n	8009d24 <_malloc_r+0xac>
 8009d76:	237e      	movs	r3, #126	; 0x7e
 8009d78:	e7d4      	b.n	8009d24 <_malloc_r+0xac>
 8009d7a:	2800      	cmp	r0, #0
 8009d7c:	68e1      	ldr	r1, [r4, #12]
 8009d7e:	db04      	blt.n	8009d8a <_malloc_r+0x112>
 8009d80:	68a3      	ldr	r3, [r4, #8]
 8009d82:	60d9      	str	r1, [r3, #12]
 8009d84:	608b      	str	r3, [r1, #8]
 8009d86:	18a3      	adds	r3, r4, r2
 8009d88:	e7a3      	b.n	8009cd2 <_malloc_r+0x5a>
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	e7d0      	b.n	8009d30 <_malloc_r+0xb8>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8009d94:	db07      	blt.n	8009da6 <_malloc_r+0x12e>
 8009d96:	44a4      	add	ip, r4
 8009d98:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009d9c:	f043 0301 	orr.w	r3, r3, #1
 8009da0:	f8cc 3004 	str.w	r3, [ip, #4]
 8009da4:	e799      	b.n	8009cda <_malloc_r+0x62>
 8009da6:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8009daa:	6870      	ldr	r0, [r6, #4]
 8009dac:	f080 8095 	bcs.w	8009eda <_malloc_r+0x262>
 8009db0:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8009db4:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8009db8:	f04f 0c01 	mov.w	ip, #1
 8009dbc:	3201      	adds	r2, #1
 8009dbe:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009dc2:	ea4c 0000 	orr.w	r0, ip, r0
 8009dc6:	6070      	str	r0, [r6, #4]
 8009dc8:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8009dcc:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8009dd0:	3808      	subs	r0, #8
 8009dd2:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8009dd6:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8009dda:	f8cc 400c 	str.w	r4, [ip, #12]
 8009dde:	1098      	asrs	r0, r3, #2
 8009de0:	2201      	movs	r2, #1
 8009de2:	4082      	lsls	r2, r0
 8009de4:	6870      	ldr	r0, [r6, #4]
 8009de6:	4290      	cmp	r0, r2
 8009de8:	d326      	bcc.n	8009e38 <_malloc_r+0x1c0>
 8009dea:	4210      	tst	r0, r2
 8009dec:	d106      	bne.n	8009dfc <_malloc_r+0x184>
 8009dee:	f023 0303 	bic.w	r3, r3, #3
 8009df2:	0052      	lsls	r2, r2, #1
 8009df4:	4210      	tst	r0, r2
 8009df6:	f103 0304 	add.w	r3, r3, #4
 8009dfa:	d0fa      	beq.n	8009df2 <_malloc_r+0x17a>
 8009dfc:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8009e00:	46c1      	mov	r9, r8
 8009e02:	469e      	mov	lr, r3
 8009e04:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009e08:	454c      	cmp	r4, r9
 8009e0a:	f040 80b9 	bne.w	8009f80 <_malloc_r+0x308>
 8009e0e:	f10e 0e01 	add.w	lr, lr, #1
 8009e12:	f01e 0f03 	tst.w	lr, #3
 8009e16:	f109 0908 	add.w	r9, r9, #8
 8009e1a:	d1f3      	bne.n	8009e04 <_malloc_r+0x18c>
 8009e1c:	0798      	lsls	r0, r3, #30
 8009e1e:	f040 80e3 	bne.w	8009fe8 <_malloc_r+0x370>
 8009e22:	6873      	ldr	r3, [r6, #4]
 8009e24:	ea23 0302 	bic.w	r3, r3, r2
 8009e28:	6073      	str	r3, [r6, #4]
 8009e2a:	6870      	ldr	r0, [r6, #4]
 8009e2c:	0052      	lsls	r2, r2, #1
 8009e2e:	4290      	cmp	r0, r2
 8009e30:	d302      	bcc.n	8009e38 <_malloc_r+0x1c0>
 8009e32:	2a00      	cmp	r2, #0
 8009e34:	f040 80e5 	bne.w	800a002 <_malloc_r+0x38a>
 8009e38:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8009e3c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009e40:	f023 0903 	bic.w	r9, r3, #3
 8009e44:	45b9      	cmp	r9, r7
 8009e46:	d304      	bcc.n	8009e52 <_malloc_r+0x1da>
 8009e48:	eba9 0207 	sub.w	r2, r9, r7
 8009e4c:	2a0f      	cmp	r2, #15
 8009e4e:	f300 8141 	bgt.w	800a0d4 <_malloc_r+0x45c>
 8009e52:	4b46      	ldr	r3, [pc, #280]	; (8009f6c <_malloc_r+0x2f4>)
 8009e54:	6819      	ldr	r1, [r3, #0]
 8009e56:	3110      	adds	r1, #16
 8009e58:	4439      	add	r1, r7
 8009e5a:	2008      	movs	r0, #8
 8009e5c:	9101      	str	r1, [sp, #4]
 8009e5e:	f002 f903 	bl	800c068 <sysconf>
 8009e62:	4a43      	ldr	r2, [pc, #268]	; (8009f70 <_malloc_r+0x2f8>)
 8009e64:	9901      	ldr	r1, [sp, #4]
 8009e66:	6813      	ldr	r3, [r2, #0]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	bf1f      	itttt	ne
 8009e6c:	f101 31ff 	addne.w	r1, r1, #4294967295
 8009e70:	1809      	addne	r1, r1, r0
 8009e72:	4243      	negne	r3, r0
 8009e74:	4019      	andne	r1, r3
 8009e76:	4680      	mov	r8, r0
 8009e78:	4628      	mov	r0, r5
 8009e7a:	9101      	str	r1, [sp, #4]
 8009e7c:	f002 f8d0 	bl	800c020 <_sbrk_r>
 8009e80:	1c42      	adds	r2, r0, #1
 8009e82:	eb0a 0b09 	add.w	fp, sl, r9
 8009e86:	4604      	mov	r4, r0
 8009e88:	f000 80f7 	beq.w	800a07a <_malloc_r+0x402>
 8009e8c:	4583      	cmp	fp, r0
 8009e8e:	9901      	ldr	r1, [sp, #4]
 8009e90:	4a37      	ldr	r2, [pc, #220]	; (8009f70 <_malloc_r+0x2f8>)
 8009e92:	d902      	bls.n	8009e9a <_malloc_r+0x222>
 8009e94:	45b2      	cmp	sl, r6
 8009e96:	f040 80f0 	bne.w	800a07a <_malloc_r+0x402>
 8009e9a:	4b36      	ldr	r3, [pc, #216]	; (8009f74 <_malloc_r+0x2fc>)
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	45a3      	cmp	fp, r4
 8009ea0:	eb00 0e01 	add.w	lr, r0, r1
 8009ea4:	f8c3 e000 	str.w	lr, [r3]
 8009ea8:	f108 3cff 	add.w	ip, r8, #4294967295
 8009eac:	f040 80ab 	bne.w	800a006 <_malloc_r+0x38e>
 8009eb0:	ea1b 0f0c 	tst.w	fp, ip
 8009eb4:	f040 80a7 	bne.w	800a006 <_malloc_r+0x38e>
 8009eb8:	68b2      	ldr	r2, [r6, #8]
 8009eba:	4449      	add	r1, r9
 8009ebc:	f041 0101 	orr.w	r1, r1, #1
 8009ec0:	6051      	str	r1, [r2, #4]
 8009ec2:	4a2d      	ldr	r2, [pc, #180]	; (8009f78 <_malloc_r+0x300>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	6811      	ldr	r1, [r2, #0]
 8009ec8:	428b      	cmp	r3, r1
 8009eca:	bf88      	it	hi
 8009ecc:	6013      	strhi	r3, [r2, #0]
 8009ece:	4a2b      	ldr	r2, [pc, #172]	; (8009f7c <_malloc_r+0x304>)
 8009ed0:	6811      	ldr	r1, [r2, #0]
 8009ed2:	428b      	cmp	r3, r1
 8009ed4:	bf88      	it	hi
 8009ed6:	6013      	strhi	r3, [r2, #0]
 8009ed8:	e0cf      	b.n	800a07a <_malloc_r+0x402>
 8009eda:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8009ede:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009ee2:	d218      	bcs.n	8009f16 <_malloc_r+0x29e>
 8009ee4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009ee8:	3238      	adds	r2, #56	; 0x38
 8009eea:	f102 0e01 	add.w	lr, r2, #1
 8009eee:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8009ef2:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8009ef6:	45f0      	cmp	r8, lr
 8009ef8:	d12b      	bne.n	8009f52 <_malloc_r+0x2da>
 8009efa:	1092      	asrs	r2, r2, #2
 8009efc:	f04f 0c01 	mov.w	ip, #1
 8009f00:	fa0c f202 	lsl.w	r2, ip, r2
 8009f04:	4302      	orrs	r2, r0
 8009f06:	6072      	str	r2, [r6, #4]
 8009f08:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8009f0c:	f8c8 4008 	str.w	r4, [r8, #8]
 8009f10:	f8ce 400c 	str.w	r4, [lr, #12]
 8009f14:	e763      	b.n	8009dde <_malloc_r+0x166>
 8009f16:	2a14      	cmp	r2, #20
 8009f18:	d801      	bhi.n	8009f1e <_malloc_r+0x2a6>
 8009f1a:	325b      	adds	r2, #91	; 0x5b
 8009f1c:	e7e5      	b.n	8009eea <_malloc_r+0x272>
 8009f1e:	2a54      	cmp	r2, #84	; 0x54
 8009f20:	d803      	bhi.n	8009f2a <_malloc_r+0x2b2>
 8009f22:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8009f26:	326e      	adds	r2, #110	; 0x6e
 8009f28:	e7df      	b.n	8009eea <_malloc_r+0x272>
 8009f2a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009f2e:	d803      	bhi.n	8009f38 <_malloc_r+0x2c0>
 8009f30:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8009f34:	3277      	adds	r2, #119	; 0x77
 8009f36:	e7d8      	b.n	8009eea <_malloc_r+0x272>
 8009f38:	f240 5e54 	movw	lr, #1364	; 0x554
 8009f3c:	4572      	cmp	r2, lr
 8009f3e:	bf9a      	itte	ls
 8009f40:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8009f44:	327c      	addls	r2, #124	; 0x7c
 8009f46:	227e      	movhi	r2, #126	; 0x7e
 8009f48:	e7cf      	b.n	8009eea <_malloc_r+0x272>
 8009f4a:	f8de e008 	ldr.w	lr, [lr, #8]
 8009f4e:	45f0      	cmp	r8, lr
 8009f50:	d005      	beq.n	8009f5e <_malloc_r+0x2e6>
 8009f52:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009f56:	f022 0203 	bic.w	r2, r2, #3
 8009f5a:	4562      	cmp	r2, ip
 8009f5c:	d8f5      	bhi.n	8009f4a <_malloc_r+0x2d2>
 8009f5e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8009f62:	e7d1      	b.n	8009f08 <_malloc_r+0x290>
 8009f64:	200003a0 	.word	0x200003a0
 8009f68:	200003a8 	.word	0x200003a8
 8009f6c:	20001e40 	.word	0x20001e40
 8009f70:	200007a8 	.word	0x200007a8
 8009f74:	20001e10 	.word	0x20001e10
 8009f78:	20001e38 	.word	0x20001e38
 8009f7c:	20001e3c 	.word	0x20001e3c
 8009f80:	6860      	ldr	r0, [r4, #4]
 8009f82:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009f86:	f020 0003 	bic.w	r0, r0, #3
 8009f8a:	eba0 0a07 	sub.w	sl, r0, r7
 8009f8e:	f1ba 0f0f 	cmp.w	sl, #15
 8009f92:	dd12      	ble.n	8009fba <_malloc_r+0x342>
 8009f94:	68a3      	ldr	r3, [r4, #8]
 8009f96:	19e2      	adds	r2, r4, r7
 8009f98:	f047 0701 	orr.w	r7, r7, #1
 8009f9c:	6067      	str	r7, [r4, #4]
 8009f9e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009fa2:	f8cc 3008 	str.w	r3, [ip, #8]
 8009fa6:	f04a 0301 	orr.w	r3, sl, #1
 8009faa:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009fae:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009fb2:	6053      	str	r3, [r2, #4]
 8009fb4:	f844 a000 	str.w	sl, [r4, r0]
 8009fb8:	e68f      	b.n	8009cda <_malloc_r+0x62>
 8009fba:	f1ba 0f00 	cmp.w	sl, #0
 8009fbe:	db11      	blt.n	8009fe4 <_malloc_r+0x36c>
 8009fc0:	4420      	add	r0, r4
 8009fc2:	6843      	ldr	r3, [r0, #4]
 8009fc4:	f043 0301 	orr.w	r3, r3, #1
 8009fc8:	6043      	str	r3, [r0, #4]
 8009fca:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8009fce:	4628      	mov	r0, r5
 8009fd0:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009fd4:	f8cc 3008 	str.w	r3, [ip, #8]
 8009fd8:	f000 f8a0 	bl	800a11c <__malloc_unlock>
 8009fdc:	4620      	mov	r0, r4
 8009fde:	b003      	add	sp, #12
 8009fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe4:	4664      	mov	r4, ip
 8009fe6:	e70f      	b.n	8009e08 <_malloc_r+0x190>
 8009fe8:	f858 0908 	ldr.w	r0, [r8], #-8
 8009fec:	4540      	cmp	r0, r8
 8009fee:	f103 33ff 	add.w	r3, r3, #4294967295
 8009ff2:	f43f af13 	beq.w	8009e1c <_malloc_r+0x1a4>
 8009ff6:	e718      	b.n	8009e2a <_malloc_r+0x1b2>
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	0052      	lsls	r2, r2, #1
 8009ffc:	4210      	tst	r0, r2
 8009ffe:	d0fb      	beq.n	8009ff8 <_malloc_r+0x380>
 800a000:	e6fc      	b.n	8009dfc <_malloc_r+0x184>
 800a002:	4673      	mov	r3, lr
 800a004:	e7fa      	b.n	8009ffc <_malloc_r+0x384>
 800a006:	6810      	ldr	r0, [r2, #0]
 800a008:	3001      	adds	r0, #1
 800a00a:	bf1b      	ittet	ne
 800a00c:	eba4 0b0b 	subne.w	fp, r4, fp
 800a010:	eb0b 020e 	addne.w	r2, fp, lr
 800a014:	6014      	streq	r4, [r2, #0]
 800a016:	601a      	strne	r2, [r3, #0]
 800a018:	f014 0b07 	ands.w	fp, r4, #7
 800a01c:	bf1a      	itte	ne
 800a01e:	f1cb 0008 	rsbne	r0, fp, #8
 800a022:	1824      	addne	r4, r4, r0
 800a024:	4658      	moveq	r0, fp
 800a026:	1862      	adds	r2, r4, r1
 800a028:	ea02 010c 	and.w	r1, r2, ip
 800a02c:	4480      	add	r8, r0
 800a02e:	eba8 0801 	sub.w	r8, r8, r1
 800a032:	ea08 080c 	and.w	r8, r8, ip
 800a036:	4641      	mov	r1, r8
 800a038:	4628      	mov	r0, r5
 800a03a:	9201      	str	r2, [sp, #4]
 800a03c:	f001 fff0 	bl	800c020 <_sbrk_r>
 800a040:	1c43      	adds	r3, r0, #1
 800a042:	9a01      	ldr	r2, [sp, #4]
 800a044:	4b28      	ldr	r3, [pc, #160]	; (800a0e8 <_malloc_r+0x470>)
 800a046:	d107      	bne.n	800a058 <_malloc_r+0x3e0>
 800a048:	f1bb 0f00 	cmp.w	fp, #0
 800a04c:	d023      	beq.n	800a096 <_malloc_r+0x41e>
 800a04e:	f1ab 0008 	sub.w	r0, fp, #8
 800a052:	4410      	add	r0, r2
 800a054:	f04f 0800 	mov.w	r8, #0
 800a058:	681a      	ldr	r2, [r3, #0]
 800a05a:	60b4      	str	r4, [r6, #8]
 800a05c:	1b00      	subs	r0, r0, r4
 800a05e:	4440      	add	r0, r8
 800a060:	4442      	add	r2, r8
 800a062:	f040 0001 	orr.w	r0, r0, #1
 800a066:	45b2      	cmp	sl, r6
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	6060      	str	r0, [r4, #4]
 800a06c:	f43f af29 	beq.w	8009ec2 <_malloc_r+0x24a>
 800a070:	f1b9 0f0f 	cmp.w	r9, #15
 800a074:	d812      	bhi.n	800a09c <_malloc_r+0x424>
 800a076:	2301      	movs	r3, #1
 800a078:	6063      	str	r3, [r4, #4]
 800a07a:	68b3      	ldr	r3, [r6, #8]
 800a07c:	685b      	ldr	r3, [r3, #4]
 800a07e:	f023 0303 	bic.w	r3, r3, #3
 800a082:	42bb      	cmp	r3, r7
 800a084:	eba3 0207 	sub.w	r2, r3, r7
 800a088:	d301      	bcc.n	800a08e <_malloc_r+0x416>
 800a08a:	2a0f      	cmp	r2, #15
 800a08c:	dc22      	bgt.n	800a0d4 <_malloc_r+0x45c>
 800a08e:	4628      	mov	r0, r5
 800a090:	f000 f844 	bl	800a11c <__malloc_unlock>
 800a094:	e5fc      	b.n	8009c90 <_malloc_r+0x18>
 800a096:	4610      	mov	r0, r2
 800a098:	46d8      	mov	r8, fp
 800a09a:	e7dd      	b.n	800a058 <_malloc_r+0x3e0>
 800a09c:	f8da 2004 	ldr.w	r2, [sl, #4]
 800a0a0:	f1a9 090c 	sub.w	r9, r9, #12
 800a0a4:	f029 0907 	bic.w	r9, r9, #7
 800a0a8:	f002 0201 	and.w	r2, r2, #1
 800a0ac:	ea42 0209 	orr.w	r2, r2, r9
 800a0b0:	f8ca 2004 	str.w	r2, [sl, #4]
 800a0b4:	2105      	movs	r1, #5
 800a0b6:	eb0a 0209 	add.w	r2, sl, r9
 800a0ba:	f1b9 0f0f 	cmp.w	r9, #15
 800a0be:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800a0c2:	f67f aefe 	bls.w	8009ec2 <_malloc_r+0x24a>
 800a0c6:	f10a 0108 	add.w	r1, sl, #8
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	f7ff f9bc 	bl	8009448 <_free_r>
 800a0d0:	4b05      	ldr	r3, [pc, #20]	; (800a0e8 <_malloc_r+0x470>)
 800a0d2:	e6f6      	b.n	8009ec2 <_malloc_r+0x24a>
 800a0d4:	68b4      	ldr	r4, [r6, #8]
 800a0d6:	f047 0301 	orr.w	r3, r7, #1
 800a0da:	4427      	add	r7, r4
 800a0dc:	f042 0201 	orr.w	r2, r2, #1
 800a0e0:	6063      	str	r3, [r4, #4]
 800a0e2:	60b7      	str	r7, [r6, #8]
 800a0e4:	607a      	str	r2, [r7, #4]
 800a0e6:	e5f8      	b.n	8009cda <_malloc_r+0x62>
 800a0e8:	20001e10 	.word	0x20001e10

0800a0ec <__ascii_mbtowc>:
 800a0ec:	b082      	sub	sp, #8
 800a0ee:	b901      	cbnz	r1, 800a0f2 <__ascii_mbtowc+0x6>
 800a0f0:	a901      	add	r1, sp, #4
 800a0f2:	b142      	cbz	r2, 800a106 <__ascii_mbtowc+0x1a>
 800a0f4:	b14b      	cbz	r3, 800a10a <__ascii_mbtowc+0x1e>
 800a0f6:	7813      	ldrb	r3, [r2, #0]
 800a0f8:	600b      	str	r3, [r1, #0]
 800a0fa:	7812      	ldrb	r2, [r2, #0]
 800a0fc:	1e10      	subs	r0, r2, #0
 800a0fe:	bf18      	it	ne
 800a100:	2001      	movne	r0, #1
 800a102:	b002      	add	sp, #8
 800a104:	4770      	bx	lr
 800a106:	4610      	mov	r0, r2
 800a108:	e7fb      	b.n	800a102 <__ascii_mbtowc+0x16>
 800a10a:	f06f 0001 	mvn.w	r0, #1
 800a10e:	e7f8      	b.n	800a102 <__ascii_mbtowc+0x16>

0800a110 <__malloc_lock>:
 800a110:	4801      	ldr	r0, [pc, #4]	; (800a118 <__malloc_lock+0x8>)
 800a112:	f7ff b91d 	b.w	8009350 <__retarget_lock_acquire_recursive>
 800a116:	bf00      	nop
 800a118:	20001e09 	.word	0x20001e09

0800a11c <__malloc_unlock>:
 800a11c:	4801      	ldr	r0, [pc, #4]	; (800a124 <__malloc_unlock+0x8>)
 800a11e:	f7ff b918 	b.w	8009352 <__retarget_lock_release_recursive>
 800a122:	bf00      	nop
 800a124:	20001e09 	.word	0x20001e09

0800a128 <_Balloc>:
 800a128:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a12a:	b570      	push	{r4, r5, r6, lr}
 800a12c:	4605      	mov	r5, r0
 800a12e:	460c      	mov	r4, r1
 800a130:	b17b      	cbz	r3, 800a152 <_Balloc+0x2a>
 800a132:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a134:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a138:	b9a0      	cbnz	r0, 800a164 <_Balloc+0x3c>
 800a13a:	2101      	movs	r1, #1
 800a13c:	fa01 f604 	lsl.w	r6, r1, r4
 800a140:	1d72      	adds	r2, r6, #5
 800a142:	0092      	lsls	r2, r2, #2
 800a144:	4628      	mov	r0, r5
 800a146:	f002 f831 	bl	800c1ac <_calloc_r>
 800a14a:	b148      	cbz	r0, 800a160 <_Balloc+0x38>
 800a14c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800a150:	e00b      	b.n	800a16a <_Balloc+0x42>
 800a152:	2221      	movs	r2, #33	; 0x21
 800a154:	2104      	movs	r1, #4
 800a156:	f002 f829 	bl	800c1ac <_calloc_r>
 800a15a:	6468      	str	r0, [r5, #68]	; 0x44
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d1e8      	bne.n	800a132 <_Balloc+0xa>
 800a160:	2000      	movs	r0, #0
 800a162:	bd70      	pop	{r4, r5, r6, pc}
 800a164:	6802      	ldr	r2, [r0, #0]
 800a166:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a16a:	2300      	movs	r3, #0
 800a16c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a170:	e7f7      	b.n	800a162 <_Balloc+0x3a>

0800a172 <_Bfree>:
 800a172:	b131      	cbz	r1, 800a182 <_Bfree+0x10>
 800a174:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a176:	684a      	ldr	r2, [r1, #4]
 800a178:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a17c:	6008      	str	r0, [r1, #0]
 800a17e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a182:	4770      	bx	lr

0800a184 <__multadd>:
 800a184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a188:	690d      	ldr	r5, [r1, #16]
 800a18a:	4607      	mov	r7, r0
 800a18c:	460c      	mov	r4, r1
 800a18e:	461e      	mov	r6, r3
 800a190:	f101 0c14 	add.w	ip, r1, #20
 800a194:	2000      	movs	r0, #0
 800a196:	f8dc 3000 	ldr.w	r3, [ip]
 800a19a:	b299      	uxth	r1, r3
 800a19c:	fb02 6101 	mla	r1, r2, r1, r6
 800a1a0:	0c1e      	lsrs	r6, r3, #16
 800a1a2:	0c0b      	lsrs	r3, r1, #16
 800a1a4:	fb02 3306 	mla	r3, r2, r6, r3
 800a1a8:	b289      	uxth	r1, r1
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1b0:	4285      	cmp	r5, r0
 800a1b2:	f84c 1b04 	str.w	r1, [ip], #4
 800a1b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1ba:	dcec      	bgt.n	800a196 <__multadd+0x12>
 800a1bc:	b30e      	cbz	r6, 800a202 <__multadd+0x7e>
 800a1be:	68a3      	ldr	r3, [r4, #8]
 800a1c0:	42ab      	cmp	r3, r5
 800a1c2:	dc19      	bgt.n	800a1f8 <__multadd+0x74>
 800a1c4:	6861      	ldr	r1, [r4, #4]
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	3101      	adds	r1, #1
 800a1ca:	f7ff ffad 	bl	800a128 <_Balloc>
 800a1ce:	4680      	mov	r8, r0
 800a1d0:	b928      	cbnz	r0, 800a1de <__multadd+0x5a>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	4b0c      	ldr	r3, [pc, #48]	; (800a208 <__multadd+0x84>)
 800a1d6:	480d      	ldr	r0, [pc, #52]	; (800a20c <__multadd+0x88>)
 800a1d8:	21ba      	movs	r1, #186	; 0xba
 800a1da:	f001 ffc9 	bl	800c170 <__assert_func>
 800a1de:	6922      	ldr	r2, [r4, #16]
 800a1e0:	3202      	adds	r2, #2
 800a1e2:	f104 010c 	add.w	r1, r4, #12
 800a1e6:	0092      	lsls	r2, r2, #2
 800a1e8:	300c      	adds	r0, #12
 800a1ea:	f7ff f8b3 	bl	8009354 <memcpy>
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	f7ff ffbe 	bl	800a172 <_Bfree>
 800a1f6:	4644      	mov	r4, r8
 800a1f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1fc:	3501      	adds	r5, #1
 800a1fe:	615e      	str	r6, [r3, #20]
 800a200:	6125      	str	r5, [r4, #16]
 800a202:	4620      	mov	r0, r4
 800a204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a208:	0800f568 	.word	0x0800f568
 800a20c:	0800f5d9 	.word	0x0800f5d9

0800a210 <__s2b>:
 800a210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a214:	460c      	mov	r4, r1
 800a216:	4615      	mov	r5, r2
 800a218:	461f      	mov	r7, r3
 800a21a:	2209      	movs	r2, #9
 800a21c:	3308      	adds	r3, #8
 800a21e:	4606      	mov	r6, r0
 800a220:	fb93 f3f2 	sdiv	r3, r3, r2
 800a224:	2100      	movs	r1, #0
 800a226:	2201      	movs	r2, #1
 800a228:	429a      	cmp	r2, r3
 800a22a:	db09      	blt.n	800a240 <__s2b+0x30>
 800a22c:	4630      	mov	r0, r6
 800a22e:	f7ff ff7b 	bl	800a128 <_Balloc>
 800a232:	b940      	cbnz	r0, 800a246 <__s2b+0x36>
 800a234:	4602      	mov	r2, r0
 800a236:	4b19      	ldr	r3, [pc, #100]	; (800a29c <__s2b+0x8c>)
 800a238:	4819      	ldr	r0, [pc, #100]	; (800a2a0 <__s2b+0x90>)
 800a23a:	21d3      	movs	r1, #211	; 0xd3
 800a23c:	f001 ff98 	bl	800c170 <__assert_func>
 800a240:	0052      	lsls	r2, r2, #1
 800a242:	3101      	adds	r1, #1
 800a244:	e7f0      	b.n	800a228 <__s2b+0x18>
 800a246:	9b08      	ldr	r3, [sp, #32]
 800a248:	6143      	str	r3, [r0, #20]
 800a24a:	2d09      	cmp	r5, #9
 800a24c:	f04f 0301 	mov.w	r3, #1
 800a250:	6103      	str	r3, [r0, #16]
 800a252:	dd16      	ble.n	800a282 <__s2b+0x72>
 800a254:	f104 0909 	add.w	r9, r4, #9
 800a258:	46c8      	mov	r8, r9
 800a25a:	442c      	add	r4, r5
 800a25c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a260:	4601      	mov	r1, r0
 800a262:	3b30      	subs	r3, #48	; 0x30
 800a264:	220a      	movs	r2, #10
 800a266:	4630      	mov	r0, r6
 800a268:	f7ff ff8c 	bl	800a184 <__multadd>
 800a26c:	45a0      	cmp	r8, r4
 800a26e:	d1f5      	bne.n	800a25c <__s2b+0x4c>
 800a270:	f1a5 0408 	sub.w	r4, r5, #8
 800a274:	444c      	add	r4, r9
 800a276:	1b2d      	subs	r5, r5, r4
 800a278:	1963      	adds	r3, r4, r5
 800a27a:	42bb      	cmp	r3, r7
 800a27c:	db04      	blt.n	800a288 <__s2b+0x78>
 800a27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a282:	340a      	adds	r4, #10
 800a284:	2509      	movs	r5, #9
 800a286:	e7f6      	b.n	800a276 <__s2b+0x66>
 800a288:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a28c:	4601      	mov	r1, r0
 800a28e:	3b30      	subs	r3, #48	; 0x30
 800a290:	220a      	movs	r2, #10
 800a292:	4630      	mov	r0, r6
 800a294:	f7ff ff76 	bl	800a184 <__multadd>
 800a298:	e7ee      	b.n	800a278 <__s2b+0x68>
 800a29a:	bf00      	nop
 800a29c:	0800f568 	.word	0x0800f568
 800a2a0:	0800f5d9 	.word	0x0800f5d9

0800a2a4 <__hi0bits>:
 800a2a4:	0c03      	lsrs	r3, r0, #16
 800a2a6:	041b      	lsls	r3, r3, #16
 800a2a8:	b9d3      	cbnz	r3, 800a2e0 <__hi0bits+0x3c>
 800a2aa:	0400      	lsls	r0, r0, #16
 800a2ac:	2310      	movs	r3, #16
 800a2ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2b2:	bf04      	itt	eq
 800a2b4:	0200      	lsleq	r0, r0, #8
 800a2b6:	3308      	addeq	r3, #8
 800a2b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2bc:	bf04      	itt	eq
 800a2be:	0100      	lsleq	r0, r0, #4
 800a2c0:	3304      	addeq	r3, #4
 800a2c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2c6:	bf04      	itt	eq
 800a2c8:	0080      	lsleq	r0, r0, #2
 800a2ca:	3302      	addeq	r3, #2
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	db05      	blt.n	800a2dc <__hi0bits+0x38>
 800a2d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a2d4:	f103 0301 	add.w	r3, r3, #1
 800a2d8:	bf08      	it	eq
 800a2da:	2320      	moveq	r3, #32
 800a2dc:	4618      	mov	r0, r3
 800a2de:	4770      	bx	lr
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	e7e4      	b.n	800a2ae <__hi0bits+0xa>

0800a2e4 <__lo0bits>:
 800a2e4:	6803      	ldr	r3, [r0, #0]
 800a2e6:	f013 0207 	ands.w	r2, r3, #7
 800a2ea:	d00c      	beq.n	800a306 <__lo0bits+0x22>
 800a2ec:	07d9      	lsls	r1, r3, #31
 800a2ee:	d422      	bmi.n	800a336 <__lo0bits+0x52>
 800a2f0:	079a      	lsls	r2, r3, #30
 800a2f2:	bf49      	itett	mi
 800a2f4:	085b      	lsrmi	r3, r3, #1
 800a2f6:	089b      	lsrpl	r3, r3, #2
 800a2f8:	6003      	strmi	r3, [r0, #0]
 800a2fa:	2201      	movmi	r2, #1
 800a2fc:	bf5c      	itt	pl
 800a2fe:	6003      	strpl	r3, [r0, #0]
 800a300:	2202      	movpl	r2, #2
 800a302:	4610      	mov	r0, r2
 800a304:	4770      	bx	lr
 800a306:	b299      	uxth	r1, r3
 800a308:	b909      	cbnz	r1, 800a30e <__lo0bits+0x2a>
 800a30a:	0c1b      	lsrs	r3, r3, #16
 800a30c:	2210      	movs	r2, #16
 800a30e:	b2d9      	uxtb	r1, r3
 800a310:	b909      	cbnz	r1, 800a316 <__lo0bits+0x32>
 800a312:	3208      	adds	r2, #8
 800a314:	0a1b      	lsrs	r3, r3, #8
 800a316:	0719      	lsls	r1, r3, #28
 800a318:	bf04      	itt	eq
 800a31a:	091b      	lsreq	r3, r3, #4
 800a31c:	3204      	addeq	r2, #4
 800a31e:	0799      	lsls	r1, r3, #30
 800a320:	bf04      	itt	eq
 800a322:	089b      	lsreq	r3, r3, #2
 800a324:	3202      	addeq	r2, #2
 800a326:	07d9      	lsls	r1, r3, #31
 800a328:	d403      	bmi.n	800a332 <__lo0bits+0x4e>
 800a32a:	085b      	lsrs	r3, r3, #1
 800a32c:	f102 0201 	add.w	r2, r2, #1
 800a330:	d003      	beq.n	800a33a <__lo0bits+0x56>
 800a332:	6003      	str	r3, [r0, #0]
 800a334:	e7e5      	b.n	800a302 <__lo0bits+0x1e>
 800a336:	2200      	movs	r2, #0
 800a338:	e7e3      	b.n	800a302 <__lo0bits+0x1e>
 800a33a:	2220      	movs	r2, #32
 800a33c:	e7e1      	b.n	800a302 <__lo0bits+0x1e>
	...

0800a340 <__i2b>:
 800a340:	b510      	push	{r4, lr}
 800a342:	460c      	mov	r4, r1
 800a344:	2101      	movs	r1, #1
 800a346:	f7ff feef 	bl	800a128 <_Balloc>
 800a34a:	4602      	mov	r2, r0
 800a34c:	b928      	cbnz	r0, 800a35a <__i2b+0x1a>
 800a34e:	4b05      	ldr	r3, [pc, #20]	; (800a364 <__i2b+0x24>)
 800a350:	4805      	ldr	r0, [pc, #20]	; (800a368 <__i2b+0x28>)
 800a352:	f240 1145 	movw	r1, #325	; 0x145
 800a356:	f001 ff0b 	bl	800c170 <__assert_func>
 800a35a:	2301      	movs	r3, #1
 800a35c:	6144      	str	r4, [r0, #20]
 800a35e:	6103      	str	r3, [r0, #16]
 800a360:	bd10      	pop	{r4, pc}
 800a362:	bf00      	nop
 800a364:	0800f568 	.word	0x0800f568
 800a368:	0800f5d9 	.word	0x0800f5d9

0800a36c <__multiply>:
 800a36c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a370:	4691      	mov	r9, r2
 800a372:	690a      	ldr	r2, [r1, #16]
 800a374:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a378:	429a      	cmp	r2, r3
 800a37a:	bfb8      	it	lt
 800a37c:	460b      	movlt	r3, r1
 800a37e:	460c      	mov	r4, r1
 800a380:	bfbc      	itt	lt
 800a382:	464c      	movlt	r4, r9
 800a384:	4699      	movlt	r9, r3
 800a386:	6927      	ldr	r7, [r4, #16]
 800a388:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a38c:	68a3      	ldr	r3, [r4, #8]
 800a38e:	6861      	ldr	r1, [r4, #4]
 800a390:	eb07 060a 	add.w	r6, r7, sl
 800a394:	42b3      	cmp	r3, r6
 800a396:	b085      	sub	sp, #20
 800a398:	bfb8      	it	lt
 800a39a:	3101      	addlt	r1, #1
 800a39c:	f7ff fec4 	bl	800a128 <_Balloc>
 800a3a0:	b930      	cbnz	r0, 800a3b0 <__multiply+0x44>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	4b44      	ldr	r3, [pc, #272]	; (800a4b8 <__multiply+0x14c>)
 800a3a6:	4845      	ldr	r0, [pc, #276]	; (800a4bc <__multiply+0x150>)
 800a3a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a3ac:	f001 fee0 	bl	800c170 <__assert_func>
 800a3b0:	f100 0514 	add.w	r5, r0, #20
 800a3b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3b8:	462b      	mov	r3, r5
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	4543      	cmp	r3, r8
 800a3be:	d321      	bcc.n	800a404 <__multiply+0x98>
 800a3c0:	f104 0314 	add.w	r3, r4, #20
 800a3c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a3c8:	f109 0314 	add.w	r3, r9, #20
 800a3cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a3d0:	9202      	str	r2, [sp, #8]
 800a3d2:	1b3a      	subs	r2, r7, r4
 800a3d4:	3a15      	subs	r2, #21
 800a3d6:	f022 0203 	bic.w	r2, r2, #3
 800a3da:	3204      	adds	r2, #4
 800a3dc:	f104 0115 	add.w	r1, r4, #21
 800a3e0:	428f      	cmp	r7, r1
 800a3e2:	bf38      	it	cc
 800a3e4:	2204      	movcc	r2, #4
 800a3e6:	9201      	str	r2, [sp, #4]
 800a3e8:	9a02      	ldr	r2, [sp, #8]
 800a3ea:	9303      	str	r3, [sp, #12]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d80c      	bhi.n	800a40a <__multiply+0x9e>
 800a3f0:	2e00      	cmp	r6, #0
 800a3f2:	dd03      	ble.n	800a3fc <__multiply+0x90>
 800a3f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d05b      	beq.n	800a4b4 <__multiply+0x148>
 800a3fc:	6106      	str	r6, [r0, #16]
 800a3fe:	b005      	add	sp, #20
 800a400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a404:	f843 2b04 	str.w	r2, [r3], #4
 800a408:	e7d8      	b.n	800a3bc <__multiply+0x50>
 800a40a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a40e:	f1ba 0f00 	cmp.w	sl, #0
 800a412:	d024      	beq.n	800a45e <__multiply+0xf2>
 800a414:	f104 0e14 	add.w	lr, r4, #20
 800a418:	46a9      	mov	r9, r5
 800a41a:	f04f 0c00 	mov.w	ip, #0
 800a41e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a422:	f8d9 1000 	ldr.w	r1, [r9]
 800a426:	fa1f fb82 	uxth.w	fp, r2
 800a42a:	b289      	uxth	r1, r1
 800a42c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a430:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a434:	f8d9 2000 	ldr.w	r2, [r9]
 800a438:	4461      	add	r1, ip
 800a43a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a43e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a442:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a446:	b289      	uxth	r1, r1
 800a448:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a44c:	4577      	cmp	r7, lr
 800a44e:	f849 1b04 	str.w	r1, [r9], #4
 800a452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a456:	d8e2      	bhi.n	800a41e <__multiply+0xb2>
 800a458:	9a01      	ldr	r2, [sp, #4]
 800a45a:	f845 c002 	str.w	ip, [r5, r2]
 800a45e:	9a03      	ldr	r2, [sp, #12]
 800a460:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a464:	3304      	adds	r3, #4
 800a466:	f1b9 0f00 	cmp.w	r9, #0
 800a46a:	d021      	beq.n	800a4b0 <__multiply+0x144>
 800a46c:	6829      	ldr	r1, [r5, #0]
 800a46e:	f104 0c14 	add.w	ip, r4, #20
 800a472:	46ae      	mov	lr, r5
 800a474:	f04f 0a00 	mov.w	sl, #0
 800a478:	f8bc b000 	ldrh.w	fp, [ip]
 800a47c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a480:	fb09 220b 	mla	r2, r9, fp, r2
 800a484:	4452      	add	r2, sl
 800a486:	b289      	uxth	r1, r1
 800a488:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a48c:	f84e 1b04 	str.w	r1, [lr], #4
 800a490:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a494:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a498:	f8be 1000 	ldrh.w	r1, [lr]
 800a49c:	fb09 110a 	mla	r1, r9, sl, r1
 800a4a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a4a4:	4567      	cmp	r7, ip
 800a4a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4aa:	d8e5      	bhi.n	800a478 <__multiply+0x10c>
 800a4ac:	9a01      	ldr	r2, [sp, #4]
 800a4ae:	50a9      	str	r1, [r5, r2]
 800a4b0:	3504      	adds	r5, #4
 800a4b2:	e799      	b.n	800a3e8 <__multiply+0x7c>
 800a4b4:	3e01      	subs	r6, #1
 800a4b6:	e79b      	b.n	800a3f0 <__multiply+0x84>
 800a4b8:	0800f568 	.word	0x0800f568
 800a4bc:	0800f5d9 	.word	0x0800f5d9

0800a4c0 <__pow5mult>:
 800a4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c4:	4615      	mov	r5, r2
 800a4c6:	f012 0203 	ands.w	r2, r2, #3
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	460f      	mov	r7, r1
 800a4ce:	d007      	beq.n	800a4e0 <__pow5mult+0x20>
 800a4d0:	4c1a      	ldr	r4, [pc, #104]	; (800a53c <__pow5mult+0x7c>)
 800a4d2:	3a01      	subs	r2, #1
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4da:	f7ff fe53 	bl	800a184 <__multadd>
 800a4de:	4607      	mov	r7, r0
 800a4e0:	10ad      	asrs	r5, r5, #2
 800a4e2:	d027      	beq.n	800a534 <__pow5mult+0x74>
 800a4e4:	6c34      	ldr	r4, [r6, #64]	; 0x40
 800a4e6:	b944      	cbnz	r4, 800a4fa <__pow5mult+0x3a>
 800a4e8:	f240 2171 	movw	r1, #625	; 0x271
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f7ff ff27 	bl	800a340 <__i2b>
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	6430      	str	r0, [r6, #64]	; 0x40
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	6003      	str	r3, [r0, #0]
 800a4fa:	f04f 0900 	mov.w	r9, #0
 800a4fe:	07eb      	lsls	r3, r5, #31
 800a500:	d50a      	bpl.n	800a518 <__pow5mult+0x58>
 800a502:	4639      	mov	r1, r7
 800a504:	4622      	mov	r2, r4
 800a506:	4630      	mov	r0, r6
 800a508:	f7ff ff30 	bl	800a36c <__multiply>
 800a50c:	4639      	mov	r1, r7
 800a50e:	4680      	mov	r8, r0
 800a510:	4630      	mov	r0, r6
 800a512:	f7ff fe2e 	bl	800a172 <_Bfree>
 800a516:	4647      	mov	r7, r8
 800a518:	106d      	asrs	r5, r5, #1
 800a51a:	d00b      	beq.n	800a534 <__pow5mult+0x74>
 800a51c:	6820      	ldr	r0, [r4, #0]
 800a51e:	b938      	cbnz	r0, 800a530 <__pow5mult+0x70>
 800a520:	4622      	mov	r2, r4
 800a522:	4621      	mov	r1, r4
 800a524:	4630      	mov	r0, r6
 800a526:	f7ff ff21 	bl	800a36c <__multiply>
 800a52a:	6020      	str	r0, [r4, #0]
 800a52c:	f8c0 9000 	str.w	r9, [r0]
 800a530:	4604      	mov	r4, r0
 800a532:	e7e4      	b.n	800a4fe <__pow5mult+0x3e>
 800a534:	4638      	mov	r0, r7
 800a536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a53a:	bf00      	nop
 800a53c:	0800f728 	.word	0x0800f728

0800a540 <__lshift>:
 800a540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a544:	460c      	mov	r4, r1
 800a546:	6849      	ldr	r1, [r1, #4]
 800a548:	6923      	ldr	r3, [r4, #16]
 800a54a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a54e:	68a3      	ldr	r3, [r4, #8]
 800a550:	4607      	mov	r7, r0
 800a552:	4691      	mov	r9, r2
 800a554:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a558:	f108 0601 	add.w	r6, r8, #1
 800a55c:	42b3      	cmp	r3, r6
 800a55e:	db0b      	blt.n	800a578 <__lshift+0x38>
 800a560:	4638      	mov	r0, r7
 800a562:	f7ff fde1 	bl	800a128 <_Balloc>
 800a566:	4605      	mov	r5, r0
 800a568:	b948      	cbnz	r0, 800a57e <__lshift+0x3e>
 800a56a:	4602      	mov	r2, r0
 800a56c:	4b28      	ldr	r3, [pc, #160]	; (800a610 <__lshift+0xd0>)
 800a56e:	4829      	ldr	r0, [pc, #164]	; (800a614 <__lshift+0xd4>)
 800a570:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a574:	f001 fdfc 	bl	800c170 <__assert_func>
 800a578:	3101      	adds	r1, #1
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	e7ee      	b.n	800a55c <__lshift+0x1c>
 800a57e:	2300      	movs	r3, #0
 800a580:	f100 0114 	add.w	r1, r0, #20
 800a584:	f100 0210 	add.w	r2, r0, #16
 800a588:	4618      	mov	r0, r3
 800a58a:	4553      	cmp	r3, sl
 800a58c:	db33      	blt.n	800a5f6 <__lshift+0xb6>
 800a58e:	6920      	ldr	r0, [r4, #16]
 800a590:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a594:	f104 0314 	add.w	r3, r4, #20
 800a598:	f019 091f 	ands.w	r9, r9, #31
 800a59c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5a4:	d02b      	beq.n	800a5fe <__lshift+0xbe>
 800a5a6:	f1c9 0e20 	rsb	lr, r9, #32
 800a5aa:	468a      	mov	sl, r1
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	6818      	ldr	r0, [r3, #0]
 800a5b0:	fa00 f009 	lsl.w	r0, r0, r9
 800a5b4:	4310      	orrs	r0, r2
 800a5b6:	f84a 0b04 	str.w	r0, [sl], #4
 800a5ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5be:	459c      	cmp	ip, r3
 800a5c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5c4:	d8f3      	bhi.n	800a5ae <__lshift+0x6e>
 800a5c6:	ebac 0304 	sub.w	r3, ip, r4
 800a5ca:	3b15      	subs	r3, #21
 800a5cc:	f023 0303 	bic.w	r3, r3, #3
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	f104 0015 	add.w	r0, r4, #21
 800a5d6:	4584      	cmp	ip, r0
 800a5d8:	bf38      	it	cc
 800a5da:	2304      	movcc	r3, #4
 800a5dc:	50ca      	str	r2, [r1, r3]
 800a5de:	b10a      	cbz	r2, 800a5e4 <__lshift+0xa4>
 800a5e0:	f108 0602 	add.w	r6, r8, #2
 800a5e4:	3e01      	subs	r6, #1
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	612e      	str	r6, [r5, #16]
 800a5ea:	4621      	mov	r1, r4
 800a5ec:	f7ff fdc1 	bl	800a172 <_Bfree>
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	e7c5      	b.n	800a58a <__lshift+0x4a>
 800a5fe:	3904      	subs	r1, #4
 800a600:	f853 2b04 	ldr.w	r2, [r3], #4
 800a604:	f841 2f04 	str.w	r2, [r1, #4]!
 800a608:	459c      	cmp	ip, r3
 800a60a:	d8f9      	bhi.n	800a600 <__lshift+0xc0>
 800a60c:	e7ea      	b.n	800a5e4 <__lshift+0xa4>
 800a60e:	bf00      	nop
 800a610:	0800f568 	.word	0x0800f568
 800a614:	0800f5d9 	.word	0x0800f5d9

0800a618 <__mcmp>:
 800a618:	b530      	push	{r4, r5, lr}
 800a61a:	6902      	ldr	r2, [r0, #16]
 800a61c:	690c      	ldr	r4, [r1, #16]
 800a61e:	1b12      	subs	r2, r2, r4
 800a620:	d10e      	bne.n	800a640 <__mcmp+0x28>
 800a622:	f100 0314 	add.w	r3, r0, #20
 800a626:	3114      	adds	r1, #20
 800a628:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a62c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a630:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a634:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a638:	42a5      	cmp	r5, r4
 800a63a:	d003      	beq.n	800a644 <__mcmp+0x2c>
 800a63c:	d305      	bcc.n	800a64a <__mcmp+0x32>
 800a63e:	2201      	movs	r2, #1
 800a640:	4610      	mov	r0, r2
 800a642:	bd30      	pop	{r4, r5, pc}
 800a644:	4283      	cmp	r3, r0
 800a646:	d3f3      	bcc.n	800a630 <__mcmp+0x18>
 800a648:	e7fa      	b.n	800a640 <__mcmp+0x28>
 800a64a:	f04f 32ff 	mov.w	r2, #4294967295
 800a64e:	e7f7      	b.n	800a640 <__mcmp+0x28>

0800a650 <__mdiff>:
 800a650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a654:	460c      	mov	r4, r1
 800a656:	4606      	mov	r6, r0
 800a658:	4611      	mov	r1, r2
 800a65a:	4620      	mov	r0, r4
 800a65c:	4690      	mov	r8, r2
 800a65e:	f7ff ffdb 	bl	800a618 <__mcmp>
 800a662:	1e05      	subs	r5, r0, #0
 800a664:	d110      	bne.n	800a688 <__mdiff+0x38>
 800a666:	4629      	mov	r1, r5
 800a668:	4630      	mov	r0, r6
 800a66a:	f7ff fd5d 	bl	800a128 <_Balloc>
 800a66e:	b930      	cbnz	r0, 800a67e <__mdiff+0x2e>
 800a670:	4b3a      	ldr	r3, [pc, #232]	; (800a75c <__mdiff+0x10c>)
 800a672:	4602      	mov	r2, r0
 800a674:	f240 2137 	movw	r1, #567	; 0x237
 800a678:	4839      	ldr	r0, [pc, #228]	; (800a760 <__mdiff+0x110>)
 800a67a:	f001 fd79 	bl	800c170 <__assert_func>
 800a67e:	2301      	movs	r3, #1
 800a680:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a684:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a688:	bfa4      	itt	ge
 800a68a:	4643      	movge	r3, r8
 800a68c:	46a0      	movge	r8, r4
 800a68e:	4630      	mov	r0, r6
 800a690:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a694:	bfa6      	itte	ge
 800a696:	461c      	movge	r4, r3
 800a698:	2500      	movge	r5, #0
 800a69a:	2501      	movlt	r5, #1
 800a69c:	f7ff fd44 	bl	800a128 <_Balloc>
 800a6a0:	b920      	cbnz	r0, 800a6ac <__mdiff+0x5c>
 800a6a2:	4b2e      	ldr	r3, [pc, #184]	; (800a75c <__mdiff+0x10c>)
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	f240 2145 	movw	r1, #581	; 0x245
 800a6aa:	e7e5      	b.n	800a678 <__mdiff+0x28>
 800a6ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a6b0:	6926      	ldr	r6, [r4, #16]
 800a6b2:	60c5      	str	r5, [r0, #12]
 800a6b4:	f104 0914 	add.w	r9, r4, #20
 800a6b8:	f108 0514 	add.w	r5, r8, #20
 800a6bc:	f100 0e14 	add.w	lr, r0, #20
 800a6c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a6c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a6c8:	f108 0210 	add.w	r2, r8, #16
 800a6cc:	46f2      	mov	sl, lr
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800a6d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a6d8:	fa11 f88b 	uxtah	r8, r1, fp
 800a6dc:	b299      	uxth	r1, r3
 800a6de:	0c1b      	lsrs	r3, r3, #16
 800a6e0:	eba8 0801 	sub.w	r8, r8, r1
 800a6e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a6e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a6ec:	fa1f f888 	uxth.w	r8, r8
 800a6f0:	1419      	asrs	r1, r3, #16
 800a6f2:	454e      	cmp	r6, r9
 800a6f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a6f8:	f84a 3b04 	str.w	r3, [sl], #4
 800a6fc:	d8e8      	bhi.n	800a6d0 <__mdiff+0x80>
 800a6fe:	1b33      	subs	r3, r6, r4
 800a700:	3b15      	subs	r3, #21
 800a702:	f023 0303 	bic.w	r3, r3, #3
 800a706:	3304      	adds	r3, #4
 800a708:	3415      	adds	r4, #21
 800a70a:	42a6      	cmp	r6, r4
 800a70c:	bf38      	it	cc
 800a70e:	2304      	movcc	r3, #4
 800a710:	441d      	add	r5, r3
 800a712:	4473      	add	r3, lr
 800a714:	469e      	mov	lr, r3
 800a716:	462e      	mov	r6, r5
 800a718:	4566      	cmp	r6, ip
 800a71a:	d30e      	bcc.n	800a73a <__mdiff+0xea>
 800a71c:	f10c 0203 	add.w	r2, ip, #3
 800a720:	1b52      	subs	r2, r2, r5
 800a722:	f022 0203 	bic.w	r2, r2, #3
 800a726:	3d03      	subs	r5, #3
 800a728:	45ac      	cmp	ip, r5
 800a72a:	bf38      	it	cc
 800a72c:	2200      	movcc	r2, #0
 800a72e:	4413      	add	r3, r2
 800a730:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a734:	b17a      	cbz	r2, 800a756 <__mdiff+0x106>
 800a736:	6107      	str	r7, [r0, #16]
 800a738:	e7a4      	b.n	800a684 <__mdiff+0x34>
 800a73a:	f856 8b04 	ldr.w	r8, [r6], #4
 800a73e:	fa11 f288 	uxtah	r2, r1, r8
 800a742:	1414      	asrs	r4, r2, #16
 800a744:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a748:	b292      	uxth	r2, r2
 800a74a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a74e:	f84e 2b04 	str.w	r2, [lr], #4
 800a752:	1421      	asrs	r1, r4, #16
 800a754:	e7e0      	b.n	800a718 <__mdiff+0xc8>
 800a756:	3f01      	subs	r7, #1
 800a758:	e7ea      	b.n	800a730 <__mdiff+0xe0>
 800a75a:	bf00      	nop
 800a75c:	0800f568 	.word	0x0800f568
 800a760:	0800f5d9 	.word	0x0800f5d9

0800a764 <__ulp>:
 800a764:	b082      	sub	sp, #8
 800a766:	ed8d 0b00 	vstr	d0, [sp]
 800a76a:	9a01      	ldr	r2, [sp, #4]
 800a76c:	4b0f      	ldr	r3, [pc, #60]	; (800a7ac <__ulp+0x48>)
 800a76e:	4013      	ands	r3, r2
 800a770:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a774:	2b00      	cmp	r3, #0
 800a776:	dc08      	bgt.n	800a78a <__ulp+0x26>
 800a778:	425b      	negs	r3, r3
 800a77a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a77e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a782:	da04      	bge.n	800a78e <__ulp+0x2a>
 800a784:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a788:	4113      	asrs	r3, r2
 800a78a:	2200      	movs	r2, #0
 800a78c:	e008      	b.n	800a7a0 <__ulp+0x3c>
 800a78e:	f1a2 0314 	sub.w	r3, r2, #20
 800a792:	2b1e      	cmp	r3, #30
 800a794:	bfda      	itte	le
 800a796:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a79a:	40da      	lsrle	r2, r3
 800a79c:	2201      	movgt	r2, #1
 800a79e:	2300      	movs	r3, #0
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	4610      	mov	r0, r2
 800a7a4:	ec41 0b10 	vmov	d0, r0, r1
 800a7a8:	b002      	add	sp, #8
 800a7aa:	4770      	bx	lr
 800a7ac:	7ff00000 	.word	0x7ff00000

0800a7b0 <__b2d>:
 800a7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7b4:	6906      	ldr	r6, [r0, #16]
 800a7b6:	f100 0814 	add.w	r8, r0, #20
 800a7ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a7be:	1f37      	subs	r7, r6, #4
 800a7c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	f7ff fd6d 	bl	800a2a4 <__hi0bits>
 800a7ca:	f1c0 0320 	rsb	r3, r0, #32
 800a7ce:	280a      	cmp	r0, #10
 800a7d0:	600b      	str	r3, [r1, #0]
 800a7d2:	491b      	ldr	r1, [pc, #108]	; (800a840 <__b2d+0x90>)
 800a7d4:	dc15      	bgt.n	800a802 <__b2d+0x52>
 800a7d6:	f1c0 0c0b 	rsb	ip, r0, #11
 800a7da:	fa22 f30c 	lsr.w	r3, r2, ip
 800a7de:	45b8      	cmp	r8, r7
 800a7e0:	ea43 0501 	orr.w	r5, r3, r1
 800a7e4:	bf34      	ite	cc
 800a7e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a7ea:	2300      	movcs	r3, #0
 800a7ec:	3015      	adds	r0, #21
 800a7ee:	fa02 f000 	lsl.w	r0, r2, r0
 800a7f2:	fa23 f30c 	lsr.w	r3, r3, ip
 800a7f6:	4303      	orrs	r3, r0
 800a7f8:	461c      	mov	r4, r3
 800a7fa:	ec45 4b10 	vmov	d0, r4, r5
 800a7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a802:	45b8      	cmp	r8, r7
 800a804:	bf3a      	itte	cc
 800a806:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a80a:	f1a6 0708 	subcc.w	r7, r6, #8
 800a80e:	2300      	movcs	r3, #0
 800a810:	380b      	subs	r0, #11
 800a812:	d012      	beq.n	800a83a <__b2d+0x8a>
 800a814:	f1c0 0120 	rsb	r1, r0, #32
 800a818:	fa23 f401 	lsr.w	r4, r3, r1
 800a81c:	4082      	lsls	r2, r0
 800a81e:	4322      	orrs	r2, r4
 800a820:	4547      	cmp	r7, r8
 800a822:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a826:	bf8c      	ite	hi
 800a828:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a82c:	2200      	movls	r2, #0
 800a82e:	4083      	lsls	r3, r0
 800a830:	40ca      	lsrs	r2, r1
 800a832:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a836:	4313      	orrs	r3, r2
 800a838:	e7de      	b.n	800a7f8 <__b2d+0x48>
 800a83a:	ea42 0501 	orr.w	r5, r2, r1
 800a83e:	e7db      	b.n	800a7f8 <__b2d+0x48>
 800a840:	3ff00000 	.word	0x3ff00000

0800a844 <__d2b>:
 800a844:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a848:	460f      	mov	r7, r1
 800a84a:	2101      	movs	r1, #1
 800a84c:	ec59 8b10 	vmov	r8, r9, d0
 800a850:	4616      	mov	r6, r2
 800a852:	f7ff fc69 	bl	800a128 <_Balloc>
 800a856:	4604      	mov	r4, r0
 800a858:	b930      	cbnz	r0, 800a868 <__d2b+0x24>
 800a85a:	4602      	mov	r2, r0
 800a85c:	4b24      	ldr	r3, [pc, #144]	; (800a8f0 <__d2b+0xac>)
 800a85e:	4825      	ldr	r0, [pc, #148]	; (800a8f4 <__d2b+0xb0>)
 800a860:	f240 310f 	movw	r1, #783	; 0x30f
 800a864:	f001 fc84 	bl	800c170 <__assert_func>
 800a868:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a86c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a870:	bb2d      	cbnz	r5, 800a8be <__d2b+0x7a>
 800a872:	9301      	str	r3, [sp, #4]
 800a874:	f1b8 0300 	subs.w	r3, r8, #0
 800a878:	d026      	beq.n	800a8c8 <__d2b+0x84>
 800a87a:	4668      	mov	r0, sp
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	f7ff fd31 	bl	800a2e4 <__lo0bits>
 800a882:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a886:	b1e8      	cbz	r0, 800a8c4 <__d2b+0x80>
 800a888:	f1c0 0320 	rsb	r3, r0, #32
 800a88c:	fa02 f303 	lsl.w	r3, r2, r3
 800a890:	430b      	orrs	r3, r1
 800a892:	40c2      	lsrs	r2, r0
 800a894:	6163      	str	r3, [r4, #20]
 800a896:	9201      	str	r2, [sp, #4]
 800a898:	9b01      	ldr	r3, [sp, #4]
 800a89a:	61a3      	str	r3, [r4, #24]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	bf14      	ite	ne
 800a8a0:	2202      	movne	r2, #2
 800a8a2:	2201      	moveq	r2, #1
 800a8a4:	6122      	str	r2, [r4, #16]
 800a8a6:	b1bd      	cbz	r5, 800a8d8 <__d2b+0x94>
 800a8a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a8ac:	4405      	add	r5, r0
 800a8ae:	603d      	str	r5, [r7, #0]
 800a8b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a8b4:	6030      	str	r0, [r6, #0]
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	b003      	add	sp, #12
 800a8ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a8be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a8c2:	e7d6      	b.n	800a872 <__d2b+0x2e>
 800a8c4:	6161      	str	r1, [r4, #20]
 800a8c6:	e7e7      	b.n	800a898 <__d2b+0x54>
 800a8c8:	a801      	add	r0, sp, #4
 800a8ca:	f7ff fd0b 	bl	800a2e4 <__lo0bits>
 800a8ce:	9b01      	ldr	r3, [sp, #4]
 800a8d0:	6163      	str	r3, [r4, #20]
 800a8d2:	3020      	adds	r0, #32
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	e7e5      	b.n	800a8a4 <__d2b+0x60>
 800a8d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8e0:	6038      	str	r0, [r7, #0]
 800a8e2:	6918      	ldr	r0, [r3, #16]
 800a8e4:	f7ff fcde 	bl	800a2a4 <__hi0bits>
 800a8e8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8ec:	e7e2      	b.n	800a8b4 <__d2b+0x70>
 800a8ee:	bf00      	nop
 800a8f0:	0800f568 	.word	0x0800f568
 800a8f4:	0800f5d9 	.word	0x0800f5d9

0800a8f8 <__ratio>:
 800a8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8fc:	4688      	mov	r8, r1
 800a8fe:	4669      	mov	r1, sp
 800a900:	4681      	mov	r9, r0
 800a902:	f7ff ff55 	bl	800a7b0 <__b2d>
 800a906:	a901      	add	r1, sp, #4
 800a908:	4640      	mov	r0, r8
 800a90a:	ec55 4b10 	vmov	r4, r5, d0
 800a90e:	f7ff ff4f 	bl	800a7b0 <__b2d>
 800a912:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a916:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a91a:	eba3 0c02 	sub.w	ip, r3, r2
 800a91e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a922:	1a9b      	subs	r3, r3, r2
 800a924:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a928:	ec51 0b10 	vmov	r0, r1, d0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	bfd6      	itet	le
 800a930:	460a      	movle	r2, r1
 800a932:	462a      	movgt	r2, r5
 800a934:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a938:	468b      	mov	fp, r1
 800a93a:	462f      	mov	r7, r5
 800a93c:	bfd4      	ite	le
 800a93e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a942:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a946:	4620      	mov	r0, r4
 800a948:	ee10 2a10 	vmov	r2, s0
 800a94c:	465b      	mov	r3, fp
 800a94e:	4639      	mov	r1, r7
 800a950:	f7f5 ff84 	bl	800085c <__aeabi_ddiv>
 800a954:	ec41 0b10 	vmov	d0, r0, r1
 800a958:	b003      	add	sp, #12
 800a95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a95e <__copybits>:
 800a95e:	3901      	subs	r1, #1
 800a960:	b570      	push	{r4, r5, r6, lr}
 800a962:	1149      	asrs	r1, r1, #5
 800a964:	6914      	ldr	r4, [r2, #16]
 800a966:	3101      	adds	r1, #1
 800a968:	f102 0314 	add.w	r3, r2, #20
 800a96c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a970:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a974:	1f05      	subs	r5, r0, #4
 800a976:	42a3      	cmp	r3, r4
 800a978:	d30c      	bcc.n	800a994 <__copybits+0x36>
 800a97a:	1aa3      	subs	r3, r4, r2
 800a97c:	3b11      	subs	r3, #17
 800a97e:	f023 0303 	bic.w	r3, r3, #3
 800a982:	3211      	adds	r2, #17
 800a984:	42a2      	cmp	r2, r4
 800a986:	bf88      	it	hi
 800a988:	2300      	movhi	r3, #0
 800a98a:	4418      	add	r0, r3
 800a98c:	2300      	movs	r3, #0
 800a98e:	4288      	cmp	r0, r1
 800a990:	d305      	bcc.n	800a99e <__copybits+0x40>
 800a992:	bd70      	pop	{r4, r5, r6, pc}
 800a994:	f853 6b04 	ldr.w	r6, [r3], #4
 800a998:	f845 6f04 	str.w	r6, [r5, #4]!
 800a99c:	e7eb      	b.n	800a976 <__copybits+0x18>
 800a99e:	f840 3b04 	str.w	r3, [r0], #4
 800a9a2:	e7f4      	b.n	800a98e <__copybits+0x30>

0800a9a4 <__any_on>:
 800a9a4:	f100 0214 	add.w	r2, r0, #20
 800a9a8:	6900      	ldr	r0, [r0, #16]
 800a9aa:	114b      	asrs	r3, r1, #5
 800a9ac:	4298      	cmp	r0, r3
 800a9ae:	b510      	push	{r4, lr}
 800a9b0:	db11      	blt.n	800a9d6 <__any_on+0x32>
 800a9b2:	dd0a      	ble.n	800a9ca <__any_on+0x26>
 800a9b4:	f011 011f 	ands.w	r1, r1, #31
 800a9b8:	d007      	beq.n	800a9ca <__any_on+0x26>
 800a9ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a9be:	fa24 f001 	lsr.w	r0, r4, r1
 800a9c2:	fa00 f101 	lsl.w	r1, r0, r1
 800a9c6:	428c      	cmp	r4, r1
 800a9c8:	d10b      	bne.n	800a9e2 <__any_on+0x3e>
 800a9ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d803      	bhi.n	800a9da <__any_on+0x36>
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	bd10      	pop	{r4, pc}
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	e7f7      	b.n	800a9ca <__any_on+0x26>
 800a9da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9de:	2900      	cmp	r1, #0
 800a9e0:	d0f5      	beq.n	800a9ce <__any_on+0x2a>
 800a9e2:	2001      	movs	r0, #1
 800a9e4:	e7f6      	b.n	800a9d4 <__any_on+0x30>

0800a9e6 <__ascii_wctomb>:
 800a9e6:	b149      	cbz	r1, 800a9fc <__ascii_wctomb+0x16>
 800a9e8:	2aff      	cmp	r2, #255	; 0xff
 800a9ea:	bf85      	ittet	hi
 800a9ec:	238a      	movhi	r3, #138	; 0x8a
 800a9ee:	6003      	strhi	r3, [r0, #0]
 800a9f0:	700a      	strbls	r2, [r1, #0]
 800a9f2:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9f6:	bf98      	it	ls
 800a9f8:	2001      	movls	r0, #1
 800a9fa:	4770      	bx	lr
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	4770      	bx	lr

0800aa00 <_svfprintf_r>:
 800aa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa04:	ed2d 8b04 	vpush	{d8-d9}
 800aa08:	b0cf      	sub	sp, #316	; 0x13c
 800aa0a:	4689      	mov	r9, r1
 800aa0c:	9203      	str	r2, [sp, #12]
 800aa0e:	461d      	mov	r5, r3
 800aa10:	4682      	mov	sl, r0
 800aa12:	f001 fb01 	bl	800c018 <_localeconv_r>
 800aa16:	6803      	ldr	r3, [r0, #0]
 800aa18:	9313      	str	r3, [sp, #76]	; 0x4c
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7f5 fbe0 	bl	80001e0 <strlen>
 800aa20:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800aa24:	900e      	str	r0, [sp, #56]	; 0x38
 800aa26:	0619      	lsls	r1, r3, #24
 800aa28:	d51a      	bpl.n	800aa60 <_svfprintf_r+0x60>
 800aa2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa2e:	b9bb      	cbnz	r3, 800aa60 <_svfprintf_r+0x60>
 800aa30:	2140      	movs	r1, #64	; 0x40
 800aa32:	4650      	mov	r0, sl
 800aa34:	f7ff f920 	bl	8009c78 <_malloc_r>
 800aa38:	f8c9 0000 	str.w	r0, [r9]
 800aa3c:	f8c9 0010 	str.w	r0, [r9, #16]
 800aa40:	b958      	cbnz	r0, 800aa5a <_svfprintf_r+0x5a>
 800aa42:	230c      	movs	r3, #12
 800aa44:	f8ca 3000 	str.w	r3, [sl]
 800aa48:	f04f 33ff 	mov.w	r3, #4294967295
 800aa4c:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aa50:	b04f      	add	sp, #316	; 0x13c
 800aa52:	ecbd 8b04 	vpop	{d8-d9}
 800aa56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5a:	2340      	movs	r3, #64	; 0x40
 800aa5c:	f8c9 3014 	str.w	r3, [r9, #20]
 800aa60:	ed9f 7b91 	vldr	d7, [pc, #580]	; 800aca8 <_svfprintf_r+0x2a8>
 800aa64:	2300      	movs	r3, #0
 800aa66:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 800aa6a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800aa6e:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 800aa72:	ac25      	add	r4, sp, #148	; 0x94
 800aa74:	9422      	str	r4, [sp, #136]	; 0x88
 800aa76:	9305      	str	r3, [sp, #20]
 800aa78:	9309      	str	r3, [sp, #36]	; 0x24
 800aa7a:	9311      	str	r3, [sp, #68]	; 0x44
 800aa7c:	9314      	str	r3, [sp, #80]	; 0x50
 800aa7e:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa80:	9b03      	ldr	r3, [sp, #12]
 800aa82:	461e      	mov	r6, r3
 800aa84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa88:	b10a      	cbz	r2, 800aa8e <_svfprintf_r+0x8e>
 800aa8a:	2a25      	cmp	r2, #37	; 0x25
 800aa8c:	d1f9      	bne.n	800aa82 <_svfprintf_r+0x82>
 800aa8e:	9b03      	ldr	r3, [sp, #12]
 800aa90:	1af7      	subs	r7, r6, r3
 800aa92:	d00d      	beq.n	800aab0 <_svfprintf_r+0xb0>
 800aa94:	e9c4 3700 	strd	r3, r7, [r4]
 800aa98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aa9a:	443b      	add	r3, r7
 800aa9c:	9324      	str	r3, [sp, #144]	; 0x90
 800aa9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	2b07      	cmp	r3, #7
 800aaa4:	9323      	str	r3, [sp, #140]	; 0x8c
 800aaa6:	dc78      	bgt.n	800ab9a <_svfprintf_r+0x19a>
 800aaa8:	3408      	adds	r4, #8
 800aaaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaac:	443b      	add	r3, r7
 800aaae:	930b      	str	r3, [sp, #44]	; 0x2c
 800aab0:	7833      	ldrb	r3, [r6, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f001 815a 	beq.w	800bd6c <_svfprintf_r+0x136c>
 800aab8:	2300      	movs	r3, #0
 800aaba:	3601      	adds	r6, #1
 800aabc:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800aac0:	f04f 38ff 	mov.w	r8, #4294967295
 800aac4:	930f      	str	r3, [sp, #60]	; 0x3c
 800aac6:	469b      	mov	fp, r3
 800aac8:	270a      	movs	r7, #10
 800aaca:	212b      	movs	r1, #43	; 0x2b
 800aacc:	4633      	mov	r3, r6
 800aace:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aad2:	9207      	str	r2, [sp, #28]
 800aad4:	930a      	str	r3, [sp, #40]	; 0x28
 800aad6:	9b07      	ldr	r3, [sp, #28]
 800aad8:	3b20      	subs	r3, #32
 800aada:	2b5a      	cmp	r3, #90	; 0x5a
 800aadc:	f200 85c6 	bhi.w	800b66c <_svfprintf_r+0xc6c>
 800aae0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800aae4:	05c4007e 	.word	0x05c4007e
 800aae8:	008605c4 	.word	0x008605c4
 800aaec:	05c405c4 	.word	0x05c405c4
 800aaf0:	006505c4 	.word	0x006505c4
 800aaf4:	05c405c4 	.word	0x05c405c4
 800aaf8:	00930089 	.word	0x00930089
 800aafc:	009005c4 	.word	0x009005c4
 800ab00:	05c40096 	.word	0x05c40096
 800ab04:	00b200af 	.word	0x00b200af
 800ab08:	00b200b2 	.word	0x00b200b2
 800ab0c:	00b200b2 	.word	0x00b200b2
 800ab10:	00b200b2 	.word	0x00b200b2
 800ab14:	00b200b2 	.word	0x00b200b2
 800ab18:	05c405c4 	.word	0x05c405c4
 800ab1c:	05c405c4 	.word	0x05c405c4
 800ab20:	05c405c4 	.word	0x05c405c4
 800ab24:	012905c4 	.word	0x012905c4
 800ab28:	00e605c4 	.word	0x00e605c4
 800ab2c:	012900f9 	.word	0x012900f9
 800ab30:	01290129 	.word	0x01290129
 800ab34:	05c405c4 	.word	0x05c405c4
 800ab38:	05c405c4 	.word	0x05c405c4
 800ab3c:	05c400c2 	.word	0x05c400c2
 800ab40:	049105c4 	.word	0x049105c4
 800ab44:	05c405c4 	.word	0x05c405c4
 800ab48:	04db05c4 	.word	0x04db05c4
 800ab4c:	050105c4 	.word	0x050105c4
 800ab50:	05c405c4 	.word	0x05c405c4
 800ab54:	05c40523 	.word	0x05c40523
 800ab58:	05c405c4 	.word	0x05c405c4
 800ab5c:	05c405c4 	.word	0x05c405c4
 800ab60:	05c405c4 	.word	0x05c405c4
 800ab64:	012905c4 	.word	0x012905c4
 800ab68:	00e605c4 	.word	0x00e605c4
 800ab6c:	012900fb 	.word	0x012900fb
 800ab70:	01290129 	.word	0x01290129
 800ab74:	00fb00c5 	.word	0x00fb00c5
 800ab78:	05c400d9 	.word	0x05c400d9
 800ab7c:	05c400d2 	.word	0x05c400d2
 800ab80:	0493046c 	.word	0x0493046c
 800ab84:	00d904ca 	.word	0x00d904ca
 800ab88:	04db05c4 	.word	0x04db05c4
 800ab8c:	0503007c 	.word	0x0503007c
 800ab90:	05c405c4 	.word	0x05c405c4
 800ab94:	05c40542 	.word	0x05c40542
 800ab98:	007c      	.short	0x007c
 800ab9a:	aa22      	add	r2, sp, #136	; 0x88
 800ab9c:	4649      	mov	r1, r9
 800ab9e:	4650      	mov	r0, sl
 800aba0:	f002 f9aa 	bl	800cef8 <__ssprint_r>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	f040 8137 	bne.w	800ae18 <_svfprintf_r+0x418>
 800abaa:	ac25      	add	r4, sp, #148	; 0x94
 800abac:	e77d      	b.n	800aaaa <_svfprintf_r+0xaa>
 800abae:	4650      	mov	r0, sl
 800abb0:	f001 fa32 	bl	800c018 <_localeconv_r>
 800abb4:	6843      	ldr	r3, [r0, #4]
 800abb6:	9314      	str	r3, [sp, #80]	; 0x50
 800abb8:	4618      	mov	r0, r3
 800abba:	f7f5 fb11 	bl	80001e0 <strlen>
 800abbe:	9011      	str	r0, [sp, #68]	; 0x44
 800abc0:	4650      	mov	r0, sl
 800abc2:	f001 fa29 	bl	800c018 <_localeconv_r>
 800abc6:	6883      	ldr	r3, [r0, #8]
 800abc8:	9309      	str	r3, [sp, #36]	; 0x24
 800abca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abcc:	212b      	movs	r1, #43	; 0x2b
 800abce:	b12b      	cbz	r3, 800abdc <_svfprintf_r+0x1dc>
 800abd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd2:	b11b      	cbz	r3, 800abdc <_svfprintf_r+0x1dc>
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	b10b      	cbz	r3, 800abdc <_svfprintf_r+0x1dc>
 800abd8:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 800abdc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800abde:	e775      	b.n	800aacc <_svfprintf_r+0xcc>
 800abe0:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1f9      	bne.n	800abdc <_svfprintf_r+0x1dc>
 800abe8:	2320      	movs	r3, #32
 800abea:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800abee:	e7f5      	b.n	800abdc <_svfprintf_r+0x1dc>
 800abf0:	f04b 0b01 	orr.w	fp, fp, #1
 800abf4:	e7f2      	b.n	800abdc <_svfprintf_r+0x1dc>
 800abf6:	f855 3b04 	ldr.w	r3, [r5], #4
 800abfa:	930f      	str	r3, [sp, #60]	; 0x3c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	daed      	bge.n	800abdc <_svfprintf_r+0x1dc>
 800ac00:	425b      	negs	r3, r3
 800ac02:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac04:	f04b 0b04 	orr.w	fp, fp, #4
 800ac08:	e7e8      	b.n	800abdc <_svfprintf_r+0x1dc>
 800ac0a:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 800ac0e:	e7e5      	b.n	800abdc <_svfprintf_r+0x1dc>
 800ac10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac16:	9207      	str	r2, [sp, #28]
 800ac18:	2a2a      	cmp	r2, #42	; 0x2a
 800ac1a:	d10f      	bne.n	800ac3c <_svfprintf_r+0x23c>
 800ac1c:	f855 2b04 	ldr.w	r2, [r5], #4
 800ac20:	930a      	str	r3, [sp, #40]	; 0x28
 800ac22:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800ac26:	e7d9      	b.n	800abdc <_svfprintf_r+0x1dc>
 800ac28:	fb07 2808 	mla	r8, r7, r8, r2
 800ac2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac30:	9207      	str	r2, [sp, #28]
 800ac32:	9a07      	ldr	r2, [sp, #28]
 800ac34:	3a30      	subs	r2, #48	; 0x30
 800ac36:	2a09      	cmp	r2, #9
 800ac38:	d9f6      	bls.n	800ac28 <_svfprintf_r+0x228>
 800ac3a:	e74b      	b.n	800aad4 <_svfprintf_r+0xd4>
 800ac3c:	f04f 0800 	mov.w	r8, #0
 800ac40:	e7f7      	b.n	800ac32 <_svfprintf_r+0x232>
 800ac42:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800ac46:	e7c9      	b.n	800abdc <_svfprintf_r+0x1dc>
 800ac48:	2200      	movs	r2, #0
 800ac4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac4c:	920f      	str	r2, [sp, #60]	; 0x3c
 800ac4e:	9a07      	ldr	r2, [sp, #28]
 800ac50:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800ac52:	3a30      	subs	r2, #48	; 0x30
 800ac54:	fb07 2200 	mla	r2, r7, r0, r2
 800ac58:	920f      	str	r2, [sp, #60]	; 0x3c
 800ac5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac5e:	9207      	str	r2, [sp, #28]
 800ac60:	3a30      	subs	r2, #48	; 0x30
 800ac62:	2a09      	cmp	r2, #9
 800ac64:	d9f3      	bls.n	800ac4e <_svfprintf_r+0x24e>
 800ac66:	e735      	b.n	800aad4 <_svfprintf_r+0xd4>
 800ac68:	f04b 0b08 	orr.w	fp, fp, #8
 800ac6c:	e7b6      	b.n	800abdc <_svfprintf_r+0x1dc>
 800ac6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	2b68      	cmp	r3, #104	; 0x68
 800ac74:	bf01      	itttt	eq
 800ac76:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 800ac78:	3301      	addeq	r3, #1
 800ac7a:	930a      	streq	r3, [sp, #40]	; 0x28
 800ac7c:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 800ac80:	bf18      	it	ne
 800ac82:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 800ac86:	e7a9      	b.n	800abdc <_svfprintf_r+0x1dc>
 800ac88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	2b6c      	cmp	r3, #108	; 0x6c
 800ac8e:	d105      	bne.n	800ac9c <_svfprintf_r+0x29c>
 800ac90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac92:	3301      	adds	r3, #1
 800ac94:	930a      	str	r3, [sp, #40]	; 0x28
 800ac96:	f04b 0b20 	orr.w	fp, fp, #32
 800ac9a:	e79f      	b.n	800abdc <_svfprintf_r+0x1dc>
 800ac9c:	f04b 0b10 	orr.w	fp, fp, #16
 800aca0:	e79c      	b.n	800abdc <_svfprintf_r+0x1dc>
 800aca2:	bf00      	nop
 800aca4:	f3af 8000 	nop.w
	...
 800acb0:	462a      	mov	r2, r5
 800acb2:	f852 3b04 	ldr.w	r3, [r2], #4
 800acb6:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800acba:	2300      	movs	r3, #0
 800acbc:	9206      	str	r2, [sp, #24]
 800acbe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800acc2:	9304      	str	r3, [sp, #16]
 800acc4:	461f      	mov	r7, r3
 800acc6:	461e      	mov	r6, r3
 800acc8:	9308      	str	r3, [sp, #32]
 800acca:	461d      	mov	r5, r3
 800accc:	ab35      	add	r3, sp, #212	; 0xd4
 800acce:	f04f 0801 	mov.w	r8, #1
 800acd2:	9303      	str	r3, [sp, #12]
 800acd4:	e1b9      	b.n	800b04a <_svfprintf_r+0x64a>
 800acd6:	f04b 0b10 	orr.w	fp, fp, #16
 800acda:	f01b 0f20 	tst.w	fp, #32
 800acde:	d012      	beq.n	800ad06 <_svfprintf_r+0x306>
 800ace0:	3507      	adds	r5, #7
 800ace2:	f025 0307 	bic.w	r3, r5, #7
 800ace6:	461a      	mov	r2, r3
 800ace8:	685e      	ldr	r6, [r3, #4]
 800acea:	f852 5b08 	ldr.w	r5, [r2], #8
 800acee:	9206      	str	r2, [sp, #24]
 800acf0:	2e00      	cmp	r6, #0
 800acf2:	da06      	bge.n	800ad02 <_svfprintf_r+0x302>
 800acf4:	426d      	negs	r5, r5
 800acf6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800acfa:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 800acfe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800ad02:	2301      	movs	r3, #1
 800ad04:	e392      	b.n	800b42c <_svfprintf_r+0xa2c>
 800ad06:	462b      	mov	r3, r5
 800ad08:	f01b 0f10 	tst.w	fp, #16
 800ad0c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ad10:	9306      	str	r3, [sp, #24]
 800ad12:	d002      	beq.n	800ad1a <_svfprintf_r+0x31a>
 800ad14:	4635      	mov	r5, r6
 800ad16:	17f6      	asrs	r6, r6, #31
 800ad18:	e7ea      	b.n	800acf0 <_svfprintf_r+0x2f0>
 800ad1a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800ad1e:	d003      	beq.n	800ad28 <_svfprintf_r+0x328>
 800ad20:	b235      	sxth	r5, r6
 800ad22:	f346 36c0 	sbfx	r6, r6, #15, #1
 800ad26:	e7e3      	b.n	800acf0 <_svfprintf_r+0x2f0>
 800ad28:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800ad2c:	d0f2      	beq.n	800ad14 <_svfprintf_r+0x314>
 800ad2e:	b275      	sxtb	r5, r6
 800ad30:	f346 16c0 	sbfx	r6, r6, #7, #1
 800ad34:	e7dc      	b.n	800acf0 <_svfprintf_r+0x2f0>
 800ad36:	3507      	adds	r5, #7
 800ad38:	f025 0307 	bic.w	r3, r5, #7
 800ad3c:	ecb3 7b02 	vldmia	r3!, {d7}
 800ad40:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800ad44:	9306      	str	r3, [sp, #24]
 800ad46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad48:	ee09 3a10 	vmov	s18, r3
 800ad4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad52:	ee09 3a90 	vmov	s19, r3
 800ad56:	f04f 32ff 	mov.w	r2, #4294967295
 800ad5a:	4b34      	ldr	r3, [pc, #208]	; (800ae2c <_svfprintf_r+0x42c>)
 800ad5c:	ec51 0b19 	vmov	r0, r1, d9
 800ad60:	f7f5 feec 	bl	8000b3c <__aeabi_dcmpun>
 800ad64:	bb18      	cbnz	r0, 800adae <_svfprintf_r+0x3ae>
 800ad66:	4b31      	ldr	r3, [pc, #196]	; (800ae2c <_svfprintf_r+0x42c>)
 800ad68:	ec51 0b19 	vmov	r0, r1, d9
 800ad6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad70:	f7f5 fec6 	bl	8000b00 <__aeabi_dcmple>
 800ad74:	b9d8      	cbnz	r0, 800adae <_svfprintf_r+0x3ae>
 800ad76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f7f5 feb5 	bl	8000aec <__aeabi_dcmplt>
 800ad82:	b110      	cbz	r0, 800ad8a <_svfprintf_r+0x38a>
 800ad84:	232d      	movs	r3, #45	; 0x2d
 800ad86:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800ad8a:	4a29      	ldr	r2, [pc, #164]	; (800ae30 <_svfprintf_r+0x430>)
 800ad8c:	4b29      	ldr	r3, [pc, #164]	; (800ae34 <_svfprintf_r+0x434>)
 800ad8e:	9907      	ldr	r1, [sp, #28]
 800ad90:	2947      	cmp	r1, #71	; 0x47
 800ad92:	bfc8      	it	gt
 800ad94:	461a      	movgt	r2, r3
 800ad96:	2300      	movs	r3, #0
 800ad98:	9203      	str	r2, [sp, #12]
 800ad9a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 800ad9e:	9304      	str	r3, [sp, #16]
 800ada0:	f04f 0803 	mov.w	r8, #3
 800ada4:	461f      	mov	r7, r3
 800ada6:	461e      	mov	r6, r3
 800ada8:	9308      	str	r3, [sp, #32]
 800adaa:	461d      	mov	r5, r3
 800adac:	e14d      	b.n	800b04a <_svfprintf_r+0x64a>
 800adae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800adb2:	4610      	mov	r0, r2
 800adb4:	4619      	mov	r1, r3
 800adb6:	f7f5 fec1 	bl	8000b3c <__aeabi_dcmpun>
 800adba:	b140      	cbz	r0, 800adce <_svfprintf_r+0x3ce>
 800adbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adbe:	4a1e      	ldr	r2, [pc, #120]	; (800ae38 <_svfprintf_r+0x438>)
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	bfbc      	itt	lt
 800adc4:	232d      	movlt	r3, #45	; 0x2d
 800adc6:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800adca:	4b1c      	ldr	r3, [pc, #112]	; (800ae3c <_svfprintf_r+0x43c>)
 800adcc:	e7df      	b.n	800ad8e <_svfprintf_r+0x38e>
 800adce:	9b07      	ldr	r3, [sp, #28]
 800add0:	f023 0320 	bic.w	r3, r3, #32
 800add4:	2b41      	cmp	r3, #65	; 0x41
 800add6:	9308      	str	r3, [sp, #32]
 800add8:	d132      	bne.n	800ae40 <_svfprintf_r+0x440>
 800adda:	2330      	movs	r3, #48	; 0x30
 800addc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800ade0:	9b07      	ldr	r3, [sp, #28]
 800ade2:	2b61      	cmp	r3, #97	; 0x61
 800ade4:	bf0c      	ite	eq
 800ade6:	2378      	moveq	r3, #120	; 0x78
 800ade8:	2358      	movne	r3, #88	; 0x58
 800adea:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 800adee:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800adf2:	f04b 0b02 	orr.w	fp, fp, #2
 800adf6:	f340 8204 	ble.w	800b202 <_svfprintf_r+0x802>
 800adfa:	f108 0101 	add.w	r1, r8, #1
 800adfe:	4650      	mov	r0, sl
 800ae00:	f7fe ff3a 	bl	8009c78 <_malloc_r>
 800ae04:	9003      	str	r0, [sp, #12]
 800ae06:	2800      	cmp	r0, #0
 800ae08:	f040 81ff 	bne.w	800b20a <_svfprintf_r+0x80a>
 800ae0c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800ae10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae14:	f8a9 300c 	strh.w	r3, [r9, #12]
 800ae18:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800ae1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ae20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae22:	bf18      	it	ne
 800ae24:	f04f 33ff 	movne.w	r3, #4294967295
 800ae28:	e610      	b.n	800aa4c <_svfprintf_r+0x4c>
 800ae2a:	bf00      	nop
 800ae2c:	7fefffff 	.word	0x7fefffff
 800ae30:	0800f835 	.word	0x0800f835
 800ae34:	0800f839 	.word	0x0800f839
 800ae38:	0800f83d 	.word	0x0800f83d
 800ae3c:	0800f841 	.word	0x0800f841
 800ae40:	f1b8 3fff 	cmp.w	r8, #4294967295
 800ae44:	f000 81e4 	beq.w	800b210 <_svfprintf_r+0x810>
 800ae48:	9b08      	ldr	r3, [sp, #32]
 800ae4a:	2b47      	cmp	r3, #71	; 0x47
 800ae4c:	f040 81e4 	bne.w	800b218 <_svfprintf_r+0x818>
 800ae50:	f1b8 0f00 	cmp.w	r8, #0
 800ae54:	f040 81e0 	bne.w	800b218 <_svfprintf_r+0x818>
 800ae58:	f8cd 8010 	str.w	r8, [sp, #16]
 800ae5c:	f04f 0801 	mov.w	r8, #1
 800ae60:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 800ae64:	9310      	str	r3, [sp, #64]	; 0x40
 800ae66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f280 81d7 	bge.w	800b21c <_svfprintf_r+0x81c>
 800ae6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae70:	ee08 3a10 	vmov	s16, r3
 800ae74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ae7a:	ee08 3a90 	vmov	s17, r3
 800ae7e:	232d      	movs	r3, #45	; 0x2d
 800ae80:	9318      	str	r3, [sp, #96]	; 0x60
 800ae82:	9b08      	ldr	r3, [sp, #32]
 800ae84:	2b41      	cmp	r3, #65	; 0x41
 800ae86:	f040 81e7 	bne.w	800b258 <_svfprintf_r+0x858>
 800ae8a:	eeb0 0a48 	vmov.f32	s0, s16
 800ae8e:	eef0 0a68 	vmov.f32	s1, s17
 800ae92:	a81c      	add	r0, sp, #112	; 0x70
 800ae94:	f001 f8f4 	bl	800c080 <frexp>
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ae9e:	ec51 0b10 	vmov	r0, r1, d0
 800aea2:	f7f5 fbb1 	bl	8000608 <__aeabi_dmul>
 800aea6:	2200      	movs	r2, #0
 800aea8:	2300      	movs	r3, #0
 800aeaa:	4606      	mov	r6, r0
 800aeac:	460f      	mov	r7, r1
 800aeae:	f7f5 fe13 	bl	8000ad8 <__aeabi_dcmpeq>
 800aeb2:	b108      	cbz	r0, 800aeb8 <_svfprintf_r+0x4b8>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	931c      	str	r3, [sp, #112]	; 0x70
 800aeb8:	4bac      	ldr	r3, [pc, #688]	; (800b16c <_svfprintf_r+0x76c>)
 800aeba:	4aad      	ldr	r2, [pc, #692]	; (800b170 <_svfprintf_r+0x770>)
 800aebc:	9907      	ldr	r1, [sp, #28]
 800aebe:	9d03      	ldr	r5, [sp, #12]
 800aec0:	2961      	cmp	r1, #97	; 0x61
 800aec2:	bf18      	it	ne
 800aec4:	461a      	movne	r2, r3
 800aec6:	f108 33ff 	add.w	r3, r8, #4294967295
 800aeca:	9217      	str	r2, [sp, #92]	; 0x5c
 800aecc:	9305      	str	r3, [sp, #20]
 800aece:	4ba9      	ldr	r3, [pc, #676]	; (800b174 <_svfprintf_r+0x774>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	4630      	mov	r0, r6
 800aed4:	4639      	mov	r1, r7
 800aed6:	f7f5 fb97 	bl	8000608 <__aeabi_dmul>
 800aeda:	460f      	mov	r7, r1
 800aedc:	4606      	mov	r6, r0
 800aede:	f7f5 fe43 	bl	8000b68 <__aeabi_d2iz>
 800aee2:	9019      	str	r0, [sp, #100]	; 0x64
 800aee4:	f7f5 fb26 	bl	8000534 <__aeabi_i2d>
 800aee8:	4602      	mov	r2, r0
 800aeea:	460b      	mov	r3, r1
 800aeec:	4630      	mov	r0, r6
 800aeee:	4639      	mov	r1, r7
 800aef0:	f7f5 f9d2 	bl	8000298 <__aeabi_dsub>
 800aef4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800aef6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aef8:	5c9b      	ldrb	r3, [r3, r2]
 800aefa:	f805 3b01 	strb.w	r3, [r5], #1
 800aefe:	9b05      	ldr	r3, [sp, #20]
 800af00:	9312      	str	r3, [sp, #72]	; 0x48
 800af02:	1c5a      	adds	r2, r3, #1
 800af04:	4606      	mov	r6, r0
 800af06:	460f      	mov	r7, r1
 800af08:	d007      	beq.n	800af1a <_svfprintf_r+0x51a>
 800af0a:	3b01      	subs	r3, #1
 800af0c:	9305      	str	r3, [sp, #20]
 800af0e:	2200      	movs	r2, #0
 800af10:	2300      	movs	r3, #0
 800af12:	f7f5 fde1 	bl	8000ad8 <__aeabi_dcmpeq>
 800af16:	2800      	cmp	r0, #0
 800af18:	d0d9      	beq.n	800aece <_svfprintf_r+0x4ce>
 800af1a:	4b97      	ldr	r3, [pc, #604]	; (800b178 <_svfprintf_r+0x778>)
 800af1c:	2200      	movs	r2, #0
 800af1e:	4630      	mov	r0, r6
 800af20:	4639      	mov	r1, r7
 800af22:	f7f5 fe01 	bl	8000b28 <__aeabi_dcmpgt>
 800af26:	b960      	cbnz	r0, 800af42 <_svfprintf_r+0x542>
 800af28:	4b93      	ldr	r3, [pc, #588]	; (800b178 <_svfprintf_r+0x778>)
 800af2a:	2200      	movs	r2, #0
 800af2c:	4630      	mov	r0, r6
 800af2e:	4639      	mov	r1, r7
 800af30:	f7f5 fdd2 	bl	8000ad8 <__aeabi_dcmpeq>
 800af34:	2800      	cmp	r0, #0
 800af36:	f000 818a 	beq.w	800b24e <_svfprintf_r+0x84e>
 800af3a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800af3c:	07de      	lsls	r6, r3, #31
 800af3e:	f140 8186 	bpl.w	800b24e <_svfprintf_r+0x84e>
 800af42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af44:	9520      	str	r5, [sp, #128]	; 0x80
 800af46:	7bd9      	ldrb	r1, [r3, #15]
 800af48:	2030      	movs	r0, #48	; 0x30
 800af4a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800af4c:	1e53      	subs	r3, r2, #1
 800af4e:	9320      	str	r3, [sp, #128]	; 0x80
 800af50:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800af54:	428b      	cmp	r3, r1
 800af56:	f000 8169 	beq.w	800b22c <_svfprintf_r+0x82c>
 800af5a:	2b39      	cmp	r3, #57	; 0x39
 800af5c:	bf0b      	itete	eq
 800af5e:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800af60:	3301      	addne	r3, #1
 800af62:	7a9b      	ldrbeq	r3, [r3, #10]
 800af64:	b2db      	uxtbne	r3, r3
 800af66:	f802 3c01 	strb.w	r3, [r2, #-1]
 800af6a:	9b03      	ldr	r3, [sp, #12]
 800af6c:	1aeb      	subs	r3, r5, r3
 800af6e:	9305      	str	r3, [sp, #20]
 800af70:	9b08      	ldr	r3, [sp, #32]
 800af72:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800af74:	2b47      	cmp	r3, #71	; 0x47
 800af76:	f040 81b9 	bne.w	800b2ec <_svfprintf_r+0x8ec>
 800af7a:	1ce8      	adds	r0, r5, #3
 800af7c:	db02      	blt.n	800af84 <_svfprintf_r+0x584>
 800af7e:	45a8      	cmp	r8, r5
 800af80:	f280 81d7 	bge.w	800b332 <_svfprintf_r+0x932>
 800af84:	9b07      	ldr	r3, [sp, #28]
 800af86:	3b02      	subs	r3, #2
 800af88:	9307      	str	r3, [sp, #28]
 800af8a:	9907      	ldr	r1, [sp, #28]
 800af8c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800af90:	f021 0120 	bic.w	r1, r1, #32
 800af94:	2941      	cmp	r1, #65	; 0x41
 800af96:	bf08      	it	eq
 800af98:	320f      	addeq	r2, #15
 800af9a:	f105 33ff 	add.w	r3, r5, #4294967295
 800af9e:	bf06      	itte	eq
 800afa0:	b2d2      	uxtbeq	r2, r2
 800afa2:	2101      	moveq	r1, #1
 800afa4:	2100      	movne	r1, #0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	931c      	str	r3, [sp, #112]	; 0x70
 800afaa:	bfb8      	it	lt
 800afac:	f1c5 0301 	rsblt	r3, r5, #1
 800afb0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800afb4:	bfb4      	ite	lt
 800afb6:	222d      	movlt	r2, #45	; 0x2d
 800afb8:	222b      	movge	r2, #43	; 0x2b
 800afba:	2b09      	cmp	r3, #9
 800afbc:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 800afc0:	f340 81aa 	ble.w	800b318 <_svfprintf_r+0x918>
 800afc4:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 800afc8:	260a      	movs	r6, #10
 800afca:	4602      	mov	r2, r0
 800afcc:	fb93 f5f6 	sdiv	r5, r3, r6
 800afd0:	fb06 3115 	mls	r1, r6, r5, r3
 800afd4:	3130      	adds	r1, #48	; 0x30
 800afd6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800afda:	4619      	mov	r1, r3
 800afdc:	2963      	cmp	r1, #99	; 0x63
 800afde:	f100 30ff 	add.w	r0, r0, #4294967295
 800afe2:	462b      	mov	r3, r5
 800afe4:	dcf1      	bgt.n	800afca <_svfprintf_r+0x5ca>
 800afe6:	3330      	adds	r3, #48	; 0x30
 800afe8:	1e91      	subs	r1, r2, #2
 800afea:	f800 3c01 	strb.w	r3, [r0, #-1]
 800afee:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 800aff2:	460b      	mov	r3, r1
 800aff4:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 800aff8:	4283      	cmp	r3, r0
 800affa:	f0c0 8188 	bcc.w	800b30e <_svfprintf_r+0x90e>
 800affe:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 800b002:	1a9b      	subs	r3, r3, r2
 800b004:	4281      	cmp	r1, r0
 800b006:	bf88      	it	hi
 800b008:	2300      	movhi	r3, #0
 800b00a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800b00e:	441a      	add	r2, r3
 800b010:	ab1e      	add	r3, sp, #120	; 0x78
 800b012:	1ad3      	subs	r3, r2, r3
 800b014:	9a05      	ldr	r2, [sp, #20]
 800b016:	9315      	str	r3, [sp, #84]	; 0x54
 800b018:	2a01      	cmp	r2, #1
 800b01a:	eb03 0802 	add.w	r8, r3, r2
 800b01e:	dc02      	bgt.n	800b026 <_svfprintf_r+0x626>
 800b020:	f01b 0f01 	tst.w	fp, #1
 800b024:	d001      	beq.n	800b02a <_svfprintf_r+0x62a>
 800b026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b028:	4498      	add	r8, r3
 800b02a:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800b02e:	2600      	movs	r6, #0
 800b030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b034:	9310      	str	r3, [sp, #64]	; 0x40
 800b036:	9608      	str	r6, [sp, #32]
 800b038:	4635      	mov	r5, r6
 800b03a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b03c:	b113      	cbz	r3, 800b044 <_svfprintf_r+0x644>
 800b03e:	232d      	movs	r3, #45	; 0x2d
 800b040:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b044:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800b048:	2700      	movs	r7, #0
 800b04a:	4547      	cmp	r7, r8
 800b04c:	463b      	mov	r3, r7
 800b04e:	bfb8      	it	lt
 800b050:	4643      	movlt	r3, r8
 800b052:	9310      	str	r3, [sp, #64]	; 0x40
 800b054:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800b058:	b113      	cbz	r3, 800b060 <_svfprintf_r+0x660>
 800b05a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b05c:	3301      	adds	r3, #1
 800b05e:	9310      	str	r3, [sp, #64]	; 0x40
 800b060:	f01b 0302 	ands.w	r3, fp, #2
 800b064:	9317      	str	r3, [sp, #92]	; 0x5c
 800b066:	bf1e      	ittt	ne
 800b068:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 800b06a:	3302      	addne	r3, #2
 800b06c:	9310      	strne	r3, [sp, #64]	; 0x40
 800b06e:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 800b072:	9318      	str	r3, [sp, #96]	; 0x60
 800b074:	d122      	bne.n	800b0bc <_svfprintf_r+0x6bc>
 800b076:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800b07a:	1a9b      	subs	r3, r3, r2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	9312      	str	r3, [sp, #72]	; 0x48
 800b080:	dd1c      	ble.n	800b0bc <_svfprintf_r+0x6bc>
 800b082:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b084:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800b088:	2810      	cmp	r0, #16
 800b08a:	483c      	ldr	r0, [pc, #240]	; (800b17c <_svfprintf_r+0x77c>)
 800b08c:	6020      	str	r0, [r4, #0]
 800b08e:	f102 0201 	add.w	r2, r2, #1
 800b092:	f104 0108 	add.w	r1, r4, #8
 800b096:	f300 82f7 	bgt.w	800b688 <_svfprintf_r+0xc88>
 800b09a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b09c:	6060      	str	r0, [r4, #4]
 800b09e:	4403      	add	r3, r0
 800b0a0:	2a07      	cmp	r2, #7
 800b0a2:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800b0a6:	f340 8304 	ble.w	800b6b2 <_svfprintf_r+0xcb2>
 800b0aa:	aa22      	add	r2, sp, #136	; 0x88
 800b0ac:	4649      	mov	r1, r9
 800b0ae:	4650      	mov	r0, sl
 800b0b0:	f001 ff22 	bl	800cef8 <__ssprint_r>
 800b0b4:	2800      	cmp	r0, #0
 800b0b6:	f040 8637 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b0ba:	ac25      	add	r4, sp, #148	; 0x94
 800b0bc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 800b0c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b0c2:	b16a      	cbz	r2, 800b0e0 <_svfprintf_r+0x6e0>
 800b0c4:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 800b0c8:	6022      	str	r2, [r4, #0]
 800b0ca:	2201      	movs	r2, #1
 800b0cc:	4413      	add	r3, r2
 800b0ce:	9324      	str	r3, [sp, #144]	; 0x90
 800b0d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0d2:	6062      	str	r2, [r4, #4]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	2b07      	cmp	r3, #7
 800b0d8:	9323      	str	r3, [sp, #140]	; 0x8c
 800b0da:	f300 82ec 	bgt.w	800b6b6 <_svfprintf_r+0xcb6>
 800b0de:	3408      	adds	r4, #8
 800b0e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b0e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b0e4:	b162      	cbz	r2, 800b100 <_svfprintf_r+0x700>
 800b0e6:	aa1b      	add	r2, sp, #108	; 0x6c
 800b0e8:	6022      	str	r2, [r4, #0]
 800b0ea:	2202      	movs	r2, #2
 800b0ec:	4413      	add	r3, r2
 800b0ee:	9324      	str	r3, [sp, #144]	; 0x90
 800b0f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b0f2:	6062      	str	r2, [r4, #4]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	2b07      	cmp	r3, #7
 800b0f8:	9323      	str	r3, [sp, #140]	; 0x8c
 800b0fa:	f300 82e6 	bgt.w	800b6ca <_svfprintf_r+0xcca>
 800b0fe:	3408      	adds	r4, #8
 800b100:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b102:	2b80      	cmp	r3, #128	; 0x80
 800b104:	d122      	bne.n	800b14c <_svfprintf_r+0x74c>
 800b106:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800b10a:	1a9b      	subs	r3, r3, r2
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	9312      	str	r3, [sp, #72]	; 0x48
 800b110:	dd1c      	ble.n	800b14c <_svfprintf_r+0x74c>
 800b112:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b114:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800b118:	2810      	cmp	r0, #16
 800b11a:	4819      	ldr	r0, [pc, #100]	; (800b180 <_svfprintf_r+0x780>)
 800b11c:	6020      	str	r0, [r4, #0]
 800b11e:	f102 0201 	add.w	r2, r2, #1
 800b122:	f104 0108 	add.w	r1, r4, #8
 800b126:	f300 82da 	bgt.w	800b6de <_svfprintf_r+0xcde>
 800b12a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b12c:	6060      	str	r0, [r4, #4]
 800b12e:	4403      	add	r3, r0
 800b130:	2a07      	cmp	r2, #7
 800b132:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800b136:	f340 82e7 	ble.w	800b708 <_svfprintf_r+0xd08>
 800b13a:	aa22      	add	r2, sp, #136	; 0x88
 800b13c:	4649      	mov	r1, r9
 800b13e:	4650      	mov	r0, sl
 800b140:	f001 feda 	bl	800cef8 <__ssprint_r>
 800b144:	2800      	cmp	r0, #0
 800b146:	f040 85ef 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b14a:	ac25      	add	r4, sp, #148	; 0x94
 800b14c:	eba7 0708 	sub.w	r7, r7, r8
 800b150:	2f00      	cmp	r7, #0
 800b152:	dd27      	ble.n	800b1a4 <_svfprintf_r+0x7a4>
 800b154:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800b158:	4809      	ldr	r0, [pc, #36]	; (800b180 <_svfprintf_r+0x780>)
 800b15a:	6020      	str	r0, [r4, #0]
 800b15c:	2f10      	cmp	r7, #16
 800b15e:	f103 0301 	add.w	r3, r3, #1
 800b162:	f104 0108 	add.w	r1, r4, #8
 800b166:	f300 82d1 	bgt.w	800b70c <_svfprintf_r+0xd0c>
 800b16a:	e00b      	b.n	800b184 <_svfprintf_r+0x784>
 800b16c:	0800f856 	.word	0x0800f856
 800b170:	0800f845 	.word	0x0800f845
 800b174:	40300000 	.word	0x40300000
 800b178:	3fe00000 	.word	0x3fe00000
 800b17c:	0800f869 	.word	0x0800f869
 800b180:	0800f879 	.word	0x0800f879
 800b184:	6067      	str	r7, [r4, #4]
 800b186:	2b07      	cmp	r3, #7
 800b188:	4417      	add	r7, r2
 800b18a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800b18e:	f340 82d0 	ble.w	800b732 <_svfprintf_r+0xd32>
 800b192:	aa22      	add	r2, sp, #136	; 0x88
 800b194:	4649      	mov	r1, r9
 800b196:	4650      	mov	r0, sl
 800b198:	f001 feae 	bl	800cef8 <__ssprint_r>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	f040 85c3 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b1a2:	ac25      	add	r4, sp, #148	; 0x94
 800b1a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b1a8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800b1aa:	f040 82c9 	bne.w	800b740 <_svfprintf_r+0xd40>
 800b1ae:	9b03      	ldr	r3, [sp, #12]
 800b1b0:	e9c4 3800 	strd	r3, r8, [r4]
 800b1b4:	4447      	add	r7, r8
 800b1b6:	9724      	str	r7, [sp, #144]	; 0x90
 800b1b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	2b07      	cmp	r3, #7
 800b1be:	9323      	str	r3, [sp, #140]	; 0x8c
 800b1c0:	f300 8303 	bgt.w	800b7ca <_svfprintf_r+0xdca>
 800b1c4:	3408      	adds	r4, #8
 800b1c6:	f01b 0f04 	tst.w	fp, #4
 800b1ca:	f040 858f 	bne.w	800bcec <_svfprintf_r+0x12ec>
 800b1ce:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800b1d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1d4:	428a      	cmp	r2, r1
 800b1d6:	bfac      	ite	ge
 800b1d8:	189b      	addge	r3, r3, r2
 800b1da:	185b      	addlt	r3, r3, r1
 800b1dc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b1e0:	b13b      	cbz	r3, 800b1f2 <_svfprintf_r+0x7f2>
 800b1e2:	aa22      	add	r2, sp, #136	; 0x88
 800b1e4:	4649      	mov	r1, r9
 800b1e6:	4650      	mov	r0, sl
 800b1e8:	f001 fe86 	bl	800cef8 <__ssprint_r>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	f040 859b 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	9323      	str	r3, [sp, #140]	; 0x8c
 800b1f6:	9b04      	ldr	r3, [sp, #16]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f040 85b1 	bne.w	800bd60 <_svfprintf_r+0x1360>
 800b1fe:	ac25      	add	r4, sp, #148	; 0x94
 800b200:	e0e7      	b.n	800b3d2 <_svfprintf_r+0x9d2>
 800b202:	ab35      	add	r3, sp, #212	; 0xd4
 800b204:	9004      	str	r0, [sp, #16]
 800b206:	9303      	str	r3, [sp, #12]
 800b208:	e62a      	b.n	800ae60 <_svfprintf_r+0x460>
 800b20a:	9b03      	ldr	r3, [sp, #12]
 800b20c:	9304      	str	r3, [sp, #16]
 800b20e:	e627      	b.n	800ae60 <_svfprintf_r+0x460>
 800b210:	9004      	str	r0, [sp, #16]
 800b212:	f04f 0806 	mov.w	r8, #6
 800b216:	e623      	b.n	800ae60 <_svfprintf_r+0x460>
 800b218:	9004      	str	r0, [sp, #16]
 800b21a:	e621      	b.n	800ae60 <_svfprintf_r+0x460>
 800b21c:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 800b220:	2300      	movs	r3, #0
 800b222:	eeb0 8a47 	vmov.f32	s16, s14
 800b226:	eef0 8a67 	vmov.f32	s17, s15
 800b22a:	e629      	b.n	800ae80 <_svfprintf_r+0x480>
 800b22c:	f802 0c01 	strb.w	r0, [r2, #-1]
 800b230:	e68b      	b.n	800af4a <_svfprintf_r+0x54a>
 800b232:	f803 0b01 	strb.w	r0, [r3], #1
 800b236:	1aca      	subs	r2, r1, r3
 800b238:	2a00      	cmp	r2, #0
 800b23a:	dafa      	bge.n	800b232 <_svfprintf_r+0x832>
 800b23c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b23e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b240:	3201      	adds	r2, #1
 800b242:	f103 0301 	add.w	r3, r3, #1
 800b246:	bfb8      	it	lt
 800b248:	2300      	movlt	r3, #0
 800b24a:	441d      	add	r5, r3
 800b24c:	e68d      	b.n	800af6a <_svfprintf_r+0x56a>
 800b24e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b250:	462b      	mov	r3, r5
 800b252:	18a9      	adds	r1, r5, r2
 800b254:	2030      	movs	r0, #48	; 0x30
 800b256:	e7ee      	b.n	800b236 <_svfprintf_r+0x836>
 800b258:	9b08      	ldr	r3, [sp, #32]
 800b25a:	2b46      	cmp	r3, #70	; 0x46
 800b25c:	d005      	beq.n	800b26a <_svfprintf_r+0x86a>
 800b25e:	2b45      	cmp	r3, #69	; 0x45
 800b260:	d11d      	bne.n	800b29e <_svfprintf_r+0x89e>
 800b262:	f108 0501 	add.w	r5, r8, #1
 800b266:	2102      	movs	r1, #2
 800b268:	e001      	b.n	800b26e <_svfprintf_r+0x86e>
 800b26a:	4645      	mov	r5, r8
 800b26c:	2103      	movs	r1, #3
 800b26e:	ab20      	add	r3, sp, #128	; 0x80
 800b270:	9301      	str	r3, [sp, #4]
 800b272:	ab1d      	add	r3, sp, #116	; 0x74
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	462a      	mov	r2, r5
 800b278:	ab1c      	add	r3, sp, #112	; 0x70
 800b27a:	4650      	mov	r0, sl
 800b27c:	eeb0 0a48 	vmov.f32	s0, s16
 800b280:	eef0 0a68 	vmov.f32	s1, s17
 800b284:	f001 f850 	bl	800c328 <_dtoa_r>
 800b288:	9b08      	ldr	r3, [sp, #32]
 800b28a:	9003      	str	r0, [sp, #12]
 800b28c:	2b47      	cmp	r3, #71	; 0x47
 800b28e:	d108      	bne.n	800b2a2 <_svfprintf_r+0x8a2>
 800b290:	f01b 0f01 	tst.w	fp, #1
 800b294:	d105      	bne.n	800b2a2 <_svfprintf_r+0x8a2>
 800b296:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b298:	9a03      	ldr	r2, [sp, #12]
 800b29a:	1a9b      	subs	r3, r3, r2
 800b29c:	e667      	b.n	800af6e <_svfprintf_r+0x56e>
 800b29e:	4645      	mov	r5, r8
 800b2a0:	e7e1      	b.n	800b266 <_svfprintf_r+0x866>
 800b2a2:	9b03      	ldr	r3, [sp, #12]
 800b2a4:	195e      	adds	r6, r3, r5
 800b2a6:	9b08      	ldr	r3, [sp, #32]
 800b2a8:	2b46      	cmp	r3, #70	; 0x46
 800b2aa:	d10f      	bne.n	800b2cc <_svfprintf_r+0x8cc>
 800b2ac:	9b03      	ldr	r3, [sp, #12]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	2b30      	cmp	r3, #48	; 0x30
 800b2b2:	d109      	bne.n	800b2c8 <_svfprintf_r+0x8c8>
 800b2b4:	ec51 0b18 	vmov	r0, r1, d8
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f7f5 fc0c 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2c0:	b910      	cbnz	r0, 800b2c8 <_svfprintf_r+0x8c8>
 800b2c2:	f1c5 0501 	rsb	r5, r5, #1
 800b2c6:	951c      	str	r5, [sp, #112]	; 0x70
 800b2c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b2ca:	441e      	add	r6, r3
 800b2cc:	ec51 0b18 	vmov	r0, r1, d8
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	f7f5 fc00 	bl	8000ad8 <__aeabi_dcmpeq>
 800b2d8:	b100      	cbz	r0, 800b2dc <_svfprintf_r+0x8dc>
 800b2da:	9620      	str	r6, [sp, #128]	; 0x80
 800b2dc:	2230      	movs	r2, #48	; 0x30
 800b2de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b2e0:	429e      	cmp	r6, r3
 800b2e2:	d9d8      	bls.n	800b296 <_svfprintf_r+0x896>
 800b2e4:	1c59      	adds	r1, r3, #1
 800b2e6:	9120      	str	r1, [sp, #128]	; 0x80
 800b2e8:	701a      	strb	r2, [r3, #0]
 800b2ea:	e7f8      	b.n	800b2de <_svfprintf_r+0x8de>
 800b2ec:	9b08      	ldr	r3, [sp, #32]
 800b2ee:	2b46      	cmp	r3, #70	; 0x46
 800b2f0:	f47f ae4b 	bne.w	800af8a <_svfprintf_r+0x58a>
 800b2f4:	f00b 0301 	and.w	r3, fp, #1
 800b2f8:	2d00      	cmp	r5, #0
 800b2fa:	ea43 0308 	orr.w	r3, r3, r8
 800b2fe:	dd25      	ble.n	800b34c <_svfprintf_r+0x94c>
 800b300:	b383      	cbz	r3, 800b364 <_svfprintf_r+0x964>
 800b302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b304:	18eb      	adds	r3, r5, r3
 800b306:	4498      	add	r8, r3
 800b308:	2366      	movs	r3, #102	; 0x66
 800b30a:	9307      	str	r3, [sp, #28]
 800b30c:	e030      	b.n	800b370 <_svfprintf_r+0x970>
 800b30e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b312:	f805 6f01 	strb.w	r6, [r5, #1]!
 800b316:	e66f      	b.n	800aff8 <_svfprintf_r+0x5f8>
 800b318:	b941      	cbnz	r1, 800b32c <_svfprintf_r+0x92c>
 800b31a:	2230      	movs	r2, #48	; 0x30
 800b31c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800b320:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800b324:	3330      	adds	r3, #48	; 0x30
 800b326:	f802 3b01 	strb.w	r3, [r2], #1
 800b32a:	e671      	b.n	800b010 <_svfprintf_r+0x610>
 800b32c:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800b330:	e7f8      	b.n	800b324 <_svfprintf_r+0x924>
 800b332:	9b05      	ldr	r3, [sp, #20]
 800b334:	42ab      	cmp	r3, r5
 800b336:	dd0d      	ble.n	800b354 <_svfprintf_r+0x954>
 800b338:	9b05      	ldr	r3, [sp, #20]
 800b33a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b33c:	2d00      	cmp	r5, #0
 800b33e:	eb03 0802 	add.w	r8, r3, r2
 800b342:	dc0d      	bgt.n	800b360 <_svfprintf_r+0x960>
 800b344:	f1c5 0301 	rsb	r3, r5, #1
 800b348:	4498      	add	r8, r3
 800b34a:	e009      	b.n	800b360 <_svfprintf_r+0x960>
 800b34c:	b163      	cbz	r3, 800b368 <_svfprintf_r+0x968>
 800b34e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b350:	3301      	adds	r3, #1
 800b352:	e7d8      	b.n	800b306 <_svfprintf_r+0x906>
 800b354:	f01b 0f01 	tst.w	fp, #1
 800b358:	d01d      	beq.n	800b396 <_svfprintf_r+0x996>
 800b35a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b35c:	eb05 0803 	add.w	r8, r5, r3
 800b360:	2367      	movs	r3, #103	; 0x67
 800b362:	e7d2      	b.n	800b30a <_svfprintf_r+0x90a>
 800b364:	46a8      	mov	r8, r5
 800b366:	e7cf      	b.n	800b308 <_svfprintf_r+0x908>
 800b368:	2366      	movs	r3, #102	; 0x66
 800b36a:	9307      	str	r3, [sp, #28]
 800b36c:	f04f 0801 	mov.w	r8, #1
 800b370:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800b374:	9308      	str	r3, [sp, #32]
 800b376:	d01f      	beq.n	800b3b8 <_svfprintf_r+0x9b8>
 800b378:	2600      	movs	r6, #0
 800b37a:	2d00      	cmp	r5, #0
 800b37c:	9608      	str	r6, [sp, #32]
 800b37e:	f77f ae5c 	ble.w	800b03a <_svfprintf_r+0x63a>
 800b382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	2bff      	cmp	r3, #255	; 0xff
 800b388:	d107      	bne.n	800b39a <_svfprintf_r+0x99a>
 800b38a:	9b08      	ldr	r3, [sp, #32]
 800b38c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b38e:	4433      	add	r3, r6
 800b390:	fb02 8803 	mla	r8, r2, r3, r8
 800b394:	e651      	b.n	800b03a <_svfprintf_r+0x63a>
 800b396:	46a8      	mov	r8, r5
 800b398:	e7e2      	b.n	800b360 <_svfprintf_r+0x960>
 800b39a:	42ab      	cmp	r3, r5
 800b39c:	daf5      	bge.n	800b38a <_svfprintf_r+0x98a>
 800b39e:	1aed      	subs	r5, r5, r3
 800b3a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3a2:	785b      	ldrb	r3, [r3, #1]
 800b3a4:	b133      	cbz	r3, 800b3b4 <_svfprintf_r+0x9b4>
 800b3a6:	9b08      	ldr	r3, [sp, #32]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	9308      	str	r3, [sp, #32]
 800b3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b2:	e7e6      	b.n	800b382 <_svfprintf_r+0x982>
 800b3b4:	3601      	adds	r6, #1
 800b3b6:	e7e4      	b.n	800b382 <_svfprintf_r+0x982>
 800b3b8:	9e08      	ldr	r6, [sp, #32]
 800b3ba:	e63e      	b.n	800b03a <_svfprintf_r+0x63a>
 800b3bc:	1d2b      	adds	r3, r5, #4
 800b3be:	f01b 0f20 	tst.w	fp, #32
 800b3c2:	9306      	str	r3, [sp, #24]
 800b3c4:	d00a      	beq.n	800b3dc <_svfprintf_r+0x9dc>
 800b3c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3c8:	682b      	ldr	r3, [r5, #0]
 800b3ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3cc:	17d2      	asrs	r2, r2, #31
 800b3ce:	e9c3 1200 	strd	r1, r2, [r3]
 800b3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3d4:	9d06      	ldr	r5, [sp, #24]
 800b3d6:	9303      	str	r3, [sp, #12]
 800b3d8:	f7ff bb52 	b.w	800aa80 <_svfprintf_r+0x80>
 800b3dc:	f01b 0f10 	tst.w	fp, #16
 800b3e0:	d003      	beq.n	800b3ea <_svfprintf_r+0x9ea>
 800b3e2:	682b      	ldr	r3, [r5, #0]
 800b3e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3e6:	601a      	str	r2, [r3, #0]
 800b3e8:	e7f3      	b.n	800b3d2 <_svfprintf_r+0x9d2>
 800b3ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800b3ee:	d003      	beq.n	800b3f8 <_svfprintf_r+0x9f8>
 800b3f0:	682b      	ldr	r3, [r5, #0]
 800b3f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3f4:	801a      	strh	r2, [r3, #0]
 800b3f6:	e7ec      	b.n	800b3d2 <_svfprintf_r+0x9d2>
 800b3f8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800b3fc:	d0f1      	beq.n	800b3e2 <_svfprintf_r+0x9e2>
 800b3fe:	682b      	ldr	r3, [r5, #0]
 800b400:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b402:	701a      	strb	r2, [r3, #0]
 800b404:	e7e5      	b.n	800b3d2 <_svfprintf_r+0x9d2>
 800b406:	f04b 0b10 	orr.w	fp, fp, #16
 800b40a:	f01b 0320 	ands.w	r3, fp, #32
 800b40e:	d020      	beq.n	800b452 <_svfprintf_r+0xa52>
 800b410:	3507      	adds	r5, #7
 800b412:	f025 0307 	bic.w	r3, r5, #7
 800b416:	461a      	mov	r2, r3
 800b418:	685e      	ldr	r6, [r3, #4]
 800b41a:	f852 5b08 	ldr.w	r5, [r2], #8
 800b41e:	9206      	str	r2, [sp, #24]
 800b420:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800b424:	2300      	movs	r3, #0
 800b426:	2200      	movs	r2, #0
 800b428:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800b42c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b430:	f000 84a7 	beq.w	800bd82 <_svfprintf_r+0x1382>
 800b434:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 800b438:	9204      	str	r2, [sp, #16]
 800b43a:	ea55 0206 	orrs.w	r2, r5, r6
 800b43e:	f040 84a6 	bne.w	800bd8e <_svfprintf_r+0x138e>
 800b442:	f1b8 0f00 	cmp.w	r8, #0
 800b446:	f000 8107 	beq.w	800b658 <_svfprintf_r+0xc58>
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	f040 84a2 	bne.w	800bd94 <_svfprintf_r+0x1394>
 800b450:	e0a3      	b.n	800b59a <_svfprintf_r+0xb9a>
 800b452:	462a      	mov	r2, r5
 800b454:	f01b 0610 	ands.w	r6, fp, #16
 800b458:	f852 5b04 	ldr.w	r5, [r2], #4
 800b45c:	9206      	str	r2, [sp, #24]
 800b45e:	d001      	beq.n	800b464 <_svfprintf_r+0xa64>
 800b460:	461e      	mov	r6, r3
 800b462:	e7dd      	b.n	800b420 <_svfprintf_r+0xa20>
 800b464:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800b468:	d001      	beq.n	800b46e <_svfprintf_r+0xa6e>
 800b46a:	b2ad      	uxth	r5, r5
 800b46c:	e7d8      	b.n	800b420 <_svfprintf_r+0xa20>
 800b46e:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800b472:	d0d5      	beq.n	800b420 <_svfprintf_r+0xa20>
 800b474:	b2ed      	uxtb	r5, r5
 800b476:	e7f3      	b.n	800b460 <_svfprintf_r+0xa60>
 800b478:	462b      	mov	r3, r5
 800b47a:	2278      	movs	r2, #120	; 0x78
 800b47c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b480:	9306      	str	r3, [sp, #24]
 800b482:	f647 0330 	movw	r3, #30768	; 0x7830
 800b486:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800b48a:	4bab      	ldr	r3, [pc, #684]	; (800b738 <_svfprintf_r+0xd38>)
 800b48c:	9316      	str	r3, [sp, #88]	; 0x58
 800b48e:	2600      	movs	r6, #0
 800b490:	f04b 0b02 	orr.w	fp, fp, #2
 800b494:	2302      	movs	r3, #2
 800b496:	9207      	str	r2, [sp, #28]
 800b498:	e7c5      	b.n	800b426 <_svfprintf_r+0xa26>
 800b49a:	462b      	mov	r3, r5
 800b49c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800b4a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a4:	9203      	str	r2, [sp, #12]
 800b4a6:	f04f 0500 	mov.w	r5, #0
 800b4aa:	9306      	str	r3, [sp, #24]
 800b4ac:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800b4b0:	d010      	beq.n	800b4d4 <_svfprintf_r+0xad4>
 800b4b2:	9803      	ldr	r0, [sp, #12]
 800b4b4:	4642      	mov	r2, r8
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	f7f4 fe9a 	bl	80001f0 <memchr>
 800b4bc:	9004      	str	r0, [sp, #16]
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	f000 80e0 	beq.w	800b684 <_svfprintf_r+0xc84>
 800b4c4:	9a03      	ldr	r2, [sp, #12]
 800b4c6:	9504      	str	r5, [sp, #16]
 800b4c8:	eba0 0802 	sub.w	r8, r0, r2
 800b4cc:	462f      	mov	r7, r5
 800b4ce:	462e      	mov	r6, r5
 800b4d0:	9508      	str	r5, [sp, #32]
 800b4d2:	e5ba      	b.n	800b04a <_svfprintf_r+0x64a>
 800b4d4:	9803      	ldr	r0, [sp, #12]
 800b4d6:	f7f4 fe83 	bl	80001e0 <strlen>
 800b4da:	462f      	mov	r7, r5
 800b4dc:	4680      	mov	r8, r0
 800b4de:	9504      	str	r5, [sp, #16]
 800b4e0:	463e      	mov	r6, r7
 800b4e2:	463b      	mov	r3, r7
 800b4e4:	e460      	b.n	800ada8 <_svfprintf_r+0x3a8>
 800b4e6:	f04b 0b10 	orr.w	fp, fp, #16
 800b4ea:	f01b 0320 	ands.w	r3, fp, #32
 800b4ee:	d009      	beq.n	800b504 <_svfprintf_r+0xb04>
 800b4f0:	3507      	adds	r5, #7
 800b4f2:	f025 0307 	bic.w	r3, r5, #7
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	685e      	ldr	r6, [r3, #4]
 800b4fa:	f852 5b08 	ldr.w	r5, [r2], #8
 800b4fe:	9206      	str	r2, [sp, #24]
 800b500:	2301      	movs	r3, #1
 800b502:	e790      	b.n	800b426 <_svfprintf_r+0xa26>
 800b504:	462a      	mov	r2, r5
 800b506:	f01b 0610 	ands.w	r6, fp, #16
 800b50a:	f852 5b04 	ldr.w	r5, [r2], #4
 800b50e:	9206      	str	r2, [sp, #24]
 800b510:	d001      	beq.n	800b516 <_svfprintf_r+0xb16>
 800b512:	461e      	mov	r6, r3
 800b514:	e7f4      	b.n	800b500 <_svfprintf_r+0xb00>
 800b516:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800b51a:	d001      	beq.n	800b520 <_svfprintf_r+0xb20>
 800b51c:	b2ad      	uxth	r5, r5
 800b51e:	e7ef      	b.n	800b500 <_svfprintf_r+0xb00>
 800b520:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800b524:	d0ec      	beq.n	800b500 <_svfprintf_r+0xb00>
 800b526:	b2ed      	uxtb	r5, r5
 800b528:	e7f3      	b.n	800b512 <_svfprintf_r+0xb12>
 800b52a:	4b84      	ldr	r3, [pc, #528]	; (800b73c <_svfprintf_r+0xd3c>)
 800b52c:	9316      	str	r3, [sp, #88]	; 0x58
 800b52e:	f01b 0320 	ands.w	r3, fp, #32
 800b532:	d01b      	beq.n	800b56c <_svfprintf_r+0xb6c>
 800b534:	3507      	adds	r5, #7
 800b536:	f025 0307 	bic.w	r3, r5, #7
 800b53a:	461a      	mov	r2, r3
 800b53c:	685e      	ldr	r6, [r3, #4]
 800b53e:	f852 5b08 	ldr.w	r5, [r2], #8
 800b542:	9206      	str	r2, [sp, #24]
 800b544:	f01b 0f01 	tst.w	fp, #1
 800b548:	d00a      	beq.n	800b560 <_svfprintf_r+0xb60>
 800b54a:	ea55 0306 	orrs.w	r3, r5, r6
 800b54e:	d007      	beq.n	800b560 <_svfprintf_r+0xb60>
 800b550:	2330      	movs	r3, #48	; 0x30
 800b552:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800b556:	9b07      	ldr	r3, [sp, #28]
 800b558:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800b55c:	f04b 0b02 	orr.w	fp, fp, #2
 800b560:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800b564:	2302      	movs	r3, #2
 800b566:	e75e      	b.n	800b426 <_svfprintf_r+0xa26>
 800b568:	4b73      	ldr	r3, [pc, #460]	; (800b738 <_svfprintf_r+0xd38>)
 800b56a:	e7df      	b.n	800b52c <_svfprintf_r+0xb2c>
 800b56c:	462a      	mov	r2, r5
 800b56e:	f01b 0610 	ands.w	r6, fp, #16
 800b572:	f852 5b04 	ldr.w	r5, [r2], #4
 800b576:	9206      	str	r2, [sp, #24]
 800b578:	d001      	beq.n	800b57e <_svfprintf_r+0xb7e>
 800b57a:	461e      	mov	r6, r3
 800b57c:	e7e2      	b.n	800b544 <_svfprintf_r+0xb44>
 800b57e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800b582:	d001      	beq.n	800b588 <_svfprintf_r+0xb88>
 800b584:	b2ad      	uxth	r5, r5
 800b586:	e7dd      	b.n	800b544 <_svfprintf_r+0xb44>
 800b588:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800b58c:	d0da      	beq.n	800b544 <_svfprintf_r+0xb44>
 800b58e:	b2ed      	uxtb	r5, r5
 800b590:	e7f3      	b.n	800b57a <_svfprintf_r+0xb7a>
 800b592:	2d0a      	cmp	r5, #10
 800b594:	f176 0300 	sbcs.w	r3, r6, #0
 800b598:	d206      	bcs.n	800b5a8 <_svfprintf_r+0xba8>
 800b59a:	3530      	adds	r5, #48	; 0x30
 800b59c:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 800b5a0:	f20d 1337 	addw	r3, sp, #311	; 0x137
 800b5a4:	f000 bc16 	b.w	800bdd4 <_svfprintf_r+0x13d4>
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	9305      	str	r3, [sp, #20]
 800b5ac:	9b04      	ldr	r3, [sp, #16]
 800b5ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5b2:	af4e      	add	r7, sp, #312	; 0x138
 800b5b4:	9308      	str	r3, [sp, #32]
 800b5b6:	220a      	movs	r2, #10
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	4631      	mov	r1, r6
 800b5be:	f7f5 fb6b 	bl	8000c98 <__aeabi_uldivmod>
 800b5c2:	1e7b      	subs	r3, r7, #1
 800b5c4:	9303      	str	r3, [sp, #12]
 800b5c6:	9b05      	ldr	r3, [sp, #20]
 800b5c8:	9010      	str	r0, [sp, #64]	; 0x40
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	9b08      	ldr	r3, [sp, #32]
 800b5d0:	3230      	adds	r2, #48	; 0x30
 800b5d2:	468b      	mov	fp, r1
 800b5d4:	f807 2c01 	strb.w	r2, [r7, #-1]
 800b5d8:	b1d3      	cbz	r3, 800b610 <_svfprintf_r+0xc10>
 800b5da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5dc:	9a05      	ldr	r2, [sp, #20]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d115      	bne.n	800b610 <_svfprintf_r+0xc10>
 800b5e4:	2aff      	cmp	r2, #255	; 0xff
 800b5e6:	d013      	beq.n	800b610 <_svfprintf_r+0xc10>
 800b5e8:	2d0a      	cmp	r5, #10
 800b5ea:	f176 0300 	sbcs.w	r3, r6, #0
 800b5ee:	d30f      	bcc.n	800b610 <_svfprintf_r+0xc10>
 800b5f0:	9b03      	ldr	r3, [sp, #12]
 800b5f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b5f4:	9914      	ldr	r1, [sp, #80]	; 0x50
 800b5f6:	1a9b      	subs	r3, r3, r2
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	9303      	str	r3, [sp, #12]
 800b5fc:	f000 fcf9 	bl	800bff2 <strncpy>
 800b600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b602:	785b      	ldrb	r3, [r3, #1]
 800b604:	b11b      	cbz	r3, 800b60e <_svfprintf_r+0xc0e>
 800b606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b608:	3301      	adds	r3, #1
 800b60a:	9309      	str	r3, [sp, #36]	; 0x24
 800b60c:	2300      	movs	r3, #0
 800b60e:	9305      	str	r3, [sp, #20]
 800b610:	2d0a      	cmp	r5, #10
 800b612:	f176 0600 	sbcs.w	r6, r6, #0
 800b616:	d20b      	bcs.n	800b630 <_svfprintf_r+0xc30>
 800b618:	9b03      	ldr	r3, [sp, #12]
 800b61a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800b61e:	aa4e      	add	r2, sp, #312	; 0x138
 800b620:	4647      	mov	r7, r8
 800b622:	eba2 0803 	sub.w	r8, r2, r3
 800b626:	2300      	movs	r3, #0
 800b628:	9304      	str	r3, [sp, #16]
 800b62a:	461e      	mov	r6, r3
 800b62c:	f7ff bbbc 	b.w	800ada8 <_svfprintf_r+0x3a8>
 800b630:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b632:	9f03      	ldr	r7, [sp, #12]
 800b634:	465e      	mov	r6, fp
 800b636:	e7be      	b.n	800b5b6 <_svfprintf_r+0xbb6>
 800b638:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b63a:	f005 030f 	and.w	r3, r5, #15
 800b63e:	092d      	lsrs	r5, r5, #4
 800b640:	5cd3      	ldrb	r3, [r2, r3]
 800b642:	9a03      	ldr	r2, [sp, #12]
 800b644:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 800b648:	f802 3d01 	strb.w	r3, [r2, #-1]!
 800b64c:	0936      	lsrs	r6, r6, #4
 800b64e:	ea55 0306 	orrs.w	r3, r5, r6
 800b652:	9203      	str	r2, [sp, #12]
 800b654:	d1f0      	bne.n	800b638 <_svfprintf_r+0xc38>
 800b656:	e7df      	b.n	800b618 <_svfprintf_r+0xc18>
 800b658:	b933      	cbnz	r3, 800b668 <_svfprintf_r+0xc68>
 800b65a:	f01b 0f01 	tst.w	fp, #1
 800b65e:	d003      	beq.n	800b668 <_svfprintf_r+0xc68>
 800b660:	2330      	movs	r3, #48	; 0x30
 800b662:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800b666:	e79b      	b.n	800b5a0 <_svfprintf_r+0xba0>
 800b668:	ab4e      	add	r3, sp, #312	; 0x138
 800b66a:	e3b3      	b.n	800bdd4 <_svfprintf_r+0x13d4>
 800b66c:	9b07      	ldr	r3, [sp, #28]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f000 837c 	beq.w	800bd6c <_svfprintf_r+0x136c>
 800b674:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800b678:	2300      	movs	r3, #0
 800b67a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b67e:	9506      	str	r5, [sp, #24]
 800b680:	f7ff bb1f 	b.w	800acc2 <_svfprintf_r+0x2c2>
 800b684:	9f04      	ldr	r7, [sp, #16]
 800b686:	e72b      	b.n	800b4e0 <_svfprintf_r+0xae0>
 800b688:	2010      	movs	r0, #16
 800b68a:	4403      	add	r3, r0
 800b68c:	2a07      	cmp	r2, #7
 800b68e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800b692:	6060      	str	r0, [r4, #4]
 800b694:	dd08      	ble.n	800b6a8 <_svfprintf_r+0xca8>
 800b696:	aa22      	add	r2, sp, #136	; 0x88
 800b698:	4649      	mov	r1, r9
 800b69a:	4650      	mov	r0, sl
 800b69c:	f001 fc2c 	bl	800cef8 <__ssprint_r>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	f040 8341 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b6a6:	a925      	add	r1, sp, #148	; 0x94
 800b6a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6aa:	3b10      	subs	r3, #16
 800b6ac:	9312      	str	r3, [sp, #72]	; 0x48
 800b6ae:	460c      	mov	r4, r1
 800b6b0:	e4e7      	b.n	800b082 <_svfprintf_r+0x682>
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	e502      	b.n	800b0bc <_svfprintf_r+0x6bc>
 800b6b6:	aa22      	add	r2, sp, #136	; 0x88
 800b6b8:	4649      	mov	r1, r9
 800b6ba:	4650      	mov	r0, sl
 800b6bc:	f001 fc1c 	bl	800cef8 <__ssprint_r>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	f040 8331 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b6c6:	ac25      	add	r4, sp, #148	; 0x94
 800b6c8:	e50a      	b.n	800b0e0 <_svfprintf_r+0x6e0>
 800b6ca:	aa22      	add	r2, sp, #136	; 0x88
 800b6cc:	4649      	mov	r1, r9
 800b6ce:	4650      	mov	r0, sl
 800b6d0:	f001 fc12 	bl	800cef8 <__ssprint_r>
 800b6d4:	2800      	cmp	r0, #0
 800b6d6:	f040 8327 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b6da:	ac25      	add	r4, sp, #148	; 0x94
 800b6dc:	e510      	b.n	800b100 <_svfprintf_r+0x700>
 800b6de:	2010      	movs	r0, #16
 800b6e0:	4403      	add	r3, r0
 800b6e2:	2a07      	cmp	r2, #7
 800b6e4:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800b6e8:	6060      	str	r0, [r4, #4]
 800b6ea:	dd08      	ble.n	800b6fe <_svfprintf_r+0xcfe>
 800b6ec:	aa22      	add	r2, sp, #136	; 0x88
 800b6ee:	4649      	mov	r1, r9
 800b6f0:	4650      	mov	r0, sl
 800b6f2:	f001 fc01 	bl	800cef8 <__ssprint_r>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	f040 8316 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b6fc:	a925      	add	r1, sp, #148	; 0x94
 800b6fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b700:	3b10      	subs	r3, #16
 800b702:	9312      	str	r3, [sp, #72]	; 0x48
 800b704:	460c      	mov	r4, r1
 800b706:	e504      	b.n	800b112 <_svfprintf_r+0x712>
 800b708:	460c      	mov	r4, r1
 800b70a:	e51f      	b.n	800b14c <_svfprintf_r+0x74c>
 800b70c:	2010      	movs	r0, #16
 800b70e:	4402      	add	r2, r0
 800b710:	2b07      	cmp	r3, #7
 800b712:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b716:	6060      	str	r0, [r4, #4]
 800b718:	dd08      	ble.n	800b72c <_svfprintf_r+0xd2c>
 800b71a:	aa22      	add	r2, sp, #136	; 0x88
 800b71c:	4649      	mov	r1, r9
 800b71e:	4650      	mov	r0, sl
 800b720:	f001 fbea 	bl	800cef8 <__ssprint_r>
 800b724:	2800      	cmp	r0, #0
 800b726:	f040 82ff 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b72a:	a925      	add	r1, sp, #148	; 0x94
 800b72c:	3f10      	subs	r7, #16
 800b72e:	460c      	mov	r4, r1
 800b730:	e510      	b.n	800b154 <_svfprintf_r+0x754>
 800b732:	460c      	mov	r4, r1
 800b734:	e536      	b.n	800b1a4 <_svfprintf_r+0x7a4>
 800b736:	bf00      	nop
 800b738:	0800f845 	.word	0x0800f845
 800b73c:	0800f856 	.word	0x0800f856
 800b740:	9b07      	ldr	r3, [sp, #28]
 800b742:	2b65      	cmp	r3, #101	; 0x65
 800b744:	f340 823a 	ble.w	800bbbc <_svfprintf_r+0x11bc>
 800b748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b74c:	2200      	movs	r2, #0
 800b74e:	2300      	movs	r3, #0
 800b750:	f7f5 f9c2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b754:	2800      	cmp	r0, #0
 800b756:	d068      	beq.n	800b82a <_svfprintf_r+0xe2a>
 800b758:	4b6d      	ldr	r3, [pc, #436]	; (800b910 <_svfprintf_r+0xf10>)
 800b75a:	6023      	str	r3, [r4, #0]
 800b75c:	2301      	movs	r3, #1
 800b75e:	441f      	add	r7, r3
 800b760:	6063      	str	r3, [r4, #4]
 800b762:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b764:	9724      	str	r7, [sp, #144]	; 0x90
 800b766:	3301      	adds	r3, #1
 800b768:	2b07      	cmp	r3, #7
 800b76a:	9323      	str	r3, [sp, #140]	; 0x8c
 800b76c:	dc37      	bgt.n	800b7de <_svfprintf_r+0xdde>
 800b76e:	3408      	adds	r4, #8
 800b770:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b772:	9a05      	ldr	r2, [sp, #20]
 800b774:	4293      	cmp	r3, r2
 800b776:	db03      	blt.n	800b780 <_svfprintf_r+0xd80>
 800b778:	f01b 0f01 	tst.w	fp, #1
 800b77c:	f43f ad23 	beq.w	800b1c6 <_svfprintf_r+0x7c6>
 800b780:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b782:	6023      	str	r3, [r4, #0]
 800b784:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b788:	6063      	str	r3, [r4, #4]
 800b78a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b78c:	4413      	add	r3, r2
 800b78e:	9324      	str	r3, [sp, #144]	; 0x90
 800b790:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b792:	3301      	adds	r3, #1
 800b794:	2b07      	cmp	r3, #7
 800b796:	9323      	str	r3, [sp, #140]	; 0x8c
 800b798:	dc2b      	bgt.n	800b7f2 <_svfprintf_r+0xdf2>
 800b79a:	3408      	adds	r4, #8
 800b79c:	9b05      	ldr	r3, [sp, #20]
 800b79e:	1e5d      	subs	r5, r3, #1
 800b7a0:	2d00      	cmp	r5, #0
 800b7a2:	f77f ad10 	ble.w	800b1c6 <_svfprintf_r+0x7c6>
 800b7a6:	4e5b      	ldr	r6, [pc, #364]	; (800b914 <_svfprintf_r+0xf14>)
 800b7a8:	2710      	movs	r7, #16
 800b7aa:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800b7ae:	2d10      	cmp	r5, #16
 800b7b0:	f103 0301 	add.w	r3, r3, #1
 800b7b4:	f104 0108 	add.w	r1, r4, #8
 800b7b8:	6026      	str	r6, [r4, #0]
 800b7ba:	dc24      	bgt.n	800b806 <_svfprintf_r+0xe06>
 800b7bc:	6065      	str	r5, [r4, #4]
 800b7be:	4415      	add	r5, r2
 800b7c0:	9524      	str	r5, [sp, #144]	; 0x90
 800b7c2:	2b07      	cmp	r3, #7
 800b7c4:	9323      	str	r3, [sp, #140]	; 0x8c
 800b7c6:	f340 828e 	ble.w	800bce6 <_svfprintf_r+0x12e6>
 800b7ca:	aa22      	add	r2, sp, #136	; 0x88
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	4650      	mov	r0, sl
 800b7d0:	f001 fb92 	bl	800cef8 <__ssprint_r>
 800b7d4:	2800      	cmp	r0, #0
 800b7d6:	f040 82a7 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b7da:	ac25      	add	r4, sp, #148	; 0x94
 800b7dc:	e4f3      	b.n	800b1c6 <_svfprintf_r+0x7c6>
 800b7de:	aa22      	add	r2, sp, #136	; 0x88
 800b7e0:	4649      	mov	r1, r9
 800b7e2:	4650      	mov	r0, sl
 800b7e4:	f001 fb88 	bl	800cef8 <__ssprint_r>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	f040 829d 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b7ee:	ac25      	add	r4, sp, #148	; 0x94
 800b7f0:	e7be      	b.n	800b770 <_svfprintf_r+0xd70>
 800b7f2:	aa22      	add	r2, sp, #136	; 0x88
 800b7f4:	4649      	mov	r1, r9
 800b7f6:	4650      	mov	r0, sl
 800b7f8:	f001 fb7e 	bl	800cef8 <__ssprint_r>
 800b7fc:	2800      	cmp	r0, #0
 800b7fe:	f040 8293 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b802:	ac25      	add	r4, sp, #148	; 0x94
 800b804:	e7ca      	b.n	800b79c <_svfprintf_r+0xd9c>
 800b806:	3210      	adds	r2, #16
 800b808:	2b07      	cmp	r3, #7
 800b80a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800b80e:	6067      	str	r7, [r4, #4]
 800b810:	dd08      	ble.n	800b824 <_svfprintf_r+0xe24>
 800b812:	aa22      	add	r2, sp, #136	; 0x88
 800b814:	4649      	mov	r1, r9
 800b816:	4650      	mov	r0, sl
 800b818:	f001 fb6e 	bl	800cef8 <__ssprint_r>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	f040 8283 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b822:	a925      	add	r1, sp, #148	; 0x94
 800b824:	3d10      	subs	r5, #16
 800b826:	460c      	mov	r4, r1
 800b828:	e7bf      	b.n	800b7aa <_svfprintf_r+0xdaa>
 800b82a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	dc73      	bgt.n	800b918 <_svfprintf_r+0xf18>
 800b830:	4b37      	ldr	r3, [pc, #220]	; (800b910 <_svfprintf_r+0xf10>)
 800b832:	6023      	str	r3, [r4, #0]
 800b834:	2301      	movs	r3, #1
 800b836:	441f      	add	r7, r3
 800b838:	6063      	str	r3, [r4, #4]
 800b83a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b83c:	9724      	str	r7, [sp, #144]	; 0x90
 800b83e:	3301      	adds	r3, #1
 800b840:	2b07      	cmp	r3, #7
 800b842:	9323      	str	r3, [sp, #140]	; 0x8c
 800b844:	dc3d      	bgt.n	800b8c2 <_svfprintf_r+0xec2>
 800b846:	3408      	adds	r4, #8
 800b848:	9905      	ldr	r1, [sp, #20]
 800b84a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b84c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b84e:	430b      	orrs	r3, r1
 800b850:	f00b 0101 	and.w	r1, fp, #1
 800b854:	430b      	orrs	r3, r1
 800b856:	f43f acb6 	beq.w	800b1c6 <_svfprintf_r+0x7c6>
 800b85a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b860:	6063      	str	r3, [r4, #4]
 800b862:	441a      	add	r2, r3
 800b864:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b866:	9224      	str	r2, [sp, #144]	; 0x90
 800b868:	3301      	adds	r3, #1
 800b86a:	2b07      	cmp	r3, #7
 800b86c:	9323      	str	r3, [sp, #140]	; 0x8c
 800b86e:	dc32      	bgt.n	800b8d6 <_svfprintf_r+0xed6>
 800b870:	3408      	adds	r4, #8
 800b872:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800b874:	2d00      	cmp	r5, #0
 800b876:	da1b      	bge.n	800b8b0 <_svfprintf_r+0xeb0>
 800b878:	4e26      	ldr	r6, [pc, #152]	; (800b914 <_svfprintf_r+0xf14>)
 800b87a:	426d      	negs	r5, r5
 800b87c:	4623      	mov	r3, r4
 800b87e:	2710      	movs	r7, #16
 800b880:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800b884:	2d10      	cmp	r5, #16
 800b886:	f102 0201 	add.w	r2, r2, #1
 800b88a:	f104 0408 	add.w	r4, r4, #8
 800b88e:	601e      	str	r6, [r3, #0]
 800b890:	dc2b      	bgt.n	800b8ea <_svfprintf_r+0xeea>
 800b892:	605d      	str	r5, [r3, #4]
 800b894:	2a07      	cmp	r2, #7
 800b896:	440d      	add	r5, r1
 800b898:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800b89c:	dd08      	ble.n	800b8b0 <_svfprintf_r+0xeb0>
 800b89e:	aa22      	add	r2, sp, #136	; 0x88
 800b8a0:	4649      	mov	r1, r9
 800b8a2:	4650      	mov	r0, sl
 800b8a4:	f001 fb28 	bl	800cef8 <__ssprint_r>
 800b8a8:	2800      	cmp	r0, #0
 800b8aa:	f040 823d 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b8ae:	ac25      	add	r4, sp, #148	; 0x94
 800b8b0:	9b03      	ldr	r3, [sp, #12]
 800b8b2:	6023      	str	r3, [r4, #0]
 800b8b4:	9b05      	ldr	r3, [sp, #20]
 800b8b6:	9a05      	ldr	r2, [sp, #20]
 800b8b8:	6063      	str	r3, [r4, #4]
 800b8ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b8bc:	4413      	add	r3, r2
 800b8be:	9324      	str	r3, [sp, #144]	; 0x90
 800b8c0:	e47a      	b.n	800b1b8 <_svfprintf_r+0x7b8>
 800b8c2:	aa22      	add	r2, sp, #136	; 0x88
 800b8c4:	4649      	mov	r1, r9
 800b8c6:	4650      	mov	r0, sl
 800b8c8:	f001 fb16 	bl	800cef8 <__ssprint_r>
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	f040 822b 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b8d2:	ac25      	add	r4, sp, #148	; 0x94
 800b8d4:	e7b8      	b.n	800b848 <_svfprintf_r+0xe48>
 800b8d6:	aa22      	add	r2, sp, #136	; 0x88
 800b8d8:	4649      	mov	r1, r9
 800b8da:	4650      	mov	r0, sl
 800b8dc:	f001 fb0c 	bl	800cef8 <__ssprint_r>
 800b8e0:	2800      	cmp	r0, #0
 800b8e2:	f040 8221 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b8e6:	ac25      	add	r4, sp, #148	; 0x94
 800b8e8:	e7c3      	b.n	800b872 <_svfprintf_r+0xe72>
 800b8ea:	3110      	adds	r1, #16
 800b8ec:	2a07      	cmp	r2, #7
 800b8ee:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800b8f2:	605f      	str	r7, [r3, #4]
 800b8f4:	dd08      	ble.n	800b908 <_svfprintf_r+0xf08>
 800b8f6:	aa22      	add	r2, sp, #136	; 0x88
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	4650      	mov	r0, sl
 800b8fc:	f001 fafc 	bl	800cef8 <__ssprint_r>
 800b900:	2800      	cmp	r0, #0
 800b902:	f040 8211 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b906:	ac25      	add	r4, sp, #148	; 0x94
 800b908:	3d10      	subs	r5, #16
 800b90a:	4623      	mov	r3, r4
 800b90c:	e7b8      	b.n	800b880 <_svfprintf_r+0xe80>
 800b90e:	bf00      	nop
 800b910:	0800f867 	.word	0x0800f867
 800b914:	0800f879 	.word	0x0800f879
 800b918:	9b05      	ldr	r3, [sp, #20]
 800b91a:	42ab      	cmp	r3, r5
 800b91c:	bfa8      	it	ge
 800b91e:	462b      	movge	r3, r5
 800b920:	2b00      	cmp	r3, #0
 800b922:	4698      	mov	r8, r3
 800b924:	dd0a      	ble.n	800b93c <_svfprintf_r+0xf3c>
 800b926:	9b03      	ldr	r3, [sp, #12]
 800b928:	e9c4 3800 	strd	r3, r8, [r4]
 800b92c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b92e:	3301      	adds	r3, #1
 800b930:	4447      	add	r7, r8
 800b932:	2b07      	cmp	r3, #7
 800b934:	9724      	str	r7, [sp, #144]	; 0x90
 800b936:	9323      	str	r3, [sp, #140]	; 0x8c
 800b938:	dc7b      	bgt.n	800ba32 <_svfprintf_r+0x1032>
 800b93a:	3408      	adds	r4, #8
 800b93c:	f1b8 0f00 	cmp.w	r8, #0
 800b940:	bfac      	ite	ge
 800b942:	eba5 0708 	subge.w	r7, r5, r8
 800b946:	462f      	movlt	r7, r5
 800b948:	2f00      	cmp	r7, #0
 800b94a:	dd1a      	ble.n	800b982 <_svfprintf_r+0xf82>
 800b94c:	f8df 8368 	ldr.w	r8, [pc, #872]	; 800bcb8 <_svfprintf_r+0x12b8>
 800b950:	f8c4 8000 	str.w	r8, [r4]
 800b954:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800b958:	2f10      	cmp	r7, #16
 800b95a:	f103 0301 	add.w	r3, r3, #1
 800b95e:	f104 0108 	add.w	r1, r4, #8
 800b962:	dc70      	bgt.n	800ba46 <_svfprintf_r+0x1046>
 800b964:	6067      	str	r7, [r4, #4]
 800b966:	2b07      	cmp	r3, #7
 800b968:	4417      	add	r7, r2
 800b96a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800b96e:	dd7d      	ble.n	800ba6c <_svfprintf_r+0x106c>
 800b970:	aa22      	add	r2, sp, #136	; 0x88
 800b972:	4649      	mov	r1, r9
 800b974:	4650      	mov	r0, sl
 800b976:	f001 fabf 	bl	800cef8 <__ssprint_r>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	f040 81d4 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800b980:	ac25      	add	r4, sp, #148	; 0x94
 800b982:	9b03      	ldr	r3, [sp, #12]
 800b984:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800b988:	441d      	add	r5, r3
 800b98a:	d00a      	beq.n	800b9a2 <_svfprintf_r+0xfa2>
 800b98c:	9b08      	ldr	r3, [sp, #32]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d16e      	bne.n	800ba70 <_svfprintf_r+0x1070>
 800b992:	2e00      	cmp	r6, #0
 800b994:	d16e      	bne.n	800ba74 <_svfprintf_r+0x1074>
 800b996:	9b03      	ldr	r3, [sp, #12]
 800b998:	9a05      	ldr	r2, [sp, #20]
 800b99a:	4413      	add	r3, r2
 800b99c:	429d      	cmp	r5, r3
 800b99e:	bf28      	it	cs
 800b9a0:	461d      	movcs	r5, r3
 800b9a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800b9a4:	9a05      	ldr	r2, [sp, #20]
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	db02      	blt.n	800b9b0 <_svfprintf_r+0xfb0>
 800b9aa:	f01b 0f01 	tst.w	fp, #1
 800b9ae:	d00e      	beq.n	800b9ce <_svfprintf_r+0xfce>
 800b9b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b9b2:	6023      	str	r3, [r4, #0]
 800b9b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9b8:	6063      	str	r3, [r4, #4]
 800b9ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b9bc:	4413      	add	r3, r2
 800b9be:	9324      	str	r3, [sp, #144]	; 0x90
 800b9c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	2b07      	cmp	r3, #7
 800b9c6:	9323      	str	r3, [sp, #140]	; 0x8c
 800b9c8:	f300 80d2 	bgt.w	800bb70 <_svfprintf_r+0x1170>
 800b9cc:	3408      	adds	r4, #8
 800b9ce:	9b05      	ldr	r3, [sp, #20]
 800b9d0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800b9d2:	9a05      	ldr	r2, [sp, #20]
 800b9d4:	1b9e      	subs	r6, r3, r6
 800b9d6:	9b03      	ldr	r3, [sp, #12]
 800b9d8:	4413      	add	r3, r2
 800b9da:	1b5b      	subs	r3, r3, r5
 800b9dc:	429e      	cmp	r6, r3
 800b9de:	bfa8      	it	ge
 800b9e0:	461e      	movge	r6, r3
 800b9e2:	2e00      	cmp	r6, #0
 800b9e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b9e6:	dd0a      	ble.n	800b9fe <_svfprintf_r+0xffe>
 800b9e8:	4433      	add	r3, r6
 800b9ea:	9324      	str	r3, [sp, #144]	; 0x90
 800b9ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	2b07      	cmp	r3, #7
 800b9f2:	e9c4 5600 	strd	r5, r6, [r4]
 800b9f6:	9323      	str	r3, [sp, #140]	; 0x8c
 800b9f8:	f300 80c4 	bgt.w	800bb84 <_svfprintf_r+0x1184>
 800b9fc:	3408      	adds	r4, #8
 800b9fe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800ba00:	9b05      	ldr	r3, [sp, #20]
 800ba02:	2e00      	cmp	r6, #0
 800ba04:	eba3 0505 	sub.w	r5, r3, r5
 800ba08:	bfa8      	it	ge
 800ba0a:	1bad      	subge	r5, r5, r6
 800ba0c:	2d00      	cmp	r5, #0
 800ba0e:	f77f abda 	ble.w	800b1c6 <_svfprintf_r+0x7c6>
 800ba12:	4ea9      	ldr	r6, [pc, #676]	; (800bcb8 <_svfprintf_r+0x12b8>)
 800ba14:	2710      	movs	r7, #16
 800ba16:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800ba1a:	2d10      	cmp	r5, #16
 800ba1c:	f103 0301 	add.w	r3, r3, #1
 800ba20:	f104 0108 	add.w	r1, r4, #8
 800ba24:	6026      	str	r6, [r4, #0]
 800ba26:	f300 80b7 	bgt.w	800bb98 <_svfprintf_r+0x1198>
 800ba2a:	442a      	add	r2, r5
 800ba2c:	6065      	str	r5, [r4, #4]
 800ba2e:	9224      	str	r2, [sp, #144]	; 0x90
 800ba30:	e6c7      	b.n	800b7c2 <_svfprintf_r+0xdc2>
 800ba32:	aa22      	add	r2, sp, #136	; 0x88
 800ba34:	4649      	mov	r1, r9
 800ba36:	4650      	mov	r0, sl
 800ba38:	f001 fa5e 	bl	800cef8 <__ssprint_r>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	f040 8173 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800ba42:	ac25      	add	r4, sp, #148	; 0x94
 800ba44:	e77a      	b.n	800b93c <_svfprintf_r+0xf3c>
 800ba46:	2010      	movs	r0, #16
 800ba48:	4402      	add	r2, r0
 800ba4a:	2b07      	cmp	r3, #7
 800ba4c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800ba50:	6060      	str	r0, [r4, #4]
 800ba52:	dd08      	ble.n	800ba66 <_svfprintf_r+0x1066>
 800ba54:	aa22      	add	r2, sp, #136	; 0x88
 800ba56:	4649      	mov	r1, r9
 800ba58:	4650      	mov	r0, sl
 800ba5a:	f001 fa4d 	bl	800cef8 <__ssprint_r>
 800ba5e:	2800      	cmp	r0, #0
 800ba60:	f040 8162 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800ba64:	a925      	add	r1, sp, #148	; 0x94
 800ba66:	3f10      	subs	r7, #16
 800ba68:	460c      	mov	r4, r1
 800ba6a:	e771      	b.n	800b950 <_svfprintf_r+0xf50>
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	e788      	b.n	800b982 <_svfprintf_r+0xf82>
 800ba70:	2e00      	cmp	r6, #0
 800ba72:	d04d      	beq.n	800bb10 <_svfprintf_r+0x1110>
 800ba74:	3e01      	subs	r6, #1
 800ba76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ba78:	6023      	str	r3, [r4, #0]
 800ba7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ba7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ba7e:	6063      	str	r3, [r4, #4]
 800ba80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ba82:	4413      	add	r3, r2
 800ba84:	9324      	str	r3, [sp, #144]	; 0x90
 800ba86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba88:	3301      	adds	r3, #1
 800ba8a:	2b07      	cmp	r3, #7
 800ba8c:	9323      	str	r3, [sp, #140]	; 0x8c
 800ba8e:	dc46      	bgt.n	800bb1e <_svfprintf_r+0x111e>
 800ba90:	3408      	adds	r4, #8
 800ba92:	9b03      	ldr	r3, [sp, #12]
 800ba94:	9a05      	ldr	r2, [sp, #20]
 800ba96:	eb03 0802 	add.w	r8, r3, r2
 800ba9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	eba8 0805 	sub.w	r8, r8, r5
 800baa2:	4598      	cmp	r8, r3
 800baa4:	bfa8      	it	ge
 800baa6:	4698      	movge	r8, r3
 800baa8:	f1b8 0f00 	cmp.w	r8, #0
 800baac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800baae:	dd09      	ble.n	800bac4 <_svfprintf_r+0x10c4>
 800bab0:	4443      	add	r3, r8
 800bab2:	9324      	str	r3, [sp, #144]	; 0x90
 800bab4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bab6:	3301      	adds	r3, #1
 800bab8:	2b07      	cmp	r3, #7
 800baba:	e9c4 5800 	strd	r5, r8, [r4]
 800babe:	9323      	str	r3, [sp, #140]	; 0x8c
 800bac0:	dc37      	bgt.n	800bb32 <_svfprintf_r+0x1132>
 800bac2:	3408      	adds	r4, #8
 800bac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac6:	781f      	ldrb	r7, [r3, #0]
 800bac8:	f1b8 0f00 	cmp.w	r8, #0
 800bacc:	bfa8      	it	ge
 800bace:	eba7 0708 	subge.w	r7, r7, r8
 800bad2:	2f00      	cmp	r7, #0
 800bad4:	dd18      	ble.n	800bb08 <_svfprintf_r+0x1108>
 800bad6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bada:	4877      	ldr	r0, [pc, #476]	; (800bcb8 <_svfprintf_r+0x12b8>)
 800badc:	6020      	str	r0, [r4, #0]
 800bade:	2f10      	cmp	r7, #16
 800bae0:	f103 0301 	add.w	r3, r3, #1
 800bae4:	f104 0108 	add.w	r1, r4, #8
 800bae8:	dc2d      	bgt.n	800bb46 <_svfprintf_r+0x1146>
 800baea:	443a      	add	r2, r7
 800baec:	2b07      	cmp	r3, #7
 800baee:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800baf2:	6067      	str	r7, [r4, #4]
 800baf4:	dd3a      	ble.n	800bb6c <_svfprintf_r+0x116c>
 800baf6:	aa22      	add	r2, sp, #136	; 0x88
 800baf8:	4649      	mov	r1, r9
 800bafa:	4650      	mov	r0, sl
 800bafc:	f001 f9fc 	bl	800cef8 <__ssprint_r>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	f040 8111 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800bb06:	ac25      	add	r4, sp, #148	; 0x94
 800bb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	441d      	add	r5, r3
 800bb0e:	e73d      	b.n	800b98c <_svfprintf_r+0xf8c>
 800bb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb12:	3b01      	subs	r3, #1
 800bb14:	9309      	str	r3, [sp, #36]	; 0x24
 800bb16:	9b08      	ldr	r3, [sp, #32]
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	9308      	str	r3, [sp, #32]
 800bb1c:	e7ab      	b.n	800ba76 <_svfprintf_r+0x1076>
 800bb1e:	aa22      	add	r2, sp, #136	; 0x88
 800bb20:	4649      	mov	r1, r9
 800bb22:	4650      	mov	r0, sl
 800bb24:	f001 f9e8 	bl	800cef8 <__ssprint_r>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	f040 80fd 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800bb2e:	ac25      	add	r4, sp, #148	; 0x94
 800bb30:	e7af      	b.n	800ba92 <_svfprintf_r+0x1092>
 800bb32:	aa22      	add	r2, sp, #136	; 0x88
 800bb34:	4649      	mov	r1, r9
 800bb36:	4650      	mov	r0, sl
 800bb38:	f001 f9de 	bl	800cef8 <__ssprint_r>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	f040 80f3 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800bb42:	ac25      	add	r4, sp, #148	; 0x94
 800bb44:	e7be      	b.n	800bac4 <_svfprintf_r+0x10c4>
 800bb46:	2010      	movs	r0, #16
 800bb48:	4402      	add	r2, r0
 800bb4a:	2b07      	cmp	r3, #7
 800bb4c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800bb50:	6060      	str	r0, [r4, #4]
 800bb52:	dd08      	ble.n	800bb66 <_svfprintf_r+0x1166>
 800bb54:	aa22      	add	r2, sp, #136	; 0x88
 800bb56:	4649      	mov	r1, r9
 800bb58:	4650      	mov	r0, sl
 800bb5a:	f001 f9cd 	bl	800cef8 <__ssprint_r>
 800bb5e:	2800      	cmp	r0, #0
 800bb60:	f040 80e2 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800bb64:	a925      	add	r1, sp, #148	; 0x94
 800bb66:	3f10      	subs	r7, #16
 800bb68:	460c      	mov	r4, r1
 800bb6a:	e7b4      	b.n	800bad6 <_svfprintf_r+0x10d6>
 800bb6c:	460c      	mov	r4, r1
 800bb6e:	e7cb      	b.n	800bb08 <_svfprintf_r+0x1108>
 800bb70:	aa22      	add	r2, sp, #136	; 0x88
 800bb72:	4649      	mov	r1, r9
 800bb74:	4650      	mov	r0, sl
 800bb76:	f001 f9bf 	bl	800cef8 <__ssprint_r>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	f040 80d4 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800bb80:	ac25      	add	r4, sp, #148	; 0x94
 800bb82:	e724      	b.n	800b9ce <_svfprintf_r+0xfce>
 800bb84:	aa22      	add	r2, sp, #136	; 0x88
 800bb86:	4649      	mov	r1, r9
 800bb88:	4650      	mov	r0, sl
 800bb8a:	f001 f9b5 	bl	800cef8 <__ssprint_r>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	f040 80ca 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800bb94:	ac25      	add	r4, sp, #148	; 0x94
 800bb96:	e732      	b.n	800b9fe <_svfprintf_r+0xffe>
 800bb98:	3210      	adds	r2, #16
 800bb9a:	2b07      	cmp	r3, #7
 800bb9c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800bba0:	6067      	str	r7, [r4, #4]
 800bba2:	dd08      	ble.n	800bbb6 <_svfprintf_r+0x11b6>
 800bba4:	aa22      	add	r2, sp, #136	; 0x88
 800bba6:	4649      	mov	r1, r9
 800bba8:	4650      	mov	r0, sl
 800bbaa:	f001 f9a5 	bl	800cef8 <__ssprint_r>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	f040 80ba 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800bbb4:	a925      	add	r1, sp, #148	; 0x94
 800bbb6:	3d10      	subs	r5, #16
 800bbb8:	460c      	mov	r4, r1
 800bbba:	e72c      	b.n	800ba16 <_svfprintf_r+0x1016>
 800bbbc:	9a05      	ldr	r2, [sp, #20]
 800bbbe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bbc0:	2a01      	cmp	r2, #1
 800bbc2:	9a03      	ldr	r2, [sp, #12]
 800bbc4:	6022      	str	r2, [r4, #0]
 800bbc6:	f107 0701 	add.w	r7, r7, #1
 800bbca:	f103 0301 	add.w	r3, r3, #1
 800bbce:	f04f 0201 	mov.w	r2, #1
 800bbd2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800bbd6:	f104 0508 	add.w	r5, r4, #8
 800bbda:	6062      	str	r2, [r4, #4]
 800bbdc:	dc02      	bgt.n	800bbe4 <_svfprintf_r+0x11e4>
 800bbde:	f01b 0f01 	tst.w	fp, #1
 800bbe2:	d07b      	beq.n	800bcdc <_svfprintf_r+0x12dc>
 800bbe4:	2b07      	cmp	r3, #7
 800bbe6:	dd08      	ble.n	800bbfa <_svfprintf_r+0x11fa>
 800bbe8:	aa22      	add	r2, sp, #136	; 0x88
 800bbea:	4649      	mov	r1, r9
 800bbec:	4650      	mov	r0, sl
 800bbee:	f001 f983 	bl	800cef8 <__ssprint_r>
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	f040 8098 	bne.w	800bd28 <_svfprintf_r+0x1328>
 800bbf8:	ad25      	add	r5, sp, #148	; 0x94
 800bbfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bbfc:	602b      	str	r3, [r5, #0]
 800bbfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc02:	606b      	str	r3, [r5, #4]
 800bc04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bc06:	4413      	add	r3, r2
 800bc08:	9324      	str	r3, [sp, #144]	; 0x90
 800bc0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	2b07      	cmp	r3, #7
 800bc10:	9323      	str	r3, [sp, #140]	; 0x8c
 800bc12:	dc32      	bgt.n	800bc7a <_svfprintf_r+0x127a>
 800bc14:	3508      	adds	r5, #8
 800bc16:	9b05      	ldr	r3, [sp, #20]
 800bc18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc1c:	1e5c      	subs	r4, r3, #1
 800bc1e:	2200      	movs	r2, #0
 800bc20:	2300      	movs	r3, #0
 800bc22:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 800bc26:	f7f4 ff57 	bl	8000ad8 <__aeabi_dcmpeq>
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d12e      	bne.n	800bc8c <_svfprintf_r+0x128c>
 800bc2e:	9b03      	ldr	r3, [sp, #12]
 800bc30:	3301      	adds	r3, #1
 800bc32:	e9c5 3400 	strd	r3, r4, [r5]
 800bc36:	9b05      	ldr	r3, [sp, #20]
 800bc38:	3701      	adds	r7, #1
 800bc3a:	3e01      	subs	r6, #1
 800bc3c:	441e      	add	r6, r3
 800bc3e:	2f07      	cmp	r7, #7
 800bc40:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 800bc44:	dd4d      	ble.n	800bce2 <_svfprintf_r+0x12e2>
 800bc46:	aa22      	add	r2, sp, #136	; 0x88
 800bc48:	4649      	mov	r1, r9
 800bc4a:	4650      	mov	r0, sl
 800bc4c:	f001 f954 	bl	800cef8 <__ssprint_r>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	d169      	bne.n	800bd28 <_svfprintf_r+0x1328>
 800bc54:	ad25      	add	r5, sp, #148	; 0x94
 800bc56:	ab1e      	add	r3, sp, #120	; 0x78
 800bc58:	602b      	str	r3, [r5, #0]
 800bc5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bc5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bc5e:	606b      	str	r3, [r5, #4]
 800bc60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bc62:	4413      	add	r3, r2
 800bc64:	9324      	str	r3, [sp, #144]	; 0x90
 800bc66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc68:	3301      	adds	r3, #1
 800bc6a:	2b07      	cmp	r3, #7
 800bc6c:	9323      	str	r3, [sp, #140]	; 0x8c
 800bc6e:	f73f adac 	bgt.w	800b7ca <_svfprintf_r+0xdca>
 800bc72:	f105 0408 	add.w	r4, r5, #8
 800bc76:	f7ff baa6 	b.w	800b1c6 <_svfprintf_r+0x7c6>
 800bc7a:	aa22      	add	r2, sp, #136	; 0x88
 800bc7c:	4649      	mov	r1, r9
 800bc7e:	4650      	mov	r0, sl
 800bc80:	f001 f93a 	bl	800cef8 <__ssprint_r>
 800bc84:	2800      	cmp	r0, #0
 800bc86:	d14f      	bne.n	800bd28 <_svfprintf_r+0x1328>
 800bc88:	ad25      	add	r5, sp, #148	; 0x94
 800bc8a:	e7c4      	b.n	800bc16 <_svfprintf_r+0x1216>
 800bc8c:	2c00      	cmp	r4, #0
 800bc8e:	dde2      	ble.n	800bc56 <_svfprintf_r+0x1256>
 800bc90:	4e09      	ldr	r6, [pc, #36]	; (800bcb8 <_svfprintf_r+0x12b8>)
 800bc92:	2710      	movs	r7, #16
 800bc94:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bc98:	2c10      	cmp	r4, #16
 800bc9a:	f103 0301 	add.w	r3, r3, #1
 800bc9e:	f105 0108 	add.w	r1, r5, #8
 800bca2:	602e      	str	r6, [r5, #0]
 800bca4:	dc0a      	bgt.n	800bcbc <_svfprintf_r+0x12bc>
 800bca6:	606c      	str	r4, [r5, #4]
 800bca8:	2b07      	cmp	r3, #7
 800bcaa:	4414      	add	r4, r2
 800bcac:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800bcb0:	dcc9      	bgt.n	800bc46 <_svfprintf_r+0x1246>
 800bcb2:	460d      	mov	r5, r1
 800bcb4:	e7cf      	b.n	800bc56 <_svfprintf_r+0x1256>
 800bcb6:	bf00      	nop
 800bcb8:	0800f879 	.word	0x0800f879
 800bcbc:	3210      	adds	r2, #16
 800bcbe:	2b07      	cmp	r3, #7
 800bcc0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800bcc4:	606f      	str	r7, [r5, #4]
 800bcc6:	dd06      	ble.n	800bcd6 <_svfprintf_r+0x12d6>
 800bcc8:	aa22      	add	r2, sp, #136	; 0x88
 800bcca:	4649      	mov	r1, r9
 800bccc:	4650      	mov	r0, sl
 800bcce:	f001 f913 	bl	800cef8 <__ssprint_r>
 800bcd2:	bb48      	cbnz	r0, 800bd28 <_svfprintf_r+0x1328>
 800bcd4:	a925      	add	r1, sp, #148	; 0x94
 800bcd6:	3c10      	subs	r4, #16
 800bcd8:	460d      	mov	r5, r1
 800bcda:	e7db      	b.n	800bc94 <_svfprintf_r+0x1294>
 800bcdc:	2b07      	cmp	r3, #7
 800bcde:	ddba      	ble.n	800bc56 <_svfprintf_r+0x1256>
 800bce0:	e7b1      	b.n	800bc46 <_svfprintf_r+0x1246>
 800bce2:	3508      	adds	r5, #8
 800bce4:	e7b7      	b.n	800bc56 <_svfprintf_r+0x1256>
 800bce6:	460c      	mov	r4, r1
 800bce8:	f7ff ba6d 	b.w	800b1c6 <_svfprintf_r+0x7c6>
 800bcec:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800bcf0:	1a9d      	subs	r5, r3, r2
 800bcf2:	2d00      	cmp	r5, #0
 800bcf4:	f77f aa6b 	ble.w	800b1ce <_svfprintf_r+0x7ce>
 800bcf8:	4e37      	ldr	r6, [pc, #220]	; (800bdd8 <_svfprintf_r+0x13d8>)
 800bcfa:	2710      	movs	r7, #16
 800bcfc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bd00:	2d10      	cmp	r5, #16
 800bd02:	f103 0301 	add.w	r3, r3, #1
 800bd06:	6026      	str	r6, [r4, #0]
 800bd08:	dc18      	bgt.n	800bd3c <_svfprintf_r+0x133c>
 800bd0a:	6065      	str	r5, [r4, #4]
 800bd0c:	2b07      	cmp	r3, #7
 800bd0e:	4415      	add	r5, r2
 800bd10:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800bd14:	f77f aa5b 	ble.w	800b1ce <_svfprintf_r+0x7ce>
 800bd18:	aa22      	add	r2, sp, #136	; 0x88
 800bd1a:	4649      	mov	r1, r9
 800bd1c:	4650      	mov	r0, sl
 800bd1e:	f001 f8eb 	bl	800cef8 <__ssprint_r>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	f43f aa53 	beq.w	800b1ce <_svfprintf_r+0x7ce>
 800bd28:	9b04      	ldr	r3, [sp, #16]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f43f a874 	beq.w	800ae18 <_svfprintf_r+0x418>
 800bd30:	4619      	mov	r1, r3
 800bd32:	4650      	mov	r0, sl
 800bd34:	f7fd fb88 	bl	8009448 <_free_r>
 800bd38:	f7ff b86e 	b.w	800ae18 <_svfprintf_r+0x418>
 800bd3c:	3210      	adds	r2, #16
 800bd3e:	2b07      	cmp	r3, #7
 800bd40:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800bd44:	6067      	str	r7, [r4, #4]
 800bd46:	dc02      	bgt.n	800bd4e <_svfprintf_r+0x134e>
 800bd48:	3408      	adds	r4, #8
 800bd4a:	3d10      	subs	r5, #16
 800bd4c:	e7d6      	b.n	800bcfc <_svfprintf_r+0x12fc>
 800bd4e:	aa22      	add	r2, sp, #136	; 0x88
 800bd50:	4649      	mov	r1, r9
 800bd52:	4650      	mov	r0, sl
 800bd54:	f001 f8d0 	bl	800cef8 <__ssprint_r>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d1e5      	bne.n	800bd28 <_svfprintf_r+0x1328>
 800bd5c:	ac25      	add	r4, sp, #148	; 0x94
 800bd5e:	e7f4      	b.n	800bd4a <_svfprintf_r+0x134a>
 800bd60:	9904      	ldr	r1, [sp, #16]
 800bd62:	4650      	mov	r0, sl
 800bd64:	f7fd fb70 	bl	8009448 <_free_r>
 800bd68:	f7ff ba49 	b.w	800b1fe <_svfprintf_r+0x7fe>
 800bd6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f43f a852 	beq.w	800ae18 <_svfprintf_r+0x418>
 800bd74:	aa22      	add	r2, sp, #136	; 0x88
 800bd76:	4649      	mov	r1, r9
 800bd78:	4650      	mov	r0, sl
 800bd7a:	f001 f8bd 	bl	800cef8 <__ssprint_r>
 800bd7e:	f7ff b84b 	b.w	800ae18 <_svfprintf_r+0x418>
 800bd82:	ea55 0206 	orrs.w	r2, r5, r6
 800bd86:	f8cd b010 	str.w	fp, [sp, #16]
 800bd8a:	f43f ab5e 	beq.w	800b44a <_svfprintf_r+0xa4a>
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	f43f abff 	beq.w	800b592 <_svfprintf_r+0xb92>
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	ab4e      	add	r3, sp, #312	; 0x138
 800bd98:	9303      	str	r3, [sp, #12]
 800bd9a:	f43f ac4d 	beq.w	800b638 <_svfprintf_r+0xc38>
 800bd9e:	9a03      	ldr	r2, [sp, #12]
 800bda0:	f005 0307 	and.w	r3, r5, #7
 800bda4:	4611      	mov	r1, r2
 800bda6:	3330      	adds	r3, #48	; 0x30
 800bda8:	f801 3d01 	strb.w	r3, [r1, #-1]!
 800bdac:	08ed      	lsrs	r5, r5, #3
 800bdae:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 800bdb2:	08f6      	lsrs	r6, r6, #3
 800bdb4:	9103      	str	r1, [sp, #12]
 800bdb6:	ea55 0106 	orrs.w	r1, r5, r6
 800bdba:	d1f0      	bne.n	800bd9e <_svfprintf_r+0x139e>
 800bdbc:	9904      	ldr	r1, [sp, #16]
 800bdbe:	07c9      	lsls	r1, r1, #31
 800bdc0:	f57f ac2a 	bpl.w	800b618 <_svfprintf_r+0xc18>
 800bdc4:	2b30      	cmp	r3, #48	; 0x30
 800bdc6:	f43f ac27 	beq.w	800b618 <_svfprintf_r+0xc18>
 800bdca:	9903      	ldr	r1, [sp, #12]
 800bdcc:	2330      	movs	r3, #48	; 0x30
 800bdce:	f801 3c01 	strb.w	r3, [r1, #-1]
 800bdd2:	1e93      	subs	r3, r2, #2
 800bdd4:	9303      	str	r3, [sp, #12]
 800bdd6:	e41f      	b.n	800b618 <_svfprintf_r+0xc18>
 800bdd8:	0800f869 	.word	0x0800f869

0800bddc <_fclose_r>:
 800bddc:	b570      	push	{r4, r5, r6, lr}
 800bdde:	4606      	mov	r6, r0
 800bde0:	460c      	mov	r4, r1
 800bde2:	b911      	cbnz	r1, 800bdea <_fclose_r+0xe>
 800bde4:	2500      	movs	r5, #0
 800bde6:	4628      	mov	r0, r5
 800bde8:	bd70      	pop	{r4, r5, r6, pc}
 800bdea:	b118      	cbz	r0, 800bdf4 <_fclose_r+0x18>
 800bdec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bdee:	b90b      	cbnz	r3, 800bdf4 <_fclose_r+0x18>
 800bdf0:	f7fd f982 	bl	80090f8 <__sinit>
 800bdf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdf6:	07d8      	lsls	r0, r3, #31
 800bdf8:	d405      	bmi.n	800be06 <_fclose_r+0x2a>
 800bdfa:	89a3      	ldrh	r3, [r4, #12]
 800bdfc:	0599      	lsls	r1, r3, #22
 800bdfe:	d402      	bmi.n	800be06 <_fclose_r+0x2a>
 800be00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be02:	f7fd faa5 	bl	8009350 <__retarget_lock_acquire_recursive>
 800be06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be0a:	b93b      	cbnz	r3, 800be1c <_fclose_r+0x40>
 800be0c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800be0e:	f015 0501 	ands.w	r5, r5, #1
 800be12:	d1e7      	bne.n	800bde4 <_fclose_r+0x8>
 800be14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be16:	f7fd fa9c 	bl	8009352 <__retarget_lock_release_recursive>
 800be1a:	e7e4      	b.n	800bde6 <_fclose_r+0xa>
 800be1c:	4621      	mov	r1, r4
 800be1e:	4630      	mov	r0, r6
 800be20:	f000 f834 	bl	800be8c <__sflush_r>
 800be24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800be26:	4605      	mov	r5, r0
 800be28:	b133      	cbz	r3, 800be38 <_fclose_r+0x5c>
 800be2a:	69e1      	ldr	r1, [r4, #28]
 800be2c:	4630      	mov	r0, r6
 800be2e:	4798      	blx	r3
 800be30:	2800      	cmp	r0, #0
 800be32:	bfb8      	it	lt
 800be34:	f04f 35ff 	movlt.w	r5, #4294967295
 800be38:	89a3      	ldrh	r3, [r4, #12]
 800be3a:	061a      	lsls	r2, r3, #24
 800be3c:	d503      	bpl.n	800be46 <_fclose_r+0x6a>
 800be3e:	6921      	ldr	r1, [r4, #16]
 800be40:	4630      	mov	r0, r6
 800be42:	f7fd fb01 	bl	8009448 <_free_r>
 800be46:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800be48:	b141      	cbz	r1, 800be5c <_fclose_r+0x80>
 800be4a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800be4e:	4299      	cmp	r1, r3
 800be50:	d002      	beq.n	800be58 <_fclose_r+0x7c>
 800be52:	4630      	mov	r0, r6
 800be54:	f7fd faf8 	bl	8009448 <_free_r>
 800be58:	2300      	movs	r3, #0
 800be5a:	6323      	str	r3, [r4, #48]	; 0x30
 800be5c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800be5e:	b121      	cbz	r1, 800be6a <_fclose_r+0x8e>
 800be60:	4630      	mov	r0, r6
 800be62:	f7fd faf1 	bl	8009448 <_free_r>
 800be66:	2300      	movs	r3, #0
 800be68:	6463      	str	r3, [r4, #68]	; 0x44
 800be6a:	f7fd f939 	bl	80090e0 <__sfp_lock_acquire>
 800be6e:	2300      	movs	r3, #0
 800be70:	81a3      	strh	r3, [r4, #12]
 800be72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be74:	07db      	lsls	r3, r3, #31
 800be76:	d402      	bmi.n	800be7e <_fclose_r+0xa2>
 800be78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be7a:	f7fd fa6a 	bl	8009352 <__retarget_lock_release_recursive>
 800be7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be80:	f7fd fa65 	bl	800934e <__retarget_lock_close_recursive>
 800be84:	f7fd f932 	bl	80090ec <__sfp_lock_release>
 800be88:	e7ad      	b.n	800bde6 <_fclose_r+0xa>
	...

0800be8c <__sflush_r>:
 800be8c:	898b      	ldrh	r3, [r1, #12]
 800be8e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be96:	4605      	mov	r5, r0
 800be98:	0718      	lsls	r0, r3, #28
 800be9a:	460c      	mov	r4, r1
 800be9c:	d45f      	bmi.n	800bf5e <__sflush_r+0xd2>
 800be9e:	684b      	ldr	r3, [r1, #4]
 800bea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	818a      	strh	r2, [r1, #12]
 800bea8:	dc05      	bgt.n	800beb6 <__sflush_r+0x2a>
 800beaa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800beac:	2b00      	cmp	r3, #0
 800beae:	dc02      	bgt.n	800beb6 <__sflush_r+0x2a>
 800beb0:	2000      	movs	r0, #0
 800beb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800beb8:	2e00      	cmp	r6, #0
 800beba:	d0f9      	beq.n	800beb0 <__sflush_r+0x24>
 800bebc:	2300      	movs	r3, #0
 800bebe:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bec2:	682f      	ldr	r7, [r5, #0]
 800bec4:	69e1      	ldr	r1, [r4, #28]
 800bec6:	602b      	str	r3, [r5, #0]
 800bec8:	d036      	beq.n	800bf38 <__sflush_r+0xac>
 800beca:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800becc:	89a3      	ldrh	r3, [r4, #12]
 800bece:	075a      	lsls	r2, r3, #29
 800bed0:	d505      	bpl.n	800bede <__sflush_r+0x52>
 800bed2:	6863      	ldr	r3, [r4, #4]
 800bed4:	1ac0      	subs	r0, r0, r3
 800bed6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bed8:	b10b      	cbz	r3, 800bede <__sflush_r+0x52>
 800beda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bedc:	1ac0      	subs	r0, r0, r3
 800bede:	2300      	movs	r3, #0
 800bee0:	4602      	mov	r2, r0
 800bee2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bee4:	69e1      	ldr	r1, [r4, #28]
 800bee6:	4628      	mov	r0, r5
 800bee8:	47b0      	blx	r6
 800beea:	1c43      	adds	r3, r0, #1
 800beec:	89a3      	ldrh	r3, [r4, #12]
 800beee:	d106      	bne.n	800befe <__sflush_r+0x72>
 800bef0:	6829      	ldr	r1, [r5, #0]
 800bef2:	291d      	cmp	r1, #29
 800bef4:	d82f      	bhi.n	800bf56 <__sflush_r+0xca>
 800bef6:	4a2b      	ldr	r2, [pc, #172]	; (800bfa4 <__sflush_r+0x118>)
 800bef8:	410a      	asrs	r2, r1
 800befa:	07d6      	lsls	r6, r2, #31
 800befc:	d42b      	bmi.n	800bf56 <__sflush_r+0xca>
 800befe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf02:	b21b      	sxth	r3, r3
 800bf04:	2200      	movs	r2, #0
 800bf06:	6062      	str	r2, [r4, #4]
 800bf08:	04d9      	lsls	r1, r3, #19
 800bf0a:	6922      	ldr	r2, [r4, #16]
 800bf0c:	81a3      	strh	r3, [r4, #12]
 800bf0e:	6022      	str	r2, [r4, #0]
 800bf10:	d504      	bpl.n	800bf1c <__sflush_r+0x90>
 800bf12:	1c42      	adds	r2, r0, #1
 800bf14:	d101      	bne.n	800bf1a <__sflush_r+0x8e>
 800bf16:	682b      	ldr	r3, [r5, #0]
 800bf18:	b903      	cbnz	r3, 800bf1c <__sflush_r+0x90>
 800bf1a:	6520      	str	r0, [r4, #80]	; 0x50
 800bf1c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bf1e:	602f      	str	r7, [r5, #0]
 800bf20:	2900      	cmp	r1, #0
 800bf22:	d0c5      	beq.n	800beb0 <__sflush_r+0x24>
 800bf24:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bf28:	4299      	cmp	r1, r3
 800bf2a:	d002      	beq.n	800bf32 <__sflush_r+0xa6>
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	f7fd fa8b 	bl	8009448 <_free_r>
 800bf32:	2000      	movs	r0, #0
 800bf34:	6320      	str	r0, [r4, #48]	; 0x30
 800bf36:	e7bc      	b.n	800beb2 <__sflush_r+0x26>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	47b0      	blx	r6
 800bf3e:	1c41      	adds	r1, r0, #1
 800bf40:	d1c4      	bne.n	800becc <__sflush_r+0x40>
 800bf42:	682b      	ldr	r3, [r5, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d0c1      	beq.n	800becc <__sflush_r+0x40>
 800bf48:	2b1d      	cmp	r3, #29
 800bf4a:	d001      	beq.n	800bf50 <__sflush_r+0xc4>
 800bf4c:	2b16      	cmp	r3, #22
 800bf4e:	d101      	bne.n	800bf54 <__sflush_r+0xc8>
 800bf50:	602f      	str	r7, [r5, #0]
 800bf52:	e7ad      	b.n	800beb0 <__sflush_r+0x24>
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf5a:	81a3      	strh	r3, [r4, #12]
 800bf5c:	e7a9      	b.n	800beb2 <__sflush_r+0x26>
 800bf5e:	690f      	ldr	r7, [r1, #16]
 800bf60:	2f00      	cmp	r7, #0
 800bf62:	d0a5      	beq.n	800beb0 <__sflush_r+0x24>
 800bf64:	079b      	lsls	r3, r3, #30
 800bf66:	680e      	ldr	r6, [r1, #0]
 800bf68:	bf08      	it	eq
 800bf6a:	694b      	ldreq	r3, [r1, #20]
 800bf6c:	600f      	str	r7, [r1, #0]
 800bf6e:	bf18      	it	ne
 800bf70:	2300      	movne	r3, #0
 800bf72:	eba6 0807 	sub.w	r8, r6, r7
 800bf76:	608b      	str	r3, [r1, #8]
 800bf78:	f1b8 0f00 	cmp.w	r8, #0
 800bf7c:	dd98      	ble.n	800beb0 <__sflush_r+0x24>
 800bf7e:	69e1      	ldr	r1, [r4, #28]
 800bf80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf82:	4643      	mov	r3, r8
 800bf84:	463a      	mov	r2, r7
 800bf86:	4628      	mov	r0, r5
 800bf88:	47b0      	blx	r6
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	dc06      	bgt.n	800bf9c <__sflush_r+0x110>
 800bf8e:	89a3      	ldrh	r3, [r4, #12]
 800bf90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf94:	81a3      	strh	r3, [r4, #12]
 800bf96:	f04f 30ff 	mov.w	r0, #4294967295
 800bf9a:	e78a      	b.n	800beb2 <__sflush_r+0x26>
 800bf9c:	4407      	add	r7, r0
 800bf9e:	eba8 0800 	sub.w	r8, r8, r0
 800bfa2:	e7e9      	b.n	800bf78 <__sflush_r+0xec>
 800bfa4:	dfbffffe 	.word	0xdfbffffe

0800bfa8 <_fflush_r>:
 800bfa8:	b538      	push	{r3, r4, r5, lr}
 800bfaa:	460c      	mov	r4, r1
 800bfac:	4605      	mov	r5, r0
 800bfae:	b118      	cbz	r0, 800bfb8 <_fflush_r+0x10>
 800bfb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bfb2:	b90b      	cbnz	r3, 800bfb8 <_fflush_r+0x10>
 800bfb4:	f7fd f8a0 	bl	80090f8 <__sinit>
 800bfb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfbc:	b1bb      	cbz	r3, 800bfee <_fflush_r+0x46>
 800bfbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfc0:	07d0      	lsls	r0, r2, #31
 800bfc2:	d404      	bmi.n	800bfce <_fflush_r+0x26>
 800bfc4:	0599      	lsls	r1, r3, #22
 800bfc6:	d402      	bmi.n	800bfce <_fflush_r+0x26>
 800bfc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfca:	f7fd f9c1 	bl	8009350 <__retarget_lock_acquire_recursive>
 800bfce:	4628      	mov	r0, r5
 800bfd0:	4621      	mov	r1, r4
 800bfd2:	f7ff ff5b 	bl	800be8c <__sflush_r>
 800bfd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfd8:	07da      	lsls	r2, r3, #31
 800bfda:	4605      	mov	r5, r0
 800bfdc:	d405      	bmi.n	800bfea <_fflush_r+0x42>
 800bfde:	89a3      	ldrh	r3, [r4, #12]
 800bfe0:	059b      	lsls	r3, r3, #22
 800bfe2:	d402      	bmi.n	800bfea <_fflush_r+0x42>
 800bfe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfe6:	f7fd f9b4 	bl	8009352 <__retarget_lock_release_recursive>
 800bfea:	4628      	mov	r0, r5
 800bfec:	bd38      	pop	{r3, r4, r5, pc}
 800bfee:	461d      	mov	r5, r3
 800bff0:	e7fb      	b.n	800bfea <_fflush_r+0x42>

0800bff2 <strncpy>:
 800bff2:	b510      	push	{r4, lr}
 800bff4:	3901      	subs	r1, #1
 800bff6:	4603      	mov	r3, r0
 800bff8:	b132      	cbz	r2, 800c008 <strncpy+0x16>
 800bffa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bffe:	f803 4b01 	strb.w	r4, [r3], #1
 800c002:	3a01      	subs	r2, #1
 800c004:	2c00      	cmp	r4, #0
 800c006:	d1f7      	bne.n	800bff8 <strncpy+0x6>
 800c008:	441a      	add	r2, r3
 800c00a:	2100      	movs	r1, #0
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d100      	bne.n	800c012 <strncpy+0x20>
 800c010:	bd10      	pop	{r4, pc}
 800c012:	f803 1b01 	strb.w	r1, [r3], #1
 800c016:	e7f9      	b.n	800c00c <strncpy+0x1a>

0800c018 <_localeconv_r>:
 800c018:	4800      	ldr	r0, [pc, #0]	; (800c01c <_localeconv_r+0x4>)
 800c01a:	4770      	bx	lr
 800c01c:	200001f8 	.word	0x200001f8

0800c020 <_sbrk_r>:
 800c020:	b538      	push	{r3, r4, r5, lr}
 800c022:	4d06      	ldr	r5, [pc, #24]	; (800c03c <_sbrk_r+0x1c>)
 800c024:	2300      	movs	r3, #0
 800c026:	4604      	mov	r4, r0
 800c028:	4608      	mov	r0, r1
 800c02a:	602b      	str	r3, [r5, #0]
 800c02c:	f7f5 fbd4 	bl	80017d8 <_sbrk>
 800c030:	1c43      	adds	r3, r0, #1
 800c032:	d102      	bne.n	800c03a <_sbrk_r+0x1a>
 800c034:	682b      	ldr	r3, [r5, #0]
 800c036:	b103      	cbz	r3, 800c03a <_sbrk_r+0x1a>
 800c038:	6023      	str	r3, [r4, #0]
 800c03a:	bd38      	pop	{r3, r4, r5, pc}
 800c03c:	20001e04 	.word	0x20001e04

0800c040 <__libc_fini_array>:
 800c040:	b538      	push	{r3, r4, r5, lr}
 800c042:	4d07      	ldr	r5, [pc, #28]	; (800c060 <__libc_fini_array+0x20>)
 800c044:	4c07      	ldr	r4, [pc, #28]	; (800c064 <__libc_fini_array+0x24>)
 800c046:	1b64      	subs	r4, r4, r5
 800c048:	10a4      	asrs	r4, r4, #2
 800c04a:	b91c      	cbnz	r4, 800c054 <__libc_fini_array+0x14>
 800c04c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c050:	f003 ba1c 	b.w	800f48c <_fini>
 800c054:	3c01      	subs	r4, #1
 800c056:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800c05a:	4798      	blx	r3
 800c05c:	e7f5      	b.n	800c04a <__libc_fini_array+0xa>
 800c05e:	bf00      	nop
 800c060:	0800fb38 	.word	0x0800fb38
 800c064:	0800fb3c 	.word	0x0800fb3c

0800c068 <sysconf>:
 800c068:	2808      	cmp	r0, #8
 800c06a:	b508      	push	{r3, lr}
 800c06c:	d006      	beq.n	800c07c <sysconf+0x14>
 800c06e:	f7fd f943 	bl	80092f8 <__errno>
 800c072:	2316      	movs	r3, #22
 800c074:	6003      	str	r3, [r0, #0]
 800c076:	f04f 30ff 	mov.w	r0, #4294967295
 800c07a:	bd08      	pop	{r3, pc}
 800c07c:	2080      	movs	r0, #128	; 0x80
 800c07e:	e7fc      	b.n	800c07a <sysconf+0x12>

0800c080 <frexp>:
 800c080:	b570      	push	{r4, r5, r6, lr}
 800c082:	2100      	movs	r1, #0
 800c084:	ec55 4b10 	vmov	r4, r5, d0
 800c088:	6001      	str	r1, [r0, #0]
 800c08a:	4916      	ldr	r1, [pc, #88]	; (800c0e4 <frexp+0x64>)
 800c08c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800c090:	428a      	cmp	r2, r1
 800c092:	4606      	mov	r6, r0
 800c094:	462b      	mov	r3, r5
 800c096:	dc22      	bgt.n	800c0de <frexp+0x5e>
 800c098:	ee10 1a10 	vmov	r1, s0
 800c09c:	4311      	orrs	r1, r2
 800c09e:	d01e      	beq.n	800c0de <frexp+0x5e>
 800c0a0:	4911      	ldr	r1, [pc, #68]	; (800c0e8 <frexp+0x68>)
 800c0a2:	4029      	ands	r1, r5
 800c0a4:	b969      	cbnz	r1, 800c0c2 <frexp+0x42>
 800c0a6:	4b11      	ldr	r3, [pc, #68]	; (800c0ec <frexp+0x6c>)
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	ee10 0a10 	vmov	r0, s0
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	f7f4 faaa 	bl	8000608 <__aeabi_dmul>
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c0ba:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800c0be:	4604      	mov	r4, r0
 800c0c0:	6031      	str	r1, [r6, #0]
 800c0c2:	6831      	ldr	r1, [r6, #0]
 800c0c4:	1512      	asrs	r2, r2, #20
 800c0c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c0ca:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800c0ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c0d2:	4411      	add	r1, r2
 800c0d4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800c0d8:	6031      	str	r1, [r6, #0]
 800c0da:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800c0de:	ec45 4b10 	vmov	d0, r4, r5
 800c0e2:	bd70      	pop	{r4, r5, r6, pc}
 800c0e4:	7fefffff 	.word	0x7fefffff
 800c0e8:	7ff00000 	.word	0x7ff00000
 800c0ec:	43500000 	.word	0x43500000

0800c0f0 <__register_exitproc>:
 800c0f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0f4:	f8df a074 	ldr.w	sl, [pc, #116]	; 800c16c <__register_exitproc+0x7c>
 800c0f8:	4606      	mov	r6, r0
 800c0fa:	f8da 0000 	ldr.w	r0, [sl]
 800c0fe:	4698      	mov	r8, r3
 800c100:	460f      	mov	r7, r1
 800c102:	4691      	mov	r9, r2
 800c104:	f7fd f924 	bl	8009350 <__retarget_lock_acquire_recursive>
 800c108:	4b16      	ldr	r3, [pc, #88]	; (800c164 <__register_exitproc+0x74>)
 800c10a:	681c      	ldr	r4, [r3, #0]
 800c10c:	b90c      	cbnz	r4, 800c112 <__register_exitproc+0x22>
 800c10e:	4c16      	ldr	r4, [pc, #88]	; (800c168 <__register_exitproc+0x78>)
 800c110:	601c      	str	r4, [r3, #0]
 800c112:	6865      	ldr	r5, [r4, #4]
 800c114:	f8da 0000 	ldr.w	r0, [sl]
 800c118:	2d1f      	cmp	r5, #31
 800c11a:	dd05      	ble.n	800c128 <__register_exitproc+0x38>
 800c11c:	f7fd f919 	bl	8009352 <__retarget_lock_release_recursive>
 800c120:	f04f 30ff 	mov.w	r0, #4294967295
 800c124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c128:	b19e      	cbz	r6, 800c152 <__register_exitproc+0x62>
 800c12a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800c12e:	2201      	movs	r2, #1
 800c130:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800c134:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800c138:	40aa      	lsls	r2, r5
 800c13a:	4313      	orrs	r3, r2
 800c13c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800c140:	2e02      	cmp	r6, #2
 800c142:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800c146:	bf02      	ittt	eq
 800c148:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800c14c:	4313      	orreq	r3, r2
 800c14e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 800c152:	1c6b      	adds	r3, r5, #1
 800c154:	3502      	adds	r5, #2
 800c156:	6063      	str	r3, [r4, #4]
 800c158:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800c15c:	f7fd f8f9 	bl	8009352 <__retarget_lock_release_recursive>
 800c160:	2000      	movs	r0, #0
 800c162:	e7df      	b.n	800c124 <__register_exitproc+0x34>
 800c164:	20001e0c 	.word	0x20001e0c
 800c168:	20001e44 	.word	0x20001e44
 800c16c:	2000039c 	.word	0x2000039c

0800c170 <__assert_func>:
 800c170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c172:	4614      	mov	r4, r2
 800c174:	461a      	mov	r2, r3
 800c176:	4b09      	ldr	r3, [pc, #36]	; (800c19c <__assert_func+0x2c>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4605      	mov	r5, r0
 800c17c:	68d8      	ldr	r0, [r3, #12]
 800c17e:	b14c      	cbz	r4, 800c194 <__assert_func+0x24>
 800c180:	4b07      	ldr	r3, [pc, #28]	; (800c1a0 <__assert_func+0x30>)
 800c182:	9100      	str	r1, [sp, #0]
 800c184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c188:	4906      	ldr	r1, [pc, #24]	; (800c1a4 <__assert_func+0x34>)
 800c18a:	462b      	mov	r3, r5
 800c18c:	f000 fea2 	bl	800ced4 <fiprintf>
 800c190:	f001 fe5b 	bl	800de4a <abort>
 800c194:	4b04      	ldr	r3, [pc, #16]	; (800c1a8 <__assert_func+0x38>)
 800c196:	461c      	mov	r4, r3
 800c198:	e7f3      	b.n	800c182 <__assert_func+0x12>
 800c19a:	bf00      	nop
 800c19c:	20000398 	.word	0x20000398
 800c1a0:	0800f889 	.word	0x0800f889
 800c1a4:	0800f896 	.word	0x0800f896
 800c1a8:	0800f8c4 	.word	0x0800f8c4

0800c1ac <_calloc_r>:
 800c1ac:	b538      	push	{r3, r4, r5, lr}
 800c1ae:	fba1 1502 	umull	r1, r5, r1, r2
 800c1b2:	b92d      	cbnz	r5, 800c1c0 <_calloc_r+0x14>
 800c1b4:	f7fd fd60 	bl	8009c78 <_malloc_r>
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	b938      	cbnz	r0, 800c1cc <_calloc_r+0x20>
 800c1bc:	4620      	mov	r0, r4
 800c1be:	bd38      	pop	{r3, r4, r5, pc}
 800c1c0:	f7fd f89a 	bl	80092f8 <__errno>
 800c1c4:	230c      	movs	r3, #12
 800c1c6:	6003      	str	r3, [r0, #0]
 800c1c8:	2400      	movs	r4, #0
 800c1ca:	e7f7      	b.n	800c1bc <_calloc_r+0x10>
 800c1cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c1d0:	f022 0203 	bic.w	r2, r2, #3
 800c1d4:	3a04      	subs	r2, #4
 800c1d6:	2a24      	cmp	r2, #36	; 0x24
 800c1d8:	d819      	bhi.n	800c20e <_calloc_r+0x62>
 800c1da:	2a13      	cmp	r2, #19
 800c1dc:	d915      	bls.n	800c20a <_calloc_r+0x5e>
 800c1de:	2a1b      	cmp	r2, #27
 800c1e0:	e9c0 5500 	strd	r5, r5, [r0]
 800c1e4:	d806      	bhi.n	800c1f4 <_calloc_r+0x48>
 800c1e6:	f100 0308 	add.w	r3, r0, #8
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	e9c3 2200 	strd	r2, r2, [r3]
 800c1f0:	609a      	str	r2, [r3, #8]
 800c1f2:	e7e3      	b.n	800c1bc <_calloc_r+0x10>
 800c1f4:	2a24      	cmp	r2, #36	; 0x24
 800c1f6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800c1fa:	bf11      	iteee	ne
 800c1fc:	f100 0310 	addne.w	r3, r0, #16
 800c200:	6105      	streq	r5, [r0, #16]
 800c202:	f100 0318 	addeq.w	r3, r0, #24
 800c206:	6145      	streq	r5, [r0, #20]
 800c208:	e7ef      	b.n	800c1ea <_calloc_r+0x3e>
 800c20a:	4603      	mov	r3, r0
 800c20c:	e7ed      	b.n	800c1ea <_calloc_r+0x3e>
 800c20e:	4629      	mov	r1, r5
 800c210:	f7fd f80b 	bl	800922a <memset>
 800c214:	e7d2      	b.n	800c1bc <_calloc_r+0x10>

0800c216 <quorem>:
 800c216:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c21a:	6903      	ldr	r3, [r0, #16]
 800c21c:	690c      	ldr	r4, [r1, #16]
 800c21e:	42a3      	cmp	r3, r4
 800c220:	4607      	mov	r7, r0
 800c222:	db7e      	blt.n	800c322 <quorem+0x10c>
 800c224:	3c01      	subs	r4, #1
 800c226:	f101 0814 	add.w	r8, r1, #20
 800c22a:	f100 0514 	add.w	r5, r0, #20
 800c22e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c232:	9301      	str	r3, [sp, #4]
 800c234:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c238:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c23c:	3301      	adds	r3, #1
 800c23e:	429a      	cmp	r2, r3
 800c240:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c244:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c248:	fbb2 f6f3 	udiv	r6, r2, r3
 800c24c:	d331      	bcc.n	800c2b2 <quorem+0x9c>
 800c24e:	f04f 0e00 	mov.w	lr, #0
 800c252:	4640      	mov	r0, r8
 800c254:	46ac      	mov	ip, r5
 800c256:	46f2      	mov	sl, lr
 800c258:	f850 2b04 	ldr.w	r2, [r0], #4
 800c25c:	b293      	uxth	r3, r2
 800c25e:	fb06 e303 	mla	r3, r6, r3, lr
 800c262:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c266:	0c1a      	lsrs	r2, r3, #16
 800c268:	b29b      	uxth	r3, r3
 800c26a:	ebaa 0303 	sub.w	r3, sl, r3
 800c26e:	f8dc a000 	ldr.w	sl, [ip]
 800c272:	fa13 f38a 	uxtah	r3, r3, sl
 800c276:	fb06 220e 	mla	r2, r6, lr, r2
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	9b00      	ldr	r3, [sp, #0]
 800c27e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c282:	b292      	uxth	r2, r2
 800c284:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c28c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c290:	4581      	cmp	r9, r0
 800c292:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c296:	f84c 3b04 	str.w	r3, [ip], #4
 800c29a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c29e:	d2db      	bcs.n	800c258 <quorem+0x42>
 800c2a0:	f855 300b 	ldr.w	r3, [r5, fp]
 800c2a4:	b92b      	cbnz	r3, 800c2b2 <quorem+0x9c>
 800c2a6:	9b01      	ldr	r3, [sp, #4]
 800c2a8:	3b04      	subs	r3, #4
 800c2aa:	429d      	cmp	r5, r3
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	d32c      	bcc.n	800c30a <quorem+0xf4>
 800c2b0:	613c      	str	r4, [r7, #16]
 800c2b2:	4638      	mov	r0, r7
 800c2b4:	f7fe f9b0 	bl	800a618 <__mcmp>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	db22      	blt.n	800c302 <quorem+0xec>
 800c2bc:	3601      	adds	r6, #1
 800c2be:	4629      	mov	r1, r5
 800c2c0:	2000      	movs	r0, #0
 800c2c2:	f858 2b04 	ldr.w	r2, [r8], #4
 800c2c6:	f8d1 c000 	ldr.w	ip, [r1]
 800c2ca:	b293      	uxth	r3, r2
 800c2cc:	1ac3      	subs	r3, r0, r3
 800c2ce:	0c12      	lsrs	r2, r2, #16
 800c2d0:	fa13 f38c 	uxtah	r3, r3, ip
 800c2d4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c2d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2e2:	45c1      	cmp	r9, r8
 800c2e4:	f841 3b04 	str.w	r3, [r1], #4
 800c2e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c2ec:	d2e9      	bcs.n	800c2c2 <quorem+0xac>
 800c2ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2f6:	b922      	cbnz	r2, 800c302 <quorem+0xec>
 800c2f8:	3b04      	subs	r3, #4
 800c2fa:	429d      	cmp	r5, r3
 800c2fc:	461a      	mov	r2, r3
 800c2fe:	d30a      	bcc.n	800c316 <quorem+0x100>
 800c300:	613c      	str	r4, [r7, #16]
 800c302:	4630      	mov	r0, r6
 800c304:	b003      	add	sp, #12
 800c306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c30a:	6812      	ldr	r2, [r2, #0]
 800c30c:	3b04      	subs	r3, #4
 800c30e:	2a00      	cmp	r2, #0
 800c310:	d1ce      	bne.n	800c2b0 <quorem+0x9a>
 800c312:	3c01      	subs	r4, #1
 800c314:	e7c9      	b.n	800c2aa <quorem+0x94>
 800c316:	6812      	ldr	r2, [r2, #0]
 800c318:	3b04      	subs	r3, #4
 800c31a:	2a00      	cmp	r2, #0
 800c31c:	d1f0      	bne.n	800c300 <quorem+0xea>
 800c31e:	3c01      	subs	r4, #1
 800c320:	e7eb      	b.n	800c2fa <quorem+0xe4>
 800c322:	2000      	movs	r0, #0
 800c324:	e7ee      	b.n	800c304 <quorem+0xee>
	...

0800c328 <_dtoa_r>:
 800c328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32c:	ed2d 8b04 	vpush	{d8-d9}
 800c330:	b093      	sub	sp, #76	; 0x4c
 800c332:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c336:	9107      	str	r1, [sp, #28]
 800c338:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800c33a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800c33c:	920a      	str	r2, [sp, #40]	; 0x28
 800c33e:	ec57 6b10 	vmov	r6, r7, d0
 800c342:	4604      	mov	r4, r0
 800c344:	930d      	str	r3, [sp, #52]	; 0x34
 800c346:	b141      	cbz	r1, 800c35a <_dtoa_r+0x32>
 800c348:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c34a:	604a      	str	r2, [r1, #4]
 800c34c:	2301      	movs	r3, #1
 800c34e:	4093      	lsls	r3, r2
 800c350:	608b      	str	r3, [r1, #8]
 800c352:	f7fd ff0e 	bl	800a172 <_Bfree>
 800c356:	2300      	movs	r3, #0
 800c358:	63a3      	str	r3, [r4, #56]	; 0x38
 800c35a:	1e3b      	subs	r3, r7, #0
 800c35c:	bfb9      	ittee	lt
 800c35e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c362:	9303      	strlt	r3, [sp, #12]
 800c364:	2300      	movge	r3, #0
 800c366:	602b      	strge	r3, [r5, #0]
 800c368:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c36c:	4ba2      	ldr	r3, [pc, #648]	; (800c5f8 <_dtoa_r+0x2d0>)
 800c36e:	bfbc      	itt	lt
 800c370:	2201      	movlt	r2, #1
 800c372:	602a      	strlt	r2, [r5, #0]
 800c374:	ea33 0308 	bics.w	r3, r3, r8
 800c378:	d11b      	bne.n	800c3b2 <_dtoa_r+0x8a>
 800c37a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c37c:	f242 730f 	movw	r3, #9999	; 0x270f
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c386:	4333      	orrs	r3, r6
 800c388:	f000 858f 	beq.w	800ceaa <_dtoa_r+0xb82>
 800c38c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c38e:	b90b      	cbnz	r3, 800c394 <_dtoa_r+0x6c>
 800c390:	4b9a      	ldr	r3, [pc, #616]	; (800c5fc <_dtoa_r+0x2d4>)
 800c392:	e027      	b.n	800c3e4 <_dtoa_r+0xbc>
 800c394:	4b99      	ldr	r3, [pc, #612]	; (800c5fc <_dtoa_r+0x2d4>)
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	3303      	adds	r3, #3
 800c39a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c39c:	6013      	str	r3, [r2, #0]
 800c39e:	9800      	ldr	r0, [sp, #0]
 800c3a0:	b013      	add	sp, #76	; 0x4c
 800c3a2:	ecbd 8b04 	vpop	{d8-d9}
 800c3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3aa:	4b95      	ldr	r3, [pc, #596]	; (800c600 <_dtoa_r+0x2d8>)
 800c3ac:	9300      	str	r3, [sp, #0]
 800c3ae:	3308      	adds	r3, #8
 800c3b0:	e7f3      	b.n	800c39a <_dtoa_r+0x72>
 800c3b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	ec51 0b17 	vmov	r0, r1, d7
 800c3bc:	eeb0 8a47 	vmov.f32	s16, s14
 800c3c0:	eef0 8a67 	vmov.f32	s17, s15
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	f7f4 fb87 	bl	8000ad8 <__aeabi_dcmpeq>
 800c3ca:	4681      	mov	r9, r0
 800c3cc:	b160      	cbz	r0, 800c3e8 <_dtoa_r+0xc0>
 800c3ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	6013      	str	r3, [r2, #0]
 800c3d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f000 8564 	beq.w	800cea4 <_dtoa_r+0xb7c>
 800c3dc:	4b89      	ldr	r3, [pc, #548]	; (800c604 <_dtoa_r+0x2dc>)
 800c3de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c3e0:	6013      	str	r3, [r2, #0]
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	9300      	str	r3, [sp, #0]
 800c3e6:	e7da      	b.n	800c39e <_dtoa_r+0x76>
 800c3e8:	aa10      	add	r2, sp, #64	; 0x40
 800c3ea:	a911      	add	r1, sp, #68	; 0x44
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	eeb0 0a48 	vmov.f32	s0, s16
 800c3f2:	eef0 0a68 	vmov.f32	s1, s17
 800c3f6:	f7fe fa25 	bl	800a844 <__d2b>
 800c3fa:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c3fe:	4682      	mov	sl, r0
 800c400:	2d00      	cmp	r5, #0
 800c402:	d07e      	beq.n	800c502 <_dtoa_r+0x1da>
 800c404:	ee18 3a90 	vmov	r3, s17
 800c408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c40c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c410:	ec51 0b18 	vmov	r0, r1, d8
 800c414:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c418:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c41c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c420:	4619      	mov	r1, r3
 800c422:	2200      	movs	r2, #0
 800c424:	4b78      	ldr	r3, [pc, #480]	; (800c608 <_dtoa_r+0x2e0>)
 800c426:	f7f3 ff37 	bl	8000298 <__aeabi_dsub>
 800c42a:	a36d      	add	r3, pc, #436	; (adr r3, 800c5e0 <_dtoa_r+0x2b8>)
 800c42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c430:	f7f4 f8ea 	bl	8000608 <__aeabi_dmul>
 800c434:	a36c      	add	r3, pc, #432	; (adr r3, 800c5e8 <_dtoa_r+0x2c0>)
 800c436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43a:	f7f3 ff2f 	bl	800029c <__adddf3>
 800c43e:	4606      	mov	r6, r0
 800c440:	4628      	mov	r0, r5
 800c442:	460f      	mov	r7, r1
 800c444:	f7f4 f876 	bl	8000534 <__aeabi_i2d>
 800c448:	a369      	add	r3, pc, #420	; (adr r3, 800c5f0 <_dtoa_r+0x2c8>)
 800c44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44e:	f7f4 f8db 	bl	8000608 <__aeabi_dmul>
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	4630      	mov	r0, r6
 800c458:	4639      	mov	r1, r7
 800c45a:	f7f3 ff1f 	bl	800029c <__adddf3>
 800c45e:	4606      	mov	r6, r0
 800c460:	460f      	mov	r7, r1
 800c462:	f7f4 fb81 	bl	8000b68 <__aeabi_d2iz>
 800c466:	2200      	movs	r2, #0
 800c468:	4683      	mov	fp, r0
 800c46a:	2300      	movs	r3, #0
 800c46c:	4630      	mov	r0, r6
 800c46e:	4639      	mov	r1, r7
 800c470:	f7f4 fb3c 	bl	8000aec <__aeabi_dcmplt>
 800c474:	b148      	cbz	r0, 800c48a <_dtoa_r+0x162>
 800c476:	4658      	mov	r0, fp
 800c478:	f7f4 f85c 	bl	8000534 <__aeabi_i2d>
 800c47c:	4632      	mov	r2, r6
 800c47e:	463b      	mov	r3, r7
 800c480:	f7f4 fb2a 	bl	8000ad8 <__aeabi_dcmpeq>
 800c484:	b908      	cbnz	r0, 800c48a <_dtoa_r+0x162>
 800c486:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c48a:	f1bb 0f16 	cmp.w	fp, #22
 800c48e:	d856      	bhi.n	800c53e <_dtoa_r+0x216>
 800c490:	4b5e      	ldr	r3, [pc, #376]	; (800c60c <_dtoa_r+0x2e4>)
 800c492:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49a:	ec51 0b18 	vmov	r0, r1, d8
 800c49e:	f7f4 fb25 	bl	8000aec <__aeabi_dcmplt>
 800c4a2:	2800      	cmp	r0, #0
 800c4a4:	d04d      	beq.n	800c542 <_dtoa_r+0x21a>
 800c4a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	930c      	str	r3, [sp, #48]	; 0x30
 800c4ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4b0:	1b5b      	subs	r3, r3, r5
 800c4b2:	1e5a      	subs	r2, r3, #1
 800c4b4:	bf45      	ittet	mi
 800c4b6:	f1c3 0301 	rsbmi	r3, r3, #1
 800c4ba:	9305      	strmi	r3, [sp, #20]
 800c4bc:	2300      	movpl	r3, #0
 800c4be:	2300      	movmi	r3, #0
 800c4c0:	9206      	str	r2, [sp, #24]
 800c4c2:	bf54      	ite	pl
 800c4c4:	9305      	strpl	r3, [sp, #20]
 800c4c6:	9306      	strmi	r3, [sp, #24]
 800c4c8:	f1bb 0f00 	cmp.w	fp, #0
 800c4cc:	db3b      	blt.n	800c546 <_dtoa_r+0x21e>
 800c4ce:	9b06      	ldr	r3, [sp, #24]
 800c4d0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c4d4:	445b      	add	r3, fp
 800c4d6:	9306      	str	r3, [sp, #24]
 800c4d8:	2300      	movs	r3, #0
 800c4da:	9308      	str	r3, [sp, #32]
 800c4dc:	9b07      	ldr	r3, [sp, #28]
 800c4de:	2b09      	cmp	r3, #9
 800c4e0:	d868      	bhi.n	800c5b4 <_dtoa_r+0x28c>
 800c4e2:	2b05      	cmp	r3, #5
 800c4e4:	bfc4      	itt	gt
 800c4e6:	3b04      	subgt	r3, #4
 800c4e8:	9307      	strgt	r3, [sp, #28]
 800c4ea:	9b07      	ldr	r3, [sp, #28]
 800c4ec:	f1a3 0302 	sub.w	r3, r3, #2
 800c4f0:	bfcc      	ite	gt
 800c4f2:	2500      	movgt	r5, #0
 800c4f4:	2501      	movle	r5, #1
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	d867      	bhi.n	800c5ca <_dtoa_r+0x2a2>
 800c4fa:	e8df f003 	tbb	[pc, r3]
 800c4fe:	3b2e      	.short	0x3b2e
 800c500:	5939      	.short	0x5939
 800c502:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c506:	441d      	add	r5, r3
 800c508:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c50c:	2b20      	cmp	r3, #32
 800c50e:	bfc1      	itttt	gt
 800c510:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c514:	fa08 f803 	lslgt.w	r8, r8, r3
 800c518:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c51c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c520:	bfd6      	itet	le
 800c522:	f1c3 0320 	rsble	r3, r3, #32
 800c526:	ea48 0003 	orrgt.w	r0, r8, r3
 800c52a:	fa06 f003 	lslle.w	r0, r6, r3
 800c52e:	f7f3 fff1 	bl	8000514 <__aeabi_ui2d>
 800c532:	2201      	movs	r2, #1
 800c534:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c538:	3d01      	subs	r5, #1
 800c53a:	920e      	str	r2, [sp, #56]	; 0x38
 800c53c:	e770      	b.n	800c420 <_dtoa_r+0xf8>
 800c53e:	2301      	movs	r3, #1
 800c540:	e7b4      	b.n	800c4ac <_dtoa_r+0x184>
 800c542:	900c      	str	r0, [sp, #48]	; 0x30
 800c544:	e7b3      	b.n	800c4ae <_dtoa_r+0x186>
 800c546:	9b05      	ldr	r3, [sp, #20]
 800c548:	eba3 030b 	sub.w	r3, r3, fp
 800c54c:	9305      	str	r3, [sp, #20]
 800c54e:	f1cb 0300 	rsb	r3, fp, #0
 800c552:	9308      	str	r3, [sp, #32]
 800c554:	2300      	movs	r3, #0
 800c556:	930b      	str	r3, [sp, #44]	; 0x2c
 800c558:	e7c0      	b.n	800c4dc <_dtoa_r+0x1b4>
 800c55a:	2300      	movs	r3, #0
 800c55c:	9309      	str	r3, [sp, #36]	; 0x24
 800c55e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c560:	2b00      	cmp	r3, #0
 800c562:	dc35      	bgt.n	800c5d0 <_dtoa_r+0x2a8>
 800c564:	2301      	movs	r3, #1
 800c566:	9301      	str	r3, [sp, #4]
 800c568:	9304      	str	r3, [sp, #16]
 800c56a:	461a      	mov	r2, r3
 800c56c:	920a      	str	r2, [sp, #40]	; 0x28
 800c56e:	e00b      	b.n	800c588 <_dtoa_r+0x260>
 800c570:	2301      	movs	r3, #1
 800c572:	e7f3      	b.n	800c55c <_dtoa_r+0x234>
 800c574:	2300      	movs	r3, #0
 800c576:	9309      	str	r3, [sp, #36]	; 0x24
 800c578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c57a:	445b      	add	r3, fp
 800c57c:	9301      	str	r3, [sp, #4]
 800c57e:	3301      	adds	r3, #1
 800c580:	2b01      	cmp	r3, #1
 800c582:	9304      	str	r3, [sp, #16]
 800c584:	bfb8      	it	lt
 800c586:	2301      	movlt	r3, #1
 800c588:	2100      	movs	r1, #0
 800c58a:	2204      	movs	r2, #4
 800c58c:	f102 0014 	add.w	r0, r2, #20
 800c590:	4298      	cmp	r0, r3
 800c592:	d921      	bls.n	800c5d8 <_dtoa_r+0x2b0>
 800c594:	63e1      	str	r1, [r4, #60]	; 0x3c
 800c596:	4620      	mov	r0, r4
 800c598:	f7fd fdc6 	bl	800a128 <_Balloc>
 800c59c:	9000      	str	r0, [sp, #0]
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	d13a      	bne.n	800c618 <_dtoa_r+0x2f0>
 800c5a2:	4b1b      	ldr	r3, [pc, #108]	; (800c610 <_dtoa_r+0x2e8>)
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	f240 11af 	movw	r1, #431	; 0x1af
 800c5aa:	481a      	ldr	r0, [pc, #104]	; (800c614 <_dtoa_r+0x2ec>)
 800c5ac:	f7ff fde0 	bl	800c170 <__assert_func>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e7e0      	b.n	800c576 <_dtoa_r+0x24e>
 800c5b4:	2501      	movs	r5, #1
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	9307      	str	r3, [sp, #28]
 800c5ba:	9509      	str	r5, [sp, #36]	; 0x24
 800c5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	9304      	str	r3, [sp, #16]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	2312      	movs	r3, #18
 800c5c8:	e7d0      	b.n	800c56c <_dtoa_r+0x244>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ce:	e7f5      	b.n	800c5bc <_dtoa_r+0x294>
 800c5d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5d2:	9301      	str	r3, [sp, #4]
 800c5d4:	9304      	str	r3, [sp, #16]
 800c5d6:	e7d7      	b.n	800c588 <_dtoa_r+0x260>
 800c5d8:	3101      	adds	r1, #1
 800c5da:	0052      	lsls	r2, r2, #1
 800c5dc:	e7d6      	b.n	800c58c <_dtoa_r+0x264>
 800c5de:	bf00      	nop
 800c5e0:	636f4361 	.word	0x636f4361
 800c5e4:	3fd287a7 	.word	0x3fd287a7
 800c5e8:	8b60c8b3 	.word	0x8b60c8b3
 800c5ec:	3fc68a28 	.word	0x3fc68a28
 800c5f0:	509f79fb 	.word	0x509f79fb
 800c5f4:	3fd34413 	.word	0x3fd34413
 800c5f8:	7ff00000 	.word	0x7ff00000
 800c5fc:	0800f8ce 	.word	0x0800f8ce
 800c600:	0800f8c5 	.word	0x0800f8c5
 800c604:	0800f868 	.word	0x0800f868
 800c608:	3ff80000 	.word	0x3ff80000
 800c60c:	0800f660 	.word	0x0800f660
 800c610:	0800f568 	.word	0x0800f568
 800c614:	0800f8d2 	.word	0x0800f8d2
 800c618:	9b00      	ldr	r3, [sp, #0]
 800c61a:	63a3      	str	r3, [r4, #56]	; 0x38
 800c61c:	9b04      	ldr	r3, [sp, #16]
 800c61e:	2b0e      	cmp	r3, #14
 800c620:	f200 80a8 	bhi.w	800c774 <_dtoa_r+0x44c>
 800c624:	2d00      	cmp	r5, #0
 800c626:	f000 80a5 	beq.w	800c774 <_dtoa_r+0x44c>
 800c62a:	f1bb 0f00 	cmp.w	fp, #0
 800c62e:	dd38      	ble.n	800c6a2 <_dtoa_r+0x37a>
 800c630:	4bbf      	ldr	r3, [pc, #764]	; (800c930 <_dtoa_r+0x608>)
 800c632:	f00b 020f 	and.w	r2, fp, #15
 800c636:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c63a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c63e:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c642:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c646:	d019      	beq.n	800c67c <_dtoa_r+0x354>
 800c648:	4bba      	ldr	r3, [pc, #744]	; (800c934 <_dtoa_r+0x60c>)
 800c64a:	ec51 0b18 	vmov	r0, r1, d8
 800c64e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c652:	f7f4 f903 	bl	800085c <__aeabi_ddiv>
 800c656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c65a:	f008 080f 	and.w	r8, r8, #15
 800c65e:	2503      	movs	r5, #3
 800c660:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800c934 <_dtoa_r+0x60c>
 800c664:	f1b8 0f00 	cmp.w	r8, #0
 800c668:	d10a      	bne.n	800c680 <_dtoa_r+0x358>
 800c66a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c66e:	4632      	mov	r2, r6
 800c670:	463b      	mov	r3, r7
 800c672:	f7f4 f8f3 	bl	800085c <__aeabi_ddiv>
 800c676:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c67a:	e02b      	b.n	800c6d4 <_dtoa_r+0x3ac>
 800c67c:	2502      	movs	r5, #2
 800c67e:	e7ef      	b.n	800c660 <_dtoa_r+0x338>
 800c680:	f018 0f01 	tst.w	r8, #1
 800c684:	d008      	beq.n	800c698 <_dtoa_r+0x370>
 800c686:	4630      	mov	r0, r6
 800c688:	4639      	mov	r1, r7
 800c68a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c68e:	f7f3 ffbb 	bl	8000608 <__aeabi_dmul>
 800c692:	3501      	adds	r5, #1
 800c694:	4606      	mov	r6, r0
 800c696:	460f      	mov	r7, r1
 800c698:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c69c:	f109 0908 	add.w	r9, r9, #8
 800c6a0:	e7e0      	b.n	800c664 <_dtoa_r+0x33c>
 800c6a2:	f000 809f 	beq.w	800c7e4 <_dtoa_r+0x4bc>
 800c6a6:	f1cb 0600 	rsb	r6, fp, #0
 800c6aa:	4ba1      	ldr	r3, [pc, #644]	; (800c930 <_dtoa_r+0x608>)
 800c6ac:	4fa1      	ldr	r7, [pc, #644]	; (800c934 <_dtoa_r+0x60c>)
 800c6ae:	f006 020f 	and.w	r2, r6, #15
 800c6b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ba:	ec51 0b18 	vmov	r0, r1, d8
 800c6be:	f7f3 ffa3 	bl	8000608 <__aeabi_dmul>
 800c6c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6c6:	1136      	asrs	r6, r6, #4
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	2502      	movs	r5, #2
 800c6cc:	2e00      	cmp	r6, #0
 800c6ce:	d17e      	bne.n	800c7ce <_dtoa_r+0x4a6>
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1d0      	bne.n	800c676 <_dtoa_r+0x34e>
 800c6d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f000 8084 	beq.w	800c7e8 <_dtoa_r+0x4c0>
 800c6e0:	4b95      	ldr	r3, [pc, #596]	; (800c938 <_dtoa_r+0x610>)
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	4640      	mov	r0, r8
 800c6e6:	4649      	mov	r1, r9
 800c6e8:	f7f4 fa00 	bl	8000aec <__aeabi_dcmplt>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	d07b      	beq.n	800c7e8 <_dtoa_r+0x4c0>
 800c6f0:	9b04      	ldr	r3, [sp, #16]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d078      	beq.n	800c7e8 <_dtoa_r+0x4c0>
 800c6f6:	9b01      	ldr	r3, [sp, #4]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	dd39      	ble.n	800c770 <_dtoa_r+0x448>
 800c6fc:	4b8f      	ldr	r3, [pc, #572]	; (800c93c <_dtoa_r+0x614>)
 800c6fe:	2200      	movs	r2, #0
 800c700:	4640      	mov	r0, r8
 800c702:	4649      	mov	r1, r9
 800c704:	f7f3 ff80 	bl	8000608 <__aeabi_dmul>
 800c708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c70c:	9e01      	ldr	r6, [sp, #4]
 800c70e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c712:	3501      	adds	r5, #1
 800c714:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c718:	4628      	mov	r0, r5
 800c71a:	f7f3 ff0b 	bl	8000534 <__aeabi_i2d>
 800c71e:	4642      	mov	r2, r8
 800c720:	464b      	mov	r3, r9
 800c722:	f7f3 ff71 	bl	8000608 <__aeabi_dmul>
 800c726:	4b86      	ldr	r3, [pc, #536]	; (800c940 <_dtoa_r+0x618>)
 800c728:	2200      	movs	r2, #0
 800c72a:	f7f3 fdb7 	bl	800029c <__adddf3>
 800c72e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c736:	9303      	str	r3, [sp, #12]
 800c738:	2e00      	cmp	r6, #0
 800c73a:	d158      	bne.n	800c7ee <_dtoa_r+0x4c6>
 800c73c:	4b81      	ldr	r3, [pc, #516]	; (800c944 <_dtoa_r+0x61c>)
 800c73e:	2200      	movs	r2, #0
 800c740:	4640      	mov	r0, r8
 800c742:	4649      	mov	r1, r9
 800c744:	f7f3 fda8 	bl	8000298 <__aeabi_dsub>
 800c748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c74c:	4680      	mov	r8, r0
 800c74e:	4689      	mov	r9, r1
 800c750:	f7f4 f9ea 	bl	8000b28 <__aeabi_dcmpgt>
 800c754:	2800      	cmp	r0, #0
 800c756:	f040 8295 	bne.w	800cc84 <_dtoa_r+0x95c>
 800c75a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c75e:	4640      	mov	r0, r8
 800c760:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c764:	4649      	mov	r1, r9
 800c766:	f7f4 f9c1 	bl	8000aec <__aeabi_dcmplt>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	f040 8288 	bne.w	800cc80 <_dtoa_r+0x958>
 800c770:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c774:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c776:	2b00      	cmp	r3, #0
 800c778:	f2c0 814d 	blt.w	800ca16 <_dtoa_r+0x6ee>
 800c77c:	f1bb 0f0e 	cmp.w	fp, #14
 800c780:	f300 8149 	bgt.w	800ca16 <_dtoa_r+0x6ee>
 800c784:	4b6a      	ldr	r3, [pc, #424]	; (800c930 <_dtoa_r+0x608>)
 800c786:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c78a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c78e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c790:	2b00      	cmp	r3, #0
 800c792:	f280 80db 	bge.w	800c94c <_dtoa_r+0x624>
 800c796:	9b04      	ldr	r3, [sp, #16]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f300 80d7 	bgt.w	800c94c <_dtoa_r+0x624>
 800c79e:	f040 826e 	bne.w	800cc7e <_dtoa_r+0x956>
 800c7a2:	4b68      	ldr	r3, [pc, #416]	; (800c944 <_dtoa_r+0x61c>)
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	4640      	mov	r0, r8
 800c7a8:	4649      	mov	r1, r9
 800c7aa:	f7f3 ff2d 	bl	8000608 <__aeabi_dmul>
 800c7ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c7b2:	f7f4 f9af 	bl	8000b14 <__aeabi_dcmpge>
 800c7b6:	9e04      	ldr	r6, [sp, #16]
 800c7b8:	4637      	mov	r7, r6
 800c7ba:	2800      	cmp	r0, #0
 800c7bc:	f040 8244 	bne.w	800cc48 <_dtoa_r+0x920>
 800c7c0:	9d00      	ldr	r5, [sp, #0]
 800c7c2:	2331      	movs	r3, #49	; 0x31
 800c7c4:	f805 3b01 	strb.w	r3, [r5], #1
 800c7c8:	f10b 0b01 	add.w	fp, fp, #1
 800c7cc:	e240      	b.n	800cc50 <_dtoa_r+0x928>
 800c7ce:	07f2      	lsls	r2, r6, #31
 800c7d0:	d505      	bpl.n	800c7de <_dtoa_r+0x4b6>
 800c7d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7d6:	f7f3 ff17 	bl	8000608 <__aeabi_dmul>
 800c7da:	3501      	adds	r5, #1
 800c7dc:	2301      	movs	r3, #1
 800c7de:	1076      	asrs	r6, r6, #1
 800c7e0:	3708      	adds	r7, #8
 800c7e2:	e773      	b.n	800c6cc <_dtoa_r+0x3a4>
 800c7e4:	2502      	movs	r5, #2
 800c7e6:	e775      	b.n	800c6d4 <_dtoa_r+0x3ac>
 800c7e8:	9e04      	ldr	r6, [sp, #16]
 800c7ea:	465f      	mov	r7, fp
 800c7ec:	e792      	b.n	800c714 <_dtoa_r+0x3ec>
 800c7ee:	9900      	ldr	r1, [sp, #0]
 800c7f0:	4b4f      	ldr	r3, [pc, #316]	; (800c930 <_dtoa_r+0x608>)
 800c7f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c7f6:	4431      	add	r1, r6
 800c7f8:	9102      	str	r1, [sp, #8]
 800c7fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7fc:	eeb0 9a47 	vmov.f32	s18, s14
 800c800:	eef0 9a67 	vmov.f32	s19, s15
 800c804:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c808:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c80c:	2900      	cmp	r1, #0
 800c80e:	d044      	beq.n	800c89a <_dtoa_r+0x572>
 800c810:	494d      	ldr	r1, [pc, #308]	; (800c948 <_dtoa_r+0x620>)
 800c812:	2000      	movs	r0, #0
 800c814:	f7f4 f822 	bl	800085c <__aeabi_ddiv>
 800c818:	ec53 2b19 	vmov	r2, r3, d9
 800c81c:	f7f3 fd3c 	bl	8000298 <__aeabi_dsub>
 800c820:	9d00      	ldr	r5, [sp, #0]
 800c822:	ec41 0b19 	vmov	d9, r0, r1
 800c826:	4649      	mov	r1, r9
 800c828:	4640      	mov	r0, r8
 800c82a:	f7f4 f99d 	bl	8000b68 <__aeabi_d2iz>
 800c82e:	4606      	mov	r6, r0
 800c830:	f7f3 fe80 	bl	8000534 <__aeabi_i2d>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	4640      	mov	r0, r8
 800c83a:	4649      	mov	r1, r9
 800c83c:	f7f3 fd2c 	bl	8000298 <__aeabi_dsub>
 800c840:	3630      	adds	r6, #48	; 0x30
 800c842:	f805 6b01 	strb.w	r6, [r5], #1
 800c846:	ec53 2b19 	vmov	r2, r3, d9
 800c84a:	4680      	mov	r8, r0
 800c84c:	4689      	mov	r9, r1
 800c84e:	f7f4 f94d 	bl	8000aec <__aeabi_dcmplt>
 800c852:	2800      	cmp	r0, #0
 800c854:	d164      	bne.n	800c920 <_dtoa_r+0x5f8>
 800c856:	4642      	mov	r2, r8
 800c858:	464b      	mov	r3, r9
 800c85a:	4937      	ldr	r1, [pc, #220]	; (800c938 <_dtoa_r+0x610>)
 800c85c:	2000      	movs	r0, #0
 800c85e:	f7f3 fd1b 	bl	8000298 <__aeabi_dsub>
 800c862:	ec53 2b19 	vmov	r2, r3, d9
 800c866:	f7f4 f941 	bl	8000aec <__aeabi_dcmplt>
 800c86a:	2800      	cmp	r0, #0
 800c86c:	f040 80b5 	bne.w	800c9da <_dtoa_r+0x6b2>
 800c870:	9b02      	ldr	r3, [sp, #8]
 800c872:	429d      	cmp	r5, r3
 800c874:	f43f af7c 	beq.w	800c770 <_dtoa_r+0x448>
 800c878:	4b30      	ldr	r3, [pc, #192]	; (800c93c <_dtoa_r+0x614>)
 800c87a:	ec51 0b19 	vmov	r0, r1, d9
 800c87e:	2200      	movs	r2, #0
 800c880:	f7f3 fec2 	bl	8000608 <__aeabi_dmul>
 800c884:	4b2d      	ldr	r3, [pc, #180]	; (800c93c <_dtoa_r+0x614>)
 800c886:	ec41 0b19 	vmov	d9, r0, r1
 800c88a:	2200      	movs	r2, #0
 800c88c:	4640      	mov	r0, r8
 800c88e:	4649      	mov	r1, r9
 800c890:	f7f3 feba 	bl	8000608 <__aeabi_dmul>
 800c894:	4680      	mov	r8, r0
 800c896:	4689      	mov	r9, r1
 800c898:	e7c5      	b.n	800c826 <_dtoa_r+0x4fe>
 800c89a:	ec51 0b17 	vmov	r0, r1, d7
 800c89e:	f7f3 feb3 	bl	8000608 <__aeabi_dmul>
 800c8a2:	9b02      	ldr	r3, [sp, #8]
 800c8a4:	9d00      	ldr	r5, [sp, #0]
 800c8a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8a8:	ec41 0b19 	vmov	d9, r0, r1
 800c8ac:	4649      	mov	r1, r9
 800c8ae:	4640      	mov	r0, r8
 800c8b0:	f7f4 f95a 	bl	8000b68 <__aeabi_d2iz>
 800c8b4:	4606      	mov	r6, r0
 800c8b6:	f7f3 fe3d 	bl	8000534 <__aeabi_i2d>
 800c8ba:	3630      	adds	r6, #48	; 0x30
 800c8bc:	4602      	mov	r2, r0
 800c8be:	460b      	mov	r3, r1
 800c8c0:	4640      	mov	r0, r8
 800c8c2:	4649      	mov	r1, r9
 800c8c4:	f7f3 fce8 	bl	8000298 <__aeabi_dsub>
 800c8c8:	f805 6b01 	strb.w	r6, [r5], #1
 800c8cc:	9b02      	ldr	r3, [sp, #8]
 800c8ce:	429d      	cmp	r5, r3
 800c8d0:	4680      	mov	r8, r0
 800c8d2:	4689      	mov	r9, r1
 800c8d4:	f04f 0200 	mov.w	r2, #0
 800c8d8:	d124      	bne.n	800c924 <_dtoa_r+0x5fc>
 800c8da:	4b1b      	ldr	r3, [pc, #108]	; (800c948 <_dtoa_r+0x620>)
 800c8dc:	ec51 0b19 	vmov	r0, r1, d9
 800c8e0:	f7f3 fcdc 	bl	800029c <__adddf3>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	4640      	mov	r0, r8
 800c8ea:	4649      	mov	r1, r9
 800c8ec:	f7f4 f91c 	bl	8000b28 <__aeabi_dcmpgt>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d172      	bne.n	800c9da <_dtoa_r+0x6b2>
 800c8f4:	ec53 2b19 	vmov	r2, r3, d9
 800c8f8:	4913      	ldr	r1, [pc, #76]	; (800c948 <_dtoa_r+0x620>)
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	f7f3 fccc 	bl	8000298 <__aeabi_dsub>
 800c900:	4602      	mov	r2, r0
 800c902:	460b      	mov	r3, r1
 800c904:	4640      	mov	r0, r8
 800c906:	4649      	mov	r1, r9
 800c908:	f7f4 f8f0 	bl	8000aec <__aeabi_dcmplt>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	f43f af2f 	beq.w	800c770 <_dtoa_r+0x448>
 800c912:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c914:	1e6b      	subs	r3, r5, #1
 800c916:	930f      	str	r3, [sp, #60]	; 0x3c
 800c918:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c91c:	2b30      	cmp	r3, #48	; 0x30
 800c91e:	d0f8      	beq.n	800c912 <_dtoa_r+0x5ea>
 800c920:	46bb      	mov	fp, r7
 800c922:	e049      	b.n	800c9b8 <_dtoa_r+0x690>
 800c924:	4b05      	ldr	r3, [pc, #20]	; (800c93c <_dtoa_r+0x614>)
 800c926:	f7f3 fe6f 	bl	8000608 <__aeabi_dmul>
 800c92a:	4680      	mov	r8, r0
 800c92c:	4689      	mov	r9, r1
 800c92e:	e7bd      	b.n	800c8ac <_dtoa_r+0x584>
 800c930:	0800f660 	.word	0x0800f660
 800c934:	0800f638 	.word	0x0800f638
 800c938:	3ff00000 	.word	0x3ff00000
 800c93c:	40240000 	.word	0x40240000
 800c940:	401c0000 	.word	0x401c0000
 800c944:	40140000 	.word	0x40140000
 800c948:	3fe00000 	.word	0x3fe00000
 800c94c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c950:	9d00      	ldr	r5, [sp, #0]
 800c952:	4642      	mov	r2, r8
 800c954:	464b      	mov	r3, r9
 800c956:	4630      	mov	r0, r6
 800c958:	4639      	mov	r1, r7
 800c95a:	f7f3 ff7f 	bl	800085c <__aeabi_ddiv>
 800c95e:	f7f4 f903 	bl	8000b68 <__aeabi_d2iz>
 800c962:	9001      	str	r0, [sp, #4]
 800c964:	f7f3 fde6 	bl	8000534 <__aeabi_i2d>
 800c968:	4642      	mov	r2, r8
 800c96a:	464b      	mov	r3, r9
 800c96c:	f7f3 fe4c 	bl	8000608 <__aeabi_dmul>
 800c970:	4602      	mov	r2, r0
 800c972:	460b      	mov	r3, r1
 800c974:	4630      	mov	r0, r6
 800c976:	4639      	mov	r1, r7
 800c978:	f7f3 fc8e 	bl	8000298 <__aeabi_dsub>
 800c97c:	9e01      	ldr	r6, [sp, #4]
 800c97e:	9f04      	ldr	r7, [sp, #16]
 800c980:	3630      	adds	r6, #48	; 0x30
 800c982:	f805 6b01 	strb.w	r6, [r5], #1
 800c986:	9e00      	ldr	r6, [sp, #0]
 800c988:	1bae      	subs	r6, r5, r6
 800c98a:	42b7      	cmp	r7, r6
 800c98c:	4602      	mov	r2, r0
 800c98e:	460b      	mov	r3, r1
 800c990:	d134      	bne.n	800c9fc <_dtoa_r+0x6d4>
 800c992:	f7f3 fc83 	bl	800029c <__adddf3>
 800c996:	4642      	mov	r2, r8
 800c998:	464b      	mov	r3, r9
 800c99a:	4606      	mov	r6, r0
 800c99c:	460f      	mov	r7, r1
 800c99e:	f7f4 f8c3 	bl	8000b28 <__aeabi_dcmpgt>
 800c9a2:	b9c8      	cbnz	r0, 800c9d8 <_dtoa_r+0x6b0>
 800c9a4:	4642      	mov	r2, r8
 800c9a6:	464b      	mov	r3, r9
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	4639      	mov	r1, r7
 800c9ac:	f7f4 f894 	bl	8000ad8 <__aeabi_dcmpeq>
 800c9b0:	b110      	cbz	r0, 800c9b8 <_dtoa_r+0x690>
 800c9b2:	9b01      	ldr	r3, [sp, #4]
 800c9b4:	07db      	lsls	r3, r3, #31
 800c9b6:	d40f      	bmi.n	800c9d8 <_dtoa_r+0x6b0>
 800c9b8:	4651      	mov	r1, sl
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f7fd fbd9 	bl	800a172 <_Bfree>
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c9c4:	702b      	strb	r3, [r5, #0]
 800c9c6:	f10b 0301 	add.w	r3, fp, #1
 800c9ca:	6013      	str	r3, [r2, #0]
 800c9cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	f43f ace5 	beq.w	800c39e <_dtoa_r+0x76>
 800c9d4:	601d      	str	r5, [r3, #0]
 800c9d6:	e4e2      	b.n	800c39e <_dtoa_r+0x76>
 800c9d8:	465f      	mov	r7, fp
 800c9da:	462b      	mov	r3, r5
 800c9dc:	461d      	mov	r5, r3
 800c9de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9e2:	2a39      	cmp	r2, #57	; 0x39
 800c9e4:	d106      	bne.n	800c9f4 <_dtoa_r+0x6cc>
 800c9e6:	9a00      	ldr	r2, [sp, #0]
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d1f7      	bne.n	800c9dc <_dtoa_r+0x6b4>
 800c9ec:	9900      	ldr	r1, [sp, #0]
 800c9ee:	2230      	movs	r2, #48	; 0x30
 800c9f0:	3701      	adds	r7, #1
 800c9f2:	700a      	strb	r2, [r1, #0]
 800c9f4:	781a      	ldrb	r2, [r3, #0]
 800c9f6:	3201      	adds	r2, #1
 800c9f8:	701a      	strb	r2, [r3, #0]
 800c9fa:	e791      	b.n	800c920 <_dtoa_r+0x5f8>
 800c9fc:	4ba3      	ldr	r3, [pc, #652]	; (800cc8c <_dtoa_r+0x964>)
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f7f3 fe02 	bl	8000608 <__aeabi_dmul>
 800ca04:	2200      	movs	r2, #0
 800ca06:	2300      	movs	r3, #0
 800ca08:	4606      	mov	r6, r0
 800ca0a:	460f      	mov	r7, r1
 800ca0c:	f7f4 f864 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d09e      	beq.n	800c952 <_dtoa_r+0x62a>
 800ca14:	e7d0      	b.n	800c9b8 <_dtoa_r+0x690>
 800ca16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca18:	2a00      	cmp	r2, #0
 800ca1a:	f000 80ca 	beq.w	800cbb2 <_dtoa_r+0x88a>
 800ca1e:	9a07      	ldr	r2, [sp, #28]
 800ca20:	2a01      	cmp	r2, #1
 800ca22:	f300 80ad 	bgt.w	800cb80 <_dtoa_r+0x858>
 800ca26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca28:	2a00      	cmp	r2, #0
 800ca2a:	f000 80a5 	beq.w	800cb78 <_dtoa_r+0x850>
 800ca2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca32:	9e08      	ldr	r6, [sp, #32]
 800ca34:	9d05      	ldr	r5, [sp, #20]
 800ca36:	9a05      	ldr	r2, [sp, #20]
 800ca38:	441a      	add	r2, r3
 800ca3a:	9205      	str	r2, [sp, #20]
 800ca3c:	9a06      	ldr	r2, [sp, #24]
 800ca3e:	2101      	movs	r1, #1
 800ca40:	441a      	add	r2, r3
 800ca42:	4620      	mov	r0, r4
 800ca44:	9206      	str	r2, [sp, #24]
 800ca46:	f7fd fc7b 	bl	800a340 <__i2b>
 800ca4a:	4607      	mov	r7, r0
 800ca4c:	b165      	cbz	r5, 800ca68 <_dtoa_r+0x740>
 800ca4e:	9b06      	ldr	r3, [sp, #24]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	dd09      	ble.n	800ca68 <_dtoa_r+0x740>
 800ca54:	42ab      	cmp	r3, r5
 800ca56:	9a05      	ldr	r2, [sp, #20]
 800ca58:	bfa8      	it	ge
 800ca5a:	462b      	movge	r3, r5
 800ca5c:	1ad2      	subs	r2, r2, r3
 800ca5e:	9205      	str	r2, [sp, #20]
 800ca60:	9a06      	ldr	r2, [sp, #24]
 800ca62:	1aed      	subs	r5, r5, r3
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	9306      	str	r3, [sp, #24]
 800ca68:	9b08      	ldr	r3, [sp, #32]
 800ca6a:	b1f3      	cbz	r3, 800caaa <_dtoa_r+0x782>
 800ca6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f000 80a3 	beq.w	800cbba <_dtoa_r+0x892>
 800ca74:	2e00      	cmp	r6, #0
 800ca76:	dd10      	ble.n	800ca9a <_dtoa_r+0x772>
 800ca78:	4639      	mov	r1, r7
 800ca7a:	4632      	mov	r2, r6
 800ca7c:	4620      	mov	r0, r4
 800ca7e:	f7fd fd1f 	bl	800a4c0 <__pow5mult>
 800ca82:	4652      	mov	r2, sl
 800ca84:	4601      	mov	r1, r0
 800ca86:	4607      	mov	r7, r0
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f7fd fc6f 	bl	800a36c <__multiply>
 800ca8e:	4651      	mov	r1, sl
 800ca90:	4680      	mov	r8, r0
 800ca92:	4620      	mov	r0, r4
 800ca94:	f7fd fb6d 	bl	800a172 <_Bfree>
 800ca98:	46c2      	mov	sl, r8
 800ca9a:	9b08      	ldr	r3, [sp, #32]
 800ca9c:	1b9a      	subs	r2, r3, r6
 800ca9e:	d004      	beq.n	800caaa <_dtoa_r+0x782>
 800caa0:	4651      	mov	r1, sl
 800caa2:	4620      	mov	r0, r4
 800caa4:	f7fd fd0c 	bl	800a4c0 <__pow5mult>
 800caa8:	4682      	mov	sl, r0
 800caaa:	2101      	movs	r1, #1
 800caac:	4620      	mov	r0, r4
 800caae:	f7fd fc47 	bl	800a340 <__i2b>
 800cab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	4606      	mov	r6, r0
 800cab8:	f340 8081 	ble.w	800cbbe <_dtoa_r+0x896>
 800cabc:	461a      	mov	r2, r3
 800cabe:	4601      	mov	r1, r0
 800cac0:	4620      	mov	r0, r4
 800cac2:	f7fd fcfd 	bl	800a4c0 <__pow5mult>
 800cac6:	9b07      	ldr	r3, [sp, #28]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	4606      	mov	r6, r0
 800cacc:	dd7a      	ble.n	800cbc4 <_dtoa_r+0x89c>
 800cace:	f04f 0800 	mov.w	r8, #0
 800cad2:	6933      	ldr	r3, [r6, #16]
 800cad4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cad8:	6918      	ldr	r0, [r3, #16]
 800cada:	f7fd fbe3 	bl	800a2a4 <__hi0bits>
 800cade:	f1c0 0020 	rsb	r0, r0, #32
 800cae2:	9b06      	ldr	r3, [sp, #24]
 800cae4:	4418      	add	r0, r3
 800cae6:	f010 001f 	ands.w	r0, r0, #31
 800caea:	f000 8094 	beq.w	800cc16 <_dtoa_r+0x8ee>
 800caee:	f1c0 0320 	rsb	r3, r0, #32
 800caf2:	2b04      	cmp	r3, #4
 800caf4:	f340 8085 	ble.w	800cc02 <_dtoa_r+0x8da>
 800caf8:	9b05      	ldr	r3, [sp, #20]
 800cafa:	f1c0 001c 	rsb	r0, r0, #28
 800cafe:	4403      	add	r3, r0
 800cb00:	9305      	str	r3, [sp, #20]
 800cb02:	9b06      	ldr	r3, [sp, #24]
 800cb04:	4403      	add	r3, r0
 800cb06:	4405      	add	r5, r0
 800cb08:	9306      	str	r3, [sp, #24]
 800cb0a:	9b05      	ldr	r3, [sp, #20]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	dd05      	ble.n	800cb1c <_dtoa_r+0x7f4>
 800cb10:	4651      	mov	r1, sl
 800cb12:	461a      	mov	r2, r3
 800cb14:	4620      	mov	r0, r4
 800cb16:	f7fd fd13 	bl	800a540 <__lshift>
 800cb1a:	4682      	mov	sl, r0
 800cb1c:	9b06      	ldr	r3, [sp, #24]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	dd05      	ble.n	800cb2e <_dtoa_r+0x806>
 800cb22:	4631      	mov	r1, r6
 800cb24:	461a      	mov	r2, r3
 800cb26:	4620      	mov	r0, r4
 800cb28:	f7fd fd0a 	bl	800a540 <__lshift>
 800cb2c:	4606      	mov	r6, r0
 800cb2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d072      	beq.n	800cc1a <_dtoa_r+0x8f2>
 800cb34:	4631      	mov	r1, r6
 800cb36:	4650      	mov	r0, sl
 800cb38:	f7fd fd6e 	bl	800a618 <__mcmp>
 800cb3c:	2800      	cmp	r0, #0
 800cb3e:	da6c      	bge.n	800cc1a <_dtoa_r+0x8f2>
 800cb40:	2300      	movs	r3, #0
 800cb42:	4651      	mov	r1, sl
 800cb44:	220a      	movs	r2, #10
 800cb46:	4620      	mov	r0, r4
 800cb48:	f7fd fb1c 	bl	800a184 <__multadd>
 800cb4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb4e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cb52:	4682      	mov	sl, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	f000 81af 	beq.w	800ceb8 <_dtoa_r+0xb90>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	4639      	mov	r1, r7
 800cb5e:	220a      	movs	r2, #10
 800cb60:	4620      	mov	r0, r4
 800cb62:	f7fd fb0f 	bl	800a184 <__multadd>
 800cb66:	9b01      	ldr	r3, [sp, #4]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	4607      	mov	r7, r0
 800cb6c:	f300 8096 	bgt.w	800cc9c <_dtoa_r+0x974>
 800cb70:	9b07      	ldr	r3, [sp, #28]
 800cb72:	2b02      	cmp	r3, #2
 800cb74:	dc59      	bgt.n	800cc2a <_dtoa_r+0x902>
 800cb76:	e091      	b.n	800cc9c <_dtoa_r+0x974>
 800cb78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb7a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb7e:	e758      	b.n	800ca32 <_dtoa_r+0x70a>
 800cb80:	9b04      	ldr	r3, [sp, #16]
 800cb82:	1e5e      	subs	r6, r3, #1
 800cb84:	9b08      	ldr	r3, [sp, #32]
 800cb86:	42b3      	cmp	r3, r6
 800cb88:	bfbf      	itttt	lt
 800cb8a:	9b08      	ldrlt	r3, [sp, #32]
 800cb8c:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800cb8e:	9608      	strlt	r6, [sp, #32]
 800cb90:	1af3      	sublt	r3, r6, r3
 800cb92:	bfb4      	ite	lt
 800cb94:	18d2      	addlt	r2, r2, r3
 800cb96:	1b9e      	subge	r6, r3, r6
 800cb98:	9b04      	ldr	r3, [sp, #16]
 800cb9a:	bfbc      	itt	lt
 800cb9c:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800cb9e:	2600      	movlt	r6, #0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	bfb7      	itett	lt
 800cba4:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800cba8:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800cbac:	1a9d      	sublt	r5, r3, r2
 800cbae:	2300      	movlt	r3, #0
 800cbb0:	e741      	b.n	800ca36 <_dtoa_r+0x70e>
 800cbb2:	9e08      	ldr	r6, [sp, #32]
 800cbb4:	9d05      	ldr	r5, [sp, #20]
 800cbb6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800cbb8:	e748      	b.n	800ca4c <_dtoa_r+0x724>
 800cbba:	9a08      	ldr	r2, [sp, #32]
 800cbbc:	e770      	b.n	800caa0 <_dtoa_r+0x778>
 800cbbe:	9b07      	ldr	r3, [sp, #28]
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	dc19      	bgt.n	800cbf8 <_dtoa_r+0x8d0>
 800cbc4:	9b02      	ldr	r3, [sp, #8]
 800cbc6:	b9bb      	cbnz	r3, 800cbf8 <_dtoa_r+0x8d0>
 800cbc8:	9b03      	ldr	r3, [sp, #12]
 800cbca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbce:	b99b      	cbnz	r3, 800cbf8 <_dtoa_r+0x8d0>
 800cbd0:	9b03      	ldr	r3, [sp, #12]
 800cbd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbd6:	0d1b      	lsrs	r3, r3, #20
 800cbd8:	051b      	lsls	r3, r3, #20
 800cbda:	b183      	cbz	r3, 800cbfe <_dtoa_r+0x8d6>
 800cbdc:	9b05      	ldr	r3, [sp, #20]
 800cbde:	3301      	adds	r3, #1
 800cbe0:	9305      	str	r3, [sp, #20]
 800cbe2:	9b06      	ldr	r3, [sp, #24]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	9306      	str	r3, [sp, #24]
 800cbe8:	f04f 0801 	mov.w	r8, #1
 800cbec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	f47f af6f 	bne.w	800cad2 <_dtoa_r+0x7aa>
 800cbf4:	2001      	movs	r0, #1
 800cbf6:	e774      	b.n	800cae2 <_dtoa_r+0x7ba>
 800cbf8:	f04f 0800 	mov.w	r8, #0
 800cbfc:	e7f6      	b.n	800cbec <_dtoa_r+0x8c4>
 800cbfe:	4698      	mov	r8, r3
 800cc00:	e7f4      	b.n	800cbec <_dtoa_r+0x8c4>
 800cc02:	d082      	beq.n	800cb0a <_dtoa_r+0x7e2>
 800cc04:	9a05      	ldr	r2, [sp, #20]
 800cc06:	331c      	adds	r3, #28
 800cc08:	441a      	add	r2, r3
 800cc0a:	9205      	str	r2, [sp, #20]
 800cc0c:	9a06      	ldr	r2, [sp, #24]
 800cc0e:	441a      	add	r2, r3
 800cc10:	441d      	add	r5, r3
 800cc12:	9206      	str	r2, [sp, #24]
 800cc14:	e779      	b.n	800cb0a <_dtoa_r+0x7e2>
 800cc16:	4603      	mov	r3, r0
 800cc18:	e7f4      	b.n	800cc04 <_dtoa_r+0x8dc>
 800cc1a:	9b04      	ldr	r3, [sp, #16]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	dc37      	bgt.n	800cc90 <_dtoa_r+0x968>
 800cc20:	9b07      	ldr	r3, [sp, #28]
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	dd34      	ble.n	800cc90 <_dtoa_r+0x968>
 800cc26:	9b04      	ldr	r3, [sp, #16]
 800cc28:	9301      	str	r3, [sp, #4]
 800cc2a:	9b01      	ldr	r3, [sp, #4]
 800cc2c:	b963      	cbnz	r3, 800cc48 <_dtoa_r+0x920>
 800cc2e:	4631      	mov	r1, r6
 800cc30:	2205      	movs	r2, #5
 800cc32:	4620      	mov	r0, r4
 800cc34:	f7fd faa6 	bl	800a184 <__multadd>
 800cc38:	4601      	mov	r1, r0
 800cc3a:	4606      	mov	r6, r0
 800cc3c:	4650      	mov	r0, sl
 800cc3e:	f7fd fceb 	bl	800a618 <__mcmp>
 800cc42:	2800      	cmp	r0, #0
 800cc44:	f73f adbc 	bgt.w	800c7c0 <_dtoa_r+0x498>
 800cc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc4a:	9d00      	ldr	r5, [sp, #0]
 800cc4c:	ea6f 0b03 	mvn.w	fp, r3
 800cc50:	f04f 0800 	mov.w	r8, #0
 800cc54:	4631      	mov	r1, r6
 800cc56:	4620      	mov	r0, r4
 800cc58:	f7fd fa8b 	bl	800a172 <_Bfree>
 800cc5c:	2f00      	cmp	r7, #0
 800cc5e:	f43f aeab 	beq.w	800c9b8 <_dtoa_r+0x690>
 800cc62:	f1b8 0f00 	cmp.w	r8, #0
 800cc66:	d005      	beq.n	800cc74 <_dtoa_r+0x94c>
 800cc68:	45b8      	cmp	r8, r7
 800cc6a:	d003      	beq.n	800cc74 <_dtoa_r+0x94c>
 800cc6c:	4641      	mov	r1, r8
 800cc6e:	4620      	mov	r0, r4
 800cc70:	f7fd fa7f 	bl	800a172 <_Bfree>
 800cc74:	4639      	mov	r1, r7
 800cc76:	4620      	mov	r0, r4
 800cc78:	f7fd fa7b 	bl	800a172 <_Bfree>
 800cc7c:	e69c      	b.n	800c9b8 <_dtoa_r+0x690>
 800cc7e:	2600      	movs	r6, #0
 800cc80:	4637      	mov	r7, r6
 800cc82:	e7e1      	b.n	800cc48 <_dtoa_r+0x920>
 800cc84:	46bb      	mov	fp, r7
 800cc86:	4637      	mov	r7, r6
 800cc88:	e59a      	b.n	800c7c0 <_dtoa_r+0x498>
 800cc8a:	bf00      	nop
 800cc8c:	40240000 	.word	0x40240000
 800cc90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f000 80c7 	beq.w	800ce26 <_dtoa_r+0xafe>
 800cc98:	9b04      	ldr	r3, [sp, #16]
 800cc9a:	9301      	str	r3, [sp, #4]
 800cc9c:	2d00      	cmp	r5, #0
 800cc9e:	dd05      	ble.n	800ccac <_dtoa_r+0x984>
 800cca0:	4639      	mov	r1, r7
 800cca2:	462a      	mov	r2, r5
 800cca4:	4620      	mov	r0, r4
 800cca6:	f7fd fc4b 	bl	800a540 <__lshift>
 800ccaa:	4607      	mov	r7, r0
 800ccac:	f1b8 0f00 	cmp.w	r8, #0
 800ccb0:	d05a      	beq.n	800cd68 <_dtoa_r+0xa40>
 800ccb2:	6879      	ldr	r1, [r7, #4]
 800ccb4:	4620      	mov	r0, r4
 800ccb6:	f7fd fa37 	bl	800a128 <_Balloc>
 800ccba:	4605      	mov	r5, r0
 800ccbc:	b920      	cbnz	r0, 800ccc8 <_dtoa_r+0x9a0>
 800ccbe:	4b82      	ldr	r3, [pc, #520]	; (800cec8 <_dtoa_r+0xba0>)
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ccc6:	e470      	b.n	800c5aa <_dtoa_r+0x282>
 800ccc8:	693a      	ldr	r2, [r7, #16]
 800ccca:	3202      	adds	r2, #2
 800cccc:	0092      	lsls	r2, r2, #2
 800ccce:	f107 010c 	add.w	r1, r7, #12
 800ccd2:	300c      	adds	r0, #12
 800ccd4:	f7fc fb3e 	bl	8009354 <memcpy>
 800ccd8:	2201      	movs	r2, #1
 800ccda:	4629      	mov	r1, r5
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f7fd fc2f 	bl	800a540 <__lshift>
 800cce2:	9b00      	ldr	r3, [sp, #0]
 800cce4:	3301      	adds	r3, #1
 800cce6:	9304      	str	r3, [sp, #16]
 800cce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccec:	4413      	add	r3, r2
 800ccee:	9308      	str	r3, [sp, #32]
 800ccf0:	9b02      	ldr	r3, [sp, #8]
 800ccf2:	f003 0301 	and.w	r3, r3, #1
 800ccf6:	46b8      	mov	r8, r7
 800ccf8:	9306      	str	r3, [sp, #24]
 800ccfa:	4607      	mov	r7, r0
 800ccfc:	9b04      	ldr	r3, [sp, #16]
 800ccfe:	4631      	mov	r1, r6
 800cd00:	3b01      	subs	r3, #1
 800cd02:	4650      	mov	r0, sl
 800cd04:	9301      	str	r3, [sp, #4]
 800cd06:	f7ff fa86 	bl	800c216 <quorem>
 800cd0a:	4641      	mov	r1, r8
 800cd0c:	9002      	str	r0, [sp, #8]
 800cd0e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cd12:	4650      	mov	r0, sl
 800cd14:	f7fd fc80 	bl	800a618 <__mcmp>
 800cd18:	463a      	mov	r2, r7
 800cd1a:	9005      	str	r0, [sp, #20]
 800cd1c:	4631      	mov	r1, r6
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f7fd fc96 	bl	800a650 <__mdiff>
 800cd24:	68c2      	ldr	r2, [r0, #12]
 800cd26:	4605      	mov	r5, r0
 800cd28:	bb02      	cbnz	r2, 800cd6c <_dtoa_r+0xa44>
 800cd2a:	4601      	mov	r1, r0
 800cd2c:	4650      	mov	r0, sl
 800cd2e:	f7fd fc73 	bl	800a618 <__mcmp>
 800cd32:	4602      	mov	r2, r0
 800cd34:	4629      	mov	r1, r5
 800cd36:	4620      	mov	r0, r4
 800cd38:	9209      	str	r2, [sp, #36]	; 0x24
 800cd3a:	f7fd fa1a 	bl	800a172 <_Bfree>
 800cd3e:	9b07      	ldr	r3, [sp, #28]
 800cd40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd42:	9d04      	ldr	r5, [sp, #16]
 800cd44:	ea43 0102 	orr.w	r1, r3, r2
 800cd48:	9b06      	ldr	r3, [sp, #24]
 800cd4a:	4319      	orrs	r1, r3
 800cd4c:	d110      	bne.n	800cd70 <_dtoa_r+0xa48>
 800cd4e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cd52:	d029      	beq.n	800cda8 <_dtoa_r+0xa80>
 800cd54:	9b05      	ldr	r3, [sp, #20]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	dd02      	ble.n	800cd60 <_dtoa_r+0xa38>
 800cd5a:	9b02      	ldr	r3, [sp, #8]
 800cd5c:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cd60:	9b01      	ldr	r3, [sp, #4]
 800cd62:	f883 9000 	strb.w	r9, [r3]
 800cd66:	e775      	b.n	800cc54 <_dtoa_r+0x92c>
 800cd68:	4638      	mov	r0, r7
 800cd6a:	e7ba      	b.n	800cce2 <_dtoa_r+0x9ba>
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	e7e1      	b.n	800cd34 <_dtoa_r+0xa0c>
 800cd70:	9b05      	ldr	r3, [sp, #20]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	db04      	blt.n	800cd80 <_dtoa_r+0xa58>
 800cd76:	9907      	ldr	r1, [sp, #28]
 800cd78:	430b      	orrs	r3, r1
 800cd7a:	9906      	ldr	r1, [sp, #24]
 800cd7c:	430b      	orrs	r3, r1
 800cd7e:	d120      	bne.n	800cdc2 <_dtoa_r+0xa9a>
 800cd80:	2a00      	cmp	r2, #0
 800cd82:	dded      	ble.n	800cd60 <_dtoa_r+0xa38>
 800cd84:	4651      	mov	r1, sl
 800cd86:	2201      	movs	r2, #1
 800cd88:	4620      	mov	r0, r4
 800cd8a:	f7fd fbd9 	bl	800a540 <__lshift>
 800cd8e:	4631      	mov	r1, r6
 800cd90:	4682      	mov	sl, r0
 800cd92:	f7fd fc41 	bl	800a618 <__mcmp>
 800cd96:	2800      	cmp	r0, #0
 800cd98:	dc03      	bgt.n	800cda2 <_dtoa_r+0xa7a>
 800cd9a:	d1e1      	bne.n	800cd60 <_dtoa_r+0xa38>
 800cd9c:	f019 0f01 	tst.w	r9, #1
 800cda0:	d0de      	beq.n	800cd60 <_dtoa_r+0xa38>
 800cda2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cda6:	d1d8      	bne.n	800cd5a <_dtoa_r+0xa32>
 800cda8:	9a01      	ldr	r2, [sp, #4]
 800cdaa:	2339      	movs	r3, #57	; 0x39
 800cdac:	7013      	strb	r3, [r2, #0]
 800cdae:	462b      	mov	r3, r5
 800cdb0:	461d      	mov	r5, r3
 800cdb2:	3b01      	subs	r3, #1
 800cdb4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cdb8:	2a39      	cmp	r2, #57	; 0x39
 800cdba:	d06c      	beq.n	800ce96 <_dtoa_r+0xb6e>
 800cdbc:	3201      	adds	r2, #1
 800cdbe:	701a      	strb	r2, [r3, #0]
 800cdc0:	e748      	b.n	800cc54 <_dtoa_r+0x92c>
 800cdc2:	2a00      	cmp	r2, #0
 800cdc4:	dd07      	ble.n	800cdd6 <_dtoa_r+0xaae>
 800cdc6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cdca:	d0ed      	beq.n	800cda8 <_dtoa_r+0xa80>
 800cdcc:	9a01      	ldr	r2, [sp, #4]
 800cdce:	f109 0301 	add.w	r3, r9, #1
 800cdd2:	7013      	strb	r3, [r2, #0]
 800cdd4:	e73e      	b.n	800cc54 <_dtoa_r+0x92c>
 800cdd6:	9b04      	ldr	r3, [sp, #16]
 800cdd8:	9a08      	ldr	r2, [sp, #32]
 800cdda:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d043      	beq.n	800ce6a <_dtoa_r+0xb42>
 800cde2:	4651      	mov	r1, sl
 800cde4:	2300      	movs	r3, #0
 800cde6:	220a      	movs	r2, #10
 800cde8:	4620      	mov	r0, r4
 800cdea:	f7fd f9cb 	bl	800a184 <__multadd>
 800cdee:	45b8      	cmp	r8, r7
 800cdf0:	4682      	mov	sl, r0
 800cdf2:	f04f 0300 	mov.w	r3, #0
 800cdf6:	f04f 020a 	mov.w	r2, #10
 800cdfa:	4641      	mov	r1, r8
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	d107      	bne.n	800ce10 <_dtoa_r+0xae8>
 800ce00:	f7fd f9c0 	bl	800a184 <__multadd>
 800ce04:	4680      	mov	r8, r0
 800ce06:	4607      	mov	r7, r0
 800ce08:	9b04      	ldr	r3, [sp, #16]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	9304      	str	r3, [sp, #16]
 800ce0e:	e775      	b.n	800ccfc <_dtoa_r+0x9d4>
 800ce10:	f7fd f9b8 	bl	800a184 <__multadd>
 800ce14:	4639      	mov	r1, r7
 800ce16:	4680      	mov	r8, r0
 800ce18:	2300      	movs	r3, #0
 800ce1a:	220a      	movs	r2, #10
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	f7fd f9b1 	bl	800a184 <__multadd>
 800ce22:	4607      	mov	r7, r0
 800ce24:	e7f0      	b.n	800ce08 <_dtoa_r+0xae0>
 800ce26:	9b04      	ldr	r3, [sp, #16]
 800ce28:	9301      	str	r3, [sp, #4]
 800ce2a:	9d00      	ldr	r5, [sp, #0]
 800ce2c:	4631      	mov	r1, r6
 800ce2e:	4650      	mov	r0, sl
 800ce30:	f7ff f9f1 	bl	800c216 <quorem>
 800ce34:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ce38:	9b00      	ldr	r3, [sp, #0]
 800ce3a:	f805 9b01 	strb.w	r9, [r5], #1
 800ce3e:	1aea      	subs	r2, r5, r3
 800ce40:	9b01      	ldr	r3, [sp, #4]
 800ce42:	4293      	cmp	r3, r2
 800ce44:	dd07      	ble.n	800ce56 <_dtoa_r+0xb2e>
 800ce46:	4651      	mov	r1, sl
 800ce48:	2300      	movs	r3, #0
 800ce4a:	220a      	movs	r2, #10
 800ce4c:	4620      	mov	r0, r4
 800ce4e:	f7fd f999 	bl	800a184 <__multadd>
 800ce52:	4682      	mov	sl, r0
 800ce54:	e7ea      	b.n	800ce2c <_dtoa_r+0xb04>
 800ce56:	9b01      	ldr	r3, [sp, #4]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	bfc8      	it	gt
 800ce5c:	461d      	movgt	r5, r3
 800ce5e:	9b00      	ldr	r3, [sp, #0]
 800ce60:	bfd8      	it	le
 800ce62:	2501      	movle	r5, #1
 800ce64:	441d      	add	r5, r3
 800ce66:	f04f 0800 	mov.w	r8, #0
 800ce6a:	4651      	mov	r1, sl
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	4620      	mov	r0, r4
 800ce70:	f7fd fb66 	bl	800a540 <__lshift>
 800ce74:	4631      	mov	r1, r6
 800ce76:	4682      	mov	sl, r0
 800ce78:	f7fd fbce 	bl	800a618 <__mcmp>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	dc96      	bgt.n	800cdae <_dtoa_r+0xa86>
 800ce80:	d102      	bne.n	800ce88 <_dtoa_r+0xb60>
 800ce82:	f019 0f01 	tst.w	r9, #1
 800ce86:	d192      	bne.n	800cdae <_dtoa_r+0xa86>
 800ce88:	462b      	mov	r3, r5
 800ce8a:	461d      	mov	r5, r3
 800ce8c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce90:	2a30      	cmp	r2, #48	; 0x30
 800ce92:	d0fa      	beq.n	800ce8a <_dtoa_r+0xb62>
 800ce94:	e6de      	b.n	800cc54 <_dtoa_r+0x92c>
 800ce96:	9a00      	ldr	r2, [sp, #0]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d189      	bne.n	800cdb0 <_dtoa_r+0xa88>
 800ce9c:	f10b 0b01 	add.w	fp, fp, #1
 800cea0:	2331      	movs	r3, #49	; 0x31
 800cea2:	e796      	b.n	800cdd2 <_dtoa_r+0xaaa>
 800cea4:	4b09      	ldr	r3, [pc, #36]	; (800cecc <_dtoa_r+0xba4>)
 800cea6:	f7ff ba9d 	b.w	800c3e4 <_dtoa_r+0xbc>
 800ceaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	f47f aa7c 	bne.w	800c3aa <_dtoa_r+0x82>
 800ceb2:	4b07      	ldr	r3, [pc, #28]	; (800ced0 <_dtoa_r+0xba8>)
 800ceb4:	f7ff ba96 	b.w	800c3e4 <_dtoa_r+0xbc>
 800ceb8:	9b01      	ldr	r3, [sp, #4]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	dcb5      	bgt.n	800ce2a <_dtoa_r+0xb02>
 800cebe:	9b07      	ldr	r3, [sp, #28]
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	f73f aeb2 	bgt.w	800cc2a <_dtoa_r+0x902>
 800cec6:	e7b0      	b.n	800ce2a <_dtoa_r+0xb02>
 800cec8:	0800f568 	.word	0x0800f568
 800cecc:	0800f867 	.word	0x0800f867
 800ced0:	0800f8c5 	.word	0x0800f8c5

0800ced4 <fiprintf>:
 800ced4:	b40e      	push	{r1, r2, r3}
 800ced6:	b503      	push	{r0, r1, lr}
 800ced8:	4601      	mov	r1, r0
 800ceda:	ab03      	add	r3, sp, #12
 800cedc:	4805      	ldr	r0, [pc, #20]	; (800cef4 <fiprintf+0x20>)
 800cede:	f853 2b04 	ldr.w	r2, [r3], #4
 800cee2:	6800      	ldr	r0, [r0, #0]
 800cee4:	9301      	str	r3, [sp, #4]
 800cee6:	f000 f8b7 	bl	800d058 <_vfiprintf_r>
 800ceea:	b002      	add	sp, #8
 800ceec:	f85d eb04 	ldr.w	lr, [sp], #4
 800cef0:	b003      	add	sp, #12
 800cef2:	4770      	bx	lr
 800cef4:	20000398 	.word	0x20000398

0800cef8 <__ssprint_r>:
 800cef8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cefc:	6813      	ldr	r3, [r2, #0]
 800cefe:	9301      	str	r3, [sp, #4]
 800cf00:	6893      	ldr	r3, [r2, #8]
 800cf02:	4680      	mov	r8, r0
 800cf04:	460c      	mov	r4, r1
 800cf06:	4617      	mov	r7, r2
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d157      	bne.n	800cfbc <__ssprint_r+0xc4>
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	2300      	movs	r3, #0
 800cf10:	607b      	str	r3, [r7, #4]
 800cf12:	b003      	add	sp, #12
 800cf14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf18:	9b01      	ldr	r3, [sp, #4]
 800cf1a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800cf1e:	3308      	adds	r3, #8
 800cf20:	9301      	str	r3, [sp, #4]
 800cf22:	68a6      	ldr	r6, [r4, #8]
 800cf24:	6820      	ldr	r0, [r4, #0]
 800cf26:	f1bb 0f00 	cmp.w	fp, #0
 800cf2a:	d0f5      	beq.n	800cf18 <__ssprint_r+0x20>
 800cf2c:	45b3      	cmp	fp, r6
 800cf2e:	d32d      	bcc.n	800cf8c <__ssprint_r+0x94>
 800cf30:	89a2      	ldrh	r2, [r4, #12]
 800cf32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf36:	d029      	beq.n	800cf8c <__ssprint_r+0x94>
 800cf38:	6921      	ldr	r1, [r4, #16]
 800cf3a:	6965      	ldr	r5, [r4, #20]
 800cf3c:	eba0 0901 	sub.w	r9, r0, r1
 800cf40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf48:	f109 0001 	add.w	r0, r9, #1
 800cf4c:	106d      	asrs	r5, r5, #1
 800cf4e:	4458      	add	r0, fp
 800cf50:	4285      	cmp	r5, r0
 800cf52:	bf38      	it	cc
 800cf54:	4605      	movcc	r5, r0
 800cf56:	0553      	lsls	r3, r2, #21
 800cf58:	d534      	bpl.n	800cfc4 <__ssprint_r+0xcc>
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	4640      	mov	r0, r8
 800cf5e:	f7fc fe8b 	bl	8009c78 <_malloc_r>
 800cf62:	4606      	mov	r6, r0
 800cf64:	2800      	cmp	r0, #0
 800cf66:	d038      	beq.n	800cfda <__ssprint_r+0xe2>
 800cf68:	464a      	mov	r2, r9
 800cf6a:	6921      	ldr	r1, [r4, #16]
 800cf6c:	f7fc f9f2 	bl	8009354 <memcpy>
 800cf70:	89a2      	ldrh	r2, [r4, #12]
 800cf72:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800cf76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cf7a:	81a2      	strh	r2, [r4, #12]
 800cf7c:	6126      	str	r6, [r4, #16]
 800cf7e:	6165      	str	r5, [r4, #20]
 800cf80:	444e      	add	r6, r9
 800cf82:	eba5 0509 	sub.w	r5, r5, r9
 800cf86:	6026      	str	r6, [r4, #0]
 800cf88:	60a5      	str	r5, [r4, #8]
 800cf8a:	465e      	mov	r6, fp
 800cf8c:	455e      	cmp	r6, fp
 800cf8e:	bf28      	it	cs
 800cf90:	465e      	movcs	r6, fp
 800cf92:	4632      	mov	r2, r6
 800cf94:	4651      	mov	r1, sl
 800cf96:	6820      	ldr	r0, [r4, #0]
 800cf98:	f000 ff3d 	bl	800de16 <memmove>
 800cf9c:	68a2      	ldr	r2, [r4, #8]
 800cf9e:	1b92      	subs	r2, r2, r6
 800cfa0:	60a2      	str	r2, [r4, #8]
 800cfa2:	6822      	ldr	r2, [r4, #0]
 800cfa4:	4432      	add	r2, r6
 800cfa6:	6022      	str	r2, [r4, #0]
 800cfa8:	68ba      	ldr	r2, [r7, #8]
 800cfaa:	eba2 030b 	sub.w	r3, r2, fp
 800cfae:	44da      	add	sl, fp
 800cfb0:	60bb      	str	r3, [r7, #8]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d0aa      	beq.n	800cf0c <__ssprint_r+0x14>
 800cfb6:	f04f 0b00 	mov.w	fp, #0
 800cfba:	e7b2      	b.n	800cf22 <__ssprint_r+0x2a>
 800cfbc:	f04f 0a00 	mov.w	sl, #0
 800cfc0:	46d3      	mov	fp, sl
 800cfc2:	e7ae      	b.n	800cf22 <__ssprint_r+0x2a>
 800cfc4:	462a      	mov	r2, r5
 800cfc6:	4640      	mov	r0, r8
 800cfc8:	f000 ff46 	bl	800de58 <_realloc_r>
 800cfcc:	4606      	mov	r6, r0
 800cfce:	2800      	cmp	r0, #0
 800cfd0:	d1d4      	bne.n	800cf7c <__ssprint_r+0x84>
 800cfd2:	6921      	ldr	r1, [r4, #16]
 800cfd4:	4640      	mov	r0, r8
 800cfd6:	f7fc fa37 	bl	8009448 <_free_r>
 800cfda:	230c      	movs	r3, #12
 800cfdc:	f8c8 3000 	str.w	r3, [r8]
 800cfe0:	89a3      	ldrh	r3, [r4, #12]
 800cfe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfe6:	81a3      	strh	r3, [r4, #12]
 800cfe8:	2300      	movs	r3, #0
 800cfea:	60bb      	str	r3, [r7, #8]
 800cfec:	f04f 30ff 	mov.w	r0, #4294967295
 800cff0:	e78d      	b.n	800cf0e <__ssprint_r+0x16>

0800cff2 <__sprint_r>:
 800cff2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff6:	6893      	ldr	r3, [r2, #8]
 800cff8:	4680      	mov	r8, r0
 800cffa:	460f      	mov	r7, r1
 800cffc:	4614      	mov	r4, r2
 800cffe:	b343      	cbz	r3, 800d052 <__sprint_r+0x60>
 800d000:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800d002:	049d      	lsls	r5, r3, #18
 800d004:	d522      	bpl.n	800d04c <__sprint_r+0x5a>
 800d006:	6815      	ldr	r5, [r2, #0]
 800d008:	3508      	adds	r5, #8
 800d00a:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800d00e:	f04f 0900 	mov.w	r9, #0
 800d012:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800d016:	45ca      	cmp	sl, r9
 800d018:	dc0d      	bgt.n	800d036 <__sprint_r+0x44>
 800d01a:	68a3      	ldr	r3, [r4, #8]
 800d01c:	f026 0603 	bic.w	r6, r6, #3
 800d020:	1b98      	subs	r0, r3, r6
 800d022:	60a0      	str	r0, [r4, #8]
 800d024:	3508      	adds	r5, #8
 800d026:	2800      	cmp	r0, #0
 800d028:	d1ef      	bne.n	800d00a <__sprint_r+0x18>
 800d02a:	2300      	movs	r3, #0
 800d02c:	60a3      	str	r3, [r4, #8]
 800d02e:	2300      	movs	r3, #0
 800d030:	6063      	str	r3, [r4, #4]
 800d032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d036:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800d03a:	463a      	mov	r2, r7
 800d03c:	4640      	mov	r0, r8
 800d03e:	f000 fec0 	bl	800ddc2 <_fputwc_r>
 800d042:	1c43      	adds	r3, r0, #1
 800d044:	d0f1      	beq.n	800d02a <__sprint_r+0x38>
 800d046:	f109 0901 	add.w	r9, r9, #1
 800d04a:	e7e4      	b.n	800d016 <__sprint_r+0x24>
 800d04c:	f000 fcd6 	bl	800d9fc <__sfvwrite_r>
 800d050:	e7eb      	b.n	800d02a <__sprint_r+0x38>
 800d052:	4618      	mov	r0, r3
 800d054:	e7eb      	b.n	800d02e <__sprint_r+0x3c>
	...

0800d058 <_vfiprintf_r>:
 800d058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d05c:	ed2d 8b02 	vpush	{d8}
 800d060:	b0bb      	sub	sp, #236	; 0xec
 800d062:	460f      	mov	r7, r1
 800d064:	9201      	str	r2, [sp, #4]
 800d066:	461d      	mov	r5, r3
 800d068:	461c      	mov	r4, r3
 800d06a:	4681      	mov	r9, r0
 800d06c:	b118      	cbz	r0, 800d076 <_vfiprintf_r+0x1e>
 800d06e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d070:	b90b      	cbnz	r3, 800d076 <_vfiprintf_r+0x1e>
 800d072:	f7fc f841 	bl	80090f8 <__sinit>
 800d076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d078:	07d8      	lsls	r0, r3, #31
 800d07a:	d405      	bmi.n	800d088 <_vfiprintf_r+0x30>
 800d07c:	89bb      	ldrh	r3, [r7, #12]
 800d07e:	0599      	lsls	r1, r3, #22
 800d080:	d402      	bmi.n	800d088 <_vfiprintf_r+0x30>
 800d082:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d084:	f7fc f964 	bl	8009350 <__retarget_lock_acquire_recursive>
 800d088:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800d08c:	049a      	lsls	r2, r3, #18
 800d08e:	d406      	bmi.n	800d09e <_vfiprintf_r+0x46>
 800d090:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d094:	81bb      	strh	r3, [r7, #12]
 800d096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d098:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d09c:	667b      	str	r3, [r7, #100]	; 0x64
 800d09e:	89bb      	ldrh	r3, [r7, #12]
 800d0a0:	071e      	lsls	r6, r3, #28
 800d0a2:	d501      	bpl.n	800d0a8 <_vfiprintf_r+0x50>
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	b9bb      	cbnz	r3, 800d0d8 <_vfiprintf_r+0x80>
 800d0a8:	4639      	mov	r1, r7
 800d0aa:	4648      	mov	r0, r9
 800d0ac:	f000 fdf0 	bl	800dc90 <__swsetup_r>
 800d0b0:	b190      	cbz	r0, 800d0d8 <_vfiprintf_r+0x80>
 800d0b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0b4:	07d8      	lsls	r0, r3, #31
 800d0b6:	d508      	bpl.n	800d0ca <_vfiprintf_r+0x72>
 800d0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d0bc:	9302      	str	r3, [sp, #8]
 800d0be:	9802      	ldr	r0, [sp, #8]
 800d0c0:	b03b      	add	sp, #236	; 0xec
 800d0c2:	ecbd 8b02 	vpop	{d8}
 800d0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ca:	89bb      	ldrh	r3, [r7, #12]
 800d0cc:	0599      	lsls	r1, r3, #22
 800d0ce:	d4f3      	bmi.n	800d0b8 <_vfiprintf_r+0x60>
 800d0d0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d0d2:	f7fc f93e 	bl	8009352 <__retarget_lock_release_recursive>
 800d0d6:	e7ef      	b.n	800d0b8 <_vfiprintf_r+0x60>
 800d0d8:	89bb      	ldrh	r3, [r7, #12]
 800d0da:	f003 021a 	and.w	r2, r3, #26
 800d0de:	2a0a      	cmp	r2, #10
 800d0e0:	d116      	bne.n	800d110 <_vfiprintf_r+0xb8>
 800d0e2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d0e6:	2a00      	cmp	r2, #0
 800d0e8:	db12      	blt.n	800d110 <_vfiprintf_r+0xb8>
 800d0ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d0ec:	07d2      	lsls	r2, r2, #31
 800d0ee:	d404      	bmi.n	800d0fa <_vfiprintf_r+0xa2>
 800d0f0:	059e      	lsls	r6, r3, #22
 800d0f2:	d402      	bmi.n	800d0fa <_vfiprintf_r+0xa2>
 800d0f4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d0f6:	f7fc f92c 	bl	8009352 <__retarget_lock_release_recursive>
 800d0fa:	9a01      	ldr	r2, [sp, #4]
 800d0fc:	462b      	mov	r3, r5
 800d0fe:	4639      	mov	r1, r7
 800d100:	4648      	mov	r0, r9
 800d102:	b03b      	add	sp, #236	; 0xec
 800d104:	ecbd 8b02 	vpop	{d8}
 800d108:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d10c:	f000 bc36 	b.w	800d97c <__sbprintf>
 800d110:	2300      	movs	r3, #0
 800d112:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800d116:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d11a:	ae11      	add	r6, sp, #68	; 0x44
 800d11c:	ee08 3a10 	vmov	s16, r3
 800d120:	960e      	str	r6, [sp, #56]	; 0x38
 800d122:	9307      	str	r3, [sp, #28]
 800d124:	9302      	str	r3, [sp, #8]
 800d126:	9b01      	ldr	r3, [sp, #4]
 800d128:	461d      	mov	r5, r3
 800d12a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d12e:	b10a      	cbz	r2, 800d134 <_vfiprintf_r+0xdc>
 800d130:	2a25      	cmp	r2, #37	; 0x25
 800d132:	d1f9      	bne.n	800d128 <_vfiprintf_r+0xd0>
 800d134:	9b01      	ldr	r3, [sp, #4]
 800d136:	ebb5 0803 	subs.w	r8, r5, r3
 800d13a:	d00d      	beq.n	800d158 <_vfiprintf_r+0x100>
 800d13c:	e9c6 3800 	strd	r3, r8, [r6]
 800d140:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d142:	4443      	add	r3, r8
 800d144:	9310      	str	r3, [sp, #64]	; 0x40
 800d146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d148:	3301      	adds	r3, #1
 800d14a:	2b07      	cmp	r3, #7
 800d14c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d14e:	dc76      	bgt.n	800d23e <_vfiprintf_r+0x1e6>
 800d150:	3608      	adds	r6, #8
 800d152:	9b02      	ldr	r3, [sp, #8]
 800d154:	4443      	add	r3, r8
 800d156:	9302      	str	r3, [sp, #8]
 800d158:	782b      	ldrb	r3, [r5, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f000 83d0 	beq.w	800d900 <_vfiprintf_r+0x8a8>
 800d160:	2300      	movs	r3, #0
 800d162:	f04f 32ff 	mov.w	r2, #4294967295
 800d166:	3501      	adds	r5, #1
 800d168:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800d16c:	9200      	str	r2, [sp, #0]
 800d16e:	9303      	str	r3, [sp, #12]
 800d170:	469a      	mov	sl, r3
 800d172:	462a      	mov	r2, r5
 800d174:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d178:	9201      	str	r2, [sp, #4]
 800d17a:	f1a3 0220 	sub.w	r2, r3, #32
 800d17e:	2a5a      	cmp	r2, #90	; 0x5a
 800d180:	f200 831c 	bhi.w	800d7bc <_vfiprintf_r+0x764>
 800d184:	e8df f012 	tbh	[pc, r2, lsl #1]
 800d188:	031a007e 	.word	0x031a007e
 800d18c:	0086031a 	.word	0x0086031a
 800d190:	031a031a 	.word	0x031a031a
 800d194:	0065031a 	.word	0x0065031a
 800d198:	031a031a 	.word	0x031a031a
 800d19c:	00930089 	.word	0x00930089
 800d1a0:	0090031a 	.word	0x0090031a
 800d1a4:	031a0095 	.word	0x031a0095
 800d1a8:	00b300b0 	.word	0x00b300b0
 800d1ac:	00b300b3 	.word	0x00b300b3
 800d1b0:	00b300b3 	.word	0x00b300b3
 800d1b4:	00b300b3 	.word	0x00b300b3
 800d1b8:	00b300b3 	.word	0x00b300b3
 800d1bc:	031a031a 	.word	0x031a031a
 800d1c0:	031a031a 	.word	0x031a031a
 800d1c4:	031a031a 	.word	0x031a031a
 800d1c8:	031a031a 	.word	0x031a031a
 800d1cc:	00dd031a 	.word	0x00dd031a
 800d1d0:	031a00eb 	.word	0x031a00eb
 800d1d4:	031a031a 	.word	0x031a031a
 800d1d8:	031a031a 	.word	0x031a031a
 800d1dc:	031a031a 	.word	0x031a031a
 800d1e0:	031a031a 	.word	0x031a031a
 800d1e4:	013b031a 	.word	0x013b031a
 800d1e8:	031a031a 	.word	0x031a031a
 800d1ec:	0180031a 	.word	0x0180031a
 800d1f0:	025e031a 	.word	0x025e031a
 800d1f4:	031a031a 	.word	0x031a031a
 800d1f8:	031a027e 	.word	0x031a027e
 800d1fc:	031a031a 	.word	0x031a031a
 800d200:	031a031a 	.word	0x031a031a
 800d204:	031a031a 	.word	0x031a031a
 800d208:	031a031a 	.word	0x031a031a
 800d20c:	00dd031a 	.word	0x00dd031a
 800d210:	031a00ed 	.word	0x031a00ed
 800d214:	031a031a 	.word	0x031a031a
 800d218:	00ed00c3 	.word	0x00ed00c3
 800d21c:	031a00d7 	.word	0x031a00d7
 800d220:	031a00d0 	.word	0x031a00d0
 800d224:	013d0119 	.word	0x013d0119
 800d228:	00d70172 	.word	0x00d70172
 800d22c:	0180031a 	.word	0x0180031a
 800d230:	0260007c 	.word	0x0260007c
 800d234:	031a031a 	.word	0x031a031a
 800d238:	031a029a 	.word	0x031a029a
 800d23c:	007c      	.short	0x007c
 800d23e:	aa0e      	add	r2, sp, #56	; 0x38
 800d240:	4639      	mov	r1, r7
 800d242:	4648      	mov	r0, r9
 800d244:	f7ff fed5 	bl	800cff2 <__sprint_r>
 800d248:	2800      	cmp	r0, #0
 800d24a:	f040 8338 	bne.w	800d8be <_vfiprintf_r+0x866>
 800d24e:	ae11      	add	r6, sp, #68	; 0x44
 800d250:	e77f      	b.n	800d152 <_vfiprintf_r+0xfa>
 800d252:	4648      	mov	r0, r9
 800d254:	f7fe fee0 	bl	800c018 <_localeconv_r>
 800d258:	6843      	ldr	r3, [r0, #4]
 800d25a:	4618      	mov	r0, r3
 800d25c:	ee08 3a10 	vmov	s16, r3
 800d260:	f7f2 ffbe 	bl	80001e0 <strlen>
 800d264:	9007      	str	r0, [sp, #28]
 800d266:	4648      	mov	r0, r9
 800d268:	f7fe fed6 	bl	800c018 <_localeconv_r>
 800d26c:	6883      	ldr	r3, [r0, #8]
 800d26e:	9306      	str	r3, [sp, #24]
 800d270:	9b07      	ldr	r3, [sp, #28]
 800d272:	b12b      	cbz	r3, 800d280 <_vfiprintf_r+0x228>
 800d274:	9b06      	ldr	r3, [sp, #24]
 800d276:	b11b      	cbz	r3, 800d280 <_vfiprintf_r+0x228>
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	b10b      	cbz	r3, 800d280 <_vfiprintf_r+0x228>
 800d27c:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800d280:	9d01      	ldr	r5, [sp, #4]
 800d282:	e776      	b.n	800d172 <_vfiprintf_r+0x11a>
 800d284:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1f9      	bne.n	800d280 <_vfiprintf_r+0x228>
 800d28c:	2320      	movs	r3, #32
 800d28e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800d292:	e7f5      	b.n	800d280 <_vfiprintf_r+0x228>
 800d294:	f04a 0a01 	orr.w	sl, sl, #1
 800d298:	e7f2      	b.n	800d280 <_vfiprintf_r+0x228>
 800d29a:	f854 3b04 	ldr.w	r3, [r4], #4
 800d29e:	9303      	str	r3, [sp, #12]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	daed      	bge.n	800d280 <_vfiprintf_r+0x228>
 800d2a4:	425b      	negs	r3, r3
 800d2a6:	9303      	str	r3, [sp, #12]
 800d2a8:	f04a 0a04 	orr.w	sl, sl, #4
 800d2ac:	e7e8      	b.n	800d280 <_vfiprintf_r+0x228>
 800d2ae:	232b      	movs	r3, #43	; 0x2b
 800d2b0:	e7ed      	b.n	800d28e <_vfiprintf_r+0x236>
 800d2b2:	9a01      	ldr	r2, [sp, #4]
 800d2b4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d2b8:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ba:	d112      	bne.n	800d2e2 <_vfiprintf_r+0x28a>
 800d2bc:	f854 3b04 	ldr.w	r3, [r4], #4
 800d2c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2c4:	e9cd 3200 	strd	r3, r2, [sp]
 800d2c8:	e7da      	b.n	800d280 <_vfiprintf_r+0x228>
 800d2ca:	9b00      	ldr	r3, [sp, #0]
 800d2cc:	200a      	movs	r0, #10
 800d2ce:	fb00 1303 	mla	r3, r0, r3, r1
 800d2d2:	9300      	str	r3, [sp, #0]
 800d2d4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d2d8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d2dc:	2909      	cmp	r1, #9
 800d2de:	d9f4      	bls.n	800d2ca <_vfiprintf_r+0x272>
 800d2e0:	e74a      	b.n	800d178 <_vfiprintf_r+0x120>
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	9100      	str	r1, [sp, #0]
 800d2e6:	e7f7      	b.n	800d2d8 <_vfiprintf_r+0x280>
 800d2e8:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800d2ec:	e7c8      	b.n	800d280 <_vfiprintf_r+0x228>
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	9a01      	ldr	r2, [sp, #4]
 800d2f2:	9103      	str	r1, [sp, #12]
 800d2f4:	9903      	ldr	r1, [sp, #12]
 800d2f6:	3b30      	subs	r3, #48	; 0x30
 800d2f8:	200a      	movs	r0, #10
 800d2fa:	fb00 3301 	mla	r3, r0, r1, r3
 800d2fe:	9303      	str	r3, [sp, #12]
 800d300:	f812 3b01 	ldrb.w	r3, [r2], #1
 800d304:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d308:	2909      	cmp	r1, #9
 800d30a:	d9f3      	bls.n	800d2f4 <_vfiprintf_r+0x29c>
 800d30c:	e734      	b.n	800d178 <_vfiprintf_r+0x120>
 800d30e:	9b01      	ldr	r3, [sp, #4]
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	2b68      	cmp	r3, #104	; 0x68
 800d314:	bf01      	itttt	eq
 800d316:	9b01      	ldreq	r3, [sp, #4]
 800d318:	3301      	addeq	r3, #1
 800d31a:	9301      	streq	r3, [sp, #4]
 800d31c:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800d320:	bf18      	it	ne
 800d322:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800d326:	e7ab      	b.n	800d280 <_vfiprintf_r+0x228>
 800d328:	9b01      	ldr	r3, [sp, #4]
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	2b6c      	cmp	r3, #108	; 0x6c
 800d32e:	d105      	bne.n	800d33c <_vfiprintf_r+0x2e4>
 800d330:	9b01      	ldr	r3, [sp, #4]
 800d332:	3301      	adds	r3, #1
 800d334:	9301      	str	r3, [sp, #4]
 800d336:	f04a 0a20 	orr.w	sl, sl, #32
 800d33a:	e7a1      	b.n	800d280 <_vfiprintf_r+0x228>
 800d33c:	f04a 0a10 	orr.w	sl, sl, #16
 800d340:	e79e      	b.n	800d280 <_vfiprintf_r+0x228>
 800d342:	46a0      	mov	r8, r4
 800d344:	f858 3b04 	ldr.w	r3, [r8], #4
 800d348:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800d34c:	2300      	movs	r3, #0
 800d34e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800d352:	2201      	movs	r2, #1
 800d354:	9200      	str	r2, [sp, #0]
 800d356:	461d      	mov	r5, r3
 800d358:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 800d35c:	e0a9      	b.n	800d4b2 <_vfiprintf_r+0x45a>
 800d35e:	f04a 0a10 	orr.w	sl, sl, #16
 800d362:	f01a 0f20 	tst.w	sl, #32
 800d366:	d011      	beq.n	800d38c <_vfiprintf_r+0x334>
 800d368:	3407      	adds	r4, #7
 800d36a:	f024 0307 	bic.w	r3, r4, #7
 800d36e:	4698      	mov	r8, r3
 800d370:	685d      	ldr	r5, [r3, #4]
 800d372:	f858 4b08 	ldr.w	r4, [r8], #8
 800d376:	2d00      	cmp	r5, #0
 800d378:	da06      	bge.n	800d388 <_vfiprintf_r+0x330>
 800d37a:	4264      	negs	r4, r4
 800d37c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800d380:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800d384:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800d388:	2301      	movs	r3, #1
 800d38a:	e04a      	b.n	800d422 <_vfiprintf_r+0x3ca>
 800d38c:	46a0      	mov	r8, r4
 800d38e:	f01a 0f10 	tst.w	sl, #16
 800d392:	f858 5b04 	ldr.w	r5, [r8], #4
 800d396:	d002      	beq.n	800d39e <_vfiprintf_r+0x346>
 800d398:	462c      	mov	r4, r5
 800d39a:	17ed      	asrs	r5, r5, #31
 800d39c:	e7eb      	b.n	800d376 <_vfiprintf_r+0x31e>
 800d39e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800d3a2:	d003      	beq.n	800d3ac <_vfiprintf_r+0x354>
 800d3a4:	b22c      	sxth	r4, r5
 800d3a6:	f345 35c0 	sbfx	r5, r5, #15, #1
 800d3aa:	e7e4      	b.n	800d376 <_vfiprintf_r+0x31e>
 800d3ac:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800d3b0:	d0f2      	beq.n	800d398 <_vfiprintf_r+0x340>
 800d3b2:	b26c      	sxtb	r4, r5
 800d3b4:	f345 15c0 	sbfx	r5, r5, #7, #1
 800d3b8:	e7dd      	b.n	800d376 <_vfiprintf_r+0x31e>
 800d3ba:	f01a 0f20 	tst.w	sl, #32
 800d3be:	f104 0804 	add.w	r8, r4, #4
 800d3c2:	d007      	beq.n	800d3d4 <_vfiprintf_r+0x37c>
 800d3c4:	9a02      	ldr	r2, [sp, #8]
 800d3c6:	6823      	ldr	r3, [r4, #0]
 800d3c8:	9902      	ldr	r1, [sp, #8]
 800d3ca:	17d2      	asrs	r2, r2, #31
 800d3cc:	e9c3 1200 	strd	r1, r2, [r3]
 800d3d0:	4644      	mov	r4, r8
 800d3d2:	e6a8      	b.n	800d126 <_vfiprintf_r+0xce>
 800d3d4:	f01a 0f10 	tst.w	sl, #16
 800d3d8:	d003      	beq.n	800d3e2 <_vfiprintf_r+0x38a>
 800d3da:	6823      	ldr	r3, [r4, #0]
 800d3dc:	9a02      	ldr	r2, [sp, #8]
 800d3de:	601a      	str	r2, [r3, #0]
 800d3e0:	e7f6      	b.n	800d3d0 <_vfiprintf_r+0x378>
 800d3e2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800d3e6:	d003      	beq.n	800d3f0 <_vfiprintf_r+0x398>
 800d3e8:	6823      	ldr	r3, [r4, #0]
 800d3ea:	9a02      	ldr	r2, [sp, #8]
 800d3ec:	801a      	strh	r2, [r3, #0]
 800d3ee:	e7ef      	b.n	800d3d0 <_vfiprintf_r+0x378>
 800d3f0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800d3f4:	d0f1      	beq.n	800d3da <_vfiprintf_r+0x382>
 800d3f6:	6823      	ldr	r3, [r4, #0]
 800d3f8:	9a02      	ldr	r2, [sp, #8]
 800d3fa:	701a      	strb	r2, [r3, #0]
 800d3fc:	e7e8      	b.n	800d3d0 <_vfiprintf_r+0x378>
 800d3fe:	f04a 0a10 	orr.w	sl, sl, #16
 800d402:	f01a 0320 	ands.w	r3, sl, #32
 800d406:	d01f      	beq.n	800d448 <_vfiprintf_r+0x3f0>
 800d408:	3407      	adds	r4, #7
 800d40a:	f024 0307 	bic.w	r3, r4, #7
 800d40e:	4698      	mov	r8, r3
 800d410:	685d      	ldr	r5, [r3, #4]
 800d412:	f858 4b08 	ldr.w	r4, [r8], #8
 800d416:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800d41a:	2300      	movs	r3, #0
 800d41c:	2200      	movs	r2, #0
 800d41e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800d422:	9a00      	ldr	r2, [sp, #0]
 800d424:	3201      	adds	r2, #1
 800d426:	f000 8278 	beq.w	800d91a <_vfiprintf_r+0x8c2>
 800d42a:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800d42e:	9204      	str	r2, [sp, #16]
 800d430:	ea54 0205 	orrs.w	r2, r4, r5
 800d434:	f040 8277 	bne.w	800d926 <_vfiprintf_r+0x8ce>
 800d438:	9a00      	ldr	r2, [sp, #0]
 800d43a:	2a00      	cmp	r2, #0
 800d43c:	f000 81b3 	beq.w	800d7a6 <_vfiprintf_r+0x74e>
 800d440:	2b01      	cmp	r3, #1
 800d442:	f040 8273 	bne.w	800d92c <_vfiprintf_r+0x8d4>
 800d446:	e151      	b.n	800d6ec <_vfiprintf_r+0x694>
 800d448:	46a0      	mov	r8, r4
 800d44a:	f01a 0510 	ands.w	r5, sl, #16
 800d44e:	f858 4b04 	ldr.w	r4, [r8], #4
 800d452:	d001      	beq.n	800d458 <_vfiprintf_r+0x400>
 800d454:	461d      	mov	r5, r3
 800d456:	e7de      	b.n	800d416 <_vfiprintf_r+0x3be>
 800d458:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800d45c:	d001      	beq.n	800d462 <_vfiprintf_r+0x40a>
 800d45e:	b2a4      	uxth	r4, r4
 800d460:	e7d9      	b.n	800d416 <_vfiprintf_r+0x3be>
 800d462:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800d466:	d0d6      	beq.n	800d416 <_vfiprintf_r+0x3be>
 800d468:	b2e4      	uxtb	r4, r4
 800d46a:	e7f3      	b.n	800d454 <_vfiprintf_r+0x3fc>
 800d46c:	46a0      	mov	r8, r4
 800d46e:	f647 0330 	movw	r3, #30768	; 0x7830
 800d472:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800d476:	f858 4b04 	ldr.w	r4, [r8], #4
 800d47a:	4b9f      	ldr	r3, [pc, #636]	; (800d6f8 <_vfiprintf_r+0x6a0>)
 800d47c:	9305      	str	r3, [sp, #20]
 800d47e:	2500      	movs	r5, #0
 800d480:	f04a 0a02 	orr.w	sl, sl, #2
 800d484:	2302      	movs	r3, #2
 800d486:	e7c9      	b.n	800d41c <_vfiprintf_r+0x3c4>
 800d488:	9b00      	ldr	r3, [sp, #0]
 800d48a:	46a0      	mov	r8, r4
 800d48c:	2500      	movs	r5, #0
 800d48e:	1c5c      	adds	r4, r3, #1
 800d490:	f858 bb04 	ldr.w	fp, [r8], #4
 800d494:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800d498:	f000 80cf 	beq.w	800d63a <_vfiprintf_r+0x5e2>
 800d49c:	461a      	mov	r2, r3
 800d49e:	4629      	mov	r1, r5
 800d4a0:	4658      	mov	r0, fp
 800d4a2:	f7f2 fea5 	bl	80001f0 <memchr>
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	f000 8192 	beq.w	800d7d0 <_vfiprintf_r+0x778>
 800d4ac:	eba0 030b 	sub.w	r3, r0, fp
 800d4b0:	9300      	str	r3, [sp, #0]
 800d4b2:	9b00      	ldr	r3, [sp, #0]
 800d4b4:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800d4b8:	42ab      	cmp	r3, r5
 800d4ba:	bfb8      	it	lt
 800d4bc:	462b      	movlt	r3, r5
 800d4be:	9304      	str	r3, [sp, #16]
 800d4c0:	b10a      	cbz	r2, 800d4c6 <_vfiprintf_r+0x46e>
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	9304      	str	r3, [sp, #16]
 800d4c6:	f01a 0302 	ands.w	r3, sl, #2
 800d4ca:	9308      	str	r3, [sp, #32]
 800d4cc:	bf1e      	ittt	ne
 800d4ce:	9b04      	ldrne	r3, [sp, #16]
 800d4d0:	3302      	addne	r3, #2
 800d4d2:	9304      	strne	r3, [sp, #16]
 800d4d4:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800d4d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d4da:	d11f      	bne.n	800d51c <_vfiprintf_r+0x4c4>
 800d4dc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d4e0:	1a9c      	subs	r4, r3, r2
 800d4e2:	2c00      	cmp	r4, #0
 800d4e4:	dd1a      	ble.n	800d51c <_vfiprintf_r+0x4c4>
 800d4e6:	4b85      	ldr	r3, [pc, #532]	; (800d6fc <_vfiprintf_r+0x6a4>)
 800d4e8:	6033      	str	r3, [r6, #0]
 800d4ea:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800d4ee:	2c10      	cmp	r4, #16
 800d4f0:	f102 0201 	add.w	r2, r2, #1
 800d4f4:	f106 0008 	add.w	r0, r6, #8
 800d4f8:	f300 816c 	bgt.w	800d7d4 <_vfiprintf_r+0x77c>
 800d4fc:	6074      	str	r4, [r6, #4]
 800d4fe:	2a07      	cmp	r2, #7
 800d500:	4464      	add	r4, ip
 800d502:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800d506:	f340 8178 	ble.w	800d7fa <_vfiprintf_r+0x7a2>
 800d50a:	aa0e      	add	r2, sp, #56	; 0x38
 800d50c:	4639      	mov	r1, r7
 800d50e:	4648      	mov	r0, r9
 800d510:	f7ff fd6f 	bl	800cff2 <__sprint_r>
 800d514:	2800      	cmp	r0, #0
 800d516:	f040 81d2 	bne.w	800d8be <_vfiprintf_r+0x866>
 800d51a:	ae11      	add	r6, sp, #68	; 0x44
 800d51c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800d520:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800d524:	b160      	cbz	r0, 800d540 <_vfiprintf_r+0x4e8>
 800d526:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 800d52a:	3201      	adds	r2, #1
 800d52c:	6030      	str	r0, [r6, #0]
 800d52e:	2001      	movs	r0, #1
 800d530:	4401      	add	r1, r0
 800d532:	2a07      	cmp	r2, #7
 800d534:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d538:	6070      	str	r0, [r6, #4]
 800d53a:	f300 8160 	bgt.w	800d7fe <_vfiprintf_r+0x7a6>
 800d53e:	3608      	adds	r6, #8
 800d540:	9b08      	ldr	r3, [sp, #32]
 800d542:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800d546:	b15b      	cbz	r3, 800d560 <_vfiprintf_r+0x508>
 800d548:	a80d      	add	r0, sp, #52	; 0x34
 800d54a:	3201      	adds	r2, #1
 800d54c:	6030      	str	r0, [r6, #0]
 800d54e:	2002      	movs	r0, #2
 800d550:	4401      	add	r1, r0
 800d552:	2a07      	cmp	r2, #7
 800d554:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d558:	6070      	str	r0, [r6, #4]
 800d55a:	f300 8159 	bgt.w	800d810 <_vfiprintf_r+0x7b8>
 800d55e:	3608      	adds	r6, #8
 800d560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d562:	2b80      	cmp	r3, #128	; 0x80
 800d564:	d11f      	bne.n	800d5a6 <_vfiprintf_r+0x54e>
 800d566:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800d56a:	1a9c      	subs	r4, r3, r2
 800d56c:	2c00      	cmp	r4, #0
 800d56e:	dd1a      	ble.n	800d5a6 <_vfiprintf_r+0x54e>
 800d570:	4b63      	ldr	r3, [pc, #396]	; (800d700 <_vfiprintf_r+0x6a8>)
 800d572:	6033      	str	r3, [r6, #0]
 800d574:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800d578:	2c10      	cmp	r4, #16
 800d57a:	f102 0201 	add.w	r2, r2, #1
 800d57e:	f106 0008 	add.w	r0, r6, #8
 800d582:	f300 814e 	bgt.w	800d822 <_vfiprintf_r+0x7ca>
 800d586:	6074      	str	r4, [r6, #4]
 800d588:	2a07      	cmp	r2, #7
 800d58a:	4464      	add	r4, ip
 800d58c:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800d590:	f340 815a 	ble.w	800d848 <_vfiprintf_r+0x7f0>
 800d594:	aa0e      	add	r2, sp, #56	; 0x38
 800d596:	4639      	mov	r1, r7
 800d598:	4648      	mov	r0, r9
 800d59a:	f7ff fd2a 	bl	800cff2 <__sprint_r>
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	f040 818d 	bne.w	800d8be <_vfiprintf_r+0x866>
 800d5a4:	ae11      	add	r6, sp, #68	; 0x44
 800d5a6:	9b00      	ldr	r3, [sp, #0]
 800d5a8:	1aec      	subs	r4, r5, r3
 800d5aa:	2c00      	cmp	r4, #0
 800d5ac:	dd1b      	ble.n	800d5e6 <_vfiprintf_r+0x58e>
 800d5ae:	4d54      	ldr	r5, [pc, #336]	; (800d700 <_vfiprintf_r+0x6a8>)
 800d5b0:	2310      	movs	r3, #16
 800d5b2:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800d5b6:	2c10      	cmp	r4, #16
 800d5b8:	f102 0201 	add.w	r2, r2, #1
 800d5bc:	f106 0008 	add.w	r0, r6, #8
 800d5c0:	6035      	str	r5, [r6, #0]
 800d5c2:	f300 8143 	bgt.w	800d84c <_vfiprintf_r+0x7f4>
 800d5c6:	6074      	str	r4, [r6, #4]
 800d5c8:	2a07      	cmp	r2, #7
 800d5ca:	440c      	add	r4, r1
 800d5cc:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800d5d0:	f340 814d 	ble.w	800d86e <_vfiprintf_r+0x816>
 800d5d4:	aa0e      	add	r2, sp, #56	; 0x38
 800d5d6:	4639      	mov	r1, r7
 800d5d8:	4648      	mov	r0, r9
 800d5da:	f7ff fd0a 	bl	800cff2 <__sprint_r>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	f040 816d 	bne.w	800d8be <_vfiprintf_r+0x866>
 800d5e4:	ae11      	add	r6, sp, #68	; 0x44
 800d5e6:	9b00      	ldr	r3, [sp, #0]
 800d5e8:	9a00      	ldr	r2, [sp, #0]
 800d5ea:	6073      	str	r3, [r6, #4]
 800d5ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d5ee:	f8c6 b000 	str.w	fp, [r6]
 800d5f2:	4413      	add	r3, r2
 800d5f4:	9310      	str	r3, [sp, #64]	; 0x40
 800d5f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	2b07      	cmp	r3, #7
 800d5fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5fe:	f300 8138 	bgt.w	800d872 <_vfiprintf_r+0x81a>
 800d602:	f106 0308 	add.w	r3, r6, #8
 800d606:	f01a 0f04 	tst.w	sl, #4
 800d60a:	f040 813a 	bne.w	800d882 <_vfiprintf_r+0x82a>
 800d60e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d612:	9904      	ldr	r1, [sp, #16]
 800d614:	428a      	cmp	r2, r1
 800d616:	bfac      	ite	ge
 800d618:	189b      	addge	r3, r3, r2
 800d61a:	185b      	addlt	r3, r3, r1
 800d61c:	9302      	str	r3, [sp, #8]
 800d61e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d620:	b13b      	cbz	r3, 800d632 <_vfiprintf_r+0x5da>
 800d622:	aa0e      	add	r2, sp, #56	; 0x38
 800d624:	4639      	mov	r1, r7
 800d626:	4648      	mov	r0, r9
 800d628:	f7ff fce3 	bl	800cff2 <__sprint_r>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	f040 8146 	bne.w	800d8be <_vfiprintf_r+0x866>
 800d632:	2300      	movs	r3, #0
 800d634:	930f      	str	r3, [sp, #60]	; 0x3c
 800d636:	ae11      	add	r6, sp, #68	; 0x44
 800d638:	e6ca      	b.n	800d3d0 <_vfiprintf_r+0x378>
 800d63a:	4658      	mov	r0, fp
 800d63c:	f7f2 fdd0 	bl	80001e0 <strlen>
 800d640:	9000      	str	r0, [sp, #0]
 800d642:	e736      	b.n	800d4b2 <_vfiprintf_r+0x45a>
 800d644:	f04a 0a10 	orr.w	sl, sl, #16
 800d648:	f01a 0320 	ands.w	r3, sl, #32
 800d64c:	d008      	beq.n	800d660 <_vfiprintf_r+0x608>
 800d64e:	3407      	adds	r4, #7
 800d650:	f024 0307 	bic.w	r3, r4, #7
 800d654:	4698      	mov	r8, r3
 800d656:	685d      	ldr	r5, [r3, #4]
 800d658:	f858 4b08 	ldr.w	r4, [r8], #8
 800d65c:	2301      	movs	r3, #1
 800d65e:	e6dd      	b.n	800d41c <_vfiprintf_r+0x3c4>
 800d660:	46a0      	mov	r8, r4
 800d662:	f01a 0510 	ands.w	r5, sl, #16
 800d666:	f858 4b04 	ldr.w	r4, [r8], #4
 800d66a:	d001      	beq.n	800d670 <_vfiprintf_r+0x618>
 800d66c:	461d      	mov	r5, r3
 800d66e:	e7f5      	b.n	800d65c <_vfiprintf_r+0x604>
 800d670:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800d674:	d001      	beq.n	800d67a <_vfiprintf_r+0x622>
 800d676:	b2a4      	uxth	r4, r4
 800d678:	e7f0      	b.n	800d65c <_vfiprintf_r+0x604>
 800d67a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800d67e:	d0ed      	beq.n	800d65c <_vfiprintf_r+0x604>
 800d680:	b2e4      	uxtb	r4, r4
 800d682:	e7f3      	b.n	800d66c <_vfiprintf_r+0x614>
 800d684:	4a1f      	ldr	r2, [pc, #124]	; (800d704 <_vfiprintf_r+0x6ac>)
 800d686:	9205      	str	r2, [sp, #20]
 800d688:	f01a 0220 	ands.w	r2, sl, #32
 800d68c:	d018      	beq.n	800d6c0 <_vfiprintf_r+0x668>
 800d68e:	3407      	adds	r4, #7
 800d690:	f024 0207 	bic.w	r2, r4, #7
 800d694:	4690      	mov	r8, r2
 800d696:	6855      	ldr	r5, [r2, #4]
 800d698:	f858 4b08 	ldr.w	r4, [r8], #8
 800d69c:	f01a 0f01 	tst.w	sl, #1
 800d6a0:	d009      	beq.n	800d6b6 <_vfiprintf_r+0x65e>
 800d6a2:	ea54 0205 	orrs.w	r2, r4, r5
 800d6a6:	bf1f      	itttt	ne
 800d6a8:	2230      	movne	r2, #48	; 0x30
 800d6aa:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800d6ae:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800d6b2:	f04a 0a02 	orrne.w	sl, sl, #2
 800d6b6:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800d6ba:	e6e3      	b.n	800d484 <_vfiprintf_r+0x42c>
 800d6bc:	4a0e      	ldr	r2, [pc, #56]	; (800d6f8 <_vfiprintf_r+0x6a0>)
 800d6be:	e7e2      	b.n	800d686 <_vfiprintf_r+0x62e>
 800d6c0:	46a0      	mov	r8, r4
 800d6c2:	f01a 0510 	ands.w	r5, sl, #16
 800d6c6:	f858 4b04 	ldr.w	r4, [r8], #4
 800d6ca:	d001      	beq.n	800d6d0 <_vfiprintf_r+0x678>
 800d6cc:	4615      	mov	r5, r2
 800d6ce:	e7e5      	b.n	800d69c <_vfiprintf_r+0x644>
 800d6d0:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800d6d4:	d001      	beq.n	800d6da <_vfiprintf_r+0x682>
 800d6d6:	b2a4      	uxth	r4, r4
 800d6d8:	e7e0      	b.n	800d69c <_vfiprintf_r+0x644>
 800d6da:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800d6de:	d0dd      	beq.n	800d69c <_vfiprintf_r+0x644>
 800d6e0:	b2e4      	uxtb	r4, r4
 800d6e2:	e7f3      	b.n	800d6cc <_vfiprintf_r+0x674>
 800d6e4:	2c0a      	cmp	r4, #10
 800d6e6:	f175 0300 	sbcs.w	r3, r5, #0
 800d6ea:	d20d      	bcs.n	800d708 <_vfiprintf_r+0x6b0>
 800d6ec:	3430      	adds	r4, #48	; 0x30
 800d6ee:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800d6f2:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 800d6f6:	e135      	b.n	800d964 <_vfiprintf_r+0x90c>
 800d6f8:	0800f845 	.word	0x0800f845
 800d6fc:	0800f92a 	.word	0x0800f92a
 800d700:	0800f93a 	.word	0x0800f93a
 800d704:	0800f856 	.word	0x0800f856
 800d708:	ab3a      	add	r3, sp, #232	; 0xe8
 800d70a:	9308      	str	r3, [sp, #32]
 800d70c:	9b04      	ldr	r3, [sp, #16]
 800d70e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d712:	f04f 0a00 	mov.w	sl, #0
 800d716:	9309      	str	r3, [sp, #36]	; 0x24
 800d718:	220a      	movs	r2, #10
 800d71a:	2300      	movs	r3, #0
 800d71c:	4620      	mov	r0, r4
 800d71e:	4629      	mov	r1, r5
 800d720:	f7f3 faba 	bl	8000c98 <__aeabi_uldivmod>
 800d724:	9b08      	ldr	r3, [sp, #32]
 800d726:	3230      	adds	r2, #48	; 0x30
 800d728:	f103 3bff 	add.w	fp, r3, #4294967295
 800d72c:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d732:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d736:	f10a 0a01 	add.w	sl, sl, #1
 800d73a:	b1d3      	cbz	r3, 800d772 <_vfiprintf_r+0x71a>
 800d73c:	9b06      	ldr	r3, [sp, #24]
 800d73e:	781a      	ldrb	r2, [r3, #0]
 800d740:	4552      	cmp	r2, sl
 800d742:	d116      	bne.n	800d772 <_vfiprintf_r+0x71a>
 800d744:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800d748:	d013      	beq.n	800d772 <_vfiprintf_r+0x71a>
 800d74a:	2c0a      	cmp	r4, #10
 800d74c:	f175 0200 	sbcs.w	r2, r5, #0
 800d750:	d30f      	bcc.n	800d772 <_vfiprintf_r+0x71a>
 800d752:	9b07      	ldr	r3, [sp, #28]
 800d754:	ebab 0b03 	sub.w	fp, fp, r3
 800d758:	461a      	mov	r2, r3
 800d75a:	ee18 1a10 	vmov	r1, s16
 800d75e:	4658      	mov	r0, fp
 800d760:	f7fe fc47 	bl	800bff2 <strncpy>
 800d764:	9b06      	ldr	r3, [sp, #24]
 800d766:	785a      	ldrb	r2, [r3, #1]
 800d768:	b16a      	cbz	r2, 800d786 <_vfiprintf_r+0x72e>
 800d76a:	3301      	adds	r3, #1
 800d76c:	9306      	str	r3, [sp, #24]
 800d76e:	f04f 0a00 	mov.w	sl, #0
 800d772:	2c0a      	cmp	r4, #10
 800d774:	f175 0500 	sbcs.w	r5, r5, #0
 800d778:	f0c0 80f4 	bcc.w	800d964 <_vfiprintf_r+0x90c>
 800d77c:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800d780:	f8cd b020 	str.w	fp, [sp, #32]
 800d784:	e7c8      	b.n	800d718 <_vfiprintf_r+0x6c0>
 800d786:	4692      	mov	sl, r2
 800d788:	e7f3      	b.n	800d772 <_vfiprintf_r+0x71a>
 800d78a:	f004 020f 	and.w	r2, r4, #15
 800d78e:	9b05      	ldr	r3, [sp, #20]
 800d790:	0924      	lsrs	r4, r4, #4
 800d792:	5c9a      	ldrb	r2, [r3, r2]
 800d794:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800d798:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800d79c:	092d      	lsrs	r5, r5, #4
 800d79e:	ea54 0205 	orrs.w	r2, r4, r5
 800d7a2:	d1f2      	bne.n	800d78a <_vfiprintf_r+0x732>
 800d7a4:	e0de      	b.n	800d964 <_vfiprintf_r+0x90c>
 800d7a6:	b933      	cbnz	r3, 800d7b6 <_vfiprintf_r+0x75e>
 800d7a8:	f01a 0f01 	tst.w	sl, #1
 800d7ac:	d003      	beq.n	800d7b6 <_vfiprintf_r+0x75e>
 800d7ae:	2330      	movs	r3, #48	; 0x30
 800d7b0:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800d7b4:	e79d      	b.n	800d6f2 <_vfiprintf_r+0x69a>
 800d7b6:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800d7ba:	e0d3      	b.n	800d964 <_vfiprintf_r+0x90c>
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	f000 809f 	beq.w	800d900 <_vfiprintf_r+0x8a8>
 800d7c2:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800d7c6:	2300      	movs	r3, #0
 800d7c8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800d7cc:	46a0      	mov	r8, r4
 800d7ce:	e5c0      	b.n	800d352 <_vfiprintf_r+0x2fa>
 800d7d0:	4605      	mov	r5, r0
 800d7d2:	e66e      	b.n	800d4b2 <_vfiprintf_r+0x45a>
 800d7d4:	2110      	movs	r1, #16
 800d7d6:	6071      	str	r1, [r6, #4]
 800d7d8:	2a07      	cmp	r2, #7
 800d7da:	4461      	add	r1, ip
 800d7dc:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d7e0:	dd08      	ble.n	800d7f4 <_vfiprintf_r+0x79c>
 800d7e2:	aa0e      	add	r2, sp, #56	; 0x38
 800d7e4:	4639      	mov	r1, r7
 800d7e6:	4648      	mov	r0, r9
 800d7e8:	f7ff fc03 	bl	800cff2 <__sprint_r>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d166      	bne.n	800d8be <_vfiprintf_r+0x866>
 800d7f0:	4b60      	ldr	r3, [pc, #384]	; (800d974 <_vfiprintf_r+0x91c>)
 800d7f2:	a811      	add	r0, sp, #68	; 0x44
 800d7f4:	3c10      	subs	r4, #16
 800d7f6:	4606      	mov	r6, r0
 800d7f8:	e676      	b.n	800d4e8 <_vfiprintf_r+0x490>
 800d7fa:	4606      	mov	r6, r0
 800d7fc:	e68e      	b.n	800d51c <_vfiprintf_r+0x4c4>
 800d7fe:	aa0e      	add	r2, sp, #56	; 0x38
 800d800:	4639      	mov	r1, r7
 800d802:	4648      	mov	r0, r9
 800d804:	f7ff fbf5 	bl	800cff2 <__sprint_r>
 800d808:	2800      	cmp	r0, #0
 800d80a:	d158      	bne.n	800d8be <_vfiprintf_r+0x866>
 800d80c:	ae11      	add	r6, sp, #68	; 0x44
 800d80e:	e697      	b.n	800d540 <_vfiprintf_r+0x4e8>
 800d810:	aa0e      	add	r2, sp, #56	; 0x38
 800d812:	4639      	mov	r1, r7
 800d814:	4648      	mov	r0, r9
 800d816:	f7ff fbec 	bl	800cff2 <__sprint_r>
 800d81a:	2800      	cmp	r0, #0
 800d81c:	d14f      	bne.n	800d8be <_vfiprintf_r+0x866>
 800d81e:	ae11      	add	r6, sp, #68	; 0x44
 800d820:	e69e      	b.n	800d560 <_vfiprintf_r+0x508>
 800d822:	2110      	movs	r1, #16
 800d824:	6071      	str	r1, [r6, #4]
 800d826:	2a07      	cmp	r2, #7
 800d828:	4461      	add	r1, ip
 800d82a:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d82e:	dd08      	ble.n	800d842 <_vfiprintf_r+0x7ea>
 800d830:	aa0e      	add	r2, sp, #56	; 0x38
 800d832:	4639      	mov	r1, r7
 800d834:	4648      	mov	r0, r9
 800d836:	f7ff fbdc 	bl	800cff2 <__sprint_r>
 800d83a:	2800      	cmp	r0, #0
 800d83c:	d13f      	bne.n	800d8be <_vfiprintf_r+0x866>
 800d83e:	4b4e      	ldr	r3, [pc, #312]	; (800d978 <_vfiprintf_r+0x920>)
 800d840:	a811      	add	r0, sp, #68	; 0x44
 800d842:	3c10      	subs	r4, #16
 800d844:	4606      	mov	r6, r0
 800d846:	e694      	b.n	800d572 <_vfiprintf_r+0x51a>
 800d848:	4606      	mov	r6, r0
 800d84a:	e6ac      	b.n	800d5a6 <_vfiprintf_r+0x54e>
 800d84c:	3110      	adds	r1, #16
 800d84e:	2a07      	cmp	r2, #7
 800d850:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d854:	6073      	str	r3, [r6, #4]
 800d856:	dd07      	ble.n	800d868 <_vfiprintf_r+0x810>
 800d858:	aa0e      	add	r2, sp, #56	; 0x38
 800d85a:	4639      	mov	r1, r7
 800d85c:	4648      	mov	r0, r9
 800d85e:	f7ff fbc8 	bl	800cff2 <__sprint_r>
 800d862:	bb60      	cbnz	r0, 800d8be <_vfiprintf_r+0x866>
 800d864:	a811      	add	r0, sp, #68	; 0x44
 800d866:	2310      	movs	r3, #16
 800d868:	3c10      	subs	r4, #16
 800d86a:	4606      	mov	r6, r0
 800d86c:	e6a1      	b.n	800d5b2 <_vfiprintf_r+0x55a>
 800d86e:	4606      	mov	r6, r0
 800d870:	e6b9      	b.n	800d5e6 <_vfiprintf_r+0x58e>
 800d872:	aa0e      	add	r2, sp, #56	; 0x38
 800d874:	4639      	mov	r1, r7
 800d876:	4648      	mov	r0, r9
 800d878:	f7ff fbbb 	bl	800cff2 <__sprint_r>
 800d87c:	b9f8      	cbnz	r0, 800d8be <_vfiprintf_r+0x866>
 800d87e:	ab11      	add	r3, sp, #68	; 0x44
 800d880:	e6c1      	b.n	800d606 <_vfiprintf_r+0x5ae>
 800d882:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800d886:	1a54      	subs	r4, r2, r1
 800d888:	2c00      	cmp	r4, #0
 800d88a:	f77f aec0 	ble.w	800d60e <_vfiprintf_r+0x5b6>
 800d88e:	4d39      	ldr	r5, [pc, #228]	; (800d974 <_vfiprintf_r+0x91c>)
 800d890:	2610      	movs	r6, #16
 800d892:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800d896:	2c10      	cmp	r4, #16
 800d898:	f102 0201 	add.w	r2, r2, #1
 800d89c:	601d      	str	r5, [r3, #0]
 800d89e:	dc1d      	bgt.n	800d8dc <_vfiprintf_r+0x884>
 800d8a0:	605c      	str	r4, [r3, #4]
 800d8a2:	2a07      	cmp	r2, #7
 800d8a4:	440c      	add	r4, r1
 800d8a6:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800d8aa:	f77f aeb0 	ble.w	800d60e <_vfiprintf_r+0x5b6>
 800d8ae:	aa0e      	add	r2, sp, #56	; 0x38
 800d8b0:	4639      	mov	r1, r7
 800d8b2:	4648      	mov	r0, r9
 800d8b4:	f7ff fb9d 	bl	800cff2 <__sprint_r>
 800d8b8:	2800      	cmp	r0, #0
 800d8ba:	f43f aea8 	beq.w	800d60e <_vfiprintf_r+0x5b6>
 800d8be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8c0:	07d9      	lsls	r1, r3, #31
 800d8c2:	d405      	bmi.n	800d8d0 <_vfiprintf_r+0x878>
 800d8c4:	89bb      	ldrh	r3, [r7, #12]
 800d8c6:	059a      	lsls	r2, r3, #22
 800d8c8:	d402      	bmi.n	800d8d0 <_vfiprintf_r+0x878>
 800d8ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d8cc:	f7fb fd41 	bl	8009352 <__retarget_lock_release_recursive>
 800d8d0:	89bb      	ldrh	r3, [r7, #12]
 800d8d2:	065b      	lsls	r3, r3, #25
 800d8d4:	f57f abf3 	bpl.w	800d0be <_vfiprintf_r+0x66>
 800d8d8:	f7ff bbee 	b.w	800d0b8 <_vfiprintf_r+0x60>
 800d8dc:	3110      	adds	r1, #16
 800d8de:	2a07      	cmp	r2, #7
 800d8e0:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800d8e4:	605e      	str	r6, [r3, #4]
 800d8e6:	dc02      	bgt.n	800d8ee <_vfiprintf_r+0x896>
 800d8e8:	3308      	adds	r3, #8
 800d8ea:	3c10      	subs	r4, #16
 800d8ec:	e7d1      	b.n	800d892 <_vfiprintf_r+0x83a>
 800d8ee:	aa0e      	add	r2, sp, #56	; 0x38
 800d8f0:	4639      	mov	r1, r7
 800d8f2:	4648      	mov	r0, r9
 800d8f4:	f7ff fb7d 	bl	800cff2 <__sprint_r>
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d1e0      	bne.n	800d8be <_vfiprintf_r+0x866>
 800d8fc:	ab11      	add	r3, sp, #68	; 0x44
 800d8fe:	e7f4      	b.n	800d8ea <_vfiprintf_r+0x892>
 800d900:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d902:	b913      	cbnz	r3, 800d90a <_vfiprintf_r+0x8b2>
 800d904:	2300      	movs	r3, #0
 800d906:	930f      	str	r3, [sp, #60]	; 0x3c
 800d908:	e7d9      	b.n	800d8be <_vfiprintf_r+0x866>
 800d90a:	aa0e      	add	r2, sp, #56	; 0x38
 800d90c:	4639      	mov	r1, r7
 800d90e:	4648      	mov	r0, r9
 800d910:	f7ff fb6f 	bl	800cff2 <__sprint_r>
 800d914:	2800      	cmp	r0, #0
 800d916:	d0f5      	beq.n	800d904 <_vfiprintf_r+0x8ac>
 800d918:	e7d1      	b.n	800d8be <_vfiprintf_r+0x866>
 800d91a:	ea54 0205 	orrs.w	r2, r4, r5
 800d91e:	f8cd a010 	str.w	sl, [sp, #16]
 800d922:	f43f ad8d 	beq.w	800d440 <_vfiprintf_r+0x3e8>
 800d926:	2b01      	cmp	r3, #1
 800d928:	f43f aedc 	beq.w	800d6e4 <_vfiprintf_r+0x68c>
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800d932:	f43f af2a 	beq.w	800d78a <_vfiprintf_r+0x732>
 800d936:	f004 0207 	and.w	r2, r4, #7
 800d93a:	08e4      	lsrs	r4, r4, #3
 800d93c:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800d940:	08ed      	lsrs	r5, r5, #3
 800d942:	3230      	adds	r2, #48	; 0x30
 800d944:	ea54 0005 	orrs.w	r0, r4, r5
 800d948:	4659      	mov	r1, fp
 800d94a:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800d94e:	d1f2      	bne.n	800d936 <_vfiprintf_r+0x8de>
 800d950:	9b04      	ldr	r3, [sp, #16]
 800d952:	07d8      	lsls	r0, r3, #31
 800d954:	d506      	bpl.n	800d964 <_vfiprintf_r+0x90c>
 800d956:	2a30      	cmp	r2, #48	; 0x30
 800d958:	d004      	beq.n	800d964 <_vfiprintf_r+0x90c>
 800d95a:	2230      	movs	r2, #48	; 0x30
 800d95c:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800d960:	f1a1 0b02 	sub.w	fp, r1, #2
 800d964:	ab3a      	add	r3, sp, #232	; 0xe8
 800d966:	eba3 030b 	sub.w	r3, r3, fp
 800d96a:	9d00      	ldr	r5, [sp, #0]
 800d96c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d970:	9300      	str	r3, [sp, #0]
 800d972:	e59e      	b.n	800d4b2 <_vfiprintf_r+0x45a>
 800d974:	0800f92a 	.word	0x0800f92a
 800d978:	0800f93a 	.word	0x0800f93a

0800d97c <__sbprintf>:
 800d97c:	b570      	push	{r4, r5, r6, lr}
 800d97e:	460c      	mov	r4, r1
 800d980:	8989      	ldrh	r1, [r1, #12]
 800d982:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800d986:	f021 0102 	bic.w	r1, r1, #2
 800d98a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800d98e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d990:	911b      	str	r1, [sp, #108]	; 0x6c
 800d992:	89e1      	ldrh	r1, [r4, #14]
 800d994:	f8ad 1016 	strh.w	r1, [sp, #22]
 800d998:	69e1      	ldr	r1, [r4, #28]
 800d99a:	9109      	str	r1, [sp, #36]	; 0x24
 800d99c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d99e:	910b      	str	r1, [sp, #44]	; 0x2c
 800d9a0:	a91c      	add	r1, sp, #112	; 0x70
 800d9a2:	9102      	str	r1, [sp, #8]
 800d9a4:	9106      	str	r1, [sp, #24]
 800d9a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	9104      	str	r1, [sp, #16]
 800d9ae:	9107      	str	r1, [sp, #28]
 800d9b0:	a818      	add	r0, sp, #96	; 0x60
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	e9cd 3200 	strd	r3, r2, [sp]
 800d9b8:	9108      	str	r1, [sp, #32]
 800d9ba:	f7fb fcc7 	bl	800934c <__retarget_lock_init_recursive>
 800d9be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d9c2:	a902      	add	r1, sp, #8
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	f7ff fb47 	bl	800d058 <_vfiprintf_r>
 800d9ca:	1e05      	subs	r5, r0, #0
 800d9cc:	db07      	blt.n	800d9de <__sbprintf+0x62>
 800d9ce:	a902      	add	r1, sp, #8
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	f7fe fae9 	bl	800bfa8 <_fflush_r>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	bf18      	it	ne
 800d9da:	f04f 35ff 	movne.w	r5, #4294967295
 800d9de:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800d9e2:	9818      	ldr	r0, [sp, #96]	; 0x60
 800d9e4:	065b      	lsls	r3, r3, #25
 800d9e6:	bf42      	ittt	mi
 800d9e8:	89a3      	ldrhmi	r3, [r4, #12]
 800d9ea:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800d9ee:	81a3      	strhmi	r3, [r4, #12]
 800d9f0:	f7fb fcad 	bl	800934e <__retarget_lock_close_recursive>
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800d9fa:	bd70      	pop	{r4, r5, r6, pc}

0800d9fc <__sfvwrite_r>:
 800d9fc:	6893      	ldr	r3, [r2, #8]
 800d9fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da02:	4606      	mov	r6, r0
 800da04:	460c      	mov	r4, r1
 800da06:	4691      	mov	r9, r2
 800da08:	b91b      	cbnz	r3, 800da12 <__sfvwrite_r+0x16>
 800da0a:	2000      	movs	r0, #0
 800da0c:	b003      	add	sp, #12
 800da0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da12:	898b      	ldrh	r3, [r1, #12]
 800da14:	0718      	lsls	r0, r3, #28
 800da16:	d54f      	bpl.n	800dab8 <__sfvwrite_r+0xbc>
 800da18:	690b      	ldr	r3, [r1, #16]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d04c      	beq.n	800dab8 <__sfvwrite_r+0xbc>
 800da1e:	89a3      	ldrh	r3, [r4, #12]
 800da20:	f8d9 8000 	ldr.w	r8, [r9]
 800da24:	f013 0702 	ands.w	r7, r3, #2
 800da28:	d16b      	bne.n	800db02 <__sfvwrite_r+0x106>
 800da2a:	f013 0301 	ands.w	r3, r3, #1
 800da2e:	f000 809b 	beq.w	800db68 <__sfvwrite_r+0x16c>
 800da32:	4638      	mov	r0, r7
 800da34:	46ba      	mov	sl, r7
 800da36:	46bb      	mov	fp, r7
 800da38:	f1bb 0f00 	cmp.w	fp, #0
 800da3c:	f000 8102 	beq.w	800dc44 <__sfvwrite_r+0x248>
 800da40:	b950      	cbnz	r0, 800da58 <__sfvwrite_r+0x5c>
 800da42:	465a      	mov	r2, fp
 800da44:	210a      	movs	r1, #10
 800da46:	4650      	mov	r0, sl
 800da48:	f7f2 fbd2 	bl	80001f0 <memchr>
 800da4c:	2800      	cmp	r0, #0
 800da4e:	f000 80ff 	beq.w	800dc50 <__sfvwrite_r+0x254>
 800da52:	3001      	adds	r0, #1
 800da54:	eba0 070a 	sub.w	r7, r0, sl
 800da58:	6820      	ldr	r0, [r4, #0]
 800da5a:	6921      	ldr	r1, [r4, #16]
 800da5c:	68a5      	ldr	r5, [r4, #8]
 800da5e:	6963      	ldr	r3, [r4, #20]
 800da60:	455f      	cmp	r7, fp
 800da62:	463a      	mov	r2, r7
 800da64:	bf28      	it	cs
 800da66:	465a      	movcs	r2, fp
 800da68:	4288      	cmp	r0, r1
 800da6a:	f240 80f4 	bls.w	800dc56 <__sfvwrite_r+0x25a>
 800da6e:	441d      	add	r5, r3
 800da70:	42aa      	cmp	r2, r5
 800da72:	f340 80f0 	ble.w	800dc56 <__sfvwrite_r+0x25a>
 800da76:	4651      	mov	r1, sl
 800da78:	462a      	mov	r2, r5
 800da7a:	f000 f9cc 	bl	800de16 <memmove>
 800da7e:	6823      	ldr	r3, [r4, #0]
 800da80:	442b      	add	r3, r5
 800da82:	6023      	str	r3, [r4, #0]
 800da84:	4621      	mov	r1, r4
 800da86:	4630      	mov	r0, r6
 800da88:	f7fe fa8e 	bl	800bfa8 <_fflush_r>
 800da8c:	2800      	cmp	r0, #0
 800da8e:	d166      	bne.n	800db5e <__sfvwrite_r+0x162>
 800da90:	1b7f      	subs	r7, r7, r5
 800da92:	f040 80f8 	bne.w	800dc86 <__sfvwrite_r+0x28a>
 800da96:	4621      	mov	r1, r4
 800da98:	4630      	mov	r0, r6
 800da9a:	f7fe fa85 	bl	800bfa8 <_fflush_r>
 800da9e:	2800      	cmp	r0, #0
 800daa0:	d15d      	bne.n	800db5e <__sfvwrite_r+0x162>
 800daa2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800daa6:	1b5b      	subs	r3, r3, r5
 800daa8:	44aa      	add	sl, r5
 800daaa:	ebab 0b05 	sub.w	fp, fp, r5
 800daae:	f8c9 3008 	str.w	r3, [r9, #8]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1c0      	bne.n	800da38 <__sfvwrite_r+0x3c>
 800dab6:	e7a8      	b.n	800da0a <__sfvwrite_r+0xe>
 800dab8:	4621      	mov	r1, r4
 800daba:	4630      	mov	r0, r6
 800dabc:	f000 f8e8 	bl	800dc90 <__swsetup_r>
 800dac0:	2800      	cmp	r0, #0
 800dac2:	d0ac      	beq.n	800da1e <__sfvwrite_r+0x22>
 800dac4:	f04f 30ff 	mov.w	r0, #4294967295
 800dac8:	e7a0      	b.n	800da0c <__sfvwrite_r+0x10>
 800daca:	e9d8 a500 	ldrd	sl, r5, [r8]
 800dace:	f108 0808 	add.w	r8, r8, #8
 800dad2:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800dad6:	69e1      	ldr	r1, [r4, #28]
 800dad8:	2d00      	cmp	r5, #0
 800dada:	d0f6      	beq.n	800daca <__sfvwrite_r+0xce>
 800dadc:	42bd      	cmp	r5, r7
 800dade:	462b      	mov	r3, r5
 800dae0:	4652      	mov	r2, sl
 800dae2:	bf28      	it	cs
 800dae4:	463b      	movcs	r3, r7
 800dae6:	4630      	mov	r0, r6
 800dae8:	47d8      	blx	fp
 800daea:	2800      	cmp	r0, #0
 800daec:	dd37      	ble.n	800db5e <__sfvwrite_r+0x162>
 800daee:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800daf2:	1a1b      	subs	r3, r3, r0
 800daf4:	4482      	add	sl, r0
 800daf6:	1a2d      	subs	r5, r5, r0
 800daf8:	f8c9 3008 	str.w	r3, [r9, #8]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1e8      	bne.n	800dad2 <__sfvwrite_r+0xd6>
 800db00:	e783      	b.n	800da0a <__sfvwrite_r+0xe>
 800db02:	f04f 0a00 	mov.w	sl, #0
 800db06:	4f61      	ldr	r7, [pc, #388]	; (800dc8c <__sfvwrite_r+0x290>)
 800db08:	4655      	mov	r5, sl
 800db0a:	e7e2      	b.n	800dad2 <__sfvwrite_r+0xd6>
 800db0c:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800db10:	f108 0808 	add.w	r8, r8, #8
 800db14:	6820      	ldr	r0, [r4, #0]
 800db16:	68a2      	ldr	r2, [r4, #8]
 800db18:	f1ba 0f00 	cmp.w	sl, #0
 800db1c:	d0f6      	beq.n	800db0c <__sfvwrite_r+0x110>
 800db1e:	89a3      	ldrh	r3, [r4, #12]
 800db20:	0599      	lsls	r1, r3, #22
 800db22:	d563      	bpl.n	800dbec <__sfvwrite_r+0x1f0>
 800db24:	4552      	cmp	r2, sl
 800db26:	d836      	bhi.n	800db96 <__sfvwrite_r+0x19a>
 800db28:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800db2c:	d033      	beq.n	800db96 <__sfvwrite_r+0x19a>
 800db2e:	6921      	ldr	r1, [r4, #16]
 800db30:	6965      	ldr	r5, [r4, #20]
 800db32:	eba0 0b01 	sub.w	fp, r0, r1
 800db36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db3e:	f10b 0201 	add.w	r2, fp, #1
 800db42:	106d      	asrs	r5, r5, #1
 800db44:	4452      	add	r2, sl
 800db46:	4295      	cmp	r5, r2
 800db48:	bf38      	it	cc
 800db4a:	4615      	movcc	r5, r2
 800db4c:	055b      	lsls	r3, r3, #21
 800db4e:	d53d      	bpl.n	800dbcc <__sfvwrite_r+0x1d0>
 800db50:	4629      	mov	r1, r5
 800db52:	4630      	mov	r0, r6
 800db54:	f7fc f890 	bl	8009c78 <_malloc_r>
 800db58:	b948      	cbnz	r0, 800db6e <__sfvwrite_r+0x172>
 800db5a:	230c      	movs	r3, #12
 800db5c:	6033      	str	r3, [r6, #0]
 800db5e:	89a3      	ldrh	r3, [r4, #12]
 800db60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db64:	81a3      	strh	r3, [r4, #12]
 800db66:	e7ad      	b.n	800dac4 <__sfvwrite_r+0xc8>
 800db68:	461f      	mov	r7, r3
 800db6a:	469a      	mov	sl, r3
 800db6c:	e7d2      	b.n	800db14 <__sfvwrite_r+0x118>
 800db6e:	465a      	mov	r2, fp
 800db70:	6921      	ldr	r1, [r4, #16]
 800db72:	9001      	str	r0, [sp, #4]
 800db74:	f7fb fbee 	bl	8009354 <memcpy>
 800db78:	89a2      	ldrh	r2, [r4, #12]
 800db7a:	9b01      	ldr	r3, [sp, #4]
 800db7c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800db80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800db84:	81a2      	strh	r2, [r4, #12]
 800db86:	6123      	str	r3, [r4, #16]
 800db88:	6165      	str	r5, [r4, #20]
 800db8a:	445b      	add	r3, fp
 800db8c:	eba5 050b 	sub.w	r5, r5, fp
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	4652      	mov	r2, sl
 800db94:	60a5      	str	r5, [r4, #8]
 800db96:	4552      	cmp	r2, sl
 800db98:	bf28      	it	cs
 800db9a:	4652      	movcs	r2, sl
 800db9c:	6820      	ldr	r0, [r4, #0]
 800db9e:	9201      	str	r2, [sp, #4]
 800dba0:	4639      	mov	r1, r7
 800dba2:	f000 f938 	bl	800de16 <memmove>
 800dba6:	68a3      	ldr	r3, [r4, #8]
 800dba8:	9a01      	ldr	r2, [sp, #4]
 800dbaa:	1a9b      	subs	r3, r3, r2
 800dbac:	60a3      	str	r3, [r4, #8]
 800dbae:	6823      	ldr	r3, [r4, #0]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	4655      	mov	r5, sl
 800dbb4:	6023      	str	r3, [r4, #0]
 800dbb6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800dbba:	1b5b      	subs	r3, r3, r5
 800dbbc:	442f      	add	r7, r5
 800dbbe:	ebaa 0a05 	sub.w	sl, sl, r5
 800dbc2:	f8c9 3008 	str.w	r3, [r9, #8]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d1a4      	bne.n	800db14 <__sfvwrite_r+0x118>
 800dbca:	e71e      	b.n	800da0a <__sfvwrite_r+0xe>
 800dbcc:	462a      	mov	r2, r5
 800dbce:	4630      	mov	r0, r6
 800dbd0:	f000 f942 	bl	800de58 <_realloc_r>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	d1d5      	bne.n	800db86 <__sfvwrite_r+0x18a>
 800dbda:	6921      	ldr	r1, [r4, #16]
 800dbdc:	4630      	mov	r0, r6
 800dbde:	f7fb fc33 	bl	8009448 <_free_r>
 800dbe2:	89a3      	ldrh	r3, [r4, #12]
 800dbe4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbe8:	81a3      	strh	r3, [r4, #12]
 800dbea:	e7b6      	b.n	800db5a <__sfvwrite_r+0x15e>
 800dbec:	6923      	ldr	r3, [r4, #16]
 800dbee:	4283      	cmp	r3, r0
 800dbf0:	d302      	bcc.n	800dbf8 <__sfvwrite_r+0x1fc>
 800dbf2:	6961      	ldr	r1, [r4, #20]
 800dbf4:	4551      	cmp	r1, sl
 800dbf6:	d915      	bls.n	800dc24 <__sfvwrite_r+0x228>
 800dbf8:	4552      	cmp	r2, sl
 800dbfa:	bf28      	it	cs
 800dbfc:	4652      	movcs	r2, sl
 800dbfe:	4639      	mov	r1, r7
 800dc00:	4615      	mov	r5, r2
 800dc02:	f000 f908 	bl	800de16 <memmove>
 800dc06:	68a3      	ldr	r3, [r4, #8]
 800dc08:	6822      	ldr	r2, [r4, #0]
 800dc0a:	1b5b      	subs	r3, r3, r5
 800dc0c:	442a      	add	r2, r5
 800dc0e:	60a3      	str	r3, [r4, #8]
 800dc10:	6022      	str	r2, [r4, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d1cf      	bne.n	800dbb6 <__sfvwrite_r+0x1ba>
 800dc16:	4621      	mov	r1, r4
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f7fe f9c5 	bl	800bfa8 <_fflush_r>
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	d0c9      	beq.n	800dbb6 <__sfvwrite_r+0x1ba>
 800dc22:	e79c      	b.n	800db5e <__sfvwrite_r+0x162>
 800dc24:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800dc28:	459a      	cmp	sl, r3
 800dc2a:	bf38      	it	cc
 800dc2c:	4653      	movcc	r3, sl
 800dc2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dc30:	fb93 f3f1 	sdiv	r3, r3, r1
 800dc34:	463a      	mov	r2, r7
 800dc36:	434b      	muls	r3, r1
 800dc38:	4630      	mov	r0, r6
 800dc3a:	69e1      	ldr	r1, [r4, #28]
 800dc3c:	47a8      	blx	r5
 800dc3e:	1e05      	subs	r5, r0, #0
 800dc40:	dcb9      	bgt.n	800dbb6 <__sfvwrite_r+0x1ba>
 800dc42:	e78c      	b.n	800db5e <__sfvwrite_r+0x162>
 800dc44:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800dc48:	2000      	movs	r0, #0
 800dc4a:	f108 0808 	add.w	r8, r8, #8
 800dc4e:	e6f3      	b.n	800da38 <__sfvwrite_r+0x3c>
 800dc50:	f10b 0701 	add.w	r7, fp, #1
 800dc54:	e700      	b.n	800da58 <__sfvwrite_r+0x5c>
 800dc56:	4293      	cmp	r3, r2
 800dc58:	dc08      	bgt.n	800dc6c <__sfvwrite_r+0x270>
 800dc5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dc5c:	69e1      	ldr	r1, [r4, #28]
 800dc5e:	4652      	mov	r2, sl
 800dc60:	4630      	mov	r0, r6
 800dc62:	47a8      	blx	r5
 800dc64:	1e05      	subs	r5, r0, #0
 800dc66:	f73f af13 	bgt.w	800da90 <__sfvwrite_r+0x94>
 800dc6a:	e778      	b.n	800db5e <__sfvwrite_r+0x162>
 800dc6c:	4651      	mov	r1, sl
 800dc6e:	9201      	str	r2, [sp, #4]
 800dc70:	f000 f8d1 	bl	800de16 <memmove>
 800dc74:	9a01      	ldr	r2, [sp, #4]
 800dc76:	68a3      	ldr	r3, [r4, #8]
 800dc78:	1a9b      	subs	r3, r3, r2
 800dc7a:	60a3      	str	r3, [r4, #8]
 800dc7c:	6823      	ldr	r3, [r4, #0]
 800dc7e:	4413      	add	r3, r2
 800dc80:	6023      	str	r3, [r4, #0]
 800dc82:	4615      	mov	r5, r2
 800dc84:	e704      	b.n	800da90 <__sfvwrite_r+0x94>
 800dc86:	2001      	movs	r0, #1
 800dc88:	e70b      	b.n	800daa2 <__sfvwrite_r+0xa6>
 800dc8a:	bf00      	nop
 800dc8c:	7ffffc00 	.word	0x7ffffc00

0800dc90 <__swsetup_r>:
 800dc90:	b538      	push	{r3, r4, r5, lr}
 800dc92:	4b2a      	ldr	r3, [pc, #168]	; (800dd3c <__swsetup_r+0xac>)
 800dc94:	4605      	mov	r5, r0
 800dc96:	6818      	ldr	r0, [r3, #0]
 800dc98:	460c      	mov	r4, r1
 800dc9a:	b118      	cbz	r0, 800dca4 <__swsetup_r+0x14>
 800dc9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800dc9e:	b90b      	cbnz	r3, 800dca4 <__swsetup_r+0x14>
 800dca0:	f7fb fa2a 	bl	80090f8 <__sinit>
 800dca4:	89a3      	ldrh	r3, [r4, #12]
 800dca6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcaa:	0718      	lsls	r0, r3, #28
 800dcac:	d422      	bmi.n	800dcf4 <__swsetup_r+0x64>
 800dcae:	06d9      	lsls	r1, r3, #27
 800dcb0:	d407      	bmi.n	800dcc2 <__swsetup_r+0x32>
 800dcb2:	2309      	movs	r3, #9
 800dcb4:	602b      	str	r3, [r5, #0]
 800dcb6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dcba:	81a3      	strh	r3, [r4, #12]
 800dcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc0:	e034      	b.n	800dd2c <__swsetup_r+0x9c>
 800dcc2:	0758      	lsls	r0, r3, #29
 800dcc4:	d512      	bpl.n	800dcec <__swsetup_r+0x5c>
 800dcc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800dcc8:	b141      	cbz	r1, 800dcdc <__swsetup_r+0x4c>
 800dcca:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800dcce:	4299      	cmp	r1, r3
 800dcd0:	d002      	beq.n	800dcd8 <__swsetup_r+0x48>
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	f7fb fbb8 	bl	8009448 <_free_r>
 800dcd8:	2300      	movs	r3, #0
 800dcda:	6323      	str	r3, [r4, #48]	; 0x30
 800dcdc:	89a3      	ldrh	r3, [r4, #12]
 800dcde:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dce2:	81a3      	strh	r3, [r4, #12]
 800dce4:	2300      	movs	r3, #0
 800dce6:	6063      	str	r3, [r4, #4]
 800dce8:	6923      	ldr	r3, [r4, #16]
 800dcea:	6023      	str	r3, [r4, #0]
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	f043 0308 	orr.w	r3, r3, #8
 800dcf2:	81a3      	strh	r3, [r4, #12]
 800dcf4:	6923      	ldr	r3, [r4, #16]
 800dcf6:	b94b      	cbnz	r3, 800dd0c <__swsetup_r+0x7c>
 800dcf8:	89a3      	ldrh	r3, [r4, #12]
 800dcfa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dcfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dd02:	d003      	beq.n	800dd0c <__swsetup_r+0x7c>
 800dd04:	4621      	mov	r1, r4
 800dd06:	4628      	mov	r0, r5
 800dd08:	f000 fa8c 	bl	800e224 <__smakebuf_r>
 800dd0c:	89a0      	ldrh	r0, [r4, #12]
 800dd0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd12:	f010 0301 	ands.w	r3, r0, #1
 800dd16:	d00a      	beq.n	800dd2e <__swsetup_r+0x9e>
 800dd18:	2300      	movs	r3, #0
 800dd1a:	60a3      	str	r3, [r4, #8]
 800dd1c:	6963      	ldr	r3, [r4, #20]
 800dd1e:	425b      	negs	r3, r3
 800dd20:	61a3      	str	r3, [r4, #24]
 800dd22:	6923      	ldr	r3, [r4, #16]
 800dd24:	b943      	cbnz	r3, 800dd38 <__swsetup_r+0xa8>
 800dd26:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd2a:	d1c4      	bne.n	800dcb6 <__swsetup_r+0x26>
 800dd2c:	bd38      	pop	{r3, r4, r5, pc}
 800dd2e:	0781      	lsls	r1, r0, #30
 800dd30:	bf58      	it	pl
 800dd32:	6963      	ldrpl	r3, [r4, #20]
 800dd34:	60a3      	str	r3, [r4, #8]
 800dd36:	e7f4      	b.n	800dd22 <__swsetup_r+0x92>
 800dd38:	2000      	movs	r0, #0
 800dd3a:	e7f7      	b.n	800dd2c <__swsetup_r+0x9c>
 800dd3c:	20000398 	.word	0x20000398

0800dd40 <__fputwc>:
 800dd40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd44:	4680      	mov	r8, r0
 800dd46:	460e      	mov	r6, r1
 800dd48:	4615      	mov	r5, r2
 800dd4a:	f7fb fa89 	bl	8009260 <__locale_mb_cur_max>
 800dd4e:	2801      	cmp	r0, #1
 800dd50:	d11c      	bne.n	800dd8c <__fputwc+0x4c>
 800dd52:	1e73      	subs	r3, r6, #1
 800dd54:	2bfe      	cmp	r3, #254	; 0xfe
 800dd56:	d819      	bhi.n	800dd8c <__fputwc+0x4c>
 800dd58:	f88d 6004 	strb.w	r6, [sp, #4]
 800dd5c:	4604      	mov	r4, r0
 800dd5e:	2700      	movs	r7, #0
 800dd60:	f10d 0904 	add.w	r9, sp, #4
 800dd64:	42a7      	cmp	r7, r4
 800dd66:	d020      	beq.n	800ddaa <__fputwc+0x6a>
 800dd68:	68ab      	ldr	r3, [r5, #8]
 800dd6a:	f817 1009 	ldrb.w	r1, [r7, r9]
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	60ab      	str	r3, [r5, #8]
 800dd74:	da04      	bge.n	800dd80 <__fputwc+0x40>
 800dd76:	69aa      	ldr	r2, [r5, #24]
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	db1a      	blt.n	800ddb2 <__fputwc+0x72>
 800dd7c:	290a      	cmp	r1, #10
 800dd7e:	d018      	beq.n	800ddb2 <__fputwc+0x72>
 800dd80:	682b      	ldr	r3, [r5, #0]
 800dd82:	1c5a      	adds	r2, r3, #1
 800dd84:	602a      	str	r2, [r5, #0]
 800dd86:	7019      	strb	r1, [r3, #0]
 800dd88:	3701      	adds	r7, #1
 800dd8a:	e7eb      	b.n	800dd64 <__fputwc+0x24>
 800dd8c:	a901      	add	r1, sp, #4
 800dd8e:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800dd92:	4632      	mov	r2, r6
 800dd94:	4640      	mov	r0, r8
 800dd96:	f000 fa07 	bl	800e1a8 <_wcrtomb_r>
 800dd9a:	1c41      	adds	r1, r0, #1
 800dd9c:	4604      	mov	r4, r0
 800dd9e:	d1de      	bne.n	800dd5e <__fputwc+0x1e>
 800dda0:	89ab      	ldrh	r3, [r5, #12]
 800dda2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dda6:	81ab      	strh	r3, [r5, #12]
 800dda8:	4606      	mov	r6, r0
 800ddaa:	4630      	mov	r0, r6
 800ddac:	b003      	add	sp, #12
 800ddae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddb2:	462a      	mov	r2, r5
 800ddb4:	4640      	mov	r0, r8
 800ddb6:	f000 fa71 	bl	800e29c <__swbuf_r>
 800ddba:	1c42      	adds	r2, r0, #1
 800ddbc:	d1e4      	bne.n	800dd88 <__fputwc+0x48>
 800ddbe:	4606      	mov	r6, r0
 800ddc0:	e7f3      	b.n	800ddaa <__fputwc+0x6a>

0800ddc2 <_fputwc_r>:
 800ddc2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800ddc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddc6:	4614      	mov	r4, r2
 800ddc8:	07da      	lsls	r2, r3, #31
 800ddca:	4605      	mov	r5, r0
 800ddcc:	d407      	bmi.n	800ddde <_fputwc_r+0x1c>
 800ddce:	89a3      	ldrh	r3, [r4, #12]
 800ddd0:	059b      	lsls	r3, r3, #22
 800ddd2:	d404      	bmi.n	800ddde <_fputwc_r+0x1c>
 800ddd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddd6:	9101      	str	r1, [sp, #4]
 800ddd8:	f7fb faba 	bl	8009350 <__retarget_lock_acquire_recursive>
 800dddc:	9901      	ldr	r1, [sp, #4]
 800ddde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dde2:	0498      	lsls	r0, r3, #18
 800dde4:	d406      	bmi.n	800ddf4 <_fputwc_r+0x32>
 800dde6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ddea:	81a3      	strh	r3, [r4, #12]
 800ddec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ddf2:	6663      	str	r3, [r4, #100]	; 0x64
 800ddf4:	4622      	mov	r2, r4
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	f7ff ffa2 	bl	800dd40 <__fputwc>
 800ddfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddfe:	07da      	lsls	r2, r3, #31
 800de00:	4605      	mov	r5, r0
 800de02:	d405      	bmi.n	800de10 <_fputwc_r+0x4e>
 800de04:	89a3      	ldrh	r3, [r4, #12]
 800de06:	059b      	lsls	r3, r3, #22
 800de08:	d402      	bmi.n	800de10 <_fputwc_r+0x4e>
 800de0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de0c:	f7fb faa1 	bl	8009352 <__retarget_lock_release_recursive>
 800de10:	4628      	mov	r0, r5
 800de12:	b003      	add	sp, #12
 800de14:	bd30      	pop	{r4, r5, pc}

0800de16 <memmove>:
 800de16:	4288      	cmp	r0, r1
 800de18:	b510      	push	{r4, lr}
 800de1a:	eb01 0402 	add.w	r4, r1, r2
 800de1e:	d902      	bls.n	800de26 <memmove+0x10>
 800de20:	4284      	cmp	r4, r0
 800de22:	4623      	mov	r3, r4
 800de24:	d807      	bhi.n	800de36 <memmove+0x20>
 800de26:	1e43      	subs	r3, r0, #1
 800de28:	42a1      	cmp	r1, r4
 800de2a:	d008      	beq.n	800de3e <memmove+0x28>
 800de2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800de30:	f803 2f01 	strb.w	r2, [r3, #1]!
 800de34:	e7f8      	b.n	800de28 <memmove+0x12>
 800de36:	4402      	add	r2, r0
 800de38:	4601      	mov	r1, r0
 800de3a:	428a      	cmp	r2, r1
 800de3c:	d100      	bne.n	800de40 <memmove+0x2a>
 800de3e:	bd10      	pop	{r4, pc}
 800de40:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800de44:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800de48:	e7f7      	b.n	800de3a <memmove+0x24>

0800de4a <abort>:
 800de4a:	b508      	push	{r3, lr}
 800de4c:	2006      	movs	r0, #6
 800de4e:	f000 fa97 	bl	800e380 <raise>
 800de52:	2001      	movs	r0, #1
 800de54:	f7f3 fc48 	bl	80016e8 <_exit>

0800de58 <_realloc_r>:
 800de58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de5c:	4682      	mov	sl, r0
 800de5e:	460c      	mov	r4, r1
 800de60:	b929      	cbnz	r1, 800de6e <_realloc_r+0x16>
 800de62:	4611      	mov	r1, r2
 800de64:	b003      	add	sp, #12
 800de66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de6a:	f7fb bf05 	b.w	8009c78 <_malloc_r>
 800de6e:	9201      	str	r2, [sp, #4]
 800de70:	f7fc f94e 	bl	800a110 <__malloc_lock>
 800de74:	9a01      	ldr	r2, [sp, #4]
 800de76:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800de7a:	f102 080b 	add.w	r8, r2, #11
 800de7e:	f1b8 0f16 	cmp.w	r8, #22
 800de82:	d90b      	bls.n	800de9c <_realloc_r+0x44>
 800de84:	f038 0807 	bics.w	r8, r8, #7
 800de88:	d50a      	bpl.n	800dea0 <_realloc_r+0x48>
 800de8a:	230c      	movs	r3, #12
 800de8c:	f8ca 3000 	str.w	r3, [sl]
 800de90:	f04f 0b00 	mov.w	fp, #0
 800de94:	4658      	mov	r0, fp
 800de96:	b003      	add	sp, #12
 800de98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de9c:	f04f 0810 	mov.w	r8, #16
 800dea0:	4590      	cmp	r8, r2
 800dea2:	d3f2      	bcc.n	800de8a <_realloc_r+0x32>
 800dea4:	f025 0603 	bic.w	r6, r5, #3
 800dea8:	45b0      	cmp	r8, r6
 800deaa:	f1a4 0908 	sub.w	r9, r4, #8
 800deae:	f340 8170 	ble.w	800e192 <_realloc_r+0x33a>
 800deb2:	499c      	ldr	r1, [pc, #624]	; (800e124 <_realloc_r+0x2cc>)
 800deb4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800deb8:	eb09 0306 	add.w	r3, r9, r6
 800debc:	459c      	cmp	ip, r3
 800debe:	6859      	ldr	r1, [r3, #4]
 800dec0:	d005      	beq.n	800dece <_realloc_r+0x76>
 800dec2:	f021 0001 	bic.w	r0, r1, #1
 800dec6:	4418      	add	r0, r3
 800dec8:	6840      	ldr	r0, [r0, #4]
 800deca:	07c7      	lsls	r7, r0, #31
 800decc:	d447      	bmi.n	800df5e <_realloc_r+0x106>
 800dece:	f021 0103 	bic.w	r1, r1, #3
 800ded2:	459c      	cmp	ip, r3
 800ded4:	eb06 0701 	add.w	r7, r6, r1
 800ded8:	d119      	bne.n	800df0e <_realloc_r+0xb6>
 800deda:	f108 0010 	add.w	r0, r8, #16
 800dede:	42b8      	cmp	r0, r7
 800dee0:	dc3f      	bgt.n	800df62 <_realloc_r+0x10a>
 800dee2:	eb09 0308 	add.w	r3, r9, r8
 800dee6:	4a8f      	ldr	r2, [pc, #572]	; (800e124 <_realloc_r+0x2cc>)
 800dee8:	eba7 0708 	sub.w	r7, r7, r8
 800deec:	f047 0701 	orr.w	r7, r7, #1
 800def0:	6093      	str	r3, [r2, #8]
 800def2:	605f      	str	r7, [r3, #4]
 800def4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800def8:	f003 0301 	and.w	r3, r3, #1
 800defc:	ea43 0308 	orr.w	r3, r3, r8
 800df00:	f844 3c04 	str.w	r3, [r4, #-4]
 800df04:	4650      	mov	r0, sl
 800df06:	f7fc f909 	bl	800a11c <__malloc_unlock>
 800df0a:	46a3      	mov	fp, r4
 800df0c:	e7c2      	b.n	800de94 <_realloc_r+0x3c>
 800df0e:	45b8      	cmp	r8, r7
 800df10:	dc27      	bgt.n	800df62 <_realloc_r+0x10a>
 800df12:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800df16:	60da      	str	r2, [r3, #12]
 800df18:	6093      	str	r3, [r2, #8]
 800df1a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800df1e:	eba7 0008 	sub.w	r0, r7, r8
 800df22:	280f      	cmp	r0, #15
 800df24:	f003 0301 	and.w	r3, r3, #1
 800df28:	eb09 0207 	add.w	r2, r9, r7
 800df2c:	f240 8133 	bls.w	800e196 <_realloc_r+0x33e>
 800df30:	eb09 0108 	add.w	r1, r9, r8
 800df34:	ea48 0303 	orr.w	r3, r8, r3
 800df38:	f040 0001 	orr.w	r0, r0, #1
 800df3c:	f8c9 3004 	str.w	r3, [r9, #4]
 800df40:	6048      	str	r0, [r1, #4]
 800df42:	6853      	ldr	r3, [r2, #4]
 800df44:	f043 0301 	orr.w	r3, r3, #1
 800df48:	6053      	str	r3, [r2, #4]
 800df4a:	3108      	adds	r1, #8
 800df4c:	4650      	mov	r0, sl
 800df4e:	f7fb fa7b 	bl	8009448 <_free_r>
 800df52:	4650      	mov	r0, sl
 800df54:	f7fc f8e2 	bl	800a11c <__malloc_unlock>
 800df58:	f109 0b08 	add.w	fp, r9, #8
 800df5c:	e79a      	b.n	800de94 <_realloc_r+0x3c>
 800df5e:	2100      	movs	r1, #0
 800df60:	460b      	mov	r3, r1
 800df62:	07e8      	lsls	r0, r5, #31
 800df64:	f100 80c6 	bmi.w	800e0f4 <_realloc_r+0x29c>
 800df68:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800df6c:	eba9 0505 	sub.w	r5, r9, r5
 800df70:	6868      	ldr	r0, [r5, #4]
 800df72:	f020 0003 	bic.w	r0, r0, #3
 800df76:	eb00 0b06 	add.w	fp, r0, r6
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f000 8086 	beq.w	800e08c <_realloc_r+0x234>
 800df80:	459c      	cmp	ip, r3
 800df82:	eb01 070b 	add.w	r7, r1, fp
 800df86:	d149      	bne.n	800e01c <_realloc_r+0x1c4>
 800df88:	f108 0310 	add.w	r3, r8, #16
 800df8c:	42bb      	cmp	r3, r7
 800df8e:	dc7d      	bgt.n	800e08c <_realloc_r+0x234>
 800df90:	46ab      	mov	fp, r5
 800df92:	68eb      	ldr	r3, [r5, #12]
 800df94:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800df98:	60d3      	str	r3, [r2, #12]
 800df9a:	609a      	str	r2, [r3, #8]
 800df9c:	1f32      	subs	r2, r6, #4
 800df9e:	2a24      	cmp	r2, #36	; 0x24
 800dfa0:	d837      	bhi.n	800e012 <_realloc_r+0x1ba>
 800dfa2:	2a13      	cmp	r2, #19
 800dfa4:	d933      	bls.n	800e00e <_realloc_r+0x1b6>
 800dfa6:	6823      	ldr	r3, [r4, #0]
 800dfa8:	60ab      	str	r3, [r5, #8]
 800dfaa:	6863      	ldr	r3, [r4, #4]
 800dfac:	60eb      	str	r3, [r5, #12]
 800dfae:	2a1b      	cmp	r2, #27
 800dfb0:	d81b      	bhi.n	800dfea <_realloc_r+0x192>
 800dfb2:	3408      	adds	r4, #8
 800dfb4:	f105 0310 	add.w	r3, r5, #16
 800dfb8:	6822      	ldr	r2, [r4, #0]
 800dfba:	601a      	str	r2, [r3, #0]
 800dfbc:	6862      	ldr	r2, [r4, #4]
 800dfbe:	605a      	str	r2, [r3, #4]
 800dfc0:	68a2      	ldr	r2, [r4, #8]
 800dfc2:	609a      	str	r2, [r3, #8]
 800dfc4:	eb05 0308 	add.w	r3, r5, r8
 800dfc8:	4a56      	ldr	r2, [pc, #344]	; (800e124 <_realloc_r+0x2cc>)
 800dfca:	eba7 0708 	sub.w	r7, r7, r8
 800dfce:	f047 0701 	orr.w	r7, r7, #1
 800dfd2:	6093      	str	r3, [r2, #8]
 800dfd4:	605f      	str	r7, [r3, #4]
 800dfd6:	686b      	ldr	r3, [r5, #4]
 800dfd8:	f003 0301 	and.w	r3, r3, #1
 800dfdc:	ea43 0308 	orr.w	r3, r3, r8
 800dfe0:	606b      	str	r3, [r5, #4]
 800dfe2:	4650      	mov	r0, sl
 800dfe4:	f7fc f89a 	bl	800a11c <__malloc_unlock>
 800dfe8:	e754      	b.n	800de94 <_realloc_r+0x3c>
 800dfea:	68a3      	ldr	r3, [r4, #8]
 800dfec:	612b      	str	r3, [r5, #16]
 800dfee:	68e3      	ldr	r3, [r4, #12]
 800dff0:	616b      	str	r3, [r5, #20]
 800dff2:	2a24      	cmp	r2, #36	; 0x24
 800dff4:	bf01      	itttt	eq
 800dff6:	6923      	ldreq	r3, [r4, #16]
 800dff8:	61ab      	streq	r3, [r5, #24]
 800dffa:	6962      	ldreq	r2, [r4, #20]
 800dffc:	61ea      	streq	r2, [r5, #28]
 800dffe:	bf19      	ittee	ne
 800e000:	3410      	addne	r4, #16
 800e002:	f105 0318 	addne.w	r3, r5, #24
 800e006:	f105 0320 	addeq.w	r3, r5, #32
 800e00a:	3418      	addeq	r4, #24
 800e00c:	e7d4      	b.n	800dfb8 <_realloc_r+0x160>
 800e00e:	465b      	mov	r3, fp
 800e010:	e7d2      	b.n	800dfb8 <_realloc_r+0x160>
 800e012:	4621      	mov	r1, r4
 800e014:	4658      	mov	r0, fp
 800e016:	f7ff fefe 	bl	800de16 <memmove>
 800e01a:	e7d3      	b.n	800dfc4 <_realloc_r+0x16c>
 800e01c:	45b8      	cmp	r8, r7
 800e01e:	dc35      	bgt.n	800e08c <_realloc_r+0x234>
 800e020:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800e024:	4628      	mov	r0, r5
 800e026:	60da      	str	r2, [r3, #12]
 800e028:	6093      	str	r3, [r2, #8]
 800e02a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800e02e:	68eb      	ldr	r3, [r5, #12]
 800e030:	60d3      	str	r3, [r2, #12]
 800e032:	609a      	str	r2, [r3, #8]
 800e034:	1f32      	subs	r2, r6, #4
 800e036:	2a24      	cmp	r2, #36	; 0x24
 800e038:	d824      	bhi.n	800e084 <_realloc_r+0x22c>
 800e03a:	2a13      	cmp	r2, #19
 800e03c:	d908      	bls.n	800e050 <_realloc_r+0x1f8>
 800e03e:	6823      	ldr	r3, [r4, #0]
 800e040:	60ab      	str	r3, [r5, #8]
 800e042:	6863      	ldr	r3, [r4, #4]
 800e044:	60eb      	str	r3, [r5, #12]
 800e046:	2a1b      	cmp	r2, #27
 800e048:	d80a      	bhi.n	800e060 <_realloc_r+0x208>
 800e04a:	3408      	adds	r4, #8
 800e04c:	f105 0010 	add.w	r0, r5, #16
 800e050:	6823      	ldr	r3, [r4, #0]
 800e052:	6003      	str	r3, [r0, #0]
 800e054:	6863      	ldr	r3, [r4, #4]
 800e056:	6043      	str	r3, [r0, #4]
 800e058:	68a3      	ldr	r3, [r4, #8]
 800e05a:	6083      	str	r3, [r0, #8]
 800e05c:	46a9      	mov	r9, r5
 800e05e:	e75c      	b.n	800df1a <_realloc_r+0xc2>
 800e060:	68a3      	ldr	r3, [r4, #8]
 800e062:	612b      	str	r3, [r5, #16]
 800e064:	68e3      	ldr	r3, [r4, #12]
 800e066:	616b      	str	r3, [r5, #20]
 800e068:	2a24      	cmp	r2, #36	; 0x24
 800e06a:	bf01      	itttt	eq
 800e06c:	6923      	ldreq	r3, [r4, #16]
 800e06e:	61ab      	streq	r3, [r5, #24]
 800e070:	6963      	ldreq	r3, [r4, #20]
 800e072:	61eb      	streq	r3, [r5, #28]
 800e074:	bf19      	ittee	ne
 800e076:	3410      	addne	r4, #16
 800e078:	f105 0018 	addne.w	r0, r5, #24
 800e07c:	f105 0020 	addeq.w	r0, r5, #32
 800e080:	3418      	addeq	r4, #24
 800e082:	e7e5      	b.n	800e050 <_realloc_r+0x1f8>
 800e084:	4621      	mov	r1, r4
 800e086:	f7ff fec6 	bl	800de16 <memmove>
 800e08a:	e7e7      	b.n	800e05c <_realloc_r+0x204>
 800e08c:	45d8      	cmp	r8, fp
 800e08e:	dc31      	bgt.n	800e0f4 <_realloc_r+0x29c>
 800e090:	4628      	mov	r0, r5
 800e092:	68eb      	ldr	r3, [r5, #12]
 800e094:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800e098:	60d3      	str	r3, [r2, #12]
 800e09a:	609a      	str	r2, [r3, #8]
 800e09c:	1f32      	subs	r2, r6, #4
 800e09e:	2a24      	cmp	r2, #36	; 0x24
 800e0a0:	d824      	bhi.n	800e0ec <_realloc_r+0x294>
 800e0a2:	2a13      	cmp	r2, #19
 800e0a4:	d908      	bls.n	800e0b8 <_realloc_r+0x260>
 800e0a6:	6823      	ldr	r3, [r4, #0]
 800e0a8:	60ab      	str	r3, [r5, #8]
 800e0aa:	6863      	ldr	r3, [r4, #4]
 800e0ac:	60eb      	str	r3, [r5, #12]
 800e0ae:	2a1b      	cmp	r2, #27
 800e0b0:	d80a      	bhi.n	800e0c8 <_realloc_r+0x270>
 800e0b2:	3408      	adds	r4, #8
 800e0b4:	f105 0010 	add.w	r0, r5, #16
 800e0b8:	6823      	ldr	r3, [r4, #0]
 800e0ba:	6003      	str	r3, [r0, #0]
 800e0bc:	6863      	ldr	r3, [r4, #4]
 800e0be:	6043      	str	r3, [r0, #4]
 800e0c0:	68a3      	ldr	r3, [r4, #8]
 800e0c2:	6083      	str	r3, [r0, #8]
 800e0c4:	465f      	mov	r7, fp
 800e0c6:	e7c9      	b.n	800e05c <_realloc_r+0x204>
 800e0c8:	68a3      	ldr	r3, [r4, #8]
 800e0ca:	612b      	str	r3, [r5, #16]
 800e0cc:	68e3      	ldr	r3, [r4, #12]
 800e0ce:	616b      	str	r3, [r5, #20]
 800e0d0:	2a24      	cmp	r2, #36	; 0x24
 800e0d2:	bf01      	itttt	eq
 800e0d4:	6923      	ldreq	r3, [r4, #16]
 800e0d6:	61ab      	streq	r3, [r5, #24]
 800e0d8:	6963      	ldreq	r3, [r4, #20]
 800e0da:	61eb      	streq	r3, [r5, #28]
 800e0dc:	bf19      	ittee	ne
 800e0de:	3410      	addne	r4, #16
 800e0e0:	f105 0018 	addne.w	r0, r5, #24
 800e0e4:	f105 0020 	addeq.w	r0, r5, #32
 800e0e8:	3418      	addeq	r4, #24
 800e0ea:	e7e5      	b.n	800e0b8 <_realloc_r+0x260>
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	f7ff fe92 	bl	800de16 <memmove>
 800e0f2:	e7e7      	b.n	800e0c4 <_realloc_r+0x26c>
 800e0f4:	4611      	mov	r1, r2
 800e0f6:	4650      	mov	r0, sl
 800e0f8:	f7fb fdbe 	bl	8009c78 <_malloc_r>
 800e0fc:	4683      	mov	fp, r0
 800e0fe:	2800      	cmp	r0, #0
 800e100:	f43f af6f 	beq.w	800dfe2 <_realloc_r+0x18a>
 800e104:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e108:	f023 0301 	bic.w	r3, r3, #1
 800e10c:	444b      	add	r3, r9
 800e10e:	f1a0 0208 	sub.w	r2, r0, #8
 800e112:	4293      	cmp	r3, r2
 800e114:	d108      	bne.n	800e128 <_realloc_r+0x2d0>
 800e116:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800e11a:	f027 0703 	bic.w	r7, r7, #3
 800e11e:	4437      	add	r7, r6
 800e120:	e6fb      	b.n	800df1a <_realloc_r+0xc2>
 800e122:	bf00      	nop
 800e124:	200003a0 	.word	0x200003a0
 800e128:	1f32      	subs	r2, r6, #4
 800e12a:	2a24      	cmp	r2, #36	; 0x24
 800e12c:	d82d      	bhi.n	800e18a <_realloc_r+0x332>
 800e12e:	2a13      	cmp	r2, #19
 800e130:	d928      	bls.n	800e184 <_realloc_r+0x32c>
 800e132:	6823      	ldr	r3, [r4, #0]
 800e134:	6003      	str	r3, [r0, #0]
 800e136:	6863      	ldr	r3, [r4, #4]
 800e138:	6043      	str	r3, [r0, #4]
 800e13a:	2a1b      	cmp	r2, #27
 800e13c:	d80e      	bhi.n	800e15c <_realloc_r+0x304>
 800e13e:	f104 0208 	add.w	r2, r4, #8
 800e142:	f100 0308 	add.w	r3, r0, #8
 800e146:	6811      	ldr	r1, [r2, #0]
 800e148:	6019      	str	r1, [r3, #0]
 800e14a:	6851      	ldr	r1, [r2, #4]
 800e14c:	6059      	str	r1, [r3, #4]
 800e14e:	6892      	ldr	r2, [r2, #8]
 800e150:	609a      	str	r2, [r3, #8]
 800e152:	4621      	mov	r1, r4
 800e154:	4650      	mov	r0, sl
 800e156:	f7fb f977 	bl	8009448 <_free_r>
 800e15a:	e742      	b.n	800dfe2 <_realloc_r+0x18a>
 800e15c:	68a3      	ldr	r3, [r4, #8]
 800e15e:	6083      	str	r3, [r0, #8]
 800e160:	68e3      	ldr	r3, [r4, #12]
 800e162:	60c3      	str	r3, [r0, #12]
 800e164:	2a24      	cmp	r2, #36	; 0x24
 800e166:	bf01      	itttt	eq
 800e168:	6923      	ldreq	r3, [r4, #16]
 800e16a:	6103      	streq	r3, [r0, #16]
 800e16c:	6961      	ldreq	r1, [r4, #20]
 800e16e:	6141      	streq	r1, [r0, #20]
 800e170:	bf19      	ittee	ne
 800e172:	f104 0210 	addne.w	r2, r4, #16
 800e176:	f100 0310 	addne.w	r3, r0, #16
 800e17a:	f104 0218 	addeq.w	r2, r4, #24
 800e17e:	f100 0318 	addeq.w	r3, r0, #24
 800e182:	e7e0      	b.n	800e146 <_realloc_r+0x2ee>
 800e184:	4603      	mov	r3, r0
 800e186:	4622      	mov	r2, r4
 800e188:	e7dd      	b.n	800e146 <_realloc_r+0x2ee>
 800e18a:	4621      	mov	r1, r4
 800e18c:	f7ff fe43 	bl	800de16 <memmove>
 800e190:	e7df      	b.n	800e152 <_realloc_r+0x2fa>
 800e192:	4637      	mov	r7, r6
 800e194:	e6c1      	b.n	800df1a <_realloc_r+0xc2>
 800e196:	431f      	orrs	r7, r3
 800e198:	f8c9 7004 	str.w	r7, [r9, #4]
 800e19c:	6853      	ldr	r3, [r2, #4]
 800e19e:	f043 0301 	orr.w	r3, r3, #1
 800e1a2:	6053      	str	r3, [r2, #4]
 800e1a4:	e6d5      	b.n	800df52 <_realloc_r+0xfa>
 800e1a6:	bf00      	nop

0800e1a8 <_wcrtomb_r>:
 800e1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1aa:	4c09      	ldr	r4, [pc, #36]	; (800e1d0 <_wcrtomb_r+0x28>)
 800e1ac:	b085      	sub	sp, #20
 800e1ae:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800e1b2:	4605      	mov	r5, r0
 800e1b4:	461e      	mov	r6, r3
 800e1b6:	b909      	cbnz	r1, 800e1bc <_wcrtomb_r+0x14>
 800e1b8:	460a      	mov	r2, r1
 800e1ba:	a901      	add	r1, sp, #4
 800e1bc:	47b8      	blx	r7
 800e1be:	1c43      	adds	r3, r0, #1
 800e1c0:	bf01      	itttt	eq
 800e1c2:	2300      	moveq	r3, #0
 800e1c4:	6033      	streq	r3, [r6, #0]
 800e1c6:	238a      	moveq	r3, #138	; 0x8a
 800e1c8:	602b      	streq	r3, [r5, #0]
 800e1ca:	b005      	add	sp, #20
 800e1cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	20000108 	.word	0x20000108

0800e1d4 <__swhatbuf_r>:
 800e1d4:	b570      	push	{r4, r5, r6, lr}
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e1dc:	2900      	cmp	r1, #0
 800e1de:	b096      	sub	sp, #88	; 0x58
 800e1e0:	4615      	mov	r5, r2
 800e1e2:	461e      	mov	r6, r3
 800e1e4:	da07      	bge.n	800e1f6 <__swhatbuf_r+0x22>
 800e1e6:	89a1      	ldrh	r1, [r4, #12]
 800e1e8:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800e1ec:	d017      	beq.n	800e21e <__swhatbuf_r+0x4a>
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	2340      	movs	r3, #64	; 0x40
 800e1f2:	4608      	mov	r0, r1
 800e1f4:	e00f      	b.n	800e216 <__swhatbuf_r+0x42>
 800e1f6:	466a      	mov	r2, sp
 800e1f8:	f000 f8ca 	bl	800e390 <_fstat_r>
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	dbf2      	blt.n	800e1e6 <__swhatbuf_r+0x12>
 800e200:	9901      	ldr	r1, [sp, #4]
 800e202:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e206:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e20a:	4259      	negs	r1, r3
 800e20c:	4159      	adcs	r1, r3
 800e20e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e216:	6031      	str	r1, [r6, #0]
 800e218:	602b      	str	r3, [r5, #0]
 800e21a:	b016      	add	sp, #88	; 0x58
 800e21c:	bd70      	pop	{r4, r5, r6, pc}
 800e21e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e222:	e7e6      	b.n	800e1f2 <__swhatbuf_r+0x1e>

0800e224 <__smakebuf_r>:
 800e224:	898b      	ldrh	r3, [r1, #12]
 800e226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e228:	079d      	lsls	r5, r3, #30
 800e22a:	4606      	mov	r6, r0
 800e22c:	460c      	mov	r4, r1
 800e22e:	d507      	bpl.n	800e240 <__smakebuf_r+0x1c>
 800e230:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800e234:	6023      	str	r3, [r4, #0]
 800e236:	6123      	str	r3, [r4, #16]
 800e238:	2301      	movs	r3, #1
 800e23a:	6163      	str	r3, [r4, #20]
 800e23c:	b002      	add	sp, #8
 800e23e:	bd70      	pop	{r4, r5, r6, pc}
 800e240:	ab01      	add	r3, sp, #4
 800e242:	466a      	mov	r2, sp
 800e244:	f7ff ffc6 	bl	800e1d4 <__swhatbuf_r>
 800e248:	9900      	ldr	r1, [sp, #0]
 800e24a:	4605      	mov	r5, r0
 800e24c:	4630      	mov	r0, r6
 800e24e:	f7fb fd13 	bl	8009c78 <_malloc_r>
 800e252:	b948      	cbnz	r0, 800e268 <__smakebuf_r+0x44>
 800e254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e258:	059a      	lsls	r2, r3, #22
 800e25a:	d4ef      	bmi.n	800e23c <__smakebuf_r+0x18>
 800e25c:	f023 0303 	bic.w	r3, r3, #3
 800e260:	f043 0302 	orr.w	r3, r3, #2
 800e264:	81a3      	strh	r3, [r4, #12]
 800e266:	e7e3      	b.n	800e230 <__smakebuf_r+0xc>
 800e268:	89a3      	ldrh	r3, [r4, #12]
 800e26a:	6020      	str	r0, [r4, #0]
 800e26c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e270:	81a3      	strh	r3, [r4, #12]
 800e272:	9b00      	ldr	r3, [sp, #0]
 800e274:	6163      	str	r3, [r4, #20]
 800e276:	9b01      	ldr	r3, [sp, #4]
 800e278:	6120      	str	r0, [r4, #16]
 800e27a:	b15b      	cbz	r3, 800e294 <__smakebuf_r+0x70>
 800e27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e280:	4630      	mov	r0, r6
 800e282:	f000 f897 	bl	800e3b4 <_isatty_r>
 800e286:	b128      	cbz	r0, 800e294 <__smakebuf_r+0x70>
 800e288:	89a3      	ldrh	r3, [r4, #12]
 800e28a:	f023 0303 	bic.w	r3, r3, #3
 800e28e:	f043 0301 	orr.w	r3, r3, #1
 800e292:	81a3      	strh	r3, [r4, #12]
 800e294:	89a3      	ldrh	r3, [r4, #12]
 800e296:	431d      	orrs	r5, r3
 800e298:	81a5      	strh	r5, [r4, #12]
 800e29a:	e7cf      	b.n	800e23c <__smakebuf_r+0x18>

0800e29c <__swbuf_r>:
 800e29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e29e:	460e      	mov	r6, r1
 800e2a0:	4614      	mov	r4, r2
 800e2a2:	4605      	mov	r5, r0
 800e2a4:	b118      	cbz	r0, 800e2ae <__swbuf_r+0x12>
 800e2a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e2a8:	b90b      	cbnz	r3, 800e2ae <__swbuf_r+0x12>
 800e2aa:	f7fa ff25 	bl	80090f8 <__sinit>
 800e2ae:	69a3      	ldr	r3, [r4, #24]
 800e2b0:	60a3      	str	r3, [r4, #8]
 800e2b2:	89a3      	ldrh	r3, [r4, #12]
 800e2b4:	0719      	lsls	r1, r3, #28
 800e2b6:	d529      	bpl.n	800e30c <__swbuf_r+0x70>
 800e2b8:	6923      	ldr	r3, [r4, #16]
 800e2ba:	b33b      	cbz	r3, 800e30c <__swbuf_r+0x70>
 800e2bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2c0:	b2f6      	uxtb	r6, r6
 800e2c2:	049a      	lsls	r2, r3, #18
 800e2c4:	4637      	mov	r7, r6
 800e2c6:	d52a      	bpl.n	800e31e <__swbuf_r+0x82>
 800e2c8:	6823      	ldr	r3, [r4, #0]
 800e2ca:	6922      	ldr	r2, [r4, #16]
 800e2cc:	1a98      	subs	r0, r3, r2
 800e2ce:	6963      	ldr	r3, [r4, #20]
 800e2d0:	4283      	cmp	r3, r0
 800e2d2:	dc04      	bgt.n	800e2de <__swbuf_r+0x42>
 800e2d4:	4621      	mov	r1, r4
 800e2d6:	4628      	mov	r0, r5
 800e2d8:	f7fd fe66 	bl	800bfa8 <_fflush_r>
 800e2dc:	b9e0      	cbnz	r0, 800e318 <__swbuf_r+0x7c>
 800e2de:	68a3      	ldr	r3, [r4, #8]
 800e2e0:	3b01      	subs	r3, #1
 800e2e2:	60a3      	str	r3, [r4, #8]
 800e2e4:	6823      	ldr	r3, [r4, #0]
 800e2e6:	1c5a      	adds	r2, r3, #1
 800e2e8:	6022      	str	r2, [r4, #0]
 800e2ea:	701e      	strb	r6, [r3, #0]
 800e2ec:	6962      	ldr	r2, [r4, #20]
 800e2ee:	1c43      	adds	r3, r0, #1
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d004      	beq.n	800e2fe <__swbuf_r+0x62>
 800e2f4:	89a3      	ldrh	r3, [r4, #12]
 800e2f6:	07db      	lsls	r3, r3, #31
 800e2f8:	d506      	bpl.n	800e308 <__swbuf_r+0x6c>
 800e2fa:	2e0a      	cmp	r6, #10
 800e2fc:	d104      	bne.n	800e308 <__swbuf_r+0x6c>
 800e2fe:	4621      	mov	r1, r4
 800e300:	4628      	mov	r0, r5
 800e302:	f7fd fe51 	bl	800bfa8 <_fflush_r>
 800e306:	b938      	cbnz	r0, 800e318 <__swbuf_r+0x7c>
 800e308:	4638      	mov	r0, r7
 800e30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e30c:	4621      	mov	r1, r4
 800e30e:	4628      	mov	r0, r5
 800e310:	f7ff fcbe 	bl	800dc90 <__swsetup_r>
 800e314:	2800      	cmp	r0, #0
 800e316:	d0d1      	beq.n	800e2bc <__swbuf_r+0x20>
 800e318:	f04f 37ff 	mov.w	r7, #4294967295
 800e31c:	e7f4      	b.n	800e308 <__swbuf_r+0x6c>
 800e31e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e322:	81a3      	strh	r3, [r4, #12]
 800e324:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e32a:	6663      	str	r3, [r4, #100]	; 0x64
 800e32c:	e7cc      	b.n	800e2c8 <__swbuf_r+0x2c>

0800e32e <_raise_r>:
 800e32e:	291f      	cmp	r1, #31
 800e330:	b538      	push	{r3, r4, r5, lr}
 800e332:	4604      	mov	r4, r0
 800e334:	460d      	mov	r5, r1
 800e336:	d904      	bls.n	800e342 <_raise_r+0x14>
 800e338:	2316      	movs	r3, #22
 800e33a:	6003      	str	r3, [r0, #0]
 800e33c:	f04f 30ff 	mov.w	r0, #4294967295
 800e340:	bd38      	pop	{r3, r4, r5, pc}
 800e342:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 800e346:	b112      	cbz	r2, 800e34e <_raise_r+0x20>
 800e348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e34c:	b94b      	cbnz	r3, 800e362 <_raise_r+0x34>
 800e34e:	4620      	mov	r0, r4
 800e350:	f000 f852 	bl	800e3f8 <_getpid_r>
 800e354:	462a      	mov	r2, r5
 800e356:	4601      	mov	r1, r0
 800e358:	4620      	mov	r0, r4
 800e35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e35e:	f000 b839 	b.w	800e3d4 <_kill_r>
 800e362:	2b01      	cmp	r3, #1
 800e364:	d00a      	beq.n	800e37c <_raise_r+0x4e>
 800e366:	1c59      	adds	r1, r3, #1
 800e368:	d103      	bne.n	800e372 <_raise_r+0x44>
 800e36a:	2316      	movs	r3, #22
 800e36c:	6003      	str	r3, [r0, #0]
 800e36e:	2001      	movs	r0, #1
 800e370:	e7e6      	b.n	800e340 <_raise_r+0x12>
 800e372:	2400      	movs	r4, #0
 800e374:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e378:	4628      	mov	r0, r5
 800e37a:	4798      	blx	r3
 800e37c:	2000      	movs	r0, #0
 800e37e:	e7df      	b.n	800e340 <_raise_r+0x12>

0800e380 <raise>:
 800e380:	4b02      	ldr	r3, [pc, #8]	; (800e38c <raise+0xc>)
 800e382:	4601      	mov	r1, r0
 800e384:	6818      	ldr	r0, [r3, #0]
 800e386:	f7ff bfd2 	b.w	800e32e <_raise_r>
 800e38a:	bf00      	nop
 800e38c:	20000398 	.word	0x20000398

0800e390 <_fstat_r>:
 800e390:	b538      	push	{r3, r4, r5, lr}
 800e392:	4d07      	ldr	r5, [pc, #28]	; (800e3b0 <_fstat_r+0x20>)
 800e394:	2300      	movs	r3, #0
 800e396:	4604      	mov	r4, r0
 800e398:	4608      	mov	r0, r1
 800e39a:	4611      	mov	r1, r2
 800e39c:	602b      	str	r3, [r5, #0]
 800e39e:	f7f3 f9f2 	bl	8001786 <_fstat>
 800e3a2:	1c43      	adds	r3, r0, #1
 800e3a4:	d102      	bne.n	800e3ac <_fstat_r+0x1c>
 800e3a6:	682b      	ldr	r3, [r5, #0]
 800e3a8:	b103      	cbz	r3, 800e3ac <_fstat_r+0x1c>
 800e3aa:	6023      	str	r3, [r4, #0]
 800e3ac:	bd38      	pop	{r3, r4, r5, pc}
 800e3ae:	bf00      	nop
 800e3b0:	20001e04 	.word	0x20001e04

0800e3b4 <_isatty_r>:
 800e3b4:	b538      	push	{r3, r4, r5, lr}
 800e3b6:	4d06      	ldr	r5, [pc, #24]	; (800e3d0 <_isatty_r+0x1c>)
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	4604      	mov	r4, r0
 800e3bc:	4608      	mov	r0, r1
 800e3be:	602b      	str	r3, [r5, #0]
 800e3c0:	f7f3 f9f1 	bl	80017a6 <_isatty>
 800e3c4:	1c43      	adds	r3, r0, #1
 800e3c6:	d102      	bne.n	800e3ce <_isatty_r+0x1a>
 800e3c8:	682b      	ldr	r3, [r5, #0]
 800e3ca:	b103      	cbz	r3, 800e3ce <_isatty_r+0x1a>
 800e3cc:	6023      	str	r3, [r4, #0]
 800e3ce:	bd38      	pop	{r3, r4, r5, pc}
 800e3d0:	20001e04 	.word	0x20001e04

0800e3d4 <_kill_r>:
 800e3d4:	b538      	push	{r3, r4, r5, lr}
 800e3d6:	4d07      	ldr	r5, [pc, #28]	; (800e3f4 <_kill_r+0x20>)
 800e3d8:	2300      	movs	r3, #0
 800e3da:	4604      	mov	r4, r0
 800e3dc:	4608      	mov	r0, r1
 800e3de:	4611      	mov	r1, r2
 800e3e0:	602b      	str	r3, [r5, #0]
 800e3e2:	f7f3 f971 	bl	80016c8 <_kill>
 800e3e6:	1c43      	adds	r3, r0, #1
 800e3e8:	d102      	bne.n	800e3f0 <_kill_r+0x1c>
 800e3ea:	682b      	ldr	r3, [r5, #0]
 800e3ec:	b103      	cbz	r3, 800e3f0 <_kill_r+0x1c>
 800e3ee:	6023      	str	r3, [r4, #0]
 800e3f0:	bd38      	pop	{r3, r4, r5, pc}
 800e3f2:	bf00      	nop
 800e3f4:	20001e04 	.word	0x20001e04

0800e3f8 <_getpid_r>:
 800e3f8:	f7f3 b95e 	b.w	80016b8 <_getpid>
 800e3fc:	0000      	movs	r0, r0
	...

0800e400 <sin>:
 800e400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e402:	ec53 2b10 	vmov	r2, r3, d0
 800e406:	4828      	ldr	r0, [pc, #160]	; (800e4a8 <sin+0xa8>)
 800e408:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e40c:	4281      	cmp	r1, r0
 800e40e:	dc07      	bgt.n	800e420 <sin+0x20>
 800e410:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e4a0 <sin+0xa0>
 800e414:	2000      	movs	r0, #0
 800e416:	b005      	add	sp, #20
 800e418:	f85d eb04 	ldr.w	lr, [sp], #4
 800e41c:	f000 b910 	b.w	800e640 <__kernel_sin>
 800e420:	4822      	ldr	r0, [pc, #136]	; (800e4ac <sin+0xac>)
 800e422:	4281      	cmp	r1, r0
 800e424:	dd09      	ble.n	800e43a <sin+0x3a>
 800e426:	ee10 0a10 	vmov	r0, s0
 800e42a:	4619      	mov	r1, r3
 800e42c:	f7f1 ff34 	bl	8000298 <__aeabi_dsub>
 800e430:	ec41 0b10 	vmov	d0, r0, r1
 800e434:	b005      	add	sp, #20
 800e436:	f85d fb04 	ldr.w	pc, [sp], #4
 800e43a:	4668      	mov	r0, sp
 800e43c:	f000 f9c0 	bl	800e7c0 <__ieee754_rem_pio2>
 800e440:	f000 0003 	and.w	r0, r0, #3
 800e444:	2801      	cmp	r0, #1
 800e446:	d00c      	beq.n	800e462 <sin+0x62>
 800e448:	2802      	cmp	r0, #2
 800e44a:	d011      	beq.n	800e470 <sin+0x70>
 800e44c:	b9f0      	cbnz	r0, 800e48c <sin+0x8c>
 800e44e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e452:	ed9d 0b00 	vldr	d0, [sp]
 800e456:	2001      	movs	r0, #1
 800e458:	f000 f8f2 	bl	800e640 <__kernel_sin>
 800e45c:	ec51 0b10 	vmov	r0, r1, d0
 800e460:	e7e6      	b.n	800e430 <sin+0x30>
 800e462:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e466:	ed9d 0b00 	vldr	d0, [sp]
 800e46a:	f000 f821 	bl	800e4b0 <__kernel_cos>
 800e46e:	e7f5      	b.n	800e45c <sin+0x5c>
 800e470:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e474:	ed9d 0b00 	vldr	d0, [sp]
 800e478:	2001      	movs	r0, #1
 800e47a:	f000 f8e1 	bl	800e640 <__kernel_sin>
 800e47e:	ec53 2b10 	vmov	r2, r3, d0
 800e482:	ee10 0a10 	vmov	r0, s0
 800e486:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e48a:	e7d1      	b.n	800e430 <sin+0x30>
 800e48c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e490:	ed9d 0b00 	vldr	d0, [sp]
 800e494:	f000 f80c 	bl	800e4b0 <__kernel_cos>
 800e498:	e7f1      	b.n	800e47e <sin+0x7e>
 800e49a:	bf00      	nop
 800e49c:	f3af 8000 	nop.w
	...
 800e4a8:	3fe921fb 	.word	0x3fe921fb
 800e4ac:	7fefffff 	.word	0x7fefffff

0800e4b0 <__kernel_cos>:
 800e4b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4b4:	ec57 6b10 	vmov	r6, r7, d0
 800e4b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e4bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e4c0:	ed8d 1b00 	vstr	d1, [sp]
 800e4c4:	da07      	bge.n	800e4d6 <__kernel_cos+0x26>
 800e4c6:	ee10 0a10 	vmov	r0, s0
 800e4ca:	4639      	mov	r1, r7
 800e4cc:	f7f2 fb4c 	bl	8000b68 <__aeabi_d2iz>
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	f000 8088 	beq.w	800e5e6 <__kernel_cos+0x136>
 800e4d6:	4632      	mov	r2, r6
 800e4d8:	463b      	mov	r3, r7
 800e4da:	4630      	mov	r0, r6
 800e4dc:	4639      	mov	r1, r7
 800e4de:	f7f2 f893 	bl	8000608 <__aeabi_dmul>
 800e4e2:	4b51      	ldr	r3, [pc, #324]	; (800e628 <__kernel_cos+0x178>)
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	4604      	mov	r4, r0
 800e4e8:	460d      	mov	r5, r1
 800e4ea:	f7f2 f88d 	bl	8000608 <__aeabi_dmul>
 800e4ee:	a340      	add	r3, pc, #256	; (adr r3, 800e5f0 <__kernel_cos+0x140>)
 800e4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f4:	4682      	mov	sl, r0
 800e4f6:	468b      	mov	fp, r1
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	4629      	mov	r1, r5
 800e4fc:	f7f2 f884 	bl	8000608 <__aeabi_dmul>
 800e500:	a33d      	add	r3, pc, #244	; (adr r3, 800e5f8 <__kernel_cos+0x148>)
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	f7f1 fec9 	bl	800029c <__adddf3>
 800e50a:	4622      	mov	r2, r4
 800e50c:	462b      	mov	r3, r5
 800e50e:	f7f2 f87b 	bl	8000608 <__aeabi_dmul>
 800e512:	a33b      	add	r3, pc, #236	; (adr r3, 800e600 <__kernel_cos+0x150>)
 800e514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e518:	f7f1 febe 	bl	8000298 <__aeabi_dsub>
 800e51c:	4622      	mov	r2, r4
 800e51e:	462b      	mov	r3, r5
 800e520:	f7f2 f872 	bl	8000608 <__aeabi_dmul>
 800e524:	a338      	add	r3, pc, #224	; (adr r3, 800e608 <__kernel_cos+0x158>)
 800e526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e52a:	f7f1 feb7 	bl	800029c <__adddf3>
 800e52e:	4622      	mov	r2, r4
 800e530:	462b      	mov	r3, r5
 800e532:	f7f2 f869 	bl	8000608 <__aeabi_dmul>
 800e536:	a336      	add	r3, pc, #216	; (adr r3, 800e610 <__kernel_cos+0x160>)
 800e538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e53c:	f7f1 feac 	bl	8000298 <__aeabi_dsub>
 800e540:	4622      	mov	r2, r4
 800e542:	462b      	mov	r3, r5
 800e544:	f7f2 f860 	bl	8000608 <__aeabi_dmul>
 800e548:	a333      	add	r3, pc, #204	; (adr r3, 800e618 <__kernel_cos+0x168>)
 800e54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54e:	f7f1 fea5 	bl	800029c <__adddf3>
 800e552:	4622      	mov	r2, r4
 800e554:	462b      	mov	r3, r5
 800e556:	f7f2 f857 	bl	8000608 <__aeabi_dmul>
 800e55a:	4622      	mov	r2, r4
 800e55c:	462b      	mov	r3, r5
 800e55e:	f7f2 f853 	bl	8000608 <__aeabi_dmul>
 800e562:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e566:	4604      	mov	r4, r0
 800e568:	460d      	mov	r5, r1
 800e56a:	4630      	mov	r0, r6
 800e56c:	4639      	mov	r1, r7
 800e56e:	f7f2 f84b 	bl	8000608 <__aeabi_dmul>
 800e572:	460b      	mov	r3, r1
 800e574:	4602      	mov	r2, r0
 800e576:	4629      	mov	r1, r5
 800e578:	4620      	mov	r0, r4
 800e57a:	f7f1 fe8d 	bl	8000298 <__aeabi_dsub>
 800e57e:	4b2b      	ldr	r3, [pc, #172]	; (800e62c <__kernel_cos+0x17c>)
 800e580:	4598      	cmp	r8, r3
 800e582:	4606      	mov	r6, r0
 800e584:	460f      	mov	r7, r1
 800e586:	dc10      	bgt.n	800e5aa <__kernel_cos+0xfa>
 800e588:	4602      	mov	r2, r0
 800e58a:	460b      	mov	r3, r1
 800e58c:	4650      	mov	r0, sl
 800e58e:	4659      	mov	r1, fp
 800e590:	f7f1 fe82 	bl	8000298 <__aeabi_dsub>
 800e594:	460b      	mov	r3, r1
 800e596:	4926      	ldr	r1, [pc, #152]	; (800e630 <__kernel_cos+0x180>)
 800e598:	4602      	mov	r2, r0
 800e59a:	2000      	movs	r0, #0
 800e59c:	f7f1 fe7c 	bl	8000298 <__aeabi_dsub>
 800e5a0:	ec41 0b10 	vmov	d0, r0, r1
 800e5a4:	b003      	add	sp, #12
 800e5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5aa:	4b22      	ldr	r3, [pc, #136]	; (800e634 <__kernel_cos+0x184>)
 800e5ac:	4920      	ldr	r1, [pc, #128]	; (800e630 <__kernel_cos+0x180>)
 800e5ae:	4598      	cmp	r8, r3
 800e5b0:	bfcc      	ite	gt
 800e5b2:	4d21      	ldrgt	r5, [pc, #132]	; (800e638 <__kernel_cos+0x188>)
 800e5b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e5b8:	2400      	movs	r4, #0
 800e5ba:	4622      	mov	r2, r4
 800e5bc:	462b      	mov	r3, r5
 800e5be:	2000      	movs	r0, #0
 800e5c0:	f7f1 fe6a 	bl	8000298 <__aeabi_dsub>
 800e5c4:	4622      	mov	r2, r4
 800e5c6:	4680      	mov	r8, r0
 800e5c8:	4689      	mov	r9, r1
 800e5ca:	462b      	mov	r3, r5
 800e5cc:	4650      	mov	r0, sl
 800e5ce:	4659      	mov	r1, fp
 800e5d0:	f7f1 fe62 	bl	8000298 <__aeabi_dsub>
 800e5d4:	4632      	mov	r2, r6
 800e5d6:	463b      	mov	r3, r7
 800e5d8:	f7f1 fe5e 	bl	8000298 <__aeabi_dsub>
 800e5dc:	4602      	mov	r2, r0
 800e5de:	460b      	mov	r3, r1
 800e5e0:	4640      	mov	r0, r8
 800e5e2:	4649      	mov	r1, r9
 800e5e4:	e7da      	b.n	800e59c <__kernel_cos+0xec>
 800e5e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e620 <__kernel_cos+0x170>
 800e5ea:	e7db      	b.n	800e5a4 <__kernel_cos+0xf4>
 800e5ec:	f3af 8000 	nop.w
 800e5f0:	be8838d4 	.word	0xbe8838d4
 800e5f4:	bda8fae9 	.word	0xbda8fae9
 800e5f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e5fc:	3e21ee9e 	.word	0x3e21ee9e
 800e600:	809c52ad 	.word	0x809c52ad
 800e604:	3e927e4f 	.word	0x3e927e4f
 800e608:	19cb1590 	.word	0x19cb1590
 800e60c:	3efa01a0 	.word	0x3efa01a0
 800e610:	16c15177 	.word	0x16c15177
 800e614:	3f56c16c 	.word	0x3f56c16c
 800e618:	5555554c 	.word	0x5555554c
 800e61c:	3fa55555 	.word	0x3fa55555
 800e620:	00000000 	.word	0x00000000
 800e624:	3ff00000 	.word	0x3ff00000
 800e628:	3fe00000 	.word	0x3fe00000
 800e62c:	3fd33332 	.word	0x3fd33332
 800e630:	3ff00000 	.word	0x3ff00000
 800e634:	3fe90000 	.word	0x3fe90000
 800e638:	3fd20000 	.word	0x3fd20000
 800e63c:	00000000 	.word	0x00000000

0800e640 <__kernel_sin>:
 800e640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e644:	ed2d 8b04 	vpush	{d8-d9}
 800e648:	eeb0 8a41 	vmov.f32	s16, s2
 800e64c:	eef0 8a61 	vmov.f32	s17, s3
 800e650:	ec55 4b10 	vmov	r4, r5, d0
 800e654:	b083      	sub	sp, #12
 800e656:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e65a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e65e:	9001      	str	r0, [sp, #4]
 800e660:	da06      	bge.n	800e670 <__kernel_sin+0x30>
 800e662:	ee10 0a10 	vmov	r0, s0
 800e666:	4629      	mov	r1, r5
 800e668:	f7f2 fa7e 	bl	8000b68 <__aeabi_d2iz>
 800e66c:	2800      	cmp	r0, #0
 800e66e:	d051      	beq.n	800e714 <__kernel_sin+0xd4>
 800e670:	4622      	mov	r2, r4
 800e672:	462b      	mov	r3, r5
 800e674:	4620      	mov	r0, r4
 800e676:	4629      	mov	r1, r5
 800e678:	f7f1 ffc6 	bl	8000608 <__aeabi_dmul>
 800e67c:	4682      	mov	sl, r0
 800e67e:	468b      	mov	fp, r1
 800e680:	4602      	mov	r2, r0
 800e682:	460b      	mov	r3, r1
 800e684:	4620      	mov	r0, r4
 800e686:	4629      	mov	r1, r5
 800e688:	f7f1 ffbe 	bl	8000608 <__aeabi_dmul>
 800e68c:	a341      	add	r3, pc, #260	; (adr r3, 800e794 <__kernel_sin+0x154>)
 800e68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e692:	4680      	mov	r8, r0
 800e694:	4689      	mov	r9, r1
 800e696:	4650      	mov	r0, sl
 800e698:	4659      	mov	r1, fp
 800e69a:	f7f1 ffb5 	bl	8000608 <__aeabi_dmul>
 800e69e:	a33f      	add	r3, pc, #252	; (adr r3, 800e79c <__kernel_sin+0x15c>)
 800e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a4:	f7f1 fdf8 	bl	8000298 <__aeabi_dsub>
 800e6a8:	4652      	mov	r2, sl
 800e6aa:	465b      	mov	r3, fp
 800e6ac:	f7f1 ffac 	bl	8000608 <__aeabi_dmul>
 800e6b0:	a33c      	add	r3, pc, #240	; (adr r3, 800e7a4 <__kernel_sin+0x164>)
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b6:	f7f1 fdf1 	bl	800029c <__adddf3>
 800e6ba:	4652      	mov	r2, sl
 800e6bc:	465b      	mov	r3, fp
 800e6be:	f7f1 ffa3 	bl	8000608 <__aeabi_dmul>
 800e6c2:	a33a      	add	r3, pc, #232	; (adr r3, 800e7ac <__kernel_sin+0x16c>)
 800e6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c8:	f7f1 fde6 	bl	8000298 <__aeabi_dsub>
 800e6cc:	4652      	mov	r2, sl
 800e6ce:	465b      	mov	r3, fp
 800e6d0:	f7f1 ff9a 	bl	8000608 <__aeabi_dmul>
 800e6d4:	a337      	add	r3, pc, #220	; (adr r3, 800e7b4 <__kernel_sin+0x174>)
 800e6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6da:	f7f1 fddf 	bl	800029c <__adddf3>
 800e6de:	9b01      	ldr	r3, [sp, #4]
 800e6e0:	4606      	mov	r6, r0
 800e6e2:	460f      	mov	r7, r1
 800e6e4:	b9eb      	cbnz	r3, 800e722 <__kernel_sin+0xe2>
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	4650      	mov	r0, sl
 800e6ec:	4659      	mov	r1, fp
 800e6ee:	f7f1 ff8b 	bl	8000608 <__aeabi_dmul>
 800e6f2:	a325      	add	r3, pc, #148	; (adr r3, 800e788 <__kernel_sin+0x148>)
 800e6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f8:	f7f1 fdce 	bl	8000298 <__aeabi_dsub>
 800e6fc:	4642      	mov	r2, r8
 800e6fe:	464b      	mov	r3, r9
 800e700:	f7f1 ff82 	bl	8000608 <__aeabi_dmul>
 800e704:	4602      	mov	r2, r0
 800e706:	460b      	mov	r3, r1
 800e708:	4620      	mov	r0, r4
 800e70a:	4629      	mov	r1, r5
 800e70c:	f7f1 fdc6 	bl	800029c <__adddf3>
 800e710:	4604      	mov	r4, r0
 800e712:	460d      	mov	r5, r1
 800e714:	ec45 4b10 	vmov	d0, r4, r5
 800e718:	b003      	add	sp, #12
 800e71a:	ecbd 8b04 	vpop	{d8-d9}
 800e71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e722:	4b1b      	ldr	r3, [pc, #108]	; (800e790 <__kernel_sin+0x150>)
 800e724:	ec51 0b18 	vmov	r0, r1, d8
 800e728:	2200      	movs	r2, #0
 800e72a:	f7f1 ff6d 	bl	8000608 <__aeabi_dmul>
 800e72e:	4632      	mov	r2, r6
 800e730:	ec41 0b19 	vmov	d9, r0, r1
 800e734:	463b      	mov	r3, r7
 800e736:	4640      	mov	r0, r8
 800e738:	4649      	mov	r1, r9
 800e73a:	f7f1 ff65 	bl	8000608 <__aeabi_dmul>
 800e73e:	4602      	mov	r2, r0
 800e740:	460b      	mov	r3, r1
 800e742:	ec51 0b19 	vmov	r0, r1, d9
 800e746:	f7f1 fda7 	bl	8000298 <__aeabi_dsub>
 800e74a:	4652      	mov	r2, sl
 800e74c:	465b      	mov	r3, fp
 800e74e:	f7f1 ff5b 	bl	8000608 <__aeabi_dmul>
 800e752:	ec53 2b18 	vmov	r2, r3, d8
 800e756:	f7f1 fd9f 	bl	8000298 <__aeabi_dsub>
 800e75a:	a30b      	add	r3, pc, #44	; (adr r3, 800e788 <__kernel_sin+0x148>)
 800e75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e760:	4606      	mov	r6, r0
 800e762:	460f      	mov	r7, r1
 800e764:	4640      	mov	r0, r8
 800e766:	4649      	mov	r1, r9
 800e768:	f7f1 ff4e 	bl	8000608 <__aeabi_dmul>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	4630      	mov	r0, r6
 800e772:	4639      	mov	r1, r7
 800e774:	f7f1 fd92 	bl	800029c <__adddf3>
 800e778:	4602      	mov	r2, r0
 800e77a:	460b      	mov	r3, r1
 800e77c:	4620      	mov	r0, r4
 800e77e:	4629      	mov	r1, r5
 800e780:	f7f1 fd8a 	bl	8000298 <__aeabi_dsub>
 800e784:	e7c4      	b.n	800e710 <__kernel_sin+0xd0>
 800e786:	bf00      	nop
 800e788:	55555549 	.word	0x55555549
 800e78c:	3fc55555 	.word	0x3fc55555
 800e790:	3fe00000 	.word	0x3fe00000
 800e794:	5acfd57c 	.word	0x5acfd57c
 800e798:	3de5d93a 	.word	0x3de5d93a
 800e79c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e7a0:	3e5ae5e6 	.word	0x3e5ae5e6
 800e7a4:	57b1fe7d 	.word	0x57b1fe7d
 800e7a8:	3ec71de3 	.word	0x3ec71de3
 800e7ac:	19c161d5 	.word	0x19c161d5
 800e7b0:	3f2a01a0 	.word	0x3f2a01a0
 800e7b4:	1110f8a6 	.word	0x1110f8a6
 800e7b8:	3f811111 	.word	0x3f811111
 800e7bc:	00000000 	.word	0x00000000

0800e7c0 <__ieee754_rem_pio2>:
 800e7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7c4:	ed2d 8b02 	vpush	{d8}
 800e7c8:	ec55 4b10 	vmov	r4, r5, d0
 800e7cc:	4bca      	ldr	r3, [pc, #808]	; (800eaf8 <__ieee754_rem_pio2+0x338>)
 800e7ce:	b08b      	sub	sp, #44	; 0x2c
 800e7d0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e7d4:	4598      	cmp	r8, r3
 800e7d6:	4682      	mov	sl, r0
 800e7d8:	9502      	str	r5, [sp, #8]
 800e7da:	dc08      	bgt.n	800e7ee <__ieee754_rem_pio2+0x2e>
 800e7dc:	2200      	movs	r2, #0
 800e7de:	2300      	movs	r3, #0
 800e7e0:	ed80 0b00 	vstr	d0, [r0]
 800e7e4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e7e8:	f04f 0b00 	mov.w	fp, #0
 800e7ec:	e028      	b.n	800e840 <__ieee754_rem_pio2+0x80>
 800e7ee:	4bc3      	ldr	r3, [pc, #780]	; (800eafc <__ieee754_rem_pio2+0x33c>)
 800e7f0:	4598      	cmp	r8, r3
 800e7f2:	dc78      	bgt.n	800e8e6 <__ieee754_rem_pio2+0x126>
 800e7f4:	9b02      	ldr	r3, [sp, #8]
 800e7f6:	4ec2      	ldr	r6, [pc, #776]	; (800eb00 <__ieee754_rem_pio2+0x340>)
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	ee10 0a10 	vmov	r0, s0
 800e7fe:	a3b0      	add	r3, pc, #704	; (adr r3, 800eac0 <__ieee754_rem_pio2+0x300>)
 800e800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e804:	4629      	mov	r1, r5
 800e806:	dd39      	ble.n	800e87c <__ieee754_rem_pio2+0xbc>
 800e808:	f7f1 fd46 	bl	8000298 <__aeabi_dsub>
 800e80c:	45b0      	cmp	r8, r6
 800e80e:	4604      	mov	r4, r0
 800e810:	460d      	mov	r5, r1
 800e812:	d01b      	beq.n	800e84c <__ieee754_rem_pio2+0x8c>
 800e814:	a3ac      	add	r3, pc, #688	; (adr r3, 800eac8 <__ieee754_rem_pio2+0x308>)
 800e816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e81a:	f7f1 fd3d 	bl	8000298 <__aeabi_dsub>
 800e81e:	4602      	mov	r2, r0
 800e820:	460b      	mov	r3, r1
 800e822:	e9ca 2300 	strd	r2, r3, [sl]
 800e826:	4620      	mov	r0, r4
 800e828:	4629      	mov	r1, r5
 800e82a:	f7f1 fd35 	bl	8000298 <__aeabi_dsub>
 800e82e:	a3a6      	add	r3, pc, #664	; (adr r3, 800eac8 <__ieee754_rem_pio2+0x308>)
 800e830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e834:	f7f1 fd30 	bl	8000298 <__aeabi_dsub>
 800e838:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e83c:	f04f 0b01 	mov.w	fp, #1
 800e840:	4658      	mov	r0, fp
 800e842:	b00b      	add	sp, #44	; 0x2c
 800e844:	ecbd 8b02 	vpop	{d8}
 800e848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e84c:	a3a0      	add	r3, pc, #640	; (adr r3, 800ead0 <__ieee754_rem_pio2+0x310>)
 800e84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e852:	f7f1 fd21 	bl	8000298 <__aeabi_dsub>
 800e856:	a3a0      	add	r3, pc, #640	; (adr r3, 800ead8 <__ieee754_rem_pio2+0x318>)
 800e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85c:	4604      	mov	r4, r0
 800e85e:	460d      	mov	r5, r1
 800e860:	f7f1 fd1a 	bl	8000298 <__aeabi_dsub>
 800e864:	4602      	mov	r2, r0
 800e866:	460b      	mov	r3, r1
 800e868:	e9ca 2300 	strd	r2, r3, [sl]
 800e86c:	4620      	mov	r0, r4
 800e86e:	4629      	mov	r1, r5
 800e870:	f7f1 fd12 	bl	8000298 <__aeabi_dsub>
 800e874:	a398      	add	r3, pc, #608	; (adr r3, 800ead8 <__ieee754_rem_pio2+0x318>)
 800e876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87a:	e7db      	b.n	800e834 <__ieee754_rem_pio2+0x74>
 800e87c:	f7f1 fd0e 	bl	800029c <__adddf3>
 800e880:	45b0      	cmp	r8, r6
 800e882:	4604      	mov	r4, r0
 800e884:	460d      	mov	r5, r1
 800e886:	d016      	beq.n	800e8b6 <__ieee754_rem_pio2+0xf6>
 800e888:	a38f      	add	r3, pc, #572	; (adr r3, 800eac8 <__ieee754_rem_pio2+0x308>)
 800e88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88e:	f7f1 fd05 	bl	800029c <__adddf3>
 800e892:	4602      	mov	r2, r0
 800e894:	460b      	mov	r3, r1
 800e896:	e9ca 2300 	strd	r2, r3, [sl]
 800e89a:	4620      	mov	r0, r4
 800e89c:	4629      	mov	r1, r5
 800e89e:	f7f1 fcfb 	bl	8000298 <__aeabi_dsub>
 800e8a2:	a389      	add	r3, pc, #548	; (adr r3, 800eac8 <__ieee754_rem_pio2+0x308>)
 800e8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a8:	f7f1 fcf8 	bl	800029c <__adddf3>
 800e8ac:	f04f 3bff 	mov.w	fp, #4294967295
 800e8b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e8b4:	e7c4      	b.n	800e840 <__ieee754_rem_pio2+0x80>
 800e8b6:	a386      	add	r3, pc, #536	; (adr r3, 800ead0 <__ieee754_rem_pio2+0x310>)
 800e8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8bc:	f7f1 fcee 	bl	800029c <__adddf3>
 800e8c0:	a385      	add	r3, pc, #532	; (adr r3, 800ead8 <__ieee754_rem_pio2+0x318>)
 800e8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	460d      	mov	r5, r1
 800e8ca:	f7f1 fce7 	bl	800029c <__adddf3>
 800e8ce:	4602      	mov	r2, r0
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	e9ca 2300 	strd	r2, r3, [sl]
 800e8d6:	4620      	mov	r0, r4
 800e8d8:	4629      	mov	r1, r5
 800e8da:	f7f1 fcdd 	bl	8000298 <__aeabi_dsub>
 800e8de:	a37e      	add	r3, pc, #504	; (adr r3, 800ead8 <__ieee754_rem_pio2+0x318>)
 800e8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e4:	e7e0      	b.n	800e8a8 <__ieee754_rem_pio2+0xe8>
 800e8e6:	4b87      	ldr	r3, [pc, #540]	; (800eb04 <__ieee754_rem_pio2+0x344>)
 800e8e8:	4598      	cmp	r8, r3
 800e8ea:	f300 80d8 	bgt.w	800ea9e <__ieee754_rem_pio2+0x2de>
 800e8ee:	f000 f96d 	bl	800ebcc <fabs>
 800e8f2:	ec55 4b10 	vmov	r4, r5, d0
 800e8f6:	ee10 0a10 	vmov	r0, s0
 800e8fa:	a379      	add	r3, pc, #484	; (adr r3, 800eae0 <__ieee754_rem_pio2+0x320>)
 800e8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e900:	4629      	mov	r1, r5
 800e902:	f7f1 fe81 	bl	8000608 <__aeabi_dmul>
 800e906:	4b80      	ldr	r3, [pc, #512]	; (800eb08 <__ieee754_rem_pio2+0x348>)
 800e908:	2200      	movs	r2, #0
 800e90a:	f7f1 fcc7 	bl	800029c <__adddf3>
 800e90e:	f7f2 f92b 	bl	8000b68 <__aeabi_d2iz>
 800e912:	4683      	mov	fp, r0
 800e914:	f7f1 fe0e 	bl	8000534 <__aeabi_i2d>
 800e918:	4602      	mov	r2, r0
 800e91a:	460b      	mov	r3, r1
 800e91c:	ec43 2b18 	vmov	d8, r2, r3
 800e920:	a367      	add	r3, pc, #412	; (adr r3, 800eac0 <__ieee754_rem_pio2+0x300>)
 800e922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e926:	f7f1 fe6f 	bl	8000608 <__aeabi_dmul>
 800e92a:	4602      	mov	r2, r0
 800e92c:	460b      	mov	r3, r1
 800e92e:	4620      	mov	r0, r4
 800e930:	4629      	mov	r1, r5
 800e932:	f7f1 fcb1 	bl	8000298 <__aeabi_dsub>
 800e936:	a364      	add	r3, pc, #400	; (adr r3, 800eac8 <__ieee754_rem_pio2+0x308>)
 800e938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93c:	4606      	mov	r6, r0
 800e93e:	460f      	mov	r7, r1
 800e940:	ec51 0b18 	vmov	r0, r1, d8
 800e944:	f7f1 fe60 	bl	8000608 <__aeabi_dmul>
 800e948:	f1bb 0f1f 	cmp.w	fp, #31
 800e94c:	4604      	mov	r4, r0
 800e94e:	460d      	mov	r5, r1
 800e950:	dc0d      	bgt.n	800e96e <__ieee754_rem_pio2+0x1ae>
 800e952:	4b6e      	ldr	r3, [pc, #440]	; (800eb0c <__ieee754_rem_pio2+0x34c>)
 800e954:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e95c:	4543      	cmp	r3, r8
 800e95e:	d006      	beq.n	800e96e <__ieee754_rem_pio2+0x1ae>
 800e960:	4622      	mov	r2, r4
 800e962:	462b      	mov	r3, r5
 800e964:	4630      	mov	r0, r6
 800e966:	4639      	mov	r1, r7
 800e968:	f7f1 fc96 	bl	8000298 <__aeabi_dsub>
 800e96c:	e00e      	b.n	800e98c <__ieee754_rem_pio2+0x1cc>
 800e96e:	462b      	mov	r3, r5
 800e970:	4622      	mov	r2, r4
 800e972:	4630      	mov	r0, r6
 800e974:	4639      	mov	r1, r7
 800e976:	f7f1 fc8f 	bl	8000298 <__aeabi_dsub>
 800e97a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e97e:	9303      	str	r3, [sp, #12]
 800e980:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e984:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800e988:	2b10      	cmp	r3, #16
 800e98a:	dc02      	bgt.n	800e992 <__ieee754_rem_pio2+0x1d2>
 800e98c:	e9ca 0100 	strd	r0, r1, [sl]
 800e990:	e039      	b.n	800ea06 <__ieee754_rem_pio2+0x246>
 800e992:	a34f      	add	r3, pc, #316	; (adr r3, 800ead0 <__ieee754_rem_pio2+0x310>)
 800e994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e998:	ec51 0b18 	vmov	r0, r1, d8
 800e99c:	f7f1 fe34 	bl	8000608 <__aeabi_dmul>
 800e9a0:	4604      	mov	r4, r0
 800e9a2:	460d      	mov	r5, r1
 800e9a4:	4602      	mov	r2, r0
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	4630      	mov	r0, r6
 800e9aa:	4639      	mov	r1, r7
 800e9ac:	f7f1 fc74 	bl	8000298 <__aeabi_dsub>
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	460b      	mov	r3, r1
 800e9b4:	4680      	mov	r8, r0
 800e9b6:	4689      	mov	r9, r1
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	4639      	mov	r1, r7
 800e9bc:	f7f1 fc6c 	bl	8000298 <__aeabi_dsub>
 800e9c0:	4622      	mov	r2, r4
 800e9c2:	462b      	mov	r3, r5
 800e9c4:	f7f1 fc68 	bl	8000298 <__aeabi_dsub>
 800e9c8:	a343      	add	r3, pc, #268	; (adr r3, 800ead8 <__ieee754_rem_pio2+0x318>)
 800e9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	460d      	mov	r5, r1
 800e9d2:	ec51 0b18 	vmov	r0, r1, d8
 800e9d6:	f7f1 fe17 	bl	8000608 <__aeabi_dmul>
 800e9da:	4622      	mov	r2, r4
 800e9dc:	462b      	mov	r3, r5
 800e9de:	f7f1 fc5b 	bl	8000298 <__aeabi_dsub>
 800e9e2:	4602      	mov	r2, r0
 800e9e4:	460b      	mov	r3, r1
 800e9e6:	4604      	mov	r4, r0
 800e9e8:	460d      	mov	r5, r1
 800e9ea:	4640      	mov	r0, r8
 800e9ec:	4649      	mov	r1, r9
 800e9ee:	f7f1 fc53 	bl	8000298 <__aeabi_dsub>
 800e9f2:	9a03      	ldr	r2, [sp, #12]
 800e9f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e9f8:	1ad3      	subs	r3, r2, r3
 800e9fa:	2b31      	cmp	r3, #49	; 0x31
 800e9fc:	dc24      	bgt.n	800ea48 <__ieee754_rem_pio2+0x288>
 800e9fe:	e9ca 0100 	strd	r0, r1, [sl]
 800ea02:	4646      	mov	r6, r8
 800ea04:	464f      	mov	r7, r9
 800ea06:	e9da 8900 	ldrd	r8, r9, [sl]
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	4642      	mov	r2, r8
 800ea0e:	464b      	mov	r3, r9
 800ea10:	4639      	mov	r1, r7
 800ea12:	f7f1 fc41 	bl	8000298 <__aeabi_dsub>
 800ea16:	462b      	mov	r3, r5
 800ea18:	4622      	mov	r2, r4
 800ea1a:	f7f1 fc3d 	bl	8000298 <__aeabi_dsub>
 800ea1e:	9b02      	ldr	r3, [sp, #8]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ea26:	f6bf af0b 	bge.w	800e840 <__ieee754_rem_pio2+0x80>
 800ea2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ea2e:	f8ca 3004 	str.w	r3, [sl, #4]
 800ea32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ea36:	f8ca 8000 	str.w	r8, [sl]
 800ea3a:	f8ca 0008 	str.w	r0, [sl, #8]
 800ea3e:	f8ca 300c 	str.w	r3, [sl, #12]
 800ea42:	f1cb 0b00 	rsb	fp, fp, #0
 800ea46:	e6fb      	b.n	800e840 <__ieee754_rem_pio2+0x80>
 800ea48:	a327      	add	r3, pc, #156	; (adr r3, 800eae8 <__ieee754_rem_pio2+0x328>)
 800ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4e:	ec51 0b18 	vmov	r0, r1, d8
 800ea52:	f7f1 fdd9 	bl	8000608 <__aeabi_dmul>
 800ea56:	4604      	mov	r4, r0
 800ea58:	460d      	mov	r5, r1
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	4640      	mov	r0, r8
 800ea60:	4649      	mov	r1, r9
 800ea62:	f7f1 fc19 	bl	8000298 <__aeabi_dsub>
 800ea66:	4602      	mov	r2, r0
 800ea68:	460b      	mov	r3, r1
 800ea6a:	4606      	mov	r6, r0
 800ea6c:	460f      	mov	r7, r1
 800ea6e:	4640      	mov	r0, r8
 800ea70:	4649      	mov	r1, r9
 800ea72:	f7f1 fc11 	bl	8000298 <__aeabi_dsub>
 800ea76:	4622      	mov	r2, r4
 800ea78:	462b      	mov	r3, r5
 800ea7a:	f7f1 fc0d 	bl	8000298 <__aeabi_dsub>
 800ea7e:	a31c      	add	r3, pc, #112	; (adr r3, 800eaf0 <__ieee754_rem_pio2+0x330>)
 800ea80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea84:	4604      	mov	r4, r0
 800ea86:	460d      	mov	r5, r1
 800ea88:	ec51 0b18 	vmov	r0, r1, d8
 800ea8c:	f7f1 fdbc 	bl	8000608 <__aeabi_dmul>
 800ea90:	4622      	mov	r2, r4
 800ea92:	462b      	mov	r3, r5
 800ea94:	f7f1 fc00 	bl	8000298 <__aeabi_dsub>
 800ea98:	4604      	mov	r4, r0
 800ea9a:	460d      	mov	r5, r1
 800ea9c:	e760      	b.n	800e960 <__ieee754_rem_pio2+0x1a0>
 800ea9e:	4b1c      	ldr	r3, [pc, #112]	; (800eb10 <__ieee754_rem_pio2+0x350>)
 800eaa0:	4598      	cmp	r8, r3
 800eaa2:	dd37      	ble.n	800eb14 <__ieee754_rem_pio2+0x354>
 800eaa4:	ee10 2a10 	vmov	r2, s0
 800eaa8:	462b      	mov	r3, r5
 800eaaa:	4620      	mov	r0, r4
 800eaac:	4629      	mov	r1, r5
 800eaae:	f7f1 fbf3 	bl	8000298 <__aeabi_dsub>
 800eab2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eab6:	e9ca 0100 	strd	r0, r1, [sl]
 800eaba:	e695      	b.n	800e7e8 <__ieee754_rem_pio2+0x28>
 800eabc:	f3af 8000 	nop.w
 800eac0:	54400000 	.word	0x54400000
 800eac4:	3ff921fb 	.word	0x3ff921fb
 800eac8:	1a626331 	.word	0x1a626331
 800eacc:	3dd0b461 	.word	0x3dd0b461
 800ead0:	1a600000 	.word	0x1a600000
 800ead4:	3dd0b461 	.word	0x3dd0b461
 800ead8:	2e037073 	.word	0x2e037073
 800eadc:	3ba3198a 	.word	0x3ba3198a
 800eae0:	6dc9c883 	.word	0x6dc9c883
 800eae4:	3fe45f30 	.word	0x3fe45f30
 800eae8:	2e000000 	.word	0x2e000000
 800eaec:	3ba3198a 	.word	0x3ba3198a
 800eaf0:	252049c1 	.word	0x252049c1
 800eaf4:	397b839a 	.word	0x397b839a
 800eaf8:	3fe921fb 	.word	0x3fe921fb
 800eafc:	4002d97b 	.word	0x4002d97b
 800eb00:	3ff921fb 	.word	0x3ff921fb
 800eb04:	413921fb 	.word	0x413921fb
 800eb08:	3fe00000 	.word	0x3fe00000
 800eb0c:	0800f94c 	.word	0x0800f94c
 800eb10:	7fefffff 	.word	0x7fefffff
 800eb14:	ea4f 5628 	mov.w	r6, r8, asr #20
 800eb18:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800eb1c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800eb20:	4620      	mov	r0, r4
 800eb22:	460d      	mov	r5, r1
 800eb24:	f7f2 f820 	bl	8000b68 <__aeabi_d2iz>
 800eb28:	f7f1 fd04 	bl	8000534 <__aeabi_i2d>
 800eb2c:	4602      	mov	r2, r0
 800eb2e:	460b      	mov	r3, r1
 800eb30:	4620      	mov	r0, r4
 800eb32:	4629      	mov	r1, r5
 800eb34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb38:	f7f1 fbae 	bl	8000298 <__aeabi_dsub>
 800eb3c:	4b21      	ldr	r3, [pc, #132]	; (800ebc4 <__ieee754_rem_pio2+0x404>)
 800eb3e:	2200      	movs	r2, #0
 800eb40:	f7f1 fd62 	bl	8000608 <__aeabi_dmul>
 800eb44:	460d      	mov	r5, r1
 800eb46:	4604      	mov	r4, r0
 800eb48:	f7f2 f80e 	bl	8000b68 <__aeabi_d2iz>
 800eb4c:	f7f1 fcf2 	bl	8000534 <__aeabi_i2d>
 800eb50:	4602      	mov	r2, r0
 800eb52:	460b      	mov	r3, r1
 800eb54:	4620      	mov	r0, r4
 800eb56:	4629      	mov	r1, r5
 800eb58:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eb5c:	f7f1 fb9c 	bl	8000298 <__aeabi_dsub>
 800eb60:	4b18      	ldr	r3, [pc, #96]	; (800ebc4 <__ieee754_rem_pio2+0x404>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	f7f1 fd50 	bl	8000608 <__aeabi_dmul>
 800eb68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eb6c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800eb70:	2703      	movs	r7, #3
 800eb72:	2400      	movs	r4, #0
 800eb74:	2500      	movs	r5, #0
 800eb76:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800eb7a:	4622      	mov	r2, r4
 800eb7c:	462b      	mov	r3, r5
 800eb7e:	46b9      	mov	r9, r7
 800eb80:	3f01      	subs	r7, #1
 800eb82:	f7f1 ffa9 	bl	8000ad8 <__aeabi_dcmpeq>
 800eb86:	2800      	cmp	r0, #0
 800eb88:	d1f5      	bne.n	800eb76 <__ieee754_rem_pio2+0x3b6>
 800eb8a:	4b0f      	ldr	r3, [pc, #60]	; (800ebc8 <__ieee754_rem_pio2+0x408>)
 800eb8c:	9301      	str	r3, [sp, #4]
 800eb8e:	2302      	movs	r3, #2
 800eb90:	9300      	str	r3, [sp, #0]
 800eb92:	4632      	mov	r2, r6
 800eb94:	464b      	mov	r3, r9
 800eb96:	4651      	mov	r1, sl
 800eb98:	a804      	add	r0, sp, #16
 800eb9a:	f000 f821 	bl	800ebe0 <__kernel_rem_pio2>
 800eb9e:	9b02      	ldr	r3, [sp, #8]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	4683      	mov	fp, r0
 800eba4:	f6bf ae4c 	bge.w	800e840 <__ieee754_rem_pio2+0x80>
 800eba8:	e9da 2100 	ldrd	r2, r1, [sl]
 800ebac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebb0:	e9ca 2300 	strd	r2, r3, [sl]
 800ebb4:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ebb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebbc:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ebc0:	e73f      	b.n	800ea42 <__ieee754_rem_pio2+0x282>
 800ebc2:	bf00      	nop
 800ebc4:	41700000 	.word	0x41700000
 800ebc8:	0800f9cc 	.word	0x0800f9cc

0800ebcc <fabs>:
 800ebcc:	ec51 0b10 	vmov	r0, r1, d0
 800ebd0:	ee10 2a10 	vmov	r2, s0
 800ebd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ebd8:	ec43 2b10 	vmov	d0, r2, r3
 800ebdc:	4770      	bx	lr
	...

0800ebe0 <__kernel_rem_pio2>:
 800ebe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe4:	ed2d 8b02 	vpush	{d8}
 800ebe8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ebec:	f112 0f14 	cmn.w	r2, #20
 800ebf0:	9306      	str	r3, [sp, #24]
 800ebf2:	9104      	str	r1, [sp, #16]
 800ebf4:	4bc2      	ldr	r3, [pc, #776]	; (800ef00 <__kernel_rem_pio2+0x320>)
 800ebf6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ebf8:	9009      	str	r0, [sp, #36]	; 0x24
 800ebfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ebfe:	9300      	str	r3, [sp, #0]
 800ec00:	9b06      	ldr	r3, [sp, #24]
 800ec02:	f103 33ff 	add.w	r3, r3, #4294967295
 800ec06:	bfa8      	it	ge
 800ec08:	1ed4      	subge	r4, r2, #3
 800ec0a:	9305      	str	r3, [sp, #20]
 800ec0c:	bfb2      	itee	lt
 800ec0e:	2400      	movlt	r4, #0
 800ec10:	2318      	movge	r3, #24
 800ec12:	fb94 f4f3 	sdivge	r4, r4, r3
 800ec16:	f06f 0317 	mvn.w	r3, #23
 800ec1a:	fb04 3303 	mla	r3, r4, r3, r3
 800ec1e:	eb03 0a02 	add.w	sl, r3, r2
 800ec22:	9b00      	ldr	r3, [sp, #0]
 800ec24:	9a05      	ldr	r2, [sp, #20]
 800ec26:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800eef0 <__kernel_rem_pio2+0x310>
 800ec2a:	eb03 0802 	add.w	r8, r3, r2
 800ec2e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ec30:	1aa7      	subs	r7, r4, r2
 800ec32:	ae20      	add	r6, sp, #128	; 0x80
 800ec34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ec38:	2500      	movs	r5, #0
 800ec3a:	4545      	cmp	r5, r8
 800ec3c:	dd13      	ble.n	800ec66 <__kernel_rem_pio2+0x86>
 800ec3e:	9b06      	ldr	r3, [sp, #24]
 800ec40:	aa20      	add	r2, sp, #128	; 0x80
 800ec42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ec46:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ec4a:	f04f 0800 	mov.w	r8, #0
 800ec4e:	9b00      	ldr	r3, [sp, #0]
 800ec50:	4598      	cmp	r8, r3
 800ec52:	dc31      	bgt.n	800ecb8 <__kernel_rem_pio2+0xd8>
 800ec54:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800eef0 <__kernel_rem_pio2+0x310>
 800ec58:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ec5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ec60:	462f      	mov	r7, r5
 800ec62:	2600      	movs	r6, #0
 800ec64:	e01b      	b.n	800ec9e <__kernel_rem_pio2+0xbe>
 800ec66:	42ef      	cmn	r7, r5
 800ec68:	d407      	bmi.n	800ec7a <__kernel_rem_pio2+0x9a>
 800ec6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ec6e:	f7f1 fc61 	bl	8000534 <__aeabi_i2d>
 800ec72:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ec76:	3501      	adds	r5, #1
 800ec78:	e7df      	b.n	800ec3a <__kernel_rem_pio2+0x5a>
 800ec7a:	ec51 0b18 	vmov	r0, r1, d8
 800ec7e:	e7f8      	b.n	800ec72 <__kernel_rem_pio2+0x92>
 800ec80:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec84:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ec88:	f7f1 fcbe 	bl	8000608 <__aeabi_dmul>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	460b      	mov	r3, r1
 800ec90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec94:	f7f1 fb02 	bl	800029c <__adddf3>
 800ec98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec9c:	3601      	adds	r6, #1
 800ec9e:	9b05      	ldr	r3, [sp, #20]
 800eca0:	429e      	cmp	r6, r3
 800eca2:	f1a7 0708 	sub.w	r7, r7, #8
 800eca6:	ddeb      	ble.n	800ec80 <__kernel_rem_pio2+0xa0>
 800eca8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ecac:	f108 0801 	add.w	r8, r8, #1
 800ecb0:	ecab 7b02 	vstmia	fp!, {d7}
 800ecb4:	3508      	adds	r5, #8
 800ecb6:	e7ca      	b.n	800ec4e <__kernel_rem_pio2+0x6e>
 800ecb8:	9b00      	ldr	r3, [sp, #0]
 800ecba:	aa0c      	add	r2, sp, #48	; 0x30
 800ecbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ecc0:	930b      	str	r3, [sp, #44]	; 0x2c
 800ecc2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ecc4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ecc8:	9c00      	ldr	r4, [sp, #0]
 800ecca:	930a      	str	r3, [sp, #40]	; 0x28
 800eccc:	00e3      	lsls	r3, r4, #3
 800ecce:	9308      	str	r3, [sp, #32]
 800ecd0:	ab98      	add	r3, sp, #608	; 0x260
 800ecd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ecd6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ecda:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800ecde:	ab70      	add	r3, sp, #448	; 0x1c0
 800ece0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ece4:	46c3      	mov	fp, r8
 800ece6:	46a1      	mov	r9, r4
 800ece8:	f1b9 0f00 	cmp.w	r9, #0
 800ecec:	f1a5 0508 	sub.w	r5, r5, #8
 800ecf0:	dc77      	bgt.n	800ede2 <__kernel_rem_pio2+0x202>
 800ecf2:	ec47 6b10 	vmov	d0, r6, r7
 800ecf6:	4650      	mov	r0, sl
 800ecf8:	f000 fac2 	bl	800f280 <scalbn>
 800ecfc:	ec57 6b10 	vmov	r6, r7, d0
 800ed00:	2200      	movs	r2, #0
 800ed02:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ed06:	ee10 0a10 	vmov	r0, s0
 800ed0a:	4639      	mov	r1, r7
 800ed0c:	f7f1 fc7c 	bl	8000608 <__aeabi_dmul>
 800ed10:	ec41 0b10 	vmov	d0, r0, r1
 800ed14:	f000 fb34 	bl	800f380 <floor>
 800ed18:	4b7a      	ldr	r3, [pc, #488]	; (800ef04 <__kernel_rem_pio2+0x324>)
 800ed1a:	ec51 0b10 	vmov	r0, r1, d0
 800ed1e:	2200      	movs	r2, #0
 800ed20:	f7f1 fc72 	bl	8000608 <__aeabi_dmul>
 800ed24:	4602      	mov	r2, r0
 800ed26:	460b      	mov	r3, r1
 800ed28:	4630      	mov	r0, r6
 800ed2a:	4639      	mov	r1, r7
 800ed2c:	f7f1 fab4 	bl	8000298 <__aeabi_dsub>
 800ed30:	460f      	mov	r7, r1
 800ed32:	4606      	mov	r6, r0
 800ed34:	f7f1 ff18 	bl	8000b68 <__aeabi_d2iz>
 800ed38:	9002      	str	r0, [sp, #8]
 800ed3a:	f7f1 fbfb 	bl	8000534 <__aeabi_i2d>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	460b      	mov	r3, r1
 800ed42:	4630      	mov	r0, r6
 800ed44:	4639      	mov	r1, r7
 800ed46:	f7f1 faa7 	bl	8000298 <__aeabi_dsub>
 800ed4a:	f1ba 0f00 	cmp.w	sl, #0
 800ed4e:	4606      	mov	r6, r0
 800ed50:	460f      	mov	r7, r1
 800ed52:	dd6d      	ble.n	800ee30 <__kernel_rem_pio2+0x250>
 800ed54:	1e61      	subs	r1, r4, #1
 800ed56:	ab0c      	add	r3, sp, #48	; 0x30
 800ed58:	9d02      	ldr	r5, [sp, #8]
 800ed5a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ed5e:	f1ca 0018 	rsb	r0, sl, #24
 800ed62:	fa43 f200 	asr.w	r2, r3, r0
 800ed66:	4415      	add	r5, r2
 800ed68:	4082      	lsls	r2, r0
 800ed6a:	1a9b      	subs	r3, r3, r2
 800ed6c:	aa0c      	add	r2, sp, #48	; 0x30
 800ed6e:	9502      	str	r5, [sp, #8]
 800ed70:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ed74:	f1ca 0217 	rsb	r2, sl, #23
 800ed78:	fa43 fb02 	asr.w	fp, r3, r2
 800ed7c:	f1bb 0f00 	cmp.w	fp, #0
 800ed80:	dd65      	ble.n	800ee4e <__kernel_rem_pio2+0x26e>
 800ed82:	9b02      	ldr	r3, [sp, #8]
 800ed84:	2200      	movs	r2, #0
 800ed86:	3301      	adds	r3, #1
 800ed88:	9302      	str	r3, [sp, #8]
 800ed8a:	4615      	mov	r5, r2
 800ed8c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ed90:	4294      	cmp	r4, r2
 800ed92:	f300 809f 	bgt.w	800eed4 <__kernel_rem_pio2+0x2f4>
 800ed96:	f1ba 0f00 	cmp.w	sl, #0
 800ed9a:	dd07      	ble.n	800edac <__kernel_rem_pio2+0x1cc>
 800ed9c:	f1ba 0f01 	cmp.w	sl, #1
 800eda0:	f000 80c1 	beq.w	800ef26 <__kernel_rem_pio2+0x346>
 800eda4:	f1ba 0f02 	cmp.w	sl, #2
 800eda8:	f000 80c7 	beq.w	800ef3a <__kernel_rem_pio2+0x35a>
 800edac:	f1bb 0f02 	cmp.w	fp, #2
 800edb0:	d14d      	bne.n	800ee4e <__kernel_rem_pio2+0x26e>
 800edb2:	4632      	mov	r2, r6
 800edb4:	463b      	mov	r3, r7
 800edb6:	4954      	ldr	r1, [pc, #336]	; (800ef08 <__kernel_rem_pio2+0x328>)
 800edb8:	2000      	movs	r0, #0
 800edba:	f7f1 fa6d 	bl	8000298 <__aeabi_dsub>
 800edbe:	4606      	mov	r6, r0
 800edc0:	460f      	mov	r7, r1
 800edc2:	2d00      	cmp	r5, #0
 800edc4:	d043      	beq.n	800ee4e <__kernel_rem_pio2+0x26e>
 800edc6:	4650      	mov	r0, sl
 800edc8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800eef8 <__kernel_rem_pio2+0x318>
 800edcc:	f000 fa58 	bl	800f280 <scalbn>
 800edd0:	4630      	mov	r0, r6
 800edd2:	4639      	mov	r1, r7
 800edd4:	ec53 2b10 	vmov	r2, r3, d0
 800edd8:	f7f1 fa5e 	bl	8000298 <__aeabi_dsub>
 800eddc:	4606      	mov	r6, r0
 800edde:	460f      	mov	r7, r1
 800ede0:	e035      	b.n	800ee4e <__kernel_rem_pio2+0x26e>
 800ede2:	4b4a      	ldr	r3, [pc, #296]	; (800ef0c <__kernel_rem_pio2+0x32c>)
 800ede4:	2200      	movs	r2, #0
 800ede6:	4630      	mov	r0, r6
 800ede8:	4639      	mov	r1, r7
 800edea:	f7f1 fc0d 	bl	8000608 <__aeabi_dmul>
 800edee:	f7f1 febb 	bl	8000b68 <__aeabi_d2iz>
 800edf2:	f7f1 fb9f 	bl	8000534 <__aeabi_i2d>
 800edf6:	4602      	mov	r2, r0
 800edf8:	460b      	mov	r3, r1
 800edfa:	ec43 2b18 	vmov	d8, r2, r3
 800edfe:	4b44      	ldr	r3, [pc, #272]	; (800ef10 <__kernel_rem_pio2+0x330>)
 800ee00:	2200      	movs	r2, #0
 800ee02:	f7f1 fc01 	bl	8000608 <__aeabi_dmul>
 800ee06:	4602      	mov	r2, r0
 800ee08:	460b      	mov	r3, r1
 800ee0a:	4630      	mov	r0, r6
 800ee0c:	4639      	mov	r1, r7
 800ee0e:	f7f1 fa43 	bl	8000298 <__aeabi_dsub>
 800ee12:	f7f1 fea9 	bl	8000b68 <__aeabi_d2iz>
 800ee16:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ee1a:	f84b 0b04 	str.w	r0, [fp], #4
 800ee1e:	ec51 0b18 	vmov	r0, r1, d8
 800ee22:	f7f1 fa3b 	bl	800029c <__adddf3>
 800ee26:	f109 39ff 	add.w	r9, r9, #4294967295
 800ee2a:	4606      	mov	r6, r0
 800ee2c:	460f      	mov	r7, r1
 800ee2e:	e75b      	b.n	800ece8 <__kernel_rem_pio2+0x108>
 800ee30:	d106      	bne.n	800ee40 <__kernel_rem_pio2+0x260>
 800ee32:	1e63      	subs	r3, r4, #1
 800ee34:	aa0c      	add	r2, sp, #48	; 0x30
 800ee36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee3a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800ee3e:	e79d      	b.n	800ed7c <__kernel_rem_pio2+0x19c>
 800ee40:	4b34      	ldr	r3, [pc, #208]	; (800ef14 <__kernel_rem_pio2+0x334>)
 800ee42:	2200      	movs	r2, #0
 800ee44:	f7f1 fe66 	bl	8000b14 <__aeabi_dcmpge>
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	d140      	bne.n	800eece <__kernel_rem_pio2+0x2ee>
 800ee4c:	4683      	mov	fp, r0
 800ee4e:	2200      	movs	r2, #0
 800ee50:	2300      	movs	r3, #0
 800ee52:	4630      	mov	r0, r6
 800ee54:	4639      	mov	r1, r7
 800ee56:	f7f1 fe3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee5a:	2800      	cmp	r0, #0
 800ee5c:	f000 80c1 	beq.w	800efe2 <__kernel_rem_pio2+0x402>
 800ee60:	1e65      	subs	r5, r4, #1
 800ee62:	462b      	mov	r3, r5
 800ee64:	2200      	movs	r2, #0
 800ee66:	9900      	ldr	r1, [sp, #0]
 800ee68:	428b      	cmp	r3, r1
 800ee6a:	da6d      	bge.n	800ef48 <__kernel_rem_pio2+0x368>
 800ee6c:	2a00      	cmp	r2, #0
 800ee6e:	f000 808a 	beq.w	800ef86 <__kernel_rem_pio2+0x3a6>
 800ee72:	ab0c      	add	r3, sp, #48	; 0x30
 800ee74:	f1aa 0a18 	sub.w	sl, sl, #24
 800ee78:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f000 80ae 	beq.w	800efde <__kernel_rem_pio2+0x3fe>
 800ee82:	4650      	mov	r0, sl
 800ee84:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800eef8 <__kernel_rem_pio2+0x318>
 800ee88:	f000 f9fa 	bl	800f280 <scalbn>
 800ee8c:	1c6b      	adds	r3, r5, #1
 800ee8e:	00da      	lsls	r2, r3, #3
 800ee90:	9205      	str	r2, [sp, #20]
 800ee92:	ec57 6b10 	vmov	r6, r7, d0
 800ee96:	aa70      	add	r2, sp, #448	; 0x1c0
 800ee98:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800ef0c <__kernel_rem_pio2+0x32c>
 800ee9c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800eea0:	462c      	mov	r4, r5
 800eea2:	f04f 0800 	mov.w	r8, #0
 800eea6:	2c00      	cmp	r4, #0
 800eea8:	f280 80d4 	bge.w	800f054 <__kernel_rem_pio2+0x474>
 800eeac:	462c      	mov	r4, r5
 800eeae:	2c00      	cmp	r4, #0
 800eeb0:	f2c0 8102 	blt.w	800f0b8 <__kernel_rem_pio2+0x4d8>
 800eeb4:	4b18      	ldr	r3, [pc, #96]	; (800ef18 <__kernel_rem_pio2+0x338>)
 800eeb6:	461e      	mov	r6, r3
 800eeb8:	ab70      	add	r3, sp, #448	; 0x1c0
 800eeba:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800eebe:	1b2b      	subs	r3, r5, r4
 800eec0:	f04f 0900 	mov.w	r9, #0
 800eec4:	f04f 0a00 	mov.w	sl, #0
 800eec8:	2700      	movs	r7, #0
 800eeca:	9306      	str	r3, [sp, #24]
 800eecc:	e0e6      	b.n	800f09c <__kernel_rem_pio2+0x4bc>
 800eece:	f04f 0b02 	mov.w	fp, #2
 800eed2:	e756      	b.n	800ed82 <__kernel_rem_pio2+0x1a2>
 800eed4:	f8d8 3000 	ldr.w	r3, [r8]
 800eed8:	bb05      	cbnz	r5, 800ef1c <__kernel_rem_pio2+0x33c>
 800eeda:	b123      	cbz	r3, 800eee6 <__kernel_rem_pio2+0x306>
 800eedc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800eee0:	f8c8 3000 	str.w	r3, [r8]
 800eee4:	2301      	movs	r3, #1
 800eee6:	3201      	adds	r2, #1
 800eee8:	f108 0804 	add.w	r8, r8, #4
 800eeec:	461d      	mov	r5, r3
 800eeee:	e74f      	b.n	800ed90 <__kernel_rem_pio2+0x1b0>
	...
 800eefc:	3ff00000 	.word	0x3ff00000
 800ef00:	0800fb18 	.word	0x0800fb18
 800ef04:	40200000 	.word	0x40200000
 800ef08:	3ff00000 	.word	0x3ff00000
 800ef0c:	3e700000 	.word	0x3e700000
 800ef10:	41700000 	.word	0x41700000
 800ef14:	3fe00000 	.word	0x3fe00000
 800ef18:	0800fad8 	.word	0x0800fad8
 800ef1c:	1acb      	subs	r3, r1, r3
 800ef1e:	f8c8 3000 	str.w	r3, [r8]
 800ef22:	462b      	mov	r3, r5
 800ef24:	e7df      	b.n	800eee6 <__kernel_rem_pio2+0x306>
 800ef26:	1e62      	subs	r2, r4, #1
 800ef28:	ab0c      	add	r3, sp, #48	; 0x30
 800ef2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef2e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ef32:	a90c      	add	r1, sp, #48	; 0x30
 800ef34:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ef38:	e738      	b.n	800edac <__kernel_rem_pio2+0x1cc>
 800ef3a:	1e62      	subs	r2, r4, #1
 800ef3c:	ab0c      	add	r3, sp, #48	; 0x30
 800ef3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef42:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ef46:	e7f4      	b.n	800ef32 <__kernel_rem_pio2+0x352>
 800ef48:	a90c      	add	r1, sp, #48	; 0x30
 800ef4a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ef4e:	3b01      	subs	r3, #1
 800ef50:	430a      	orrs	r2, r1
 800ef52:	e788      	b.n	800ee66 <__kernel_rem_pio2+0x286>
 800ef54:	3301      	adds	r3, #1
 800ef56:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ef5a:	2900      	cmp	r1, #0
 800ef5c:	d0fa      	beq.n	800ef54 <__kernel_rem_pio2+0x374>
 800ef5e:	9a08      	ldr	r2, [sp, #32]
 800ef60:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ef64:	446a      	add	r2, sp
 800ef66:	3a98      	subs	r2, #152	; 0x98
 800ef68:	9208      	str	r2, [sp, #32]
 800ef6a:	9a06      	ldr	r2, [sp, #24]
 800ef6c:	a920      	add	r1, sp, #128	; 0x80
 800ef6e:	18a2      	adds	r2, r4, r2
 800ef70:	18e3      	adds	r3, r4, r3
 800ef72:	f104 0801 	add.w	r8, r4, #1
 800ef76:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ef7a:	9302      	str	r3, [sp, #8]
 800ef7c:	9b02      	ldr	r3, [sp, #8]
 800ef7e:	4543      	cmp	r3, r8
 800ef80:	da04      	bge.n	800ef8c <__kernel_rem_pio2+0x3ac>
 800ef82:	461c      	mov	r4, r3
 800ef84:	e6a2      	b.n	800eccc <__kernel_rem_pio2+0xec>
 800ef86:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef88:	2301      	movs	r3, #1
 800ef8a:	e7e4      	b.n	800ef56 <__kernel_rem_pio2+0x376>
 800ef8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef8e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ef92:	f7f1 facf 	bl	8000534 <__aeabi_i2d>
 800ef96:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ef9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef9c:	46ab      	mov	fp, r5
 800ef9e:	461c      	mov	r4, r3
 800efa0:	f04f 0900 	mov.w	r9, #0
 800efa4:	2600      	movs	r6, #0
 800efa6:	2700      	movs	r7, #0
 800efa8:	9b05      	ldr	r3, [sp, #20]
 800efaa:	4599      	cmp	r9, r3
 800efac:	dd06      	ble.n	800efbc <__kernel_rem_pio2+0x3dc>
 800efae:	9b08      	ldr	r3, [sp, #32]
 800efb0:	e8e3 6702 	strd	r6, r7, [r3], #8
 800efb4:	f108 0801 	add.w	r8, r8, #1
 800efb8:	9308      	str	r3, [sp, #32]
 800efba:	e7df      	b.n	800ef7c <__kernel_rem_pio2+0x39c>
 800efbc:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800efc0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800efc4:	f7f1 fb20 	bl	8000608 <__aeabi_dmul>
 800efc8:	4602      	mov	r2, r0
 800efca:	460b      	mov	r3, r1
 800efcc:	4630      	mov	r0, r6
 800efce:	4639      	mov	r1, r7
 800efd0:	f7f1 f964 	bl	800029c <__adddf3>
 800efd4:	f109 0901 	add.w	r9, r9, #1
 800efd8:	4606      	mov	r6, r0
 800efda:	460f      	mov	r7, r1
 800efdc:	e7e4      	b.n	800efa8 <__kernel_rem_pio2+0x3c8>
 800efde:	3d01      	subs	r5, #1
 800efe0:	e747      	b.n	800ee72 <__kernel_rem_pio2+0x292>
 800efe2:	ec47 6b10 	vmov	d0, r6, r7
 800efe6:	f1ca 0000 	rsb	r0, sl, #0
 800efea:	f000 f949 	bl	800f280 <scalbn>
 800efee:	ec57 6b10 	vmov	r6, r7, d0
 800eff2:	4ba0      	ldr	r3, [pc, #640]	; (800f274 <__kernel_rem_pio2+0x694>)
 800eff4:	ee10 0a10 	vmov	r0, s0
 800eff8:	2200      	movs	r2, #0
 800effa:	4639      	mov	r1, r7
 800effc:	f7f1 fd8a 	bl	8000b14 <__aeabi_dcmpge>
 800f000:	b1f8      	cbz	r0, 800f042 <__kernel_rem_pio2+0x462>
 800f002:	4b9d      	ldr	r3, [pc, #628]	; (800f278 <__kernel_rem_pio2+0x698>)
 800f004:	2200      	movs	r2, #0
 800f006:	4630      	mov	r0, r6
 800f008:	4639      	mov	r1, r7
 800f00a:	f7f1 fafd 	bl	8000608 <__aeabi_dmul>
 800f00e:	f7f1 fdab 	bl	8000b68 <__aeabi_d2iz>
 800f012:	4680      	mov	r8, r0
 800f014:	f7f1 fa8e 	bl	8000534 <__aeabi_i2d>
 800f018:	4b96      	ldr	r3, [pc, #600]	; (800f274 <__kernel_rem_pio2+0x694>)
 800f01a:	2200      	movs	r2, #0
 800f01c:	f7f1 faf4 	bl	8000608 <__aeabi_dmul>
 800f020:	460b      	mov	r3, r1
 800f022:	4602      	mov	r2, r0
 800f024:	4639      	mov	r1, r7
 800f026:	4630      	mov	r0, r6
 800f028:	f7f1 f936 	bl	8000298 <__aeabi_dsub>
 800f02c:	f7f1 fd9c 	bl	8000b68 <__aeabi_d2iz>
 800f030:	1c65      	adds	r5, r4, #1
 800f032:	ab0c      	add	r3, sp, #48	; 0x30
 800f034:	f10a 0a18 	add.w	sl, sl, #24
 800f038:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f03c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f040:	e71f      	b.n	800ee82 <__kernel_rem_pio2+0x2a2>
 800f042:	4630      	mov	r0, r6
 800f044:	4639      	mov	r1, r7
 800f046:	f7f1 fd8f 	bl	8000b68 <__aeabi_d2iz>
 800f04a:	ab0c      	add	r3, sp, #48	; 0x30
 800f04c:	4625      	mov	r5, r4
 800f04e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f052:	e716      	b.n	800ee82 <__kernel_rem_pio2+0x2a2>
 800f054:	ab0c      	add	r3, sp, #48	; 0x30
 800f056:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800f05a:	f7f1 fa6b 	bl	8000534 <__aeabi_i2d>
 800f05e:	4632      	mov	r2, r6
 800f060:	463b      	mov	r3, r7
 800f062:	f7f1 fad1 	bl	8000608 <__aeabi_dmul>
 800f066:	4642      	mov	r2, r8
 800f068:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800f06c:	464b      	mov	r3, r9
 800f06e:	4630      	mov	r0, r6
 800f070:	4639      	mov	r1, r7
 800f072:	f7f1 fac9 	bl	8000608 <__aeabi_dmul>
 800f076:	3c01      	subs	r4, #1
 800f078:	4606      	mov	r6, r0
 800f07a:	460f      	mov	r7, r1
 800f07c:	e713      	b.n	800eea6 <__kernel_rem_pio2+0x2c6>
 800f07e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800f082:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800f086:	f7f1 fabf 	bl	8000608 <__aeabi_dmul>
 800f08a:	4602      	mov	r2, r0
 800f08c:	460b      	mov	r3, r1
 800f08e:	4648      	mov	r0, r9
 800f090:	4651      	mov	r1, sl
 800f092:	f7f1 f903 	bl	800029c <__adddf3>
 800f096:	3701      	adds	r7, #1
 800f098:	4681      	mov	r9, r0
 800f09a:	468a      	mov	sl, r1
 800f09c:	9b00      	ldr	r3, [sp, #0]
 800f09e:	429f      	cmp	r7, r3
 800f0a0:	dc02      	bgt.n	800f0a8 <__kernel_rem_pio2+0x4c8>
 800f0a2:	9b06      	ldr	r3, [sp, #24]
 800f0a4:	429f      	cmp	r7, r3
 800f0a6:	ddea      	ble.n	800f07e <__kernel_rem_pio2+0x49e>
 800f0a8:	9a06      	ldr	r2, [sp, #24]
 800f0aa:	ab48      	add	r3, sp, #288	; 0x120
 800f0ac:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800f0b0:	e9c6 9a00 	strd	r9, sl, [r6]
 800f0b4:	3c01      	subs	r4, #1
 800f0b6:	e6fa      	b.n	800eeae <__kernel_rem_pio2+0x2ce>
 800f0b8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f0ba:	2b02      	cmp	r3, #2
 800f0bc:	dc0b      	bgt.n	800f0d6 <__kernel_rem_pio2+0x4f6>
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	dc39      	bgt.n	800f136 <__kernel_rem_pio2+0x556>
 800f0c2:	d05d      	beq.n	800f180 <__kernel_rem_pio2+0x5a0>
 800f0c4:	9b02      	ldr	r3, [sp, #8]
 800f0c6:	f003 0007 	and.w	r0, r3, #7
 800f0ca:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f0ce:	ecbd 8b02 	vpop	{d8}
 800f0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0d6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800f0d8:	2b03      	cmp	r3, #3
 800f0da:	d1f3      	bne.n	800f0c4 <__kernel_rem_pio2+0x4e4>
 800f0dc:	9b05      	ldr	r3, [sp, #20]
 800f0de:	9500      	str	r5, [sp, #0]
 800f0e0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f0e4:	eb0d 0403 	add.w	r4, sp, r3
 800f0e8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800f0ec:	46a2      	mov	sl, r4
 800f0ee:	9b00      	ldr	r3, [sp, #0]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f1aa 0a08 	sub.w	sl, sl, #8
 800f0f6:	dc69      	bgt.n	800f1cc <__kernel_rem_pio2+0x5ec>
 800f0f8:	46aa      	mov	sl, r5
 800f0fa:	f1ba 0f01 	cmp.w	sl, #1
 800f0fe:	f1a4 0408 	sub.w	r4, r4, #8
 800f102:	f300 8083 	bgt.w	800f20c <__kernel_rem_pio2+0x62c>
 800f106:	9c05      	ldr	r4, [sp, #20]
 800f108:	ab48      	add	r3, sp, #288	; 0x120
 800f10a:	441c      	add	r4, r3
 800f10c:	2000      	movs	r0, #0
 800f10e:	2100      	movs	r1, #0
 800f110:	2d01      	cmp	r5, #1
 800f112:	f300 809a 	bgt.w	800f24a <__kernel_rem_pio2+0x66a>
 800f116:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800f11a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f11e:	f1bb 0f00 	cmp.w	fp, #0
 800f122:	f040 8098 	bne.w	800f256 <__kernel_rem_pio2+0x676>
 800f126:	9b04      	ldr	r3, [sp, #16]
 800f128:	e9c3 7800 	strd	r7, r8, [r3]
 800f12c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800f130:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f134:	e7c6      	b.n	800f0c4 <__kernel_rem_pio2+0x4e4>
 800f136:	9e05      	ldr	r6, [sp, #20]
 800f138:	ab48      	add	r3, sp, #288	; 0x120
 800f13a:	441e      	add	r6, r3
 800f13c:	462c      	mov	r4, r5
 800f13e:	2000      	movs	r0, #0
 800f140:	2100      	movs	r1, #0
 800f142:	2c00      	cmp	r4, #0
 800f144:	da33      	bge.n	800f1ae <__kernel_rem_pio2+0x5ce>
 800f146:	f1bb 0f00 	cmp.w	fp, #0
 800f14a:	d036      	beq.n	800f1ba <__kernel_rem_pio2+0x5da>
 800f14c:	4602      	mov	r2, r0
 800f14e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f152:	9c04      	ldr	r4, [sp, #16]
 800f154:	e9c4 2300 	strd	r2, r3, [r4]
 800f158:	4602      	mov	r2, r0
 800f15a:	460b      	mov	r3, r1
 800f15c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800f160:	f7f1 f89a 	bl	8000298 <__aeabi_dsub>
 800f164:	ae4a      	add	r6, sp, #296	; 0x128
 800f166:	2401      	movs	r4, #1
 800f168:	42a5      	cmp	r5, r4
 800f16a:	da29      	bge.n	800f1c0 <__kernel_rem_pio2+0x5e0>
 800f16c:	f1bb 0f00 	cmp.w	fp, #0
 800f170:	d002      	beq.n	800f178 <__kernel_rem_pio2+0x598>
 800f172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f176:	4619      	mov	r1, r3
 800f178:	9b04      	ldr	r3, [sp, #16]
 800f17a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f17e:	e7a1      	b.n	800f0c4 <__kernel_rem_pio2+0x4e4>
 800f180:	9c05      	ldr	r4, [sp, #20]
 800f182:	ab48      	add	r3, sp, #288	; 0x120
 800f184:	441c      	add	r4, r3
 800f186:	2000      	movs	r0, #0
 800f188:	2100      	movs	r1, #0
 800f18a:	2d00      	cmp	r5, #0
 800f18c:	da09      	bge.n	800f1a2 <__kernel_rem_pio2+0x5c2>
 800f18e:	f1bb 0f00 	cmp.w	fp, #0
 800f192:	d002      	beq.n	800f19a <__kernel_rem_pio2+0x5ba>
 800f194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f198:	4619      	mov	r1, r3
 800f19a:	9b04      	ldr	r3, [sp, #16]
 800f19c:	e9c3 0100 	strd	r0, r1, [r3]
 800f1a0:	e790      	b.n	800f0c4 <__kernel_rem_pio2+0x4e4>
 800f1a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f1a6:	f7f1 f879 	bl	800029c <__adddf3>
 800f1aa:	3d01      	subs	r5, #1
 800f1ac:	e7ed      	b.n	800f18a <__kernel_rem_pio2+0x5aa>
 800f1ae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800f1b2:	f7f1 f873 	bl	800029c <__adddf3>
 800f1b6:	3c01      	subs	r4, #1
 800f1b8:	e7c3      	b.n	800f142 <__kernel_rem_pio2+0x562>
 800f1ba:	4602      	mov	r2, r0
 800f1bc:	460b      	mov	r3, r1
 800f1be:	e7c8      	b.n	800f152 <__kernel_rem_pio2+0x572>
 800f1c0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f1c4:	f7f1 f86a 	bl	800029c <__adddf3>
 800f1c8:	3401      	adds	r4, #1
 800f1ca:	e7cd      	b.n	800f168 <__kernel_rem_pio2+0x588>
 800f1cc:	e9da 8900 	ldrd	r8, r9, [sl]
 800f1d0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f1d4:	9b00      	ldr	r3, [sp, #0]
 800f1d6:	3b01      	subs	r3, #1
 800f1d8:	9300      	str	r3, [sp, #0]
 800f1da:	4632      	mov	r2, r6
 800f1dc:	463b      	mov	r3, r7
 800f1de:	4640      	mov	r0, r8
 800f1e0:	4649      	mov	r1, r9
 800f1e2:	f7f1 f85b 	bl	800029c <__adddf3>
 800f1e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	460b      	mov	r3, r1
 800f1ee:	4640      	mov	r0, r8
 800f1f0:	4649      	mov	r1, r9
 800f1f2:	f7f1 f851 	bl	8000298 <__aeabi_dsub>
 800f1f6:	4632      	mov	r2, r6
 800f1f8:	463b      	mov	r3, r7
 800f1fa:	f7f1 f84f 	bl	800029c <__adddf3>
 800f1fe:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f202:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f206:	ed8a 7b00 	vstr	d7, [sl]
 800f20a:	e770      	b.n	800f0ee <__kernel_rem_pio2+0x50e>
 800f20c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f210:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f214:	4640      	mov	r0, r8
 800f216:	4632      	mov	r2, r6
 800f218:	463b      	mov	r3, r7
 800f21a:	4649      	mov	r1, r9
 800f21c:	f7f1 f83e 	bl	800029c <__adddf3>
 800f220:	e9cd 0100 	strd	r0, r1, [sp]
 800f224:	4602      	mov	r2, r0
 800f226:	460b      	mov	r3, r1
 800f228:	4640      	mov	r0, r8
 800f22a:	4649      	mov	r1, r9
 800f22c:	f7f1 f834 	bl	8000298 <__aeabi_dsub>
 800f230:	4632      	mov	r2, r6
 800f232:	463b      	mov	r3, r7
 800f234:	f7f1 f832 	bl	800029c <__adddf3>
 800f238:	ed9d 7b00 	vldr	d7, [sp]
 800f23c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f240:	ed84 7b00 	vstr	d7, [r4]
 800f244:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f248:	e757      	b.n	800f0fa <__kernel_rem_pio2+0x51a>
 800f24a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f24e:	f7f1 f825 	bl	800029c <__adddf3>
 800f252:	3d01      	subs	r5, #1
 800f254:	e75c      	b.n	800f110 <__kernel_rem_pio2+0x530>
 800f256:	9b04      	ldr	r3, [sp, #16]
 800f258:	9a04      	ldr	r2, [sp, #16]
 800f25a:	601f      	str	r7, [r3, #0]
 800f25c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800f260:	605c      	str	r4, [r3, #4]
 800f262:	609d      	str	r5, [r3, #8]
 800f264:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f268:	60d3      	str	r3, [r2, #12]
 800f26a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f26e:	6110      	str	r0, [r2, #16]
 800f270:	6153      	str	r3, [r2, #20]
 800f272:	e727      	b.n	800f0c4 <__kernel_rem_pio2+0x4e4>
 800f274:	41700000 	.word	0x41700000
 800f278:	3e700000 	.word	0x3e700000
 800f27c:	00000000 	.word	0x00000000

0800f280 <scalbn>:
 800f280:	b570      	push	{r4, r5, r6, lr}
 800f282:	ec55 4b10 	vmov	r4, r5, d0
 800f286:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f28a:	4606      	mov	r6, r0
 800f28c:	462b      	mov	r3, r5
 800f28e:	b999      	cbnz	r1, 800f2b8 <scalbn+0x38>
 800f290:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f294:	4323      	orrs	r3, r4
 800f296:	d03f      	beq.n	800f318 <scalbn+0x98>
 800f298:	4b35      	ldr	r3, [pc, #212]	; (800f370 <scalbn+0xf0>)
 800f29a:	4629      	mov	r1, r5
 800f29c:	ee10 0a10 	vmov	r0, s0
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	f7f1 f9b1 	bl	8000608 <__aeabi_dmul>
 800f2a6:	4b33      	ldr	r3, [pc, #204]	; (800f374 <scalbn+0xf4>)
 800f2a8:	429e      	cmp	r6, r3
 800f2aa:	4604      	mov	r4, r0
 800f2ac:	460d      	mov	r5, r1
 800f2ae:	da10      	bge.n	800f2d2 <scalbn+0x52>
 800f2b0:	a327      	add	r3, pc, #156	; (adr r3, 800f350 <scalbn+0xd0>)
 800f2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b6:	e01f      	b.n	800f2f8 <scalbn+0x78>
 800f2b8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f2bc:	4291      	cmp	r1, r2
 800f2be:	d10c      	bne.n	800f2da <scalbn+0x5a>
 800f2c0:	ee10 2a10 	vmov	r2, s0
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	4629      	mov	r1, r5
 800f2c8:	f7f0 ffe8 	bl	800029c <__adddf3>
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	460d      	mov	r5, r1
 800f2d0:	e022      	b.n	800f318 <scalbn+0x98>
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f2d8:	3936      	subs	r1, #54	; 0x36
 800f2da:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f2de:	4296      	cmp	r6, r2
 800f2e0:	dd0d      	ble.n	800f2fe <scalbn+0x7e>
 800f2e2:	2d00      	cmp	r5, #0
 800f2e4:	a11c      	add	r1, pc, #112	; (adr r1, 800f358 <scalbn+0xd8>)
 800f2e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2ea:	da02      	bge.n	800f2f2 <scalbn+0x72>
 800f2ec:	a11c      	add	r1, pc, #112	; (adr r1, 800f360 <scalbn+0xe0>)
 800f2ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2f2:	a319      	add	r3, pc, #100	; (adr r3, 800f358 <scalbn+0xd8>)
 800f2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f8:	f7f1 f986 	bl	8000608 <__aeabi_dmul>
 800f2fc:	e7e6      	b.n	800f2cc <scalbn+0x4c>
 800f2fe:	1872      	adds	r2, r6, r1
 800f300:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f304:	428a      	cmp	r2, r1
 800f306:	dcec      	bgt.n	800f2e2 <scalbn+0x62>
 800f308:	2a00      	cmp	r2, #0
 800f30a:	dd08      	ble.n	800f31e <scalbn+0x9e>
 800f30c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f310:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f314:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f318:	ec45 4b10 	vmov	d0, r4, r5
 800f31c:	bd70      	pop	{r4, r5, r6, pc}
 800f31e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f322:	da08      	bge.n	800f336 <scalbn+0xb6>
 800f324:	2d00      	cmp	r5, #0
 800f326:	a10a      	add	r1, pc, #40	; (adr r1, 800f350 <scalbn+0xd0>)
 800f328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f32c:	dac0      	bge.n	800f2b0 <scalbn+0x30>
 800f32e:	a10e      	add	r1, pc, #56	; (adr r1, 800f368 <scalbn+0xe8>)
 800f330:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f334:	e7bc      	b.n	800f2b0 <scalbn+0x30>
 800f336:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f33a:	3236      	adds	r2, #54	; 0x36
 800f33c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f340:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f344:	4620      	mov	r0, r4
 800f346:	4b0c      	ldr	r3, [pc, #48]	; (800f378 <scalbn+0xf8>)
 800f348:	2200      	movs	r2, #0
 800f34a:	e7d5      	b.n	800f2f8 <scalbn+0x78>
 800f34c:	f3af 8000 	nop.w
 800f350:	c2f8f359 	.word	0xc2f8f359
 800f354:	01a56e1f 	.word	0x01a56e1f
 800f358:	8800759c 	.word	0x8800759c
 800f35c:	7e37e43c 	.word	0x7e37e43c
 800f360:	8800759c 	.word	0x8800759c
 800f364:	fe37e43c 	.word	0xfe37e43c
 800f368:	c2f8f359 	.word	0xc2f8f359
 800f36c:	81a56e1f 	.word	0x81a56e1f
 800f370:	43500000 	.word	0x43500000
 800f374:	ffff3cb0 	.word	0xffff3cb0
 800f378:	3c900000 	.word	0x3c900000
 800f37c:	00000000 	.word	0x00000000

0800f380 <floor>:
 800f380:	ec51 0b10 	vmov	r0, r1, d0
 800f384:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f38c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800f390:	2e13      	cmp	r6, #19
 800f392:	ee10 5a10 	vmov	r5, s0
 800f396:	ee10 8a10 	vmov	r8, s0
 800f39a:	460c      	mov	r4, r1
 800f39c:	dc31      	bgt.n	800f402 <floor+0x82>
 800f39e:	2e00      	cmp	r6, #0
 800f3a0:	da14      	bge.n	800f3cc <floor+0x4c>
 800f3a2:	a333      	add	r3, pc, #204	; (adr r3, 800f470 <floor+0xf0>)
 800f3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a8:	f7f0 ff78 	bl	800029c <__adddf3>
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	f7f1 fbba 	bl	8000b28 <__aeabi_dcmpgt>
 800f3b4:	b138      	cbz	r0, 800f3c6 <floor+0x46>
 800f3b6:	2c00      	cmp	r4, #0
 800f3b8:	da53      	bge.n	800f462 <floor+0xe2>
 800f3ba:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800f3be:	4325      	orrs	r5, r4
 800f3c0:	d052      	beq.n	800f468 <floor+0xe8>
 800f3c2:	4c2d      	ldr	r4, [pc, #180]	; (800f478 <floor+0xf8>)
 800f3c4:	2500      	movs	r5, #0
 800f3c6:	4621      	mov	r1, r4
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	e024      	b.n	800f416 <floor+0x96>
 800f3cc:	4f2b      	ldr	r7, [pc, #172]	; (800f47c <floor+0xfc>)
 800f3ce:	4137      	asrs	r7, r6
 800f3d0:	ea01 0307 	and.w	r3, r1, r7
 800f3d4:	4303      	orrs	r3, r0
 800f3d6:	d01e      	beq.n	800f416 <floor+0x96>
 800f3d8:	a325      	add	r3, pc, #148	; (adr r3, 800f470 <floor+0xf0>)
 800f3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3de:	f7f0 ff5d 	bl	800029c <__adddf3>
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	f7f1 fb9f 	bl	8000b28 <__aeabi_dcmpgt>
 800f3ea:	2800      	cmp	r0, #0
 800f3ec:	d0eb      	beq.n	800f3c6 <floor+0x46>
 800f3ee:	2c00      	cmp	r4, #0
 800f3f0:	bfbe      	ittt	lt
 800f3f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f3f6:	4133      	asrlt	r3, r6
 800f3f8:	18e4      	addlt	r4, r4, r3
 800f3fa:	ea24 0407 	bic.w	r4, r4, r7
 800f3fe:	2500      	movs	r5, #0
 800f400:	e7e1      	b.n	800f3c6 <floor+0x46>
 800f402:	2e33      	cmp	r6, #51	; 0x33
 800f404:	dd0b      	ble.n	800f41e <floor+0x9e>
 800f406:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f40a:	d104      	bne.n	800f416 <floor+0x96>
 800f40c:	ee10 2a10 	vmov	r2, s0
 800f410:	460b      	mov	r3, r1
 800f412:	f7f0 ff43 	bl	800029c <__adddf3>
 800f416:	ec41 0b10 	vmov	d0, r0, r1
 800f41a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f41e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f422:	f04f 37ff 	mov.w	r7, #4294967295
 800f426:	40df      	lsrs	r7, r3
 800f428:	4238      	tst	r0, r7
 800f42a:	d0f4      	beq.n	800f416 <floor+0x96>
 800f42c:	a310      	add	r3, pc, #64	; (adr r3, 800f470 <floor+0xf0>)
 800f42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f432:	f7f0 ff33 	bl	800029c <__adddf3>
 800f436:	2200      	movs	r2, #0
 800f438:	2300      	movs	r3, #0
 800f43a:	f7f1 fb75 	bl	8000b28 <__aeabi_dcmpgt>
 800f43e:	2800      	cmp	r0, #0
 800f440:	d0c1      	beq.n	800f3c6 <floor+0x46>
 800f442:	2c00      	cmp	r4, #0
 800f444:	da0a      	bge.n	800f45c <floor+0xdc>
 800f446:	2e14      	cmp	r6, #20
 800f448:	d101      	bne.n	800f44e <floor+0xce>
 800f44a:	3401      	adds	r4, #1
 800f44c:	e006      	b.n	800f45c <floor+0xdc>
 800f44e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f452:	2301      	movs	r3, #1
 800f454:	40b3      	lsls	r3, r6
 800f456:	441d      	add	r5, r3
 800f458:	45a8      	cmp	r8, r5
 800f45a:	d8f6      	bhi.n	800f44a <floor+0xca>
 800f45c:	ea25 0507 	bic.w	r5, r5, r7
 800f460:	e7b1      	b.n	800f3c6 <floor+0x46>
 800f462:	2500      	movs	r5, #0
 800f464:	462c      	mov	r4, r5
 800f466:	e7ae      	b.n	800f3c6 <floor+0x46>
 800f468:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800f46c:	e7ab      	b.n	800f3c6 <floor+0x46>
 800f46e:	bf00      	nop
 800f470:	8800759c 	.word	0x8800759c
 800f474:	7e37e43c 	.word	0x7e37e43c
 800f478:	bff00000 	.word	0xbff00000
 800f47c:	000fffff 	.word	0x000fffff

0800f480 <_init>:
 800f480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f482:	bf00      	nop
 800f484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f486:	bc08      	pop	{r3}
 800f488:	469e      	mov	lr, r3
 800f48a:	4770      	bx	lr

0800f48c <_fini>:
 800f48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f48e:	bf00      	nop
 800f490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f492:	bc08      	pop	{r3}
 800f494:	469e      	mov	lr, r3
 800f496:	4770      	bx	lr
