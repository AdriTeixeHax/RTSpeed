
RTSpeed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800d358  0800d358  0001d358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d928  0800d928  000207ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800d928  0800d928  0001d928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d930  0800d930  000207ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d930  0800d930  0001d930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d938  0800d938  0001d938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007ac  20000000  0800d93c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f14  200007ac  0800e0e8  000207ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026c0  0800e0e8  000226c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000207ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000207dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000daaa  00000000  00000000  0002081f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c66  00000000  00000000  0002e2c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  00030f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d4  00000000  00000000  00031b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c23  00000000  00000000  0003240c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f796  00000000  00000000  0004b02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008914b  00000000  00000000  0005a7c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044c0  00000000  00000000  000e3910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000e7dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200007ac 	.word	0x200007ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d340 	.word	0x0800d340

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200007b0 	.word	0x200007b0
 80001dc:	0800d340 	.word	0x0800d340

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 fa7b 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f885 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 f8eb 	bl	8001140 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000f6a:	f005 ff2b 	bl	8006dc4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  float temp = 0;
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  char msg[8];
  char sign = ' ';
 8000f74:	2320      	movs	r3, #32
 8000f76:	72fb      	strb	r3, [r7, #11]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	temp = sin(HAL_GetTick()*1e-3 * 2*3.14159*50);
 8000f78:	f000 fad4 	bl	8001524 <HAL_GetTick>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fac8 	bl	8000514 <__aeabi_ui2d>
 8000f84:	a336      	add	r3, pc, #216	; (adr r3, 8001060 <main+0x108>)
 8000f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8a:	f7ff fb3d 	bl	8000608 <__aeabi_dmul>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4610      	mov	r0, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	f7ff f97f 	bl	800029c <__adddf3>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	a330      	add	r3, pc, #192	; (adr r3, 8001068 <main+0x110>)
 8000fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fac:	f7ff fb2c 	bl	8000608 <__aeabi_dmul>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <main+0xf8>)
 8000fbe:	f7ff fb23 	bl	8000608 <__aeabi_dmul>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	ec43 2b17 	vmov	d7, r2, r3
 8000fca:	eeb0 0a47 	vmov.f32	s0, s14
 8000fce:	eef0 0a67 	vmov.f32	s1, s15
 8000fd2:	f00b f975 	bl	800c2c0 <sin>
 8000fd6:	ec53 2b10 	vmov	r2, r3, d0
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fdeb 	bl	8000bb8 <__aeabi_d2f>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	60fb      	str	r3, [r7, #12]

	strcpy(msg, "");
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	703b      	strb	r3, [r7, #0]

	if (temp >= 0)
 8000fea:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff6:	db0d      	blt.n	8001014 <main+0xbc>
		sprintf(msg, "%c%.3f", sign, temp);
 8000ff8:	7afc      	ldrb	r4, [r7, #11]
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f7ff faac 	bl	8000558 <__aeabi_f2d>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4638      	mov	r0, r7
 8001006:	e9cd 2300 	strd	r2, r3, [sp]
 800100a:	4622      	mov	r2, r4
 800100c:	4911      	ldr	r1, [pc, #68]	; (8001054 <main+0xfc>)
 800100e:	f006 fcab 	bl	8007968 <sprintf>
 8001012:	e008      	b.n	8001026 <main+0xce>
	else
		sprintf(msg, "%.3f", temp); // Sign is already set
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f7ff fa9f 	bl	8000558 <__aeabi_f2d>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4638      	mov	r0, r7
 8001020:	490d      	ldr	r1, [pc, #52]	; (8001058 <main+0x100>)
 8001022:	f006 fca1 	bl	8007968 <sprintf>

	strcat(msg, "\r\n");
 8001026:	463b      	mov	r3, r7
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff f8d9 	bl	80001e0 <strlen>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	463b      	mov	r3, r7
 8001034:	4413      	add	r3, r2
 8001036:	4a09      	ldr	r2, [pc, #36]	; (800105c <main+0x104>)
 8001038:	8811      	ldrh	r1, [r2, #0]
 800103a:	7892      	ldrb	r2, [r2, #2]
 800103c:	8019      	strh	r1, [r3, #0]
 800103e:	709a      	strb	r2, [r3, #2]
	CDC_Transmit_FS(msg, sizeof(msg));
 8001040:	463b      	mov	r3, r7
 8001042:	2108      	movs	r1, #8
 8001044:	4618      	mov	r0, r3
 8001046:	f005 ff7b 	bl	8006f40 <CDC_Transmit_FS>
  {
 800104a:	e795      	b.n	8000f78 <main+0x20>
 800104c:	f3af 8000 	nop.w
 8001050:	40490000 	.word	0x40490000
 8001054:	0800d358 	.word	0x0800d358
 8001058:	0800d360 	.word	0x0800d360
 800105c:	0800d368 	.word	0x0800d368
 8001060:	d2f1a9fc 	.word	0xd2f1a9fc
 8001064:	3f50624d 	.word	0x3f50624d
 8001068:	f01b866e 	.word	0xf01b866e
 800106c:	400921f9 	.word	0x400921f9

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	; 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2230      	movs	r2, #48	; 0x30
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f006 fcd5 	bl	8007a2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <SystemClock_Config+0xc8>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a26      	ldr	r2, [pc, #152]	; (8001138 <SystemClock_Config+0xc8>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <SystemClock_Config+0xc8>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	4b21      	ldr	r3, [pc, #132]	; (800113c <SystemClock_Config+0xcc>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a20      	ldr	r2, [pc, #128]	; (800113c <SystemClock_Config+0xcc>)
 80010ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4b1e      	ldr	r3, [pc, #120]	; (800113c <SystemClock_Config+0xcc>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010cc:	2301      	movs	r3, #1
 80010ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010e0:	2310      	movs	r3, #16
 80010e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 123;
 80010e4:	237b      	movs	r3, #123	; 0x7b
 80010e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010ec:	2304      	movs	r3, #4
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	4618      	mov	r0, r3
 80010f6:	f001 ff2b 	bl	8002f50 <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001100:	f000 f846 	bl	8001190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001104:	230f      	movs	r3, #15
 8001106:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001108:	2301      	movs	r3, #1
 800110a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f002 f98e 	bl	8003440 <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800112a:	f000 f831 	bl	8001190 <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	3750      	adds	r7, #80	; 0x50
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_GPIO_Init+0x4c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a0f      	ldr	r2, [pc, #60]	; (800118c <MX_GPIO_Init+0x4c>)
 8001150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b0d      	ldr	r3, [pc, #52]	; (800118c <MX_GPIO_Init+0x4c>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_GPIO_Init+0x4c>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a08      	ldr	r2, [pc, #32]	; (800118c <MX_GPIO_Init+0x4c>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_GPIO_Init+0x4c>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40023800 	.word	0x40023800

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001198:	e7fe      	b.n	8001198 <Error_Handler+0x8>
	...

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <HAL_MspInit+0x4c>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <HAL_MspInit+0x4c>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <HAL_MspInit+0x4c>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_MspInit+0x4c>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a08      	ldr	r2, [pc, #32]	; (80011e8 <HAL_MspInit+0x4c>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_MspInit+0x4c>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f0:	e7fe      	b.n	80011f0 <NMI_Handler+0x4>

080011f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler+0x4>

080011fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <UsageFault_Handler+0x4>

0800120a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001238:	f000 f960 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <OTG_FS_IRQHandler+0x10>)
 8001246:	f000 fd77 	bl	8001d38 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20001cb0 	.word	0x20001cb0

08001254 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return 1;
 8001258:	2301      	movs	r3, #1
}
 800125a:	4618      	mov	r0, r3
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <_kill>:

int _kill(int pid, int sig)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800126e:	f006 fc2d 	bl	8007acc <__errno>
 8001272:	4603      	mov	r3, r0
 8001274:	2216      	movs	r2, #22
 8001276:	601a      	str	r2, [r3, #0]
  return -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <_exit>:

void _exit (int status)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800128c:	f04f 31ff 	mov.w	r1, #4294967295
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ffe7 	bl	8001264 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001296:	e7fe      	b.n	8001296 <_exit+0x12>

08001298 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	617b      	str	r3, [r7, #20]
 80012a8:	e00a      	b.n	80012c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012aa:	f3af 8000 	nop.w
 80012ae:	4601      	mov	r1, r0
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	60ba      	str	r2, [r7, #8]
 80012b6:	b2ca      	uxtb	r2, r1
 80012b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	3301      	adds	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dbf0      	blt.n	80012aa <_read+0x12>
  }

  return len;
 80012c8:	687b      	ldr	r3, [r7, #4]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b086      	sub	sp, #24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e009      	b.n	80012f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	1c5a      	adds	r2, r3, #1
 80012e8:	60ba      	str	r2, [r7, #8]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbf1      	blt.n	80012e4 <_write+0x12>
  }
  return len;
 8001300:	687b      	ldr	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_close>:

int _close(int file)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr

08001322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001322:	b480      	push	{r7}
 8001324:	b083      	sub	sp, #12
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
 800132a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001332:	605a      	str	r2, [r3, #4]
  return 0;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <_isatty>:

int _isatty(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800137c:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <_sbrk+0x5c>)
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <_sbrk+0x60>)
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001388:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <_sbrk+0x64>)
 8001392:	4a12      	ldr	r2, [pc, #72]	; (80013dc <_sbrk+0x68>)
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d207      	bcs.n	80013b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013a4:	f006 fb92 	bl	8007acc <__errno>
 80013a8:	4603      	mov	r3, r0
 80013aa:	220c      	movs	r2, #12
 80013ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	e009      	b.n	80013c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013b4:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <_sbrk+0x64>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <_sbrk+0x64>)
 80013c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013c6:	68fb      	ldr	r3, [r7, #12]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20020000 	.word	0x20020000
 80013d4:	00000400 	.word	0x00000400
 80013d8:	200007c8 	.word	0x200007c8
 80013dc:	200026c0 	.word	0x200026c0

080013e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <SystemInit+0x20>)
 80013e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ea:	4a05      	ldr	r2, [pc, #20]	; (8001400 <SystemInit+0x20>)
 80013ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800143c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001408:	f7ff ffea 	bl	80013e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800140c:	480c      	ldr	r0, [pc, #48]	; (8001440 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140e:	490d      	ldr	r1, [pc, #52]	; (8001444 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001410:	4a0d      	ldr	r2, [pc, #52]	; (8001448 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0a      	ldr	r2, [pc, #40]	; (800144c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001424:	4c0a      	ldr	r4, [pc, #40]	; (8001450 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001432:	f006 fb51 	bl	8007ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001436:	f7ff fd8f 	bl	8000f58 <main>
  bx  lr    
 800143a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800143c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001444:	200007ac 	.word	0x200007ac
  ldr r2, =_sidata
 8001448:	0800d93c 	.word	0x0800d93c
  ldr r2, =_sbss
 800144c:	200007ac 	.word	0x200007ac
  ldr r4, =_ebss
 8001450:	200026c0 	.word	0x200026c0

08001454 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <ADC_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <HAL_Init+0x40>)
 8001462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_Init+0x40>)
 800146e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_Init+0x40>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 f94f 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	200f      	movs	r0, #15
 8001488:	f000 f808 	bl	800149c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff fe86 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x54>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x58>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f967 	bl	800178e <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00e      	b.n	80014e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d80a      	bhi.n	80014e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f000 f92f 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <HAL_InitTick+0x5c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000008 	.word	0x20000008
 80014f8:	20000004 	.word	0x20000004

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008
 8001520:	200007cc 	.word	0x200007cc

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	200007cc 	.word	0x200007cc

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff ffee 	bl	8001524 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffde 	bl	8001524 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4907      	ldr	r1, [pc, #28]	; (8001620 <__NVIC_EnableIRQ+0x38>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff29 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff3e 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff8e 	bl	8001678 <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5d 	bl	8001624 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff31 	bl	80015e8 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e159      	b.n	8001a78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 8148 	bne.w	8001a72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d005      	beq.n	80017fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d130      	bne.n	800185c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001830:	2201      	movs	r2, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 0201 	and.w	r2, r3, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b03      	cmp	r3, #3
 8001866:	d017      	beq.n	8001898 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d123      	bne.n	80018ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80a2 	beq.w	8001a72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b57      	ldr	r3, [pc, #348]	; (8001a90 <HAL_GPIO_Init+0x2e8>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a56      	ldr	r2, [pc, #344]	; (8001a90 <HAL_GPIO_Init+0x2e8>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b54      	ldr	r3, [pc, #336]	; (8001a90 <HAL_GPIO_Init+0x2e8>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194a:	4a52      	ldr	r2, [pc, #328]	; (8001a94 <HAL_GPIO_Init+0x2ec>)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a49      	ldr	r2, [pc, #292]	; (8001a98 <HAL_GPIO_Init+0x2f0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d019      	beq.n	80019aa <HAL_GPIO_Init+0x202>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a48      	ldr	r2, [pc, #288]	; (8001a9c <HAL_GPIO_Init+0x2f4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_GPIO_Init+0x1fe>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a47      	ldr	r2, [pc, #284]	; (8001aa0 <HAL_GPIO_Init+0x2f8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00d      	beq.n	80019a2 <HAL_GPIO_Init+0x1fa>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a46      	ldr	r2, [pc, #280]	; (8001aa4 <HAL_GPIO_Init+0x2fc>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d007      	beq.n	800199e <HAL_GPIO_Init+0x1f6>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a45      	ldr	r2, [pc, #276]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d101      	bne.n	800199a <HAL_GPIO_Init+0x1f2>
 8001996:	2304      	movs	r3, #4
 8001998:	e008      	b.n	80019ac <HAL_GPIO_Init+0x204>
 800199a:	2307      	movs	r3, #7
 800199c:	e006      	b.n	80019ac <HAL_GPIO_Init+0x204>
 800199e:	2303      	movs	r3, #3
 80019a0:	e004      	b.n	80019ac <HAL_GPIO_Init+0x204>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e002      	b.n	80019ac <HAL_GPIO_Init+0x204>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_GPIO_Init+0x204>
 80019aa:	2300      	movs	r3, #0
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	f002 0203 	and.w	r2, r2, #3
 80019b2:	0092      	lsls	r2, r2, #2
 80019b4:	4093      	lsls	r3, r2
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019bc:	4935      	ldr	r1, [pc, #212]	; (8001a94 <HAL_GPIO_Init+0x2ec>)
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	089b      	lsrs	r3, r3, #2
 80019c2:	3302      	adds	r3, #2
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ca:	4b38      	ldr	r3, [pc, #224]	; (8001aac <HAL_GPIO_Init+0x304>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ee:	4a2f      	ldr	r2, [pc, #188]	; (8001aac <HAL_GPIO_Init+0x304>)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_GPIO_Init+0x304>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a18:	4a24      	ldr	r2, [pc, #144]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a42:	4a1a      	ldr	r2, [pc, #104]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a6c:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_GPIO_Init+0x304>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3301      	adds	r3, #1
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2b0f      	cmp	r3, #15
 8001a7c:	f67f aea2 	bls.w	80017c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3724      	adds	r7, #36	; 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40013800 	.word	0x40013800
 8001a98:	40020000 	.word	0x40020000
 8001a9c:	40020400 	.word	0x40020400
 8001aa0:	40020800 	.word	0x40020800
 8001aa4:	40020c00 	.word	0x40020c00
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40013c00 	.word	0x40013c00

08001ab0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af02      	add	r7, sp, #8
 8001ab6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e101      	b.n	8001cc6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d106      	bne.n	8001ae2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f005 fb77 	bl	80071d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001af0:	d102      	bne.n	8001af8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f001 ff6e 	bl	80039de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	7c1a      	ldrb	r2, [r3, #16]
 8001b0a:	f88d 2000 	strb.w	r2, [sp]
 8001b0e:	3304      	adds	r3, #4
 8001b10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b12:	f001 fe4d 	bl	80037b0 <USB_CoreInit>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0ce      	b.n	8001cc6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f001 ff66 	bl	8003a00 <USB_SetCurrentMode>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d005      	beq.n	8001b46 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e0bf      	b.n	8001cc6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]
 8001b4a:	e04a      	b.n	8001be2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b4c:	7bfa      	ldrb	r2, [r7, #15]
 8001b4e:	6879      	ldr	r1, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	3315      	adds	r3, #21
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	3314      	adds	r3, #20
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	b298      	uxth	r0, r3
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4413      	add	r3, r2
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	332e      	adds	r3, #46	; 0x2e
 8001b88:	4602      	mov	r2, r0
 8001b8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4413      	add	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	3318      	adds	r3, #24
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	331c      	adds	r3, #28
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3320      	adds	r3, #32
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3324      	adds	r3, #36	; 0x24
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	3301      	adds	r3, #1
 8001be0:	73fb      	strb	r3, [r7, #15]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	791b      	ldrb	r3, [r3, #4]
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d3af      	bcc.n	8001b4c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
 8001bf0:	e044      	b.n	8001c7c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001c1a:	7bfa      	ldrb	r2, [r7, #15]
 8001c1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c34:	7bfa      	ldrb	r2, [r7, #15]
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c4a:	7bfa      	ldrb	r2, [r7, #15]
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	4413      	add	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	440b      	add	r3, r1
 8001c58:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	791b      	ldrb	r3, [r3, #4]
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d3b5      	bcc.n	8001bf2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6818      	ldr	r0, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7c1a      	ldrb	r2, [r3, #16]
 8001c8e:	f88d 2000 	strb.w	r2, [sp]
 8001c92:	3304      	adds	r3, #4
 8001c94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c96:	f001 feff 	bl	8003a98 <USB_DevInit>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e00c      	b.n	8001cc6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 ff43 	bl	8004b4a <USB_DevDisconnect>

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_PCD_Start+0x1c>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e022      	b.n	8001d30 <HAL_PCD_Start+0x62>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d105      	bne.n	8001d12 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fe50 	bl	80039bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f002 fef1 	bl	8004b08 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b08d      	sub	sp, #52	; 0x34
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d46:	6a3b      	ldr	r3, [r7, #32]
 8001d48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f002 ffaf 	bl	8004cb2 <USB_GetMode>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 848c 	bne.w	8002674 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f002 ff13 	bl	8004b8c <USB_ReadInterrupts>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f000 8482 	beq.w	8002672 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f002 ff00 	bl	8004b8c <USB_ReadInterrupts>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d107      	bne.n	8001da6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695a      	ldr	r2, [r3, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f002 0202 	and.w	r2, r2, #2
 8001da4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f002 feee 	bl	8004b8c <USB_ReadInterrupts>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d161      	bne.n	8001e7e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699a      	ldr	r2, [r3, #24]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0210 	bic.w	r2, r2, #16
 8001dc8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	f003 020f 	and.w	r2, r3, #15
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	3304      	adds	r3, #4
 8001de8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	0c5b      	lsrs	r3, r3, #17
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d124      	bne.n	8001e40 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d035      	beq.n	8001e6e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	461a      	mov	r2, r3
 8001e14:	6a38      	ldr	r0, [r7, #32]
 8001e16:	f002 fd25 	bl	8004864 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e26:	441a      	add	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	695a      	ldr	r2, [r3, #20]
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	091b      	lsrs	r3, r3, #4
 8001e34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e38:	441a      	add	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	615a      	str	r2, [r3, #20]
 8001e3e:	e016      	b.n	8001e6e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	0c5b      	lsrs	r3, r3, #17
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	2b06      	cmp	r3, #6
 8001e4a:	d110      	bne.n	8001e6e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001e52:	2208      	movs	r2, #8
 8001e54:	4619      	mov	r1, r3
 8001e56:	6a38      	ldr	r0, [r7, #32]
 8001e58:	f002 fd04 	bl	8004864 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e68:	441a      	add	r2, r3
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0210 	orr.w	r2, r2, #16
 8001e7c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f002 fe82 	bl	8004b8c <USB_ReadInterrupts>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e8e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e92:	f040 80a7 	bne.w	8001fe4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f002 fe87 	bl	8004bb2 <USB_ReadDevAllOutEpInterrupt>
 8001ea4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001ea6:	e099      	b.n	8001fdc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 808e 	beq.w	8001fd0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f002 feab 	bl	8004c1a <USB_ReadDevOutEPInterrupt>
 8001ec4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00c      	beq.n	8001eea <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001edc:	461a      	mov	r2, r3
 8001ede:	2301      	movs	r3, #1
 8001ee0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ee2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fea1 	bl	8002c2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f003 0308 	and.w	r3, r3, #8
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d00c      	beq.n	8001f0e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f00:	461a      	mov	r2, r3
 8001f02:	2308      	movs	r3, #8
 8001f04:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 ff77 	bl	8002dfc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f24:	461a      	mov	r2, r3
 8001f26:	2310      	movs	r3, #16
 8001f28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d030      	beq.n	8001f96 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d109      	bne.n	8001f54 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f52:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f56:	4613      	mov	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	3304      	adds	r3, #4
 8001f68:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	78db      	ldrb	r3, [r3, #3]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d108      	bne.n	8001f84 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2200      	movs	r2, #0
 8001f76:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f005 fa22 	bl	80073c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	015a      	lsls	r2, r3, #5
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f90:	461a      	mov	r2, r3
 8001f92:	2302      	movs	r3, #2
 8001f94:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f003 0320 	and.w	r3, r3, #32
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fac:	461a      	mov	r2, r3
 8001fae:	2320      	movs	r3, #32
 8001fb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d009      	beq.n	8001fd0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fc8:	461a      	mov	r2, r3
 8001fca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fce:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f47f af62 	bne.w	8001ea8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f002 fdcf 	bl	8004b8c <USB_ReadInterrupts>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ff8:	f040 80db 	bne.w	80021b2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f002 fdf0 	bl	8004be6 <USB_ReadDevAllInEpInterrupt>
 8002006:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800200c:	e0cd      	b.n	80021aa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80c2 	beq.w	800219e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	4611      	mov	r1, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f002 fe16 	bl	8004c56 <USB_ReadDevInEPInterrupt>
 800202a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d057      	beq.n	80020e6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	f003 030f 	and.w	r3, r3, #15
 800203c:	2201      	movs	r2, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800204a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	43db      	mvns	r3, r3
 8002050:	69f9      	ldr	r1, [r7, #28]
 8002052:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002056:	4013      	ands	r3, r2
 8002058:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800205a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205c:	015a      	lsls	r2, r3, #5
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	4413      	add	r3, r2
 8002062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002066:	461a      	mov	r2, r3
 8002068:	2301      	movs	r3, #1
 800206a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	799b      	ldrb	r3, [r3, #6]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d132      	bne.n	80020da <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	3320      	adds	r3, #32
 8002084:	6819      	ldr	r1, [r3, #0]
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4403      	add	r3, r0
 8002094:	331c      	adds	r3, #28
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4419      	add	r1, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209e:	4613      	mov	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4403      	add	r3, r0
 80020a8:	3320      	adds	r3, #32
 80020aa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d113      	bne.n	80020da <HAL_PCD_IRQHandler+0x3a2>
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	3324      	adds	r3, #36	; 0x24
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d108      	bne.n	80020da <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80020d2:	461a      	mov	r2, r3
 80020d4:	2101      	movs	r1, #1
 80020d6:	f002 fe1d 	bl	8004d14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	4619      	mov	r1, r3
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f005 f8f6 	bl	80072d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d008      	beq.n	8002102 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	4413      	add	r3, r2
 80020f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020fc:	461a      	mov	r2, r3
 80020fe:	2308      	movs	r3, #8
 8002100:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	d008      	beq.n	800211e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	4413      	add	r3, r2
 8002114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002118:	461a      	mov	r2, r3
 800211a:	2310      	movs	r3, #16
 800211c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	4413      	add	r3, r2
 8002130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002134:	461a      	mov	r2, r3
 8002136:	2340      	movs	r3, #64	; 0x40
 8002138:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d023      	beq.n	800218c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002146:	6a38      	ldr	r0, [r7, #32]
 8002148:	f001 fe0a 	bl	8003d60 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800214c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	3310      	adds	r3, #16
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	4413      	add	r3, r2
 800215c:	3304      	adds	r3, #4
 800215e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	78db      	ldrb	r3, [r3, #3]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d108      	bne.n	800217a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2200      	movs	r2, #0
 800216c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4619      	mov	r1, r3
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f005 f939 	bl	80073ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	015a      	lsls	r2, r3, #5
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	4413      	add	r3, r2
 8002182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002186:	461a      	mov	r2, r3
 8002188:	2302      	movs	r3, #2
 800218a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 fcbb 	bl	8002b14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	3301      	adds	r3, #1
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	085b      	lsrs	r3, r3, #1
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f47f af2e 	bne.w	800200e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 fce8 	bl	8004b8c <USB_ReadInterrupts>
 80021bc:	4603      	mov	r3, r0
 80021be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80021c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021c6:	d122      	bne.n	800220e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021d6:	f023 0301 	bic.w	r3, r3, #1
 80021da:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d108      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021ee:	2100      	movs	r1, #0
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fea1 	bl	8002f38 <HAL_PCDEx_LPM_Callback>
 80021f6:	e002      	b.n	80021fe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f005 f8d7 	bl	80073ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800220c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f002 fcba 	bl	8004b8c <USB_ReadInterrupts>
 8002218:	4603      	mov	r3, r0
 800221a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800221e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002222:	d112      	bne.n	800224a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d102      	bne.n	800223a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f005 f893 	bl	8007360 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002248:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f002 fc9c 	bl	8004b8c <USB_ReadInterrupts>
 8002254:	4603      	mov	r3, r0
 8002256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800225e:	f040 80b7 	bne.w	80023d0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2110      	movs	r1, #16
 800227c:	4618      	mov	r0, r3
 800227e:	f001 fd6f 	bl	8003d60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002282:	2300      	movs	r3, #0
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002286:	e046      	b.n	8002316 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002294:	461a      	mov	r2, r3
 8002296:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800229a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022ac:	0151      	lsls	r1, r2, #5
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	440a      	add	r2, r1
 80022b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80022b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80022bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022be:	015a      	lsls	r2, r3, #5
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	4413      	add	r3, r2
 80022c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c8:	461a      	mov	r2, r3
 80022ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022ce:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d2:	015a      	lsls	r2, r3, #5
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e0:	0151      	lsls	r1, r2, #5
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	440a      	add	r2, r1
 80022e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002300:	0151      	lsls	r1, r2, #5
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	440a      	add	r2, r1
 8002306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800230a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800230e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002312:	3301      	adds	r3, #1
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	791b      	ldrb	r3, [r3, #4]
 800231a:	461a      	mov	r2, r3
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	4293      	cmp	r3, r2
 8002320:	d3b2      	bcc.n	8002288 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002330:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002334:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7bdb      	ldrb	r3, [r3, #15]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d016      	beq.n	800236c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800234e:	f043 030b 	orr.w	r3, r3, #11
 8002352:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002364:	f043 030b 	orr.w	r3, r3, #11
 8002368:	6453      	str	r3, [r2, #68]	; 0x44
 800236a:	e015      	b.n	8002398 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800237a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800237e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002382:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	69fa      	ldr	r2, [r7, #28]
 800238e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002392:	f043 030b 	orr.w	r3, r3, #11
 8002396:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023a6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80023aa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6818      	ldr	r0, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80023ba:	461a      	mov	r2, r3
 80023bc:	f002 fcaa 	bl	8004d14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f002 fbd9 	bl	8004b8c <USB_ReadInterrupts>
 80023da:	4603      	mov	r3, r0
 80023dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e4:	d123      	bne.n	800242e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 fc6f 	bl	8004cce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f001 fd2c 	bl	8003e52 <USB_GetDevSpeed>
 80023fa:	4603      	mov	r3, r0
 80023fc:	461a      	mov	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681c      	ldr	r4, [r3, #0]
 8002406:	f001 f9c7 	bl	8003798 <HAL_RCC_GetHCLKFreq>
 800240a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002410:	461a      	mov	r2, r3
 8002412:	4620      	mov	r0, r4
 8002414:	f001 fa30 	bl	8003878 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f004 ff82 	bl	8007322 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800242c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fbaa 	bl	8004b8c <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b08      	cmp	r3, #8
 8002440:	d10a      	bne.n	8002458 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f004 ff5f 	bl	8007306 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695a      	ldr	r2, [r3, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f002 0208 	and.w	r2, r2, #8
 8002456:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f002 fb95 	bl	8004b8c <USB_ReadInterrupts>
 8002462:	4603      	mov	r3, r0
 8002464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002468:	2b80      	cmp	r3, #128	; 0x80
 800246a:	d123      	bne.n	80024b4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002478:	2301      	movs	r3, #1
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
 800247c:	e014      	b.n	80024a8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002482:	4613      	mov	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d105      	bne.n	80024a2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	b2db      	uxtb	r3, r3
 800249a:	4619      	mov	r1, r3
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fb08 	bl	8002ab2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	3301      	adds	r3, #1
 80024a6:	627b      	str	r3, [r7, #36]	; 0x24
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	791b      	ldrb	r3, [r3, #4]
 80024ac:	461a      	mov	r2, r3
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d3e4      	bcc.n	800247e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f002 fb67 	bl	8004b8c <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024c8:	d13c      	bne.n	8002544 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024ca:	2301      	movs	r3, #1
 80024cc:	627b      	str	r3, [r7, #36]	; 0x24
 80024ce:	e02b      	b.n	8002528 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	015a      	lsls	r2, r3, #5
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	4413      	add	r3, r2
 80024d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e4:	4613      	mov	r3, r2
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	3318      	adds	r3, #24
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d115      	bne.n	8002522 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80024f6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	da12      	bge.n	8002522 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	3317      	adds	r3, #23
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	b2db      	uxtb	r3, r3
 8002514:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002518:	b2db      	uxtb	r3, r3
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fac8 	bl	8002ab2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	3301      	adds	r3, #1
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	791b      	ldrb	r3, [r3, #4]
 800252c:	461a      	mov	r2, r3
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	4293      	cmp	r3, r2
 8002532:	d3cd      	bcc.n	80024d0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002542:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f002 fb1f 	bl	8004b8c <USB_ReadInterrupts>
 800254e:	4603      	mov	r3, r0
 8002550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002554:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002558:	d156      	bne.n	8002608 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800255a:	2301      	movs	r3, #1
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
 800255e:	e045      	b.n	80025ec <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002574:	4613      	mov	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d12e      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002588:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800258a:	2b00      	cmp	r3, #0
 800258c:	da2b      	bge.n	80025e6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 800259a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800259e:	429a      	cmp	r2, r3
 80025a0:	d121      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a6:	4613      	mov	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	f203 2357 	addw	r3, r3, #599	; 0x257
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10a      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025e2:	6053      	str	r3, [r2, #4]
            break;
 80025e4:	e008      	b.n	80025f8 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	3301      	adds	r3, #1
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	791b      	ldrb	r3, [r3, #4]
 80025f0:	461a      	mov	r2, r3
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d3b3      	bcc.n	8002560 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f002 fabd 	bl	8004b8c <USB_ReadInterrupts>
 8002612:	4603      	mov	r3, r0
 8002614:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261c:	d10a      	bne.n	8002634 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f004 fef6 	bl	8007410 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002632:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f002 faa7 	bl	8004b8c <USB_ReadInterrupts>
 800263e:	4603      	mov	r3, r0
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b04      	cmp	r3, #4
 8002646:	d115      	bne.n	8002674 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f004 fee6 	bl	800742c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6859      	ldr	r1, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	430a      	orrs	r2, r1
 800266e:	605a      	str	r2, [r3, #4]
 8002670:	e000      	b.n	8002674 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002672:	bf00      	nop
    }
  }
}
 8002674:	3734      	adds	r7, #52	; 0x34
 8002676:	46bd      	mov	sp, r7
 8002678:	bd90      	pop	{r4, r7, pc}

0800267a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_PCD_SetAddress+0x1a>
 8002690:	2302      	movs	r3, #2
 8002692:	e012      	b.n	80026ba <HAL_PCD_SetAddress+0x40>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	78fa      	ldrb	r2, [r7, #3]
 80026a0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	78fa      	ldrb	r2, [r7, #3]
 80026a8:	4611      	mov	r1, r2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f002 fa06 	bl	8004abc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	4608      	mov	r0, r1
 80026cc:	4611      	mov	r1, r2
 80026ce:	461a      	mov	r2, r3
 80026d0:	4603      	mov	r3, r0
 80026d2:	70fb      	strb	r3, [r7, #3]
 80026d4:	460b      	mov	r3, r1
 80026d6:	803b      	strh	r3, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	da0f      	bge.n	8002708 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e8:	78fb      	ldrb	r3, [r7, #3]
 80026ea:	f003 020f 	and.w	r2, r3, #15
 80026ee:	4613      	mov	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4413      	add	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	3310      	adds	r3, #16
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4413      	add	r3, r2
 80026fc:	3304      	adds	r3, #4
 80026fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2201      	movs	r2, #1
 8002704:	705a      	strb	r2, [r3, #1]
 8002706:	e00f      	b.n	8002728 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002708:	78fb      	ldrb	r3, [r7, #3]
 800270a:	f003 020f 	and.w	r2, r3, #15
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	3304      	adds	r3, #4
 8002720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	b2da      	uxtb	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002734:	883a      	ldrh	r2, [r7, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	78ba      	ldrb	r2, [r7, #2]
 800273e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	785b      	ldrb	r3, [r3, #1]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002752:	78bb      	ldrb	r3, [r7, #2]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d102      	bne.n	800275e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_PCD_EP_Open+0xaa>
 8002768:	2302      	movs	r3, #2
 800276a:	e00e      	b.n	800278a <HAL_PCD_EP_Open+0xc8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68f9      	ldr	r1, [r7, #12]
 800277a:	4618      	mov	r0, r3
 800277c:	f001 fb8e 	bl	8003e9c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002788:	7afb      	ldrb	r3, [r7, #11]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
 800279a:	460b      	mov	r3, r1
 800279c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800279e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da0f      	bge.n	80027c6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	f003 020f 	and.w	r2, r3, #15
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	4413      	add	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	3310      	adds	r3, #16
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	4413      	add	r3, r2
 80027ba:	3304      	adds	r3, #4
 80027bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	705a      	strb	r2, [r3, #1]
 80027c4:	e00f      	b.n	80027e6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	f003 020f 	and.w	r2, r3, #15
 80027cc:	4613      	mov	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	4413      	add	r3, r2
 80027dc:	3304      	adds	r3, #4
 80027de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	f003 030f 	and.w	r3, r3, #15
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <HAL_PCD_EP_Close+0x6e>
 80027fc:	2302      	movs	r3, #2
 80027fe:	e00e      	b.n	800281e <HAL_PCD_EP_Close+0x8c>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68f9      	ldr	r1, [r7, #12]
 800280e:	4618      	mov	r0, r3
 8002810:	f001 fbcc 	bl	8003fac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b086      	sub	sp, #24
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	607a      	str	r2, [r7, #4]
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	460b      	mov	r3, r1
 8002834:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002836:	7afb      	ldrb	r3, [r7, #11]
 8002838:	f003 020f 	and.w	r2, r3, #15
 800283c:	4613      	mov	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	4413      	add	r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	3304      	adds	r3, #4
 800284e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2200      	movs	r2, #0
 8002860:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2200      	movs	r2, #0
 8002866:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002868:	7afb      	ldrb	r3, [r7, #11]
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	b2da      	uxtb	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	799b      	ldrb	r3, [r3, #6]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d102      	bne.n	8002882 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	799b      	ldrb	r3, [r3, #6]
 800288a:	461a      	mov	r2, r3
 800288c:	6979      	ldr	r1, [r7, #20]
 800288e:	f001 fc69 	bl	8004164 <USB_EPStartXfer>

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	f003 020f 	and.w	r2, r3, #15
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	603b      	str	r3, [r7, #0]
 80028d8:	460b      	mov	r3, r1
 80028da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028dc:	7afb      	ldrb	r3, [r7, #11]
 80028de:	f003 020f 	and.w	r2, r3, #15
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	3310      	adds	r3, #16
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4413      	add	r3, r2
 80028f0:	3304      	adds	r3, #4
 80028f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2200      	movs	r2, #0
 8002904:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2201      	movs	r2, #1
 800290a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800290c:	7afb      	ldrb	r3, [r7, #11]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	b2da      	uxtb	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	799b      	ldrb	r3, [r3, #6]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d102      	bne.n	8002926 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	799b      	ldrb	r3, [r3, #6]
 800292e:	461a      	mov	r2, r3
 8002930:	6979      	ldr	r1, [r7, #20]
 8002932:	f001 fc17 	bl	8004164 <USB_EPStartXfer>

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	7912      	ldrb	r2, [r2, #4]
 8002956:	4293      	cmp	r3, r2
 8002958:	d901      	bls.n	800295e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e04f      	b.n	80029fe <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800295e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002962:	2b00      	cmp	r3, #0
 8002964:	da0f      	bge.n	8002986 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	f003 020f 	and.w	r2, r3, #15
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	3310      	adds	r3, #16
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	3304      	adds	r3, #4
 800297c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2201      	movs	r2, #1
 8002982:	705a      	strb	r2, [r3, #1]
 8002984:	e00d      	b.n	80029a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	4613      	mov	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	4413      	add	r3, r2
 8002998:	3304      	adds	r3, #4
 800299a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_PCD_EP_SetStall+0x82>
 80029be:	2302      	movs	r3, #2
 80029c0:	e01d      	b.n	80029fe <HAL_PCD_EP_SetStall+0xbe>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68f9      	ldr	r1, [r7, #12]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f001 ff9f 	bl	8004914 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029d6:	78fb      	ldrb	r3, [r7, #3]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d109      	bne.n	80029f4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	7999      	ldrb	r1, [r3, #6]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80029ee:	461a      	mov	r2, r3
 80029f0:	f002 f990 	bl	8004d14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	b084      	sub	sp, #16
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	460b      	mov	r3, r1
 8002a10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	7912      	ldrb	r2, [r2, #4]
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d901      	bls.n	8002a24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e042      	b.n	8002aaa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	da0f      	bge.n	8002a4c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	f003 020f 	and.w	r2, r3, #15
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	3310      	adds	r3, #16
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	4413      	add	r3, r2
 8002a40:	3304      	adds	r3, #4
 8002a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2201      	movs	r2, #1
 8002a48:	705a      	strb	r2, [r3, #1]
 8002a4a:	e00f      	b.n	8002a6c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	f003 020f 	and.w	r2, r3, #15
 8002a52:	4613      	mov	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4413      	add	r3, r2
 8002a62:	3304      	adds	r3, #4
 8002a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_PCD_EP_ClrStall+0x86>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e00e      	b.n	8002aaa <HAL_PCD_EP_ClrStall+0xa4>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68f9      	ldr	r1, [r7, #12]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f001 ffa8 	bl	80049f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	460b      	mov	r3, r1
 8002abc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002abe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	da0c      	bge.n	8002ae0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	f003 020f 	and.w	r2, r3, #15
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	4413      	add	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	3310      	adds	r3, #16
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	3304      	adds	r3, #4
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e00c      	b.n	8002afa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	f003 020f 	and.w	r2, r3, #15
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	00db      	lsls	r3, r3, #3
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	4413      	add	r3, r2
 8002af6:	3304      	adds	r3, #4
 8002af8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68f9      	ldr	r1, [r7, #12]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f001 fdc7 	bl	8004694 <USB_EPStopXfer>
 8002b06:	4603      	mov	r3, r0
 8002b08:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08a      	sub	sp, #40	; 0x28
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	3310      	adds	r3, #16
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	3304      	adds	r3, #4
 8002b3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d901      	bls.n	8002b4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e06b      	b.n	8002c24 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	69fa      	ldr	r2, [r7, #28]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d902      	bls.n	8002b68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	3303      	adds	r3, #3
 8002b6c:	089b      	lsrs	r3, r3, #2
 8002b6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b70:	e02a      	b.n	8002bc8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	691a      	ldr	r2, [r3, #16]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d902      	bls.n	8002b8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3303      	adds	r3, #3
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	68d9      	ldr	r1, [r3, #12]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	4603      	mov	r3, r0
 8002baa:	6978      	ldr	r0, [r7, #20]
 8002bac:	f001 fe1c 	bl	80047e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68da      	ldr	r2, [r3, #12]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	441a      	add	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	695a      	ldr	r2, [r3, #20]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	441a      	add	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	015a      	lsls	r2, r3, #5
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	4413      	add	r3, r2
 8002bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d809      	bhi.n	8002bf2 <PCD_WriteEmptyTxFifo+0xde>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d203      	bcs.n	8002bf2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1bf      	bne.n	8002b72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d811      	bhi.n	8002c22 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	2201      	movs	r2, #1
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	43db      	mvns	r3, r3
 8002c18:	6939      	ldr	r1, [r7, #16]
 8002c1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c1e:	4013      	ands	r3, r2
 8002c20:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3720      	adds	r7, #32
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b088      	sub	sp, #32
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	333c      	adds	r3, #60	; 0x3c
 8002c44:	3304      	adds	r3, #4
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	799b      	ldrb	r3, [r3, #6]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d17b      	bne.n	8002d5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d015      	beq.n	8002c98 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	4a61      	ldr	r2, [pc, #388]	; (8002df4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	f240 80b9 	bls.w	8002de8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 80b3 	beq.w	8002de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	015a      	lsls	r2, r3, #5
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c94:	6093      	str	r3, [r2, #8]
 8002c96:	e0a7      	b.n	8002de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f003 0320 	and.w	r3, r3, #32
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	015a      	lsls	r2, r3, #5
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	4413      	add	r3, r2
 8002caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cae:	461a      	mov	r2, r3
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	6093      	str	r3, [r2, #8]
 8002cb4:	e098      	b.n	8002de8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f040 8093 	bne.w	8002de8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	4a4b      	ldr	r2, [pc, #300]	; (8002df4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d90f      	bls.n	8002cea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	015a      	lsls	r2, r3, #5
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	4413      	add	r3, r2
 8002cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ce6:	6093      	str	r3, [r2, #8]
 8002ce8:	e07e      	b.n	8002de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a1a      	ldr	r2, [r3, #32]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	0159      	lsls	r1, r3, #5
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	440b      	add	r3, r1
 8002d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d16:	1ad2      	subs	r2, r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d114      	bne.n	8002d4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002d34:	461a      	mov	r2, r3
 8002d36:	2101      	movs	r1, #1
 8002d38:	f001 ffec 	bl	8004d14 <USB_EP0_OutStart>
 8002d3c:	e006      	b.n	8002d4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	441a      	add	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	4619      	mov	r1, r3
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f004 faa2 	bl	800729c <HAL_PCD_DataOutStageCallback>
 8002d58:	e046      	b.n	8002de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	4a26      	ldr	r2, [pc, #152]	; (8002df8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d124      	bne.n	8002dac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00a      	beq.n	8002d82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d7e:	6093      	str	r3, [r2, #8]
 8002d80:	e032      	b.n	8002de8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	015a      	lsls	r2, r3, #5
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	4413      	add	r3, r2
 8002d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d98:	461a      	mov	r2, r3
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	4619      	mov	r1, r3
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f004 fa79 	bl	800729c <HAL_PCD_DataOutStageCallback>
 8002daa:	e01d      	b.n	8002de8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d114      	bne.n	8002ddc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d108      	bne.n	8002ddc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	f001 ff9c 	bl	8004d14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4619      	mov	r1, r3
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f004 fa5a 	bl	800729c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3720      	adds	r7, #32
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	4f54300a 	.word	0x4f54300a
 8002df8:	4f54310a 	.word	0x4f54310a

08002dfc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	333c      	adds	r3, #60	; 0x3c
 8002e14:	3304      	adds	r3, #4
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d90e      	bls.n	8002e50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d009      	beq.n	8002e50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e48:	461a      	mov	r2, r3
 8002e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f004 fa11 	bl	8007278 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <PCD_EP_OutSetupPacket_int+0x88>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d90c      	bls.n	8002e78 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	799b      	ldrb	r3, [r3, #6]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d108      	bne.n	8002e78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002e70:	461a      	mov	r2, r3
 8002e72:	2101      	movs	r1, #1
 8002e74:	f001 ff4e 	bl	8004d14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	4f54300a 	.word	0x4f54300a

08002e88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	460b      	mov	r3, r1
 8002e92:	70fb      	strb	r3, [r7, #3]
 8002e94:	4613      	mov	r3, r2
 8002e96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d107      	bne.n	8002eb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ea6:	883b      	ldrh	r3, [r7, #0]
 8002ea8:	0419      	lsls	r1, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
 8002eb4:	e028      	b.n	8002f08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	0c1b      	lsrs	r3, r3, #16
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	e00d      	b.n	8002ee6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	3340      	adds	r3, #64	; 0x40
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	4413      	add	r3, r2
 8002ede:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	73fb      	strb	r3, [r7, #15]
 8002ee6:	7bfa      	ldrb	r2, [r7, #15]
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d3ec      	bcc.n	8002eca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ef0:	883b      	ldrh	r3, [r7, #0]
 8002ef2:	0418      	lsls	r0, r3, #16
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6819      	ldr	r1, [r3, #0]
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	4302      	orrs	r2, r0
 8002f00:	3340      	adds	r3, #64	; 0x40
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e267      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d075      	beq.n	800305a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f6e:	4b88      	ldr	r3, [pc, #544]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d00c      	beq.n	8002f94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f7a:	4b85      	ldr	r3, [pc, #532]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d112      	bne.n	8002fac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f86:	4b82      	ldr	r3, [pc, #520]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f92:	d10b      	bne.n	8002fac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	4b7e      	ldr	r3, [pc, #504]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d05b      	beq.n	8003058 <HAL_RCC_OscConfig+0x108>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d157      	bne.n	8003058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e242      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x74>
 8002fb6:	4b76      	ldr	r3, [pc, #472]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a75      	ldr	r2, [pc, #468]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	e01d      	b.n	8003000 <HAL_RCC_OscConfig+0xb0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x98>
 8002fce:	4b70      	ldr	r3, [pc, #448]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a6f      	ldr	r2, [pc, #444]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	4b6d      	ldr	r3, [pc, #436]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a6c      	ldr	r2, [pc, #432]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	e00b      	b.n	8003000 <HAL_RCC_OscConfig+0xb0>
 8002fe8:	4b69      	ldr	r3, [pc, #420]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a68      	ldr	r2, [pc, #416]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	4b66      	ldr	r3, [pc, #408]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a65      	ldr	r2, [pc, #404]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8002ffa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d013      	beq.n	8003030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe fa8c 	bl	8001524 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003010:	f7fe fa88 	bl	8001524 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e207      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b5b      	ldr	r3, [pc, #364]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0xc0>
 800302e:	e014      	b.n	800305a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003030:	f7fe fa78 	bl	8001524 <HAL_GetTick>
 8003034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003038:	f7fe fa74 	bl	8001524 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b64      	cmp	r3, #100	; 0x64
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e1f3      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	4b51      	ldr	r3, [pc, #324]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d1f0      	bne.n	8003038 <HAL_RCC_OscConfig+0xe8>
 8003056:	e000      	b.n	800305a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d063      	beq.n	800312e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003066:	4b4a      	ldr	r3, [pc, #296]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800307a:	2b08      	cmp	r3, #8
 800307c:	d11c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800307e:	4b44      	ldr	r3, [pc, #272]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d116      	bne.n	80030b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308a:	4b41      	ldr	r3, [pc, #260]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d005      	beq.n	80030a2 <HAL_RCC_OscConfig+0x152>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d001      	beq.n	80030a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e1c7      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a2:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	4937      	ldr	r1, [pc, #220]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030b6:	e03a      	b.n	800312e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d020      	beq.n	8003102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c0:	4b34      	ldr	r3, [pc, #208]	; (8003194 <HAL_RCC_OscConfig+0x244>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7fe fa2d 	bl	8001524 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ce:	f7fe fa29 	bl	8001524 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e1a8      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e0:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ec:	4b28      	ldr	r3, [pc, #160]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4925      	ldr	r1, [pc, #148]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]
 8003100:	e015      	b.n	800312e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003102:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_RCC_OscConfig+0x244>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003108:	f7fe fa0c 	bl	8001524 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003110:	f7fe fa08 	bl	8001524 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e187      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003122:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1f0      	bne.n	8003110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d036      	beq.n	80031a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d016      	beq.n	8003170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <HAL_RCC_OscConfig+0x248>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe f9ec 	bl	8001524 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003150:	f7fe f9e8 	bl	8001524 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e167      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003162:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_RCC_OscConfig+0x240>)
 8003164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x200>
 800316e:	e01b      	b.n	80031a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003170:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCC_OscConfig+0x248>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7fe f9d5 	bl	8001524 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800317c:	e00e      	b.n	800319c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800317e:	f7fe f9d1 	bl	8001524 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d907      	bls.n	800319c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e150      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
 8003190:	40023800 	.word	0x40023800
 8003194:	42470000 	.word	0x42470000
 8003198:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800319c:	4b88      	ldr	r3, [pc, #544]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800319e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1ea      	bne.n	800317e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8097 	beq.w	80032e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b6:	2300      	movs	r3, #0
 80031b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ba:	4b81      	ldr	r3, [pc, #516]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10f      	bne.n	80031e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c6:	2300      	movs	r3, #0
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	4b7d      	ldr	r3, [pc, #500]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	4a7c      	ldr	r2, [pc, #496]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6413      	str	r3, [r2, #64]	; 0x40
 80031d6:	4b7a      	ldr	r3, [pc, #488]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	60bb      	str	r3, [r7, #8]
 80031e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031e2:	2301      	movs	r3, #1
 80031e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e6:	4b77      	ldr	r3, [pc, #476]	; (80033c4 <HAL_RCC_OscConfig+0x474>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d118      	bne.n	8003224 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031f2:	4b74      	ldr	r3, [pc, #464]	; (80033c4 <HAL_RCC_OscConfig+0x474>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a73      	ldr	r2, [pc, #460]	; (80033c4 <HAL_RCC_OscConfig+0x474>)
 80031f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031fe:	f7fe f991 	bl	8001524 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003206:	f7fe f98d 	bl	8001524 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e10c      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003218:	4b6a      	ldr	r3, [pc, #424]	; (80033c4 <HAL_RCC_OscConfig+0x474>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x2ea>
 800322c:	4b64      	ldr	r3, [pc, #400]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003230:	4a63      	ldr	r2, [pc, #396]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003232:	f043 0301 	orr.w	r3, r3, #1
 8003236:	6713      	str	r3, [r2, #112]	; 0x70
 8003238:	e01c      	b.n	8003274 <HAL_RCC_OscConfig+0x324>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b05      	cmp	r3, #5
 8003240:	d10c      	bne.n	800325c <HAL_RCC_OscConfig+0x30c>
 8003242:	4b5f      	ldr	r3, [pc, #380]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	4a5e      	ldr	r2, [pc, #376]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003248:	f043 0304 	orr.w	r3, r3, #4
 800324c:	6713      	str	r3, [r2, #112]	; 0x70
 800324e:	4b5c      	ldr	r3, [pc, #368]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003252:	4a5b      	ldr	r2, [pc, #364]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	6713      	str	r3, [r2, #112]	; 0x70
 800325a:	e00b      	b.n	8003274 <HAL_RCC_OscConfig+0x324>
 800325c:	4b58      	ldr	r3, [pc, #352]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003260:	4a57      	ldr	r2, [pc, #348]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003262:	f023 0301 	bic.w	r3, r3, #1
 8003266:	6713      	str	r3, [r2, #112]	; 0x70
 8003268:	4b55      	ldr	r3, [pc, #340]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800326a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326c:	4a54      	ldr	r2, [pc, #336]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800326e:	f023 0304 	bic.w	r3, r3, #4
 8003272:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d015      	beq.n	80032a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800327c:	f7fe f952 	bl	8001524 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003282:	e00a      	b.n	800329a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003284:	f7fe f94e 	bl	8001524 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e0cb      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329a:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0ee      	beq.n	8003284 <HAL_RCC_OscConfig+0x334>
 80032a6:	e014      	b.n	80032d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a8:	f7fe f93c 	bl	8001524 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ae:	e00a      	b.n	80032c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032b0:	f7fe f938 	bl	8001524 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80032be:	4293      	cmp	r3, r2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e0b5      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c6:	4b3e      	ldr	r3, [pc, #248]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1ee      	bne.n	80032b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032d2:	7dfb      	ldrb	r3, [r7, #23]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d105      	bne.n	80032e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d8:	4b39      	ldr	r3, [pc, #228]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	4a38      	ldr	r2, [pc, #224]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80032de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 80a1 	beq.w	8003430 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032ee:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 030c 	and.w	r3, r3, #12
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d05c      	beq.n	80033b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d141      	bne.n	8003386 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003302:	4b31      	ldr	r3, [pc, #196]	; (80033c8 <HAL_RCC_OscConfig+0x478>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fe f90c 	bl	8001524 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe f908 	bl	8001524 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e087      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003322:	4b27      	ldr	r3, [pc, #156]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69da      	ldr	r2, [r3, #28]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	019b      	lsls	r3, r3, #6
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	085b      	lsrs	r3, r3, #1
 8003346:	3b01      	subs	r3, #1
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	491b      	ldr	r1, [pc, #108]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x478>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fe f8e1 	bl	8001524 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003366:	f7fe f8dd 	bl	8001524 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e05c      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x416>
 8003384:	e054      	b.n	8003430 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_RCC_OscConfig+0x478>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fe f8ca 	bl	8001524 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003394:	f7fe f8c6 	bl	8001524 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e045      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_RCC_OscConfig+0x470>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x444>
 80033b2:	e03d      	b.n	8003430 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e038      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40007000 	.word	0x40007000
 80033c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033cc:	4b1b      	ldr	r3, [pc, #108]	; (800343c <HAL_RCC_OscConfig+0x4ec>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d028      	beq.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d121      	bne.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d11a      	bne.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f6:	68fa      	ldr	r2, [r7, #12]
 80033f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033fc:	4013      	ands	r3, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003404:	4293      	cmp	r3, r2
 8003406:	d111      	bne.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	3b01      	subs	r3, #1
 8003416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d107      	bne.n	800342c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023800 	.word	0x40023800

08003440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0cc      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003454:	4b68      	ldr	r3, [pc, #416]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	683a      	ldr	r2, [r7, #0]
 800345e:	429a      	cmp	r2, r3
 8003460:	d90c      	bls.n	800347c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003462:	4b65      	ldr	r3, [pc, #404]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0b8      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d020      	beq.n	80034ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0304 	and.w	r3, r3, #4
 8003490:	2b00      	cmp	r3, #0
 8003492:	d005      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003494:	4b59      	ldr	r3, [pc, #356]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a58      	ldr	r2, [pc, #352]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800349e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0308 	and.w	r3, r3, #8
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034ac:	4b53      	ldr	r3, [pc, #332]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4a52      	ldr	r2, [pc, #328]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034b8:	4b50      	ldr	r3, [pc, #320]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	494d      	ldr	r1, [pc, #308]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d044      	beq.n	8003560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d107      	bne.n	80034ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034de:	4b47      	ldr	r3, [pc, #284]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d119      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e07f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d003      	beq.n	80034fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034fa:	2b03      	cmp	r3, #3
 80034fc:	d107      	bne.n	800350e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034fe:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d109      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e06f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350e:	4b3b      	ldr	r3, [pc, #236]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e067      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800351e:	4b37      	ldr	r3, [pc, #220]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f023 0203 	bic.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	4934      	ldr	r1, [pc, #208]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 800352c:	4313      	orrs	r3, r2
 800352e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003530:	f7fd fff8 	bl	8001524 <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	e00a      	b.n	800354e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003538:	f7fd fff4 	bl	8001524 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e04f      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 020c 	and.w	r2, r3, #12
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	429a      	cmp	r2, r3
 800355e:	d1eb      	bne.n	8003538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003560:	4b25      	ldr	r3, [pc, #148]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	429a      	cmp	r2, r3
 800356c:	d20c      	bcs.n	8003588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003570:	683a      	ldr	r2, [r7, #0]
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e032      	b.n	80035ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4916      	ldr	r1, [pc, #88]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d009      	beq.n	80035c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	490e      	ldr	r1, [pc, #56]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035c6:	f000 f821 	bl	800360c <HAL_RCC_GetSysClockFreq>
 80035ca:	4602      	mov	r2, r0
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	091b      	lsrs	r3, r3, #4
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	490a      	ldr	r1, [pc, #40]	; (8003600 <HAL_RCC_ClockConfig+0x1c0>)
 80035d8:	5ccb      	ldrb	r3, [r1, r3]
 80035da:	fa22 f303 	lsr.w	r3, r2, r3
 80035de:	4a09      	ldr	r2, [pc, #36]	; (8003604 <HAL_RCC_ClockConfig+0x1c4>)
 80035e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_RCC_ClockConfig+0x1c8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fd ff58 	bl	800149c <HAL_InitTick>

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3710      	adds	r7, #16
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023c00 	.word	0x40023c00
 80035fc:	40023800 	.word	0x40023800
 8003600:	0800d3b4 	.word	0x0800d3b4
 8003604:	20000000 	.word	0x20000000
 8003608:	20000004 	.word	0x20000004

0800360c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800360c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003610:	b090      	sub	sp, #64	; 0x40
 8003612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	637b      	str	r3, [r7, #52]	; 0x34
 8003618:	2300      	movs	r3, #0
 800361a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800361c:	2300      	movs	r3, #0
 800361e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003624:	4b59      	ldr	r3, [pc, #356]	; (800378c <HAL_RCC_GetSysClockFreq+0x180>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b08      	cmp	r3, #8
 800362e:	d00d      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x40>
 8003630:	2b08      	cmp	r3, #8
 8003632:	f200 80a1 	bhi.w	8003778 <HAL_RCC_GetSysClockFreq+0x16c>
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x34>
 800363a:	2b04      	cmp	r3, #4
 800363c:	d003      	beq.n	8003646 <HAL_RCC_GetSysClockFreq+0x3a>
 800363e:	e09b      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003640:	4b53      	ldr	r3, [pc, #332]	; (8003790 <HAL_RCC_GetSysClockFreq+0x184>)
 8003642:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003644:	e09b      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003646:	4b53      	ldr	r3, [pc, #332]	; (8003794 <HAL_RCC_GetSysClockFreq+0x188>)
 8003648:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800364a:	e098      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800364c:	4b4f      	ldr	r3, [pc, #316]	; (800378c <HAL_RCC_GetSysClockFreq+0x180>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003654:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003656:	4b4d      	ldr	r3, [pc, #308]	; (800378c <HAL_RCC_GetSysClockFreq+0x180>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d028      	beq.n	80036b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003662:	4b4a      	ldr	r3, [pc, #296]	; (800378c <HAL_RCC_GetSysClockFreq+0x180>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	099b      	lsrs	r3, r3, #6
 8003668:	2200      	movs	r2, #0
 800366a:	623b      	str	r3, [r7, #32]
 800366c:	627a      	str	r2, [r7, #36]	; 0x24
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003674:	2100      	movs	r1, #0
 8003676:	4b47      	ldr	r3, [pc, #284]	; (8003794 <HAL_RCC_GetSysClockFreq+0x188>)
 8003678:	fb03 f201 	mul.w	r2, r3, r1
 800367c:	2300      	movs	r3, #0
 800367e:	fb00 f303 	mul.w	r3, r0, r3
 8003682:	4413      	add	r3, r2
 8003684:	4a43      	ldr	r2, [pc, #268]	; (8003794 <HAL_RCC_GetSysClockFreq+0x188>)
 8003686:	fba0 1202 	umull	r1, r2, r0, r2
 800368a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800368c:	460a      	mov	r2, r1
 800368e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003692:	4413      	add	r3, r2
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003698:	2200      	movs	r2, #0
 800369a:	61bb      	str	r3, [r7, #24]
 800369c:	61fa      	str	r2, [r7, #28]
 800369e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036a6:	f7fd fad7 	bl	8000c58 <__aeabi_uldivmod>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4613      	mov	r3, r2
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b2:	e053      	b.n	800375c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036b4:	4b35      	ldr	r3, [pc, #212]	; (800378c <HAL_RCC_GetSysClockFreq+0x180>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	099b      	lsrs	r3, r3, #6
 80036ba:	2200      	movs	r2, #0
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	617a      	str	r2, [r7, #20]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036c6:	f04f 0b00 	mov.w	fp, #0
 80036ca:	4652      	mov	r2, sl
 80036cc:	465b      	mov	r3, fp
 80036ce:	f04f 0000 	mov.w	r0, #0
 80036d2:	f04f 0100 	mov.w	r1, #0
 80036d6:	0159      	lsls	r1, r3, #5
 80036d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036dc:	0150      	lsls	r0, r2, #5
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	ebb2 080a 	subs.w	r8, r2, sl
 80036e6:	eb63 090b 	sbc.w	r9, r3, fp
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 0300 	mov.w	r3, #0
 80036f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036fe:	ebb2 0408 	subs.w	r4, r2, r8
 8003702:	eb63 0509 	sbc.w	r5, r3, r9
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	f04f 0300 	mov.w	r3, #0
 800370e:	00eb      	lsls	r3, r5, #3
 8003710:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003714:	00e2      	lsls	r2, r4, #3
 8003716:	4614      	mov	r4, r2
 8003718:	461d      	mov	r5, r3
 800371a:	eb14 030a 	adds.w	r3, r4, sl
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	eb45 030b 	adc.w	r3, r5, fp
 8003724:	607b      	str	r3, [r7, #4]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003732:	4629      	mov	r1, r5
 8003734:	028b      	lsls	r3, r1, #10
 8003736:	4621      	mov	r1, r4
 8003738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800373c:	4621      	mov	r1, r4
 800373e:	028a      	lsls	r2, r1, #10
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	2200      	movs	r2, #0
 8003748:	60bb      	str	r3, [r7, #8]
 800374a:	60fa      	str	r2, [r7, #12]
 800374c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003750:	f7fd fa82 	bl	8000c58 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4613      	mov	r3, r2
 800375a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800375c:	4b0b      	ldr	r3, [pc, #44]	; (800378c <HAL_RCC_GetSysClockFreq+0x180>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	0c1b      	lsrs	r3, r3, #16
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	3301      	adds	r3, #1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800376c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800376e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003776:	e002      	b.n	800377e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <HAL_RCC_GetSysClockFreq+0x184>)
 800377a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800377c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003780:	4618      	mov	r0, r3
 8003782:	3740      	adds	r7, #64	; 0x40
 8003784:	46bd      	mov	sp, r7
 8003786:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800
 8003790:	00f42400 	.word	0x00f42400
 8003794:	017d7840 	.word	0x017d7840

08003798 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800379c:	4b03      	ldr	r3, [pc, #12]	; (80037ac <HAL_RCC_GetHCLKFreq+0x14>)
 800379e:	681b      	ldr	r3, [r3, #0]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000000 	.word	0x20000000

080037b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037b0:	b084      	sub	sp, #16
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b084      	sub	sp, #16
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	f107 001c 	add.w	r0, r7, #28
 80037be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037c2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d123      	bne.n	8003812 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80037de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d105      	bne.n	8003806 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f001 fae2 	bl	8004dd0 <USB_CoreReset>
 800380c:	4603      	mov	r3, r0
 800380e:	73fb      	strb	r3, [r7, #15]
 8003810:	e01b      	b.n	800384a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f001 fad6 	bl	8004dd0 <USB_CoreReset>
 8003824:	4603      	mov	r3, r0
 8003826:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003828:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	639a      	str	r2, [r3, #56]	; 0x38
 800383c:	e005      	b.n	800384a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800384a:	7fbb      	ldrb	r3, [r7, #30]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d10b      	bne.n	8003868 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f043 0206 	orr.w	r2, r3, #6
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f043 0220 	orr.w	r2, r3, #32
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003874:	b004      	add	sp, #16
 8003876:	4770      	bx	lr

08003878 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	4613      	mov	r3, r2
 8003884:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d165      	bne.n	8003958 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4a41      	ldr	r2, [pc, #260]	; (8003994 <USB_SetTurnaroundTime+0x11c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d906      	bls.n	80038a2 <USB_SetTurnaroundTime+0x2a>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4a40      	ldr	r2, [pc, #256]	; (8003998 <USB_SetTurnaroundTime+0x120>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d202      	bcs.n	80038a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800389c:	230f      	movs	r3, #15
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e062      	b.n	8003968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4a3c      	ldr	r2, [pc, #240]	; (8003998 <USB_SetTurnaroundTime+0x120>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d306      	bcc.n	80038b8 <USB_SetTurnaroundTime+0x40>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4a3b      	ldr	r2, [pc, #236]	; (800399c <USB_SetTurnaroundTime+0x124>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d202      	bcs.n	80038b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80038b2:	230e      	movs	r3, #14
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e057      	b.n	8003968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4a38      	ldr	r2, [pc, #224]	; (800399c <USB_SetTurnaroundTime+0x124>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d306      	bcc.n	80038ce <USB_SetTurnaroundTime+0x56>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4a37      	ldr	r2, [pc, #220]	; (80039a0 <USB_SetTurnaroundTime+0x128>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d202      	bcs.n	80038ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80038c8:	230d      	movs	r3, #13
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e04c      	b.n	8003968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4a33      	ldr	r2, [pc, #204]	; (80039a0 <USB_SetTurnaroundTime+0x128>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d306      	bcc.n	80038e4 <USB_SetTurnaroundTime+0x6c>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4a32      	ldr	r2, [pc, #200]	; (80039a4 <USB_SetTurnaroundTime+0x12c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d802      	bhi.n	80038e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80038de:	230c      	movs	r3, #12
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e041      	b.n	8003968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4a2f      	ldr	r2, [pc, #188]	; (80039a4 <USB_SetTurnaroundTime+0x12c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d906      	bls.n	80038fa <USB_SetTurnaroundTime+0x82>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4a2e      	ldr	r2, [pc, #184]	; (80039a8 <USB_SetTurnaroundTime+0x130>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d802      	bhi.n	80038fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038f4:	230b      	movs	r3, #11
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e036      	b.n	8003968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4a2a      	ldr	r2, [pc, #168]	; (80039a8 <USB_SetTurnaroundTime+0x130>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d906      	bls.n	8003910 <USB_SetTurnaroundTime+0x98>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4a29      	ldr	r2, [pc, #164]	; (80039ac <USB_SetTurnaroundTime+0x134>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d802      	bhi.n	8003910 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800390a:	230a      	movs	r3, #10
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e02b      	b.n	8003968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4a26      	ldr	r2, [pc, #152]	; (80039ac <USB_SetTurnaroundTime+0x134>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d906      	bls.n	8003926 <USB_SetTurnaroundTime+0xae>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4a25      	ldr	r2, [pc, #148]	; (80039b0 <USB_SetTurnaroundTime+0x138>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d202      	bcs.n	8003926 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003920:	2309      	movs	r3, #9
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e020      	b.n	8003968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <USB_SetTurnaroundTime+0x138>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d306      	bcc.n	800393c <USB_SetTurnaroundTime+0xc4>
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	4a20      	ldr	r2, [pc, #128]	; (80039b4 <USB_SetTurnaroundTime+0x13c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d802      	bhi.n	800393c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003936:	2308      	movs	r3, #8
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	e015      	b.n	8003968 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <USB_SetTurnaroundTime+0x13c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d906      	bls.n	8003952 <USB_SetTurnaroundTime+0xda>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <USB_SetTurnaroundTime+0x140>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d202      	bcs.n	8003952 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800394c:	2307      	movs	r3, #7
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e00a      	b.n	8003968 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003952:	2306      	movs	r3, #6
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e007      	b.n	8003968 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800395e:	2309      	movs	r3, #9
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e001      	b.n	8003968 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003964:	2309      	movs	r3, #9
 8003966:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	029b      	lsls	r3, r3, #10
 800397c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003980:	431a      	orrs	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	00d8acbf 	.word	0x00d8acbf
 8003998:	00e4e1c0 	.word	0x00e4e1c0
 800399c:	00f42400 	.word	0x00f42400
 80039a0:	01067380 	.word	0x01067380
 80039a4:	011a499f 	.word	0x011a499f
 80039a8:	01312cff 	.word	0x01312cff
 80039ac:	014ca43f 	.word	0x014ca43f
 80039b0:	016e3600 	.word	0x016e3600
 80039b4:	01a6ab1f 	.word	0x01a6ab1f
 80039b8:	01e84800 	.word	0x01e84800

080039bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f043 0201 	orr.w	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039de:	b480      	push	{r7}
 80039e0:	b083      	sub	sp, #12
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0201 	bic.w	r2, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d115      	bne.n	8003a4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a2e:	200a      	movs	r0, #10
 8003a30:	f7fd fd84 	bl	800153c <HAL_Delay>
      ms += 10U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	330a      	adds	r3, #10
 8003a38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f001 f939 	bl	8004cb2 <USB_GetMode>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d01e      	beq.n	8003a84 <USB_SetCurrentMode+0x84>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2bc7      	cmp	r3, #199	; 0xc7
 8003a4a:	d9f0      	bls.n	8003a2e <USB_SetCurrentMode+0x2e>
 8003a4c:	e01a      	b.n	8003a84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a4e:	78fb      	ldrb	r3, [r7, #3]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d115      	bne.n	8003a80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a60:	200a      	movs	r0, #10
 8003a62:	f7fd fd6b 	bl	800153c <HAL_Delay>
      ms += 10U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	330a      	adds	r3, #10
 8003a6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f001 f920 	bl	8004cb2 <USB_GetMode>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <USB_SetCurrentMode+0x84>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2bc7      	cmp	r3, #199	; 0xc7
 8003a7c:	d9f0      	bls.n	8003a60 <USB_SetCurrentMode+0x60>
 8003a7e:	e001      	b.n	8003a84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e005      	b.n	8003a90 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2bc8      	cmp	r3, #200	; 0xc8
 8003a88:	d101      	bne.n	8003a8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a98:	b084      	sub	sp, #16
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b086      	sub	sp, #24
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003aa6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	e009      	b.n	8003acc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	3340      	adds	r3, #64	; 0x40
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	2b0e      	cmp	r3, #14
 8003ad0:	d9f2      	bls.n	8003ab8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ad2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d11c      	bne.n	8003b14 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	639a      	str	r2, [r3, #56]	; 0x38
 8003b12:	e00b      	b.n	8003b2c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b18:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b32:	461a      	mov	r2, r3
 8003b34:	2300      	movs	r3, #0
 8003b36:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b38:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d10d      	bne.n	8003b5c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d104      	bne.n	8003b52 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b48:	2100      	movs	r1, #0
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f968 	bl	8003e20 <USB_SetDevSpeed>
 8003b50:	e008      	b.n	8003b64 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b52:	2101      	movs	r1, #1
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f963 	bl	8003e20 <USB_SetDevSpeed>
 8003b5a:	e003      	b.n	8003b64 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b5c:	2103      	movs	r1, #3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f95e 	bl	8003e20 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b64:	2110      	movs	r1, #16
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f8fa 	bl	8003d60 <USB_FlushTxFifo>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f924 	bl	8003dc4 <USB_FlushRxFifo>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2300      	movs	r3, #0
 8003b90:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	e043      	b.n	8003c38 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bc6:	d118      	bne.n	8003bfa <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	015a      	lsls	r2, r3, #5
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e013      	b.n	8003c0c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	e008      	b.n	8003c0c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c06:	461a      	mov	r2, r3
 8003c08:	2300      	movs	r3, #0
 8003c0a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	015a      	lsls	r2, r3, #5
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4413      	add	r3, r2
 8003c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	3301      	adds	r3, #1
 8003c36:	613b      	str	r3, [r7, #16]
 8003c38:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d3b5      	bcc.n	8003bb0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	e043      	b.n	8003cd2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c60:	d118      	bne.n	8003c94 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c74:	461a      	mov	r2, r3
 8003c76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	e013      	b.n	8003ca6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e008      	b.n	8003ca6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d3b5      	bcc.n	8003c4a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003cfe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	f043 0210 	orr.w	r2, r3, #16
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <USB_DevInit+0x2c4>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d20:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d005      	beq.n	8003d34 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f043 0208 	orr.w	r2, r3, #8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d107      	bne.n	8003d4c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d44:	f043 0304 	orr.w	r3, r3, #4
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d58:	b004      	add	sp, #16
 8003d5a:	4770      	bx	lr
 8003d5c:	803c3800 	.word	0x803c3800

08003d60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3301      	adds	r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003d7a:	d901      	bls.n	8003d80 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e01b      	b.n	8003db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	daf2      	bge.n	8003d6e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	019b      	lsls	r3, r3, #6
 8003d90:	f043 0220 	orr.w	r2, r3, #32
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003da4:	d901      	bls.n	8003daa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e006      	b.n	8003db8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	d0f0      	beq.n	8003d98 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3714      	adds	r7, #20
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ddc:	d901      	bls.n	8003de2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e018      	b.n	8003e14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	daf2      	bge.n	8003dd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2210      	movs	r2, #16
 8003df2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	3301      	adds	r3, #1
 8003df8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003e00:	d901      	bls.n	8003e06 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e006      	b.n	8003e14 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d0f0      	beq.n	8003df4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	68f9      	ldr	r1, [r7, #12]
 8003e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e40:	4313      	orrs	r3, r2
 8003e42:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b087      	sub	sp, #28
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0306 	and.w	r3, r3, #6
 8003e6a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d102      	bne.n	8003e78 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e72:	2300      	movs	r3, #0
 8003e74:	75fb      	strb	r3, [r7, #23]
 8003e76:	e00a      	b.n	8003e8e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d002      	beq.n	8003e84 <USB_GetDevSpeed+0x32>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2b06      	cmp	r3, #6
 8003e82:	d102      	bne.n	8003e8a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e84:	2302      	movs	r3, #2
 8003e86:	75fb      	strb	r3, [r7, #23]
 8003e88:	e001      	b.n	8003e8e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e8a:	230f      	movs	r3, #15
 8003e8c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	371c      	adds	r7, #28
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	785b      	ldrb	r3, [r3, #1]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d13a      	bne.n	8003f2e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	2101      	movs	r1, #1
 8003eca:	fa01 f303 	lsl.w	r3, r1, r3
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	68f9      	ldr	r1, [r7, #12]
 8003ed2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d155      	bne.n	8003f9c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	791b      	ldrb	r3, [r3, #4]
 8003f0a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f0c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	059b      	lsls	r3, r3, #22
 8003f12:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f14:	4313      	orrs	r3, r2
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	0151      	lsls	r1, r2, #5
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	440a      	add	r2, r1
 8003f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	e036      	b.n	8003f9c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f34:	69da      	ldr	r2, [r3, #28]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	2101      	movs	r1, #1
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	041b      	lsls	r3, r3, #16
 8003f46:	68f9      	ldr	r1, [r7, #12]
 8003f48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d11a      	bne.n	8003f9c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	791b      	ldrb	r3, [r3, #4]
 8003f80:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f82:	430b      	orrs	r3, r1
 8003f84:	4313      	orrs	r3, r2
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	0151      	lsls	r1, r2, #5
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	440a      	add	r2, r1
 8003f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f9a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	785b      	ldrb	r3, [r3, #1]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d161      	bne.n	800408c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fde:	d11f      	bne.n	8004020 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	0151      	lsls	r1, r2, #5
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	440a      	add	r2, r1
 8003ff6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ffe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	440a      	add	r2, r1
 8004016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800401e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	b29b      	uxth	r3, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	68f9      	ldr	r1, [r7, #12]
 800403c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004040:	4013      	ands	r3, r2
 8004042:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	f003 030f 	and.w	r3, r3, #15
 8004054:	2101      	movs	r1, #1
 8004056:	fa01 f303 	lsl.w	r3, r1, r3
 800405a:	b29b      	uxth	r3, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	68f9      	ldr	r1, [r7, #12]
 8004060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004064:	4013      	ands	r3, r2
 8004066:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	0159      	lsls	r1, r3, #5
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	440b      	add	r3, r1
 800407e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004082:	4619      	mov	r1, r3
 8004084:	4b35      	ldr	r3, [pc, #212]	; (800415c <USB_DeactivateEndpoint+0x1b0>)
 8004086:	4013      	ands	r3, r2
 8004088:	600b      	str	r3, [r1, #0]
 800408a:	e060      	b.n	800414e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800409e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040a2:	d11f      	bne.n	80040e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	2101      	movs	r1, #1
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	041b      	lsls	r3, r3, #16
 80040fc:	43db      	mvns	r3, r3
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004104:	4013      	ands	r3, r2
 8004106:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410e:	69da      	ldr	r2, [r3, #28]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	2101      	movs	r1, #1
 800411a:	fa01 f303 	lsl.w	r3, r1, r3
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	43db      	mvns	r3, r3
 8004122:	68f9      	ldr	r1, [r7, #12]
 8004124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004128:	4013      	ands	r3, r2
 800412a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	0159      	lsls	r1, r3, #5
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	440b      	add	r3, r1
 8004142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004146:	4619      	mov	r1, r3
 8004148:	4b05      	ldr	r3, [pc, #20]	; (8004160 <USB_DeactivateEndpoint+0x1b4>)
 800414a:	4013      	ands	r3, r2
 800414c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr
 800415c:	ec337800 	.word	0xec337800
 8004160:	eff37800 	.word	0xeff37800

08004164 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	; 0x28
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	4613      	mov	r3, r2
 8004170:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	785b      	ldrb	r3, [r3, #1]
 8004180:	2b01      	cmp	r3, #1
 8004182:	f040 817a 	bne.w	800447a <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d132      	bne.n	80041f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	0151      	lsls	r1, r2, #5
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	440a      	add	r2, r1
 80041a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	015a      	lsls	r2, r3, #5
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	4413      	add	r3, r2
 80041ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	0151      	lsls	r1, r2, #5
 80041c4:	69fa      	ldr	r2, [r7, #28]
 80041c6:	440a      	add	r2, r1
 80041c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	0151      	lsls	r1, r2, #5
 80041e4:	69fa      	ldr	r2, [r7, #28]
 80041e6:	440a      	add	r2, r1
 80041e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ec:	0cdb      	lsrs	r3, r3, #19
 80041ee:	04db      	lsls	r3, r3, #19
 80041f0:	6113      	str	r3, [r2, #16]
 80041f2:	e092      	b.n	800431a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420e:	0cdb      	lsrs	r3, r3, #19
 8004210:	04db      	lsls	r3, r3, #19
 8004212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	440a      	add	r2, r1
 800422a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800422e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004232:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004236:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d11a      	bne.n	8004274 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	429a      	cmp	r2, r3
 8004248:	d903      	bls.n	8004252 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	0151      	lsls	r1, r2, #5
 8004264:	69fa      	ldr	r2, [r7, #28]
 8004266:	440a      	add	r2, r1
 8004268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800426c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004270:	6113      	str	r3, [r2, #16]
 8004272:	e01b      	b.n	80042ac <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	015a      	lsls	r2, r3, #5
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004280:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	6919      	ldr	r1, [r3, #16]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	440b      	add	r3, r1
 800428c:	1e59      	subs	r1, r3, #1
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	fbb1 f3f3 	udiv	r3, r1, r3
 8004296:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004298:	4ba2      	ldr	r3, [pc, #648]	; (8004524 <USB_EPStartXfer+0x3c0>)
 800429a:	400b      	ands	r3, r1
 800429c:	69b9      	ldr	r1, [r7, #24]
 800429e:	0148      	lsls	r0, r1, #5
 80042a0:	69f9      	ldr	r1, [r7, #28]
 80042a2:	4401      	add	r1, r0
 80042a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042a8:	4313      	orrs	r3, r2
 80042aa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b8:	691a      	ldr	r2, [r3, #16]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c2:	69b9      	ldr	r1, [r7, #24]
 80042c4:	0148      	lsls	r0, r1, #5
 80042c6:	69f9      	ldr	r1, [r7, #28]
 80042c8:	4401      	add	r1, r0
 80042ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042ce:	4313      	orrs	r3, r2
 80042d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	791b      	ldrb	r3, [r3, #4]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d11f      	bne.n	800431a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	0151      	lsls	r1, r2, #5
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	440a      	add	r2, r1
 80042f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80042f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	0151      	lsls	r1, r2, #5
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	440a      	add	r2, r1
 8004310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004318:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d14b      	bne.n	80043b8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004334:	461a      	mov	r2, r3
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	791b      	ldrb	r3, [r3, #4]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d128      	bne.n	8004396 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d110      	bne.n	8004376 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	0151      	lsls	r1, r2, #5
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	440a      	add	r2, r1
 800436a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800436e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e00f      	b.n	8004396 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004394:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	0151      	lsls	r1, r2, #5
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	440a      	add	r2, r1
 80043ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043b4:	6013      	str	r3, [r2, #0]
 80043b6:	e165      	b.n	8004684 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	69fa      	ldr	r2, [r7, #28]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	791b      	ldrb	r3, [r3, #4]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d015      	beq.n	800440c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 814d 	beq.w	8004684 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	2101      	movs	r1, #1
 80043fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004400:	69f9      	ldr	r1, [r7, #28]
 8004402:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004406:	4313      	orrs	r3, r2
 8004408:	634b      	str	r3, [r1, #52]	; 0x34
 800440a:	e13b      	b.n	8004684 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004418:	2b00      	cmp	r3, #0
 800441a:	d110      	bne.n	800443e <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	0151      	lsls	r1, r2, #5
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	440a      	add	r2, r1
 8004432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004436:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	e00f      	b.n	800445e <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	0151      	lsls	r1, r2, #5
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	440a      	add	r2, r1
 8004454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800445c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	68d9      	ldr	r1, [r3, #12]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	b298      	uxth	r0, r3
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	4603      	mov	r3, r0
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f9b8 	bl	80047e8 <USB_WritePacket>
 8004478:	e104      	b.n	8004684 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	0151      	lsls	r1, r2, #5
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	440a      	add	r2, r1
 8004490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004494:	0cdb      	lsrs	r3, r3, #19
 8004496:	04db      	lsls	r3, r3, #19
 8004498:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	0151      	lsls	r1, r2, #5
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	440a      	add	r2, r1
 80044b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044bc:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d131      	bne.n	8004528 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	691a      	ldr	r2, [r3, #16]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044f2:	69b9      	ldr	r1, [r7, #24]
 80044f4:	0148      	lsls	r0, r1, #5
 80044f6:	69f9      	ldr	r1, [r7, #28]
 80044f8:	4401      	add	r1, r0
 80044fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044fe:	4313      	orrs	r3, r2
 8004500:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	0151      	lsls	r1, r2, #5
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	440a      	add	r2, r1
 8004518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800451c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004520:	6113      	str	r3, [r2, #16]
 8004522:	e061      	b.n	80045e8 <USB_EPStartXfer+0x484>
 8004524:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d123      	bne.n	8004578 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004546:	69b9      	ldr	r1, [r7, #24]
 8004548:	0148      	lsls	r0, r1, #5
 800454a:	69f9      	ldr	r1, [r7, #28]
 800454c:	4401      	add	r1, r0
 800454e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004552:	4313      	orrs	r3, r2
 8004554:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	0151      	lsls	r1, r2, #5
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	440a      	add	r2, r1
 800456c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004574:	6113      	str	r3, [r2, #16]
 8004576:	e037      	b.n	80045e8 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4413      	add	r3, r2
 8004582:	1e5a      	subs	r2, r3, #1
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	fbb2 f3f3 	udiv	r3, r2, r3
 800458c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	8afa      	ldrh	r2, [r7, #22]
 8004594:	fb03 f202 	mul.w	r2, r3, r2
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a8:	691a      	ldr	r2, [r3, #16]
 80045aa:	8afb      	ldrh	r3, [r7, #22]
 80045ac:	04d9      	lsls	r1, r3, #19
 80045ae:	4b38      	ldr	r3, [pc, #224]	; (8004690 <USB_EPStartXfer+0x52c>)
 80045b0:	400b      	ands	r3, r1
 80045b2:	69b9      	ldr	r1, [r7, #24]
 80045b4:	0148      	lsls	r0, r1, #5
 80045b6:	69f9      	ldr	r1, [r7, #28]
 80045b8:	4401      	add	r1, r0
 80045ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045be:	4313      	orrs	r3, r2
 80045c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045d8:	69b9      	ldr	r1, [r7, #24]
 80045da:	0148      	lsls	r0, r1, #5
 80045dc:	69f9      	ldr	r1, [r7, #28]
 80045de:	4401      	add	r1, r0
 80045e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045e4:	4313      	orrs	r3, r2
 80045e6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d10d      	bne.n	800460a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d009      	beq.n	800460a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	68d9      	ldr	r1, [r3, #12]
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004606:	460a      	mov	r2, r1
 8004608:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	791b      	ldrb	r3, [r3, #4]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d128      	bne.n	8004664 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d110      	bne.n	8004644 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	0151      	lsls	r1, r2, #5
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	440a      	add	r2, r1
 8004638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800463c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e00f      	b.n	8004664 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	440a      	add	r2, r1
 800465a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800465e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004662:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	015a      	lsls	r2, r3, #5
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	4413      	add	r3, r2
 800466c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	0151      	lsls	r1, r2, #5
 8004676:	69fa      	ldr	r2, [r7, #28]
 8004678:	440a      	add	r2, r1
 800467a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800467e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004682:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3720      	adds	r7, #32
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	1ff80000 	.word	0x1ff80000

08004694 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	785b      	ldrb	r3, [r3, #1]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d14a      	bne.n	8004748 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ca:	f040 8086 	bne.w	80047da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	7812      	ldrb	r2, [r2, #0]
 80046e2:	0151      	lsls	r1, r2, #5
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	440a      	add	r2, r1
 80046e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	7812      	ldrb	r2, [r2, #0]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004714:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3301      	adds	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004722:	4293      	cmp	r3, r2
 8004724:	d902      	bls.n	800472c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
          break;
 800472a:	e056      	b.n	80047da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004744:	d0e7      	beq.n	8004716 <USB_EPStopXfer+0x82>
 8004746:	e048      	b.n	80047da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	015a      	lsls	r2, r3, #5
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	4413      	add	r3, r2
 8004752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800475c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004760:	d13b      	bne.n	80047da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	4413      	add	r3, r2
 800476c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	7812      	ldrb	r2, [r2, #0]
 8004776:	0151      	lsls	r1, r2, #5
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	440a      	add	r2, r1
 800477c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004780:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004784:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	015a      	lsls	r2, r3, #5
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	4413      	add	r3, r2
 8004790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	7812      	ldrb	r2, [r2, #0]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3301      	adds	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d902      	bls.n	80047c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	75fb      	strb	r3, [r7, #23]
          break;
 80047be:	e00c      	b.n	80047da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047d8:	d0e7      	beq.n	80047aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80047da:	7dfb      	ldrb	r3, [r7, #23]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b089      	sub	sp, #36	; 0x24
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	4611      	mov	r1, r2
 80047f4:	461a      	mov	r2, r3
 80047f6:	460b      	mov	r3, r1
 80047f8:	71fb      	strb	r3, [r7, #7]
 80047fa:	4613      	mov	r3, r2
 80047fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004806:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800480a:	2b00      	cmp	r3, #0
 800480c:	d123      	bne.n	8004856 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800480e:	88bb      	ldrh	r3, [r7, #4]
 8004810:	3303      	adds	r3, #3
 8004812:	089b      	lsrs	r3, r3, #2
 8004814:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004816:	2300      	movs	r3, #0
 8004818:	61bb      	str	r3, [r7, #24]
 800481a:	e018      	b.n	800484e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	031a      	lsls	r2, r3, #12
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4413      	add	r3, r2
 8004824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004828:	461a      	mov	r2, r3
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	3301      	adds	r3, #1
 8004834:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3301      	adds	r3, #1
 800483a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	3301      	adds	r3, #1
 8004840:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3301      	adds	r3, #1
 8004846:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	3301      	adds	r3, #1
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	429a      	cmp	r2, r3
 8004854:	d3e2      	bcc.n	800481c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3724      	adds	r7, #36	; 0x24
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004864:	b480      	push	{r7}
 8004866:	b08b      	sub	sp, #44	; 0x2c
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	4613      	mov	r3, r2
 8004870:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800487a:	88fb      	ldrh	r3, [r7, #6]
 800487c:	089b      	lsrs	r3, r3, #2
 800487e:	b29b      	uxth	r3, r3
 8004880:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	f003 0303 	and.w	r3, r3, #3
 8004888:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800488a:	2300      	movs	r3, #0
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	e014      	b.n	80048ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489a:	601a      	str	r2, [r3, #0]
    pDest++;
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	3301      	adds	r3, #1
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	3301      	adds	r3, #1
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	3301      	adds	r3, #1
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	3301      	adds	r3, #1
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	3301      	adds	r3, #1
 80048b8:	623b      	str	r3, [r7, #32]
 80048ba:	6a3a      	ldr	r2, [r7, #32]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d3e6      	bcc.n	8004890 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80048c2:	8bfb      	ldrh	r3, [r7, #30]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01e      	beq.n	8004906 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d2:	461a      	mov	r2, r3
 80048d4:	f107 0310 	add.w	r3, r7, #16
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	701a      	strb	r2, [r3, #0]
      i++;
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	3301      	adds	r3, #1
 80048f2:	623b      	str	r3, [r7, #32]
      pDest++;
 80048f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f6:	3301      	adds	r3, #1
 80048f8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048fa:	8bfb      	ldrh	r3, [r7, #30]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004900:	8bfb      	ldrh	r3, [r7, #30]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1ea      	bne.n	80048dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004908:	4618      	mov	r0, r3
 800490a:	372c      	adds	r7, #44	; 0x2c
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d12c      	bne.n	800498a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	db12      	blt.n	8004968 <USB_EPSetStall+0x54>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00f      	beq.n	8004968 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004962:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004966:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	0151      	lsls	r1, r2, #5
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	440a      	add	r2, r1
 800497e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004982:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	e02b      	b.n	80049e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	db12      	blt.n	80049c2 <USB_EPSetStall+0xae>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00f      	beq.n	80049c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	015a      	lsls	r2, r3, #5
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4413      	add	r3, r2
 80049aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	0151      	lsls	r1, r2, #5
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	440a      	add	r2, r1
 80049b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	015a      	lsls	r2, r3, #5
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4413      	add	r3, r2
 80049ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	0151      	lsls	r1, r2, #5
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	440a      	add	r2, r1
 80049d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	785b      	ldrb	r3, [r3, #1]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d128      	bne.n	8004a5e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	791b      	ldrb	r3, [r3, #4]
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d003      	beq.n	8004a3c <USB_EPClearStall+0x4c>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	791b      	ldrb	r3, [r3, #4]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d138      	bne.n	8004aae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	0151      	lsls	r1, r2, #5
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	440a      	add	r2, r1
 8004a52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	e027      	b.n	8004aae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a78:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a7c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	791b      	ldrb	r3, [r3, #4]
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d003      	beq.n	8004a8e <USB_EPClearStall+0x9e>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	791b      	ldrb	r3, [r3, #4]
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d10f      	bne.n	8004aae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	015a      	lsls	r2, r3, #5
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4413      	add	r3, r2
 8004a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	0151      	lsls	r1, r2, #5
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	440a      	add	r2, r1
 8004aa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ada:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004ade:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	011b      	lsls	r3, r3, #4
 8004aec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004af0:	68f9      	ldr	r1, [r7, #12]
 8004af2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004af6:	4313      	orrs	r3, r2
 8004af8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3714      	adds	r7, #20
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b22:	f023 0303 	bic.w	r3, r3, #3
 8004b26:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b36:	f023 0302 	bic.w	r3, r3, #2
 8004b3a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b085      	sub	sp, #20
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b64:	f023 0303 	bic.w	r3, r3, #3
 8004b68:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b78:	f043 0302 	orr.w	r3, r3, #2
 8004b7c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr

08004b8c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bce:	69db      	ldr	r3, [r3, #28]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	0c1b      	lsrs	r3, r3, #16
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3714      	adds	r7, #20
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b085      	sub	sp, #20
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	4013      	ands	r3, r2
 8004c08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	b29b      	uxth	r3, r3
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	460b      	mov	r3, r1
 8004c24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c48:	68bb      	ldr	r3, [r7, #8]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b087      	sub	sp, #28
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c78:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c7a:	78fb      	ldrb	r3, [r7, #3]
 8004c7c:	f003 030f 	and.w	r3, r3, #15
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	01db      	lsls	r3, r3, #7
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b083      	sub	sp, #12
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b085      	sub	sp, #20
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ce8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004cec:	f023 0307 	bic.w	r3, r3, #7
 8004cf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	333c      	adds	r3, #60	; 0x3c
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	4a26      	ldr	r2, [pc, #152]	; (8004dcc <USB_EP0_OutStart+0xb8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d90a      	bls.n	8004d4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d48:	d101      	bne.n	8004d4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e037      	b.n	8004dbe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d54:	461a      	mov	r2, r3
 8004d56:	2300      	movs	r3, #0
 8004d58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d7c:	f043 0318 	orr.w	r3, r3, #24
 8004d80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d90:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d96:	7afb      	ldrb	r3, [r7, #11]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d10f      	bne.n	8004dbc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da2:	461a      	mov	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004dba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	4f54300a 	.word	0x4f54300a

08004dd0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3301      	adds	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004de8:	d901      	bls.n	8004dee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e01b      	b.n	8004e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	daf2      	bge.n	8004ddc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f043 0201 	orr.w	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004e12:	d901      	bls.n	8004e18 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e006      	b.n	8004e26 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d0f0      	beq.n	8004e06 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004e40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004e44:	f002 fc8a 	bl	800775c <USBD_static_malloc>
 8004e48:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d109      	bne.n	8004e64 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	32b0      	adds	r2, #176	; 0xb0
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e60:	2302      	movs	r3, #2
 8004e62:	e0d4      	b.n	800500e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e64:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004e68:	2100      	movs	r1, #0
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f002 fddf 	bl	8007a2e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	32b0      	adds	r2, #176	; 0xb0
 8004e7a:	68f9      	ldr	r1, [r7, #12]
 8004e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	32b0      	adds	r2, #176	; 0xb0
 8004e8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	7c1b      	ldrb	r3, [r3, #16]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d138      	bne.n	8004f0e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e9c:	4b5e      	ldr	r3, [pc, #376]	; (8005018 <USBD_CDC_Init+0x1e4>)
 8004e9e:	7819      	ldrb	r1, [r3, #0]
 8004ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f002 fb35 	bl	8007516 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004eac:	4b5a      	ldr	r3, [pc, #360]	; (8005018 <USBD_CDC_Init+0x1e4>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	f003 020f 	and.w	r2, r3, #15
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	440b      	add	r3, r1
 8004ec0:	3324      	adds	r3, #36	; 0x24
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004ec6:	4b55      	ldr	r3, [pc, #340]	; (800501c <USBD_CDC_Init+0x1e8>)
 8004ec8:	7819      	ldrb	r1, [r3, #0]
 8004eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ece:	2202      	movs	r2, #2
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f002 fb20 	bl	8007516 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004ed6:	4b51      	ldr	r3, [pc, #324]	; (800501c <USBD_CDC_Init+0x1e8>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	f003 020f 	and.w	r2, r3, #15
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	440b      	add	r3, r1
 8004eea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004eee:	2201      	movs	r2, #1
 8004ef0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004ef2:	4b4b      	ldr	r3, [pc, #300]	; (8005020 <USBD_CDC_Init+0x1ec>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	f003 020f 	and.w	r2, r3, #15
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	3326      	adds	r3, #38	; 0x26
 8004f08:	2210      	movs	r2, #16
 8004f0a:	801a      	strh	r2, [r3, #0]
 8004f0c:	e035      	b.n	8004f7a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004f0e:	4b42      	ldr	r3, [pc, #264]	; (8005018 <USBD_CDC_Init+0x1e4>)
 8004f10:	7819      	ldrb	r1, [r3, #0]
 8004f12:	2340      	movs	r3, #64	; 0x40
 8004f14:	2202      	movs	r2, #2
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f002 fafd 	bl	8007516 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004f1c:	4b3e      	ldr	r3, [pc, #248]	; (8005018 <USBD_CDC_Init+0x1e4>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	f003 020f 	and.w	r2, r3, #15
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	3324      	adds	r3, #36	; 0x24
 8004f32:	2201      	movs	r2, #1
 8004f34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004f36:	4b39      	ldr	r3, [pc, #228]	; (800501c <USBD_CDC_Init+0x1e8>)
 8004f38:	7819      	ldrb	r1, [r3, #0]
 8004f3a:	2340      	movs	r3, #64	; 0x40
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f002 fae9 	bl	8007516 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004f44:	4b35      	ldr	r3, [pc, #212]	; (800501c <USBD_CDC_Init+0x1e8>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	f003 020f 	and.w	r2, r3, #15
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f60:	4b2f      	ldr	r3, [pc, #188]	; (8005020 <USBD_CDC_Init+0x1ec>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	f003 020f 	and.w	r2, r3, #15
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3326      	adds	r3, #38	; 0x26
 8004f76:	2210      	movs	r2, #16
 8004f78:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f7a:	4b29      	ldr	r3, [pc, #164]	; (8005020 <USBD_CDC_Init+0x1ec>)
 8004f7c:	7819      	ldrb	r1, [r3, #0]
 8004f7e:	2308      	movs	r3, #8
 8004f80:	2203      	movs	r2, #3
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f002 fac7 	bl	8007516 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004f88:	4b25      	ldr	r3, [pc, #148]	; (8005020 <USBD_CDC_Init+0x1ec>)
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	f003 020f 	and.w	r2, r3, #15
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	3324      	adds	r3, #36	; 0x24
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	33b0      	adds	r3, #176	; 0xb0
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4413      	add	r3, r2
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	e018      	b.n	800500e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	7c1b      	ldrb	r3, [r3, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d10a      	bne.n	8004ffa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fe4:	4b0d      	ldr	r3, [pc, #52]	; (800501c <USBD_CDC_Init+0x1e8>)
 8004fe6:	7819      	ldrb	r1, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f002 fb7e 	bl	80076f4 <USBD_LL_PrepareReceive>
 8004ff8:	e008      	b.n	800500c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ffa:	4b08      	ldr	r3, [pc, #32]	; (800501c <USBD_CDC_Init+0x1e8>)
 8004ffc:	7819      	ldrb	r1, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005004:	2340      	movs	r3, #64	; 0x40
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f002 fb74 	bl	80076f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000093 	.word	0x20000093
 800501c:	20000094 	.word	0x20000094
 8005020:	20000095 	.word	0x20000095

08005024 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005030:	4b3a      	ldr	r3, [pc, #232]	; (800511c <USBD_CDC_DeInit+0xf8>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f002 fa93 	bl	8007562 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800503c:	4b37      	ldr	r3, [pc, #220]	; (800511c <USBD_CDC_DeInit+0xf8>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	f003 020f 	and.w	r2, r3, #15
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	3324      	adds	r3, #36	; 0x24
 8005052:	2200      	movs	r2, #0
 8005054:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005056:	4b32      	ldr	r3, [pc, #200]	; (8005120 <USBD_CDC_DeInit+0xfc>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	4619      	mov	r1, r3
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f002 fa80 	bl	8007562 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005062:	4b2f      	ldr	r3, [pc, #188]	; (8005120 <USBD_CDC_DeInit+0xfc>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	f003 020f 	and.w	r2, r3, #15
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800507a:	2200      	movs	r2, #0
 800507c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800507e:	4b29      	ldr	r3, [pc, #164]	; (8005124 <USBD_CDC_DeInit+0x100>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f002 fa6c 	bl	8007562 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800508a:	4b26      	ldr	r3, [pc, #152]	; (8005124 <USBD_CDC_DeInit+0x100>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	f003 020f 	and.w	r2, r3, #15
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	3324      	adds	r3, #36	; 0x24
 80050a0:	2200      	movs	r2, #0
 80050a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80050a4:	4b1f      	ldr	r3, [pc, #124]	; (8005124 <USBD_CDC_DeInit+0x100>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	f003 020f 	and.w	r2, r3, #15
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	3326      	adds	r3, #38	; 0x26
 80050ba:	2200      	movs	r2, #0
 80050bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	32b0      	adds	r2, #176	; 0xb0
 80050c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01f      	beq.n	8005110 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	33b0      	adds	r3, #176	; 0xb0
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	32b0      	adds	r2, #176	; 0xb0
 80050ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f002 fb40 	bl	8007778 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	32b0      	adds	r2, #176	; 0xb0
 8005102:	2100      	movs	r1, #0
 8005104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	20000093 	.word	0x20000093
 8005120:	20000094 	.word	0x20000094
 8005124:	20000095 	.word	0x20000095

08005128 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	32b0      	adds	r2, #176	; 0xb0
 800513c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005140:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005146:	2300      	movs	r3, #0
 8005148:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005154:	2303      	movs	r3, #3
 8005156:	e0bf      	b.n	80052d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005160:	2b00      	cmp	r3, #0
 8005162:	d050      	beq.n	8005206 <USBD_CDC_Setup+0xde>
 8005164:	2b20      	cmp	r3, #32
 8005166:	f040 80af 	bne.w	80052c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	88db      	ldrh	r3, [r3, #6]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d03a      	beq.n	80051e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	b25b      	sxtb	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	da1b      	bge.n	80051b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	33b0      	adds	r3, #176	; 0xb0
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005192:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	88d2      	ldrh	r2, [r2, #6]
 8005198:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	88db      	ldrh	r3, [r3, #6]
 800519e:	2b07      	cmp	r3, #7
 80051a0:	bf28      	it	cs
 80051a2:	2307      	movcs	r3, #7
 80051a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	89fa      	ldrh	r2, [r7, #14]
 80051aa:	4619      	mov	r1, r3
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f001 fd89 	bl	8006cc4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80051b2:	e090      	b.n	80052d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	785a      	ldrb	r2, [r3, #1]
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	88db      	ldrh	r3, [r3, #6]
 80051c2:	2b3f      	cmp	r3, #63	; 0x3f
 80051c4:	d803      	bhi.n	80051ce <USBD_CDC_Setup+0xa6>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	88db      	ldrh	r3, [r3, #6]
 80051ca:	b2da      	uxtb	r2, r3
 80051cc:	e000      	b.n	80051d0 <USBD_CDC_Setup+0xa8>
 80051ce:	2240      	movs	r2, #64	; 0x40
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80051d6:	6939      	ldr	r1, [r7, #16]
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80051de:	461a      	mov	r2, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f001 fd9b 	bl	8006d1c <USBD_CtlPrepareRx>
      break;
 80051e6:	e076      	b.n	80052d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	33b0      	adds	r3, #176	; 0xb0
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	4413      	add	r3, r2
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	7850      	ldrb	r0, [r2, #1]
 80051fe:	2200      	movs	r2, #0
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	4798      	blx	r3
      break;
 8005204:	e067      	b.n	80052d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	785b      	ldrb	r3, [r3, #1]
 800520a:	2b0b      	cmp	r3, #11
 800520c:	d851      	bhi.n	80052b2 <USBD_CDC_Setup+0x18a>
 800520e:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <USBD_CDC_Setup+0xec>)
 8005210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005214:	08005245 	.word	0x08005245
 8005218:	080052c1 	.word	0x080052c1
 800521c:	080052b3 	.word	0x080052b3
 8005220:	080052b3 	.word	0x080052b3
 8005224:	080052b3 	.word	0x080052b3
 8005228:	080052b3 	.word	0x080052b3
 800522c:	080052b3 	.word	0x080052b3
 8005230:	080052b3 	.word	0x080052b3
 8005234:	080052b3 	.word	0x080052b3
 8005238:	080052b3 	.word	0x080052b3
 800523c:	0800526f 	.word	0x0800526f
 8005240:	08005299 	.word	0x08005299
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800524a:	b2db      	uxtb	r3, r3
 800524c:	2b03      	cmp	r3, #3
 800524e:	d107      	bne.n	8005260 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005250:	f107 030a 	add.w	r3, r7, #10
 8005254:	2202      	movs	r2, #2
 8005256:	4619      	mov	r1, r3
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f001 fd33 	bl	8006cc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800525e:	e032      	b.n	80052c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f001 fcbd 	bl	8006be2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005268:	2303      	movs	r3, #3
 800526a:	75fb      	strb	r3, [r7, #23]
          break;
 800526c:	e02b      	b.n	80052c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b03      	cmp	r3, #3
 8005278:	d107      	bne.n	800528a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800527a:	f107 030d 	add.w	r3, r7, #13
 800527e:	2201      	movs	r2, #1
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f001 fd1e 	bl	8006cc4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005288:	e01d      	b.n	80052c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800528a:	6839      	ldr	r1, [r7, #0]
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f001 fca8 	bl	8006be2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005292:	2303      	movs	r3, #3
 8005294:	75fb      	strb	r3, [r7, #23]
          break;
 8005296:	e016      	b.n	80052c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d00f      	beq.n	80052c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f001 fc9b 	bl	8006be2 <USBD_CtlError>
            ret = USBD_FAIL;
 80052ac:	2303      	movs	r3, #3
 80052ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80052b0:	e008      	b.n	80052c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052b2:	6839      	ldr	r1, [r7, #0]
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f001 fc94 	bl	8006be2 <USBD_CtlError>
          ret = USBD_FAIL;
 80052ba:	2303      	movs	r3, #3
 80052bc:	75fb      	strb	r3, [r7, #23]
          break;
 80052be:	e002      	b.n	80052c6 <USBD_CDC_Setup+0x19e>
          break;
 80052c0:	bf00      	nop
 80052c2:	e008      	b.n	80052d6 <USBD_CDC_Setup+0x1ae>
          break;
 80052c4:	bf00      	nop
      }
      break;
 80052c6:	e006      	b.n	80052d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f001 fc89 	bl	8006be2 <USBD_CtlError>
      ret = USBD_FAIL;
 80052d0:	2303      	movs	r3, #3
 80052d2:	75fb      	strb	r3, [r7, #23]
      break;
 80052d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80052d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80052f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	32b0      	adds	r2, #176	; 0xb0
 80052fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d101      	bne.n	800530a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005306:	2303      	movs	r3, #3
 8005308:	e065      	b.n	80053d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	32b0      	adds	r2, #176	; 0xb0
 8005314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005318:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	f003 020f 	and.w	r2, r3, #15
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	3318      	adds	r3, #24
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d02f      	beq.n	8005394 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	f003 020f 	and.w	r2, r3, #15
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	3318      	adds	r3, #24
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	78fb      	ldrb	r3, [r7, #3]
 800534c:	f003 010f 	and.w	r1, r3, #15
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	460b      	mov	r3, r1
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	440b      	add	r3, r1
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4403      	add	r3, r0
 800535c:	331c      	adds	r3, #28
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	fbb2 f1f3 	udiv	r1, r2, r3
 8005364:	fb01 f303 	mul.w	r3, r1, r3
 8005368:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800536a:	2b00      	cmp	r3, #0
 800536c:	d112      	bne.n	8005394 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	f003 020f 	and.w	r2, r3, #15
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	3318      	adds	r3, #24
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005386:	78f9      	ldrb	r1, [r7, #3]
 8005388:	2300      	movs	r3, #0
 800538a:	2200      	movs	r2, #0
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f002 f990 	bl	80076b2 <USBD_LL_Transmit>
 8005392:	e01f      	b.n	80053d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2200      	movs	r2, #0
 8005398:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	33b0      	adds	r3, #176	; 0xb0
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d010      	beq.n	80053d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	33b0      	adds	r3, #176	; 0xb0
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80053d0:	78fa      	ldrb	r2, [r7, #3]
 80053d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	460b      	mov	r3, r1
 80053e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	32b0      	adds	r2, #176	; 0xb0
 80053f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	32b0      	adds	r2, #176	; 0xb0
 8005404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d101      	bne.n	8005410 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800540c:	2303      	movs	r3, #3
 800540e:	e01a      	b.n	8005446 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	4619      	mov	r1, r3
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f002 f98e 	bl	8007736 <USBD_LL_GetRxDataSize>
 800541a:	4602      	mov	r2, r0
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	33b0      	adds	r3, #176	; 0xb0
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005440:	4611      	mov	r1, r2
 8005442:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	32b0      	adds	r2, #176	; 0xb0
 8005460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005464:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800546c:	2303      	movs	r3, #3
 800546e:	e025      	b.n	80054bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	33b0      	adds	r3, #176	; 0xb0
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01a      	beq.n	80054ba <USBD_CDC_EP0_RxReady+0x6c>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800548a:	2bff      	cmp	r3, #255	; 0xff
 800548c:	d015      	beq.n	80054ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	33b0      	adds	r3, #176	; 0xb0
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80054a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80054ae:	b292      	uxth	r2, r2
 80054b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	22ff      	movs	r2, #255	; 0xff
 80054b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054cc:	2182      	movs	r1, #130	; 0x82
 80054ce:	4818      	ldr	r0, [pc, #96]	; (8005530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054d0:	f000 fd4f 	bl	8005f72 <USBD_GetEpDesc>
 80054d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054d6:	2101      	movs	r1, #1
 80054d8:	4815      	ldr	r0, [pc, #84]	; (8005530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054da:	f000 fd4a 	bl	8005f72 <USBD_GetEpDesc>
 80054de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80054e0:	2181      	movs	r1, #129	; 0x81
 80054e2:	4813      	ldr	r0, [pc, #76]	; (8005530 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80054e4:	f000 fd45 	bl	8005f72 <USBD_GetEpDesc>
 80054e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d002      	beq.n	80054f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2210      	movs	r2, #16
 80054f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d006      	beq.n	800550a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2200      	movs	r2, #0
 8005500:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005504:	711a      	strb	r2, [r3, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d006      	beq.n	800551e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005518:	711a      	strb	r2, [r3, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2243      	movs	r2, #67	; 0x43
 8005522:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005524:	4b02      	ldr	r3, [pc, #8]	; (8005530 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	20000050 	.word	0x20000050

08005534 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800553c:	2182      	movs	r1, #130	; 0x82
 800553e:	4818      	ldr	r0, [pc, #96]	; (80055a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005540:	f000 fd17 	bl	8005f72 <USBD_GetEpDesc>
 8005544:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005546:	2101      	movs	r1, #1
 8005548:	4815      	ldr	r0, [pc, #84]	; (80055a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800554a:	f000 fd12 	bl	8005f72 <USBD_GetEpDesc>
 800554e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005550:	2181      	movs	r1, #129	; 0x81
 8005552:	4813      	ldr	r0, [pc, #76]	; (80055a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005554:	f000 fd0d 	bl	8005f72 <USBD_GetEpDesc>
 8005558:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	2210      	movs	r2, #16
 8005564:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d006      	beq.n	800557a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2200      	movs	r2, #0
 8005570:	711a      	strb	r2, [r3, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f042 0202 	orr.w	r2, r2, #2
 8005578:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d006      	beq.n	800558e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	711a      	strb	r2, [r3, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f042 0202 	orr.w	r2, r2, #2
 800558c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2243      	movs	r2, #67	; 0x43
 8005592:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005594:	4b02      	ldr	r3, [pc, #8]	; (80055a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005596:	4618      	mov	r0, r3
 8005598:	3718      	adds	r7, #24
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	20000050 	.word	0x20000050

080055a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80055ac:	2182      	movs	r1, #130	; 0x82
 80055ae:	4818      	ldr	r0, [pc, #96]	; (8005610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055b0:	f000 fcdf 	bl	8005f72 <USBD_GetEpDesc>
 80055b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80055b6:	2101      	movs	r1, #1
 80055b8:	4815      	ldr	r0, [pc, #84]	; (8005610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055ba:	f000 fcda 	bl	8005f72 <USBD_GetEpDesc>
 80055be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80055c0:	2181      	movs	r1, #129	; 0x81
 80055c2:	4813      	ldr	r0, [pc, #76]	; (8005610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80055c4:	f000 fcd5 	bl	8005f72 <USBD_GetEpDesc>
 80055c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2210      	movs	r2, #16
 80055d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d006      	beq.n	80055ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	2200      	movs	r2, #0
 80055e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055e4:	711a      	strb	r2, [r3, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d006      	beq.n	80055fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055f8:	711a      	strb	r2, [r3, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2243      	movs	r2, #67	; 0x43
 8005602:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005604:	4b02      	ldr	r3, [pc, #8]	; (8005610 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005606:	4618      	mov	r0, r3
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20000050 	.word	0x20000050

08005614 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	220a      	movs	r2, #10
 8005620:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005622:	4b03      	ldr	r3, [pc, #12]	; (8005630 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr
 8005630:	2000000c 	.word	0x2000000c

08005634 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005644:	2303      	movs	r3, #3
 8005646:	e009      	b.n	800565c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	33b0      	adds	r3, #176	; 0xb0
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	32b0      	adds	r2, #176	; 0xb0
 800567e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005682:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800568a:	2303      	movs	r3, #3
 800568c:	e008      	b.n	80056a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	68ba      	ldr	r2, [r7, #8]
 8005692:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800569e:	2300      	movs	r3, #0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	371c      	adds	r7, #28
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	32b0      	adds	r2, #176	; 0xb0
 80056c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e004      	b.n	80056da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	32b0      	adds	r2, #176	; 0xb0
 80056fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005700:	2301      	movs	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800570a:	2303      	movs	r3, #3
 800570c:	e025      	b.n	800575a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005714:	2b00      	cmp	r3, #0
 8005716:	d11f      	bne.n	8005758 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2201      	movs	r2, #1
 800571c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005720:	4b10      	ldr	r3, [pc, #64]	; (8005764 <USBD_CDC_TransmitPacket+0x7c>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	f003 020f 	and.w	r2, r3, #15
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4403      	add	r3, r0
 800573a:	3318      	adds	r3, #24
 800573c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <USBD_CDC_TransmitPacket+0x7c>)
 8005740:	7819      	ldrb	r1, [r3, #0]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f001 ffaf 	bl	80076b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005758:	7bfb      	ldrb	r3, [r7, #15]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000093 	.word	0x20000093

08005768 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	32b0      	adds	r2, #176	; 0xb0
 800577a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800577e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	32b0      	adds	r2, #176	; 0xb0
 800578a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005792:	2303      	movs	r3, #3
 8005794:	e018      	b.n	80057c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	7c1b      	ldrb	r3, [r3, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10a      	bne.n	80057b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800579e:	4b0c      	ldr	r3, [pc, #48]	; (80057d0 <USBD_CDC_ReceivePacket+0x68>)
 80057a0:	7819      	ldrb	r1, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f001 ffa1 	bl	80076f4 <USBD_LL_PrepareReceive>
 80057b2:	e008      	b.n	80057c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057b4:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <USBD_CDC_ReceivePacket+0x68>)
 80057b6:	7819      	ldrb	r1, [r3, #0]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057be:	2340      	movs	r3, #64	; 0x40
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 ff97 	bl	80076f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20000094 	.word	0x20000094

080057d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	4613      	mov	r3, r2
 80057e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e01f      	b.n	800582c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	79fa      	ldrb	r2, [r7, #7]
 800581e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f001 fe11 	bl	8007448 <USBD_LL_Init>
 8005826:	4603      	mov	r3, r0
 8005828:	75fb      	strb	r3, [r7, #23]

  return ret;
 800582a:	7dfb      	ldrb	r3, [r7, #23]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800583e:	2300      	movs	r3, #0
 8005840:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005848:	2303      	movs	r3, #3
 800584a:	e025      	b.n	8005898 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	32ae      	adds	r2, #174	; 0xae
 800585e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00f      	beq.n	8005888 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	32ae      	adds	r2, #174	; 0xae
 8005872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005878:	f107 020e 	add.w	r2, r7, #14
 800587c:	4610      	mov	r0, r2
 800587e:	4798      	blx	r3
 8005880:	4602      	mov	r2, r0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f001 fe19 	bl	80074e0 <USBD_LL_Start>
 80058ae:	4603      	mov	r3, r0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3708      	adds	r7, #8
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
 80058d6:	460b      	mov	r3, r1
 80058d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058da:	2300      	movs	r3, #0
 80058dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d009      	beq.n	80058fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	78fa      	ldrb	r2, [r7, #3]
 80058f2:	4611      	mov	r1, r2
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	4798      	blx	r3
 80058f8:	4603      	mov	r3, r0
 80058fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b084      	sub	sp, #16
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	460b      	mov	r3, r1
 8005910:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005912:	2300      	movs	r3, #0
 8005914:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	78fa      	ldrb	r2, [r7, #3]
 8005920:	4611      	mov	r1, r2
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800592c:	2303      	movs	r3, #3
 800592e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005930:	7bfb      	ldrb	r3, [r7, #15]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f001 f90e 	bl	8006b6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005960:	461a      	mov	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	2b02      	cmp	r3, #2
 8005974:	d01a      	beq.n	80059ac <USBD_LL_SetupStage+0x72>
 8005976:	2b02      	cmp	r3, #2
 8005978:	d822      	bhi.n	80059c0 <USBD_LL_SetupStage+0x86>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d002      	beq.n	8005984 <USBD_LL_SetupStage+0x4a>
 800597e:	2b01      	cmp	r3, #1
 8005980:	d00a      	beq.n	8005998 <USBD_LL_SetupStage+0x5e>
 8005982:	e01d      	b.n	80059c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800598a:	4619      	mov	r1, r3
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fb65 	bl	800605c <USBD_StdDevReq>
 8005992:	4603      	mov	r3, r0
 8005994:	73fb      	strb	r3, [r7, #15]
      break;
 8005996:	e020      	b.n	80059da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fbcd 	bl	8006140 <USBD_StdItfReq>
 80059a6:	4603      	mov	r3, r0
 80059a8:	73fb      	strb	r3, [r7, #15]
      break;
 80059aa:	e016      	b.n	80059da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fc2f 	bl	8006218 <USBD_StdEPReq>
 80059ba:	4603      	mov	r3, r0
 80059bc:	73fb      	strb	r3, [r7, #15]
      break;
 80059be:	e00c      	b.n	80059da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80059c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f001 fde6 	bl	80075a0 <USBD_LL_StallEP>
 80059d4:	4603      	mov	r3, r0
 80059d6:	73fb      	strb	r3, [r7, #15]
      break;
 80059d8:	bf00      	nop
  }

  return ret;
 80059da:	7bfb      	ldrb	r3, [r7, #15]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	460b      	mov	r3, r1
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80059f6:	7afb      	ldrb	r3, [r7, #11]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d16e      	bne.n	8005ada <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005a02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	f040 8098 	bne.w	8005b40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d913      	bls.n	8005a44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	1ad2      	subs	r2, r2, r3
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	4293      	cmp	r3, r2
 8005a34:	bf28      	it	cs
 8005a36:	4613      	movcs	r3, r2
 8005a38:	461a      	mov	r2, r3
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f001 f98a 	bl	8006d56 <USBD_CtlContinueRx>
 8005a42:	e07d      	b.n	8005b40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d014      	beq.n	8005a7c <USBD_LL_DataOutStage+0x98>
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d81d      	bhi.n	8005a92 <USBD_LL_DataOutStage+0xae>
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <USBD_LL_DataOutStage+0x7c>
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d003      	beq.n	8005a66 <USBD_LL_DataOutStage+0x82>
 8005a5e:	e018      	b.n	8005a92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	75bb      	strb	r3, [r7, #22]
            break;
 8005a64:	e018      	b.n	8005a98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	4619      	mov	r1, r3
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fa64 	bl	8005f3e <USBD_CoreFindIF>
 8005a76:	4603      	mov	r3, r0
 8005a78:	75bb      	strb	r3, [r7, #22]
            break;
 8005a7a:	e00d      	b.n	8005a98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	4619      	mov	r1, r3
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 fa66 	bl	8005f58 <USBD_CoreFindEP>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	75bb      	strb	r3, [r7, #22]
            break;
 8005a90:	e002      	b.n	8005a98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75bb      	strb	r3, [r7, #22]
            break;
 8005a96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a98:	7dbb      	ldrb	r3, [r7, #22]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d119      	bne.n	8005ad2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b03      	cmp	r3, #3
 8005aa8:	d113      	bne.n	8005ad2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005aaa:	7dba      	ldrb	r2, [r7, #22]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	32ae      	adds	r2, #174	; 0xae
 8005ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00b      	beq.n	8005ad2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005aba:	7dba      	ldrb	r2, [r7, #22]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005ac2:	7dba      	ldrb	r2, [r7, #22]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	32ae      	adds	r2, #174	; 0xae
 8005ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	68f8      	ldr	r0, [r7, #12]
 8005ad0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ad2:	68f8      	ldr	r0, [r7, #12]
 8005ad4:	f001 f950 	bl	8006d78 <USBD_CtlSendStatus>
 8005ad8:	e032      	b.n	8005b40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005ada:	7afb      	ldrb	r3, [r7, #11]
 8005adc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 fa37 	bl	8005f58 <USBD_CoreFindEP>
 8005aea:	4603      	mov	r3, r0
 8005aec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005aee:	7dbb      	ldrb	r3, [r7, #22]
 8005af0:	2bff      	cmp	r3, #255	; 0xff
 8005af2:	d025      	beq.n	8005b40 <USBD_LL_DataOutStage+0x15c>
 8005af4:	7dbb      	ldrb	r3, [r7, #22]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d122      	bne.n	8005b40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d117      	bne.n	8005b36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005b06:	7dba      	ldrb	r2, [r7, #22]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	32ae      	adds	r2, #174	; 0xae
 8005b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00f      	beq.n	8005b36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005b16:	7dba      	ldrb	r2, [r7, #22]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005b1e:	7dba      	ldrb	r2, [r7, #22]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	32ae      	adds	r2, #174	; 0xae
 8005b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	7afa      	ldrb	r2, [r7, #11]
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	4798      	blx	r3
 8005b32:	4603      	mov	r3, r0
 8005b34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005b36:	7dfb      	ldrb	r3, [r7, #23]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	e000      	b.n	8005b42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b086      	sub	sp, #24
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	60f8      	str	r0, [r7, #12]
 8005b52:	460b      	mov	r3, r1
 8005b54:	607a      	str	r2, [r7, #4]
 8005b56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b58:	7afb      	ldrb	r3, [r7, #11]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d16f      	bne.n	8005c3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3314      	adds	r3, #20
 8005b62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d15a      	bne.n	8005c24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	689a      	ldr	r2, [r3, #8]
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d914      	bls.n	8005ba4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	1ad2      	subs	r2, r2, r3
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f001 f8b2 	bl	8006cfa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b96:	2300      	movs	r3, #0
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f001 fda9 	bl	80076f4 <USBD_LL_PrepareReceive>
 8005ba2:	e03f      	b.n	8005c24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d11c      	bne.n	8005bea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d316      	bcc.n	8005bea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d20f      	bcs.n	8005bea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005bca:	2200      	movs	r2, #0
 8005bcc:	2100      	movs	r1, #0
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f001 f893 	bl	8006cfa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bdc:	2300      	movs	r3, #0
 8005bde:	2200      	movs	r2, #0
 8005be0:	2100      	movs	r1, #0
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f001 fd86 	bl	80076f4 <USBD_LL_PrepareReceive>
 8005be8:	e01c      	b.n	8005c24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d10f      	bne.n	8005c16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c16:	2180      	movs	r1, #128	; 0x80
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f001 fcc1 	bl	80075a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f001 f8bd 	bl	8006d9e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d03a      	beq.n	8005ca4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f7ff fe42 	bl	80058b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005c3c:	e032      	b.n	8005ca4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c3e:	7afb      	ldrb	r3, [r7, #11]
 8005c40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	4619      	mov	r1, r3
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f985 	bl	8005f58 <USBD_CoreFindEP>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	2bff      	cmp	r3, #255	; 0xff
 8005c56:	d025      	beq.n	8005ca4 <USBD_LL_DataInStage+0x15a>
 8005c58:	7dfb      	ldrb	r3, [r7, #23]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d122      	bne.n	8005ca4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d11c      	bne.n	8005ca4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c6a:	7dfa      	ldrb	r2, [r7, #23]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	32ae      	adds	r2, #174	; 0xae
 8005c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d014      	beq.n	8005ca4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005c7a:	7dfa      	ldrb	r2, [r7, #23]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c82:	7dfa      	ldrb	r2, [r7, #23]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	32ae      	adds	r2, #174	; 0xae
 8005c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	7afa      	ldrb	r2, [r7, #11]
 8005c90:	4611      	mov	r1, r2
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	4798      	blx	r3
 8005c96:	4603      	mov	r3, r0
 8005c98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005c9a:	7dbb      	ldrb	r3, [r7, #22]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005ca0:	7dbb      	ldrb	r3, [r7, #22]
 8005ca2:	e000      	b.n	8005ca6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d014      	beq.n	8005d14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00e      	beq.n	8005d14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	6852      	ldr	r2, [r2, #4]
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	4611      	mov	r1, r2
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	4798      	blx	r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005d10:	2303      	movs	r3, #3
 8005d12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d14:	2340      	movs	r3, #64	; 0x40
 8005d16:	2200      	movs	r2, #0
 8005d18:	2100      	movs	r1, #0
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f001 fbfb 	bl	8007516 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2240      	movs	r2, #64	; 0x40
 8005d2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d30:	2340      	movs	r3, #64	; 0x40
 8005d32:	2200      	movs	r2, #0
 8005d34:	2180      	movs	r1, #128	; 0x80
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f001 fbed 	bl	8007516 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2240      	movs	r2, #64	; 0x40
 8005d46:	621a      	str	r2, [r3, #32]

  return ret;
 8005d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	78fa      	ldrb	r2, [r7, #3]
 8005d62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d006      	beq.n	8005d94 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2204      	movs	r2, #4
 8005d98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b083      	sub	sp, #12
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d106      	bne.n	8005dcc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b082      	sub	sp, #8
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d110      	bne.n	8005e10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00b      	beq.n	8005e10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d005      	beq.n	8005e10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b082      	sub	sp, #8
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	460b      	mov	r3, r1
 8005e24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	32ae      	adds	r2, #174	; 0xae
 8005e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e01c      	b.n	8005e76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d115      	bne.n	8005e74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	32ae      	adds	r2, #174	; 0xae
 8005e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00b      	beq.n	8005e74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	32ae      	adds	r2, #174	; 0xae
 8005e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	4611      	mov	r1, r2
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	460b      	mov	r3, r1
 8005e88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	32ae      	adds	r2, #174	; 0xae
 8005e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e01c      	b.n	8005eda <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d115      	bne.n	8005ed8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	32ae      	adds	r2, #174	; 0xae
 8005eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00b      	beq.n	8005ed8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	32ae      	adds	r2, #174	; 0xae
 8005eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	78fa      	ldrb	r2, [r7, #3]
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005f00:	2300      	movs	r3, #0
 8005f02:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00e      	beq.n	8005f34 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	6852      	ldr	r2, [r2, #4]
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	4611      	mov	r1, r2
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	4798      	blx	r3
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f30:	2303      	movs	r3, #3
 8005f32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	460b      	mov	r3, r1
 8005f48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	460b      	mov	r3, r1
 8005f62:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f64:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b086      	sub	sp, #24
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f86:	2300      	movs	r3, #0
 8005f88:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	885b      	ldrh	r3, [r3, #2]
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d920      	bls.n	8005fdc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005fa2:	e013      	b.n	8005fcc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005fa4:	f107 030a 	add.w	r3, r7, #10
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6978      	ldr	r0, [r7, #20]
 8005fac:	f000 f81b 	bl	8005fe6 <USBD_GetNextDesc>
 8005fb0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	d108      	bne.n	8005fcc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	789b      	ldrb	r3, [r3, #2]
 8005fc2:	78fa      	ldrb	r2, [r7, #3]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d008      	beq.n	8005fda <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	885b      	ldrh	r3, [r3, #2]
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	897b      	ldrh	r3, [r7, #10]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d8e5      	bhi.n	8005fa4 <USBD_GetEpDesc+0x32>
 8005fd8:	e000      	b.n	8005fdc <USBD_GetEpDesc+0x6a>
          break;
 8005fda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005fdc:	693b      	ldr	r3, [r7, #16]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b085      	sub	sp, #20
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	881a      	ldrh	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	b29a      	uxth	r2, r3
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4413      	add	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006012:	68fb      	ldr	r3, [r7, #12]
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	3301      	adds	r3, #1
 8006036:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800603e:	8a3b      	ldrh	r3, [r7, #16]
 8006040:	021b      	lsls	r3, r3, #8
 8006042:	b21a      	sxth	r2, r3
 8006044:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006048:	4313      	orrs	r3, r2
 800604a:	b21b      	sxth	r3, r3
 800604c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800604e:	89fb      	ldrh	r3, [r7, #14]
}
 8006050:	4618      	mov	r0, r3
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006072:	2b40      	cmp	r3, #64	; 0x40
 8006074:	d005      	beq.n	8006082 <USBD_StdDevReq+0x26>
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d857      	bhi.n	800612a <USBD_StdDevReq+0xce>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00f      	beq.n	800609e <USBD_StdDevReq+0x42>
 800607e:	2b20      	cmp	r3, #32
 8006080:	d153      	bne.n	800612a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	32ae      	adds	r2, #174	; 0xae
 800608c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	4798      	blx	r3
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
      break;
 800609c:	e04a      	b.n	8006134 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	2b09      	cmp	r3, #9
 80060a4:	d83b      	bhi.n	800611e <USBD_StdDevReq+0xc2>
 80060a6:	a201      	add	r2, pc, #4	; (adr r2, 80060ac <USBD_StdDevReq+0x50>)
 80060a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ac:	08006101 	.word	0x08006101
 80060b0:	08006115 	.word	0x08006115
 80060b4:	0800611f 	.word	0x0800611f
 80060b8:	0800610b 	.word	0x0800610b
 80060bc:	0800611f 	.word	0x0800611f
 80060c0:	080060df 	.word	0x080060df
 80060c4:	080060d5 	.word	0x080060d5
 80060c8:	0800611f 	.word	0x0800611f
 80060cc:	080060f7 	.word	0x080060f7
 80060d0:	080060e9 	.word	0x080060e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa3c 	bl	8006554 <USBD_GetDescriptor>
          break;
 80060dc:	e024      	b.n	8006128 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fba1 	bl	8006828 <USBD_SetAddress>
          break;
 80060e6:	e01f      	b.n	8006128 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060e8:	6839      	ldr	r1, [r7, #0]
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fbe0 	bl	80068b0 <USBD_SetConfig>
 80060f0:	4603      	mov	r3, r0
 80060f2:	73fb      	strb	r3, [r7, #15]
          break;
 80060f4:	e018      	b.n	8006128 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fc83 	bl	8006a04 <USBD_GetConfig>
          break;
 80060fe:	e013      	b.n	8006128 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006100:	6839      	ldr	r1, [r7, #0]
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 fcb4 	bl	8006a70 <USBD_GetStatus>
          break;
 8006108:	e00e      	b.n	8006128 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fce3 	bl	8006ad8 <USBD_SetFeature>
          break;
 8006112:	e009      	b.n	8006128 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 fd07 	bl	8006b2a <USBD_ClrFeature>
          break;
 800611c:	e004      	b.n	8006128 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fd5e 	bl	8006be2 <USBD_CtlError>
          break;
 8006126:	bf00      	nop
      }
      break;
 8006128:	e004      	b.n	8006134 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fd58 	bl	8006be2 <USBD_CtlError>
      break;
 8006132:	bf00      	nop
  }

  return ret;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop

08006140 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006156:	2b40      	cmp	r3, #64	; 0x40
 8006158:	d005      	beq.n	8006166 <USBD_StdItfReq+0x26>
 800615a:	2b40      	cmp	r3, #64	; 0x40
 800615c:	d852      	bhi.n	8006204 <USBD_StdItfReq+0xc4>
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <USBD_StdItfReq+0x26>
 8006162:	2b20      	cmp	r3, #32
 8006164:	d14e      	bne.n	8006204 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800616c:	b2db      	uxtb	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	2b02      	cmp	r3, #2
 8006172:	d840      	bhi.n	80061f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	889b      	ldrh	r3, [r3, #4]
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b01      	cmp	r3, #1
 800617c:	d836      	bhi.n	80061ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	889b      	ldrh	r3, [r3, #4]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff fed9 	bl	8005f3e <USBD_CoreFindIF>
 800618c:	4603      	mov	r3, r0
 800618e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006190:	7bbb      	ldrb	r3, [r7, #14]
 8006192:	2bff      	cmp	r3, #255	; 0xff
 8006194:	d01d      	beq.n	80061d2 <USBD_StdItfReq+0x92>
 8006196:	7bbb      	ldrb	r3, [r7, #14]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d11a      	bne.n	80061d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800619c:	7bba      	ldrb	r2, [r7, #14]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	32ae      	adds	r2, #174	; 0xae
 80061a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00f      	beq.n	80061cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80061ac:	7bba      	ldrb	r2, [r7, #14]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80061b4:	7bba      	ldrb	r2, [r7, #14]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	32ae      	adds	r2, #174	; 0xae
 80061ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
 80061c6:	4603      	mov	r3, r0
 80061c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061ca:	e004      	b.n	80061d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80061cc:	2303      	movs	r3, #3
 80061ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061d0:	e001      	b.n	80061d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80061d2:	2303      	movs	r3, #3
 80061d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	88db      	ldrh	r3, [r3, #6]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d110      	bne.n	8006200 <USBD_StdItfReq+0xc0>
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10d      	bne.n	8006200 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fdc7 	bl	8006d78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061ea:	e009      	b.n	8006200 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 fcf7 	bl	8006be2 <USBD_CtlError>
          break;
 80061f4:	e004      	b.n	8006200 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fcf2 	bl	8006be2 <USBD_CtlError>
          break;
 80061fe:	e000      	b.n	8006202 <USBD_StdItfReq+0xc2>
          break;
 8006200:	bf00      	nop
      }
      break;
 8006202:	e004      	b.n	800620e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006204:	6839      	ldr	r1, [r7, #0]
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fceb 	bl	8006be2 <USBD_CtlError>
      break;
 800620c:	bf00      	nop
  }

  return ret;
 800620e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	889b      	ldrh	r3, [r3, #4]
 800622a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006234:	2b40      	cmp	r3, #64	; 0x40
 8006236:	d007      	beq.n	8006248 <USBD_StdEPReq+0x30>
 8006238:	2b40      	cmp	r3, #64	; 0x40
 800623a:	f200 817f 	bhi.w	800653c <USBD_StdEPReq+0x324>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d02a      	beq.n	8006298 <USBD_StdEPReq+0x80>
 8006242:	2b20      	cmp	r3, #32
 8006244:	f040 817a 	bne.w	800653c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006248:	7bbb      	ldrb	r3, [r7, #14]
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f7ff fe83 	bl	8005f58 <USBD_CoreFindEP>
 8006252:	4603      	mov	r3, r0
 8006254:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006256:	7b7b      	ldrb	r3, [r7, #13]
 8006258:	2bff      	cmp	r3, #255	; 0xff
 800625a:	f000 8174 	beq.w	8006546 <USBD_StdEPReq+0x32e>
 800625e:	7b7b      	ldrb	r3, [r7, #13]
 8006260:	2b00      	cmp	r3, #0
 8006262:	f040 8170 	bne.w	8006546 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006266:	7b7a      	ldrb	r2, [r7, #13]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800626e:	7b7a      	ldrb	r2, [r7, #13]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	32ae      	adds	r2, #174	; 0xae
 8006274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 8163 	beq.w	8006546 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006280:	7b7a      	ldrb	r2, [r7, #13]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	32ae      	adds	r2, #174	; 0xae
 8006286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	6839      	ldr	r1, [r7, #0]
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	4798      	blx	r3
 8006292:	4603      	mov	r3, r0
 8006294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006296:	e156      	b.n	8006546 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	2b03      	cmp	r3, #3
 800629e:	d008      	beq.n	80062b2 <USBD_StdEPReq+0x9a>
 80062a0:	2b03      	cmp	r3, #3
 80062a2:	f300 8145 	bgt.w	8006530 <USBD_StdEPReq+0x318>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	f000 809b 	beq.w	80063e2 <USBD_StdEPReq+0x1ca>
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d03c      	beq.n	800632a <USBD_StdEPReq+0x112>
 80062b0:	e13e      	b.n	8006530 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d002      	beq.n	80062c4 <USBD_StdEPReq+0xac>
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d016      	beq.n	80062f0 <USBD_StdEPReq+0xd8>
 80062c2:	e02c      	b.n	800631e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00d      	beq.n	80062e6 <USBD_StdEPReq+0xce>
 80062ca:	7bbb      	ldrb	r3, [r7, #14]
 80062cc:	2b80      	cmp	r3, #128	; 0x80
 80062ce:	d00a      	beq.n	80062e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 f963 	bl	80075a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062da:	2180      	movs	r1, #128	; 0x80
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f001 f95f 	bl	80075a0 <USBD_LL_StallEP>
 80062e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062e4:	e020      	b.n	8006328 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fc7a 	bl	8006be2 <USBD_CtlError>
              break;
 80062ee:	e01b      	b.n	8006328 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	885b      	ldrh	r3, [r3, #2]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10e      	bne.n	8006316 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062f8:	7bbb      	ldrb	r3, [r7, #14]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00b      	beq.n	8006316 <USBD_StdEPReq+0xfe>
 80062fe:	7bbb      	ldrb	r3, [r7, #14]
 8006300:	2b80      	cmp	r3, #128	; 0x80
 8006302:	d008      	beq.n	8006316 <USBD_StdEPReq+0xfe>
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	88db      	ldrh	r3, [r3, #6]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d104      	bne.n	8006316 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	4619      	mov	r1, r3
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 f945 	bl	80075a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fd2e 	bl	8006d78 <USBD_CtlSendStatus>

              break;
 800631c:	e004      	b.n	8006328 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800631e:	6839      	ldr	r1, [r7, #0]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fc5e 	bl	8006be2 <USBD_CtlError>
              break;
 8006326:	bf00      	nop
          }
          break;
 8006328:	e107      	b.n	800653a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006330:	b2db      	uxtb	r3, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d002      	beq.n	800633c <USBD_StdEPReq+0x124>
 8006336:	2b03      	cmp	r3, #3
 8006338:	d016      	beq.n	8006368 <USBD_StdEPReq+0x150>
 800633a:	e04b      	b.n	80063d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00d      	beq.n	800635e <USBD_StdEPReq+0x146>
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	2b80      	cmp	r3, #128	; 0x80
 8006346:	d00a      	beq.n	800635e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006348:	7bbb      	ldrb	r3, [r7, #14]
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 f927 	bl	80075a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006352:	2180      	movs	r1, #128	; 0x80
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 f923 	bl	80075a0 <USBD_LL_StallEP>
 800635a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800635c:	e040      	b.n	80063e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800635e:	6839      	ldr	r1, [r7, #0]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f000 fc3e 	bl	8006be2 <USBD_CtlError>
              break;
 8006366:	e03b      	b.n	80063e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	885b      	ldrh	r3, [r3, #2]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d136      	bne.n	80063de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006370:	7bbb      	ldrb	r3, [r7, #14]
 8006372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006376:	2b00      	cmp	r3, #0
 8006378:	d004      	beq.n	8006384 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	4619      	mov	r1, r3
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 f92d 	bl	80075de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 fcf7 	bl	8006d78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800638a:	7bbb      	ldrb	r3, [r7, #14]
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7ff fde2 	bl	8005f58 <USBD_CoreFindEP>
 8006394:	4603      	mov	r3, r0
 8006396:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006398:	7b7b      	ldrb	r3, [r7, #13]
 800639a:	2bff      	cmp	r3, #255	; 0xff
 800639c:	d01f      	beq.n	80063de <USBD_StdEPReq+0x1c6>
 800639e:	7b7b      	ldrb	r3, [r7, #13]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d11c      	bne.n	80063de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80063a4:	7b7a      	ldrb	r2, [r7, #13]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80063ac:	7b7a      	ldrb	r2, [r7, #13]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	32ae      	adds	r2, #174	; 0xae
 80063b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d010      	beq.n	80063de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063bc:	7b7a      	ldrb	r2, [r7, #13]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	32ae      	adds	r2, #174	; 0xae
 80063c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	4798      	blx	r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80063d2:	e004      	b.n	80063de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fc03 	bl	8006be2 <USBD_CtlError>
              break;
 80063dc:	e000      	b.n	80063e0 <USBD_StdEPReq+0x1c8>
              break;
 80063de:	bf00      	nop
          }
          break;
 80063e0:	e0ab      	b.n	800653a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d002      	beq.n	80063f4 <USBD_StdEPReq+0x1dc>
 80063ee:	2b03      	cmp	r3, #3
 80063f0:	d032      	beq.n	8006458 <USBD_StdEPReq+0x240>
 80063f2:	e097      	b.n	8006524 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063f4:	7bbb      	ldrb	r3, [r7, #14]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d007      	beq.n	800640a <USBD_StdEPReq+0x1f2>
 80063fa:	7bbb      	ldrb	r3, [r7, #14]
 80063fc:	2b80      	cmp	r3, #128	; 0x80
 80063fe:	d004      	beq.n	800640a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fbed 	bl	8006be2 <USBD_CtlError>
                break;
 8006408:	e091      	b.n	800652e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800640a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800640e:	2b00      	cmp	r3, #0
 8006410:	da0b      	bge.n	800642a <USBD_StdEPReq+0x212>
 8006412:	7bbb      	ldrb	r3, [r7, #14]
 8006414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006418:	4613      	mov	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	3310      	adds	r3, #16
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	4413      	add	r3, r2
 8006426:	3304      	adds	r3, #4
 8006428:	e00b      	b.n	8006442 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800642a:	7bbb      	ldrb	r3, [r7, #14]
 800642c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	4413      	add	r3, r2
 8006440:	3304      	adds	r3, #4
 8006442:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2202      	movs	r2, #2
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fc37 	bl	8006cc4 <USBD_CtlSendData>
              break;
 8006456:	e06a      	b.n	800652e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800645c:	2b00      	cmp	r3, #0
 800645e:	da11      	bge.n	8006484 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	f003 020f 	and.w	r2, r3, #15
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	4613      	mov	r3, r2
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	4413      	add	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	440b      	add	r3, r1
 8006472:	3324      	adds	r3, #36	; 0x24
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d117      	bne.n	80064aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fbb0 	bl	8006be2 <USBD_CtlError>
                  break;
 8006482:	e054      	b.n	800652e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	f003 020f 	and.w	r2, r3, #15
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d104      	bne.n	80064aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80064a0:	6839      	ldr	r1, [r7, #0]
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fb9d 	bl	8006be2 <USBD_CtlError>
                  break;
 80064a8:	e041      	b.n	800652e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	da0b      	bge.n	80064ca <USBD_StdEPReq+0x2b2>
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	3310      	adds	r3, #16
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	4413      	add	r3, r2
 80064c6:	3304      	adds	r3, #4
 80064c8:	e00b      	b.n	80064e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064d0:	4613      	mov	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4413      	add	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	4413      	add	r3, r2
 80064e0:	3304      	adds	r3, #4
 80064e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d002      	beq.n	80064f0 <USBD_StdEPReq+0x2d8>
 80064ea:	7bbb      	ldrb	r3, [r7, #14]
 80064ec:	2b80      	cmp	r3, #128	; 0x80
 80064ee:	d103      	bne.n	80064f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
 80064f6:	e00e      	b.n	8006516 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80064f8:	7bbb      	ldrb	r3, [r7, #14]
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f001 f88d 	bl	800761c <USBD_LL_IsStallEP>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	2201      	movs	r2, #1
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	e002      	b.n	8006516 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	2202      	movs	r2, #2
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fbd1 	bl	8006cc4 <USBD_CtlSendData>
              break;
 8006522:	e004      	b.n	800652e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006524:	6839      	ldr	r1, [r7, #0]
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fb5b 	bl	8006be2 <USBD_CtlError>
              break;
 800652c:	bf00      	nop
          }
          break;
 800652e:	e004      	b.n	800653a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fb55 	bl	8006be2 <USBD_CtlError>
          break;
 8006538:	bf00      	nop
      }
      break;
 800653a:	e005      	b.n	8006548 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800653c:	6839      	ldr	r1, [r7, #0]
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fb4f 	bl	8006be2 <USBD_CtlError>
      break;
 8006544:	e000      	b.n	8006548 <USBD_StdEPReq+0x330>
      break;
 8006546:	bf00      	nop
  }

  return ret;
 8006548:	7bfb      	ldrb	r3, [r7, #15]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3710      	adds	r7, #16
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
	...

08006554 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	885b      	ldrh	r3, [r3, #2]
 800656e:	0a1b      	lsrs	r3, r3, #8
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	2b06      	cmp	r3, #6
 8006576:	f200 8128 	bhi.w	80067ca <USBD_GetDescriptor+0x276>
 800657a:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <USBD_GetDescriptor+0x2c>)
 800657c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006580:	0800659d 	.word	0x0800659d
 8006584:	080065b5 	.word	0x080065b5
 8006588:	080065f5 	.word	0x080065f5
 800658c:	080067cb 	.word	0x080067cb
 8006590:	080067cb 	.word	0x080067cb
 8006594:	0800676b 	.word	0x0800676b
 8006598:	08006797 	.word	0x08006797
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	7c12      	ldrb	r2, [r2, #16]
 80065a8:	f107 0108 	add.w	r1, r7, #8
 80065ac:	4610      	mov	r0, r2
 80065ae:	4798      	blx	r3
 80065b0:	60f8      	str	r0, [r7, #12]
      break;
 80065b2:	e112      	b.n	80067da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	7c1b      	ldrb	r3, [r3, #16]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10d      	bne.n	80065d8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c4:	f107 0208 	add.w	r2, r7, #8
 80065c8:	4610      	mov	r0, r2
 80065ca:	4798      	blx	r3
 80065cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3301      	adds	r3, #1
 80065d2:	2202      	movs	r2, #2
 80065d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065d6:	e100      	b.n	80067da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	f107 0208 	add.w	r2, r7, #8
 80065e4:	4610      	mov	r0, r2
 80065e6:	4798      	blx	r3
 80065e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3301      	adds	r3, #1
 80065ee:	2202      	movs	r2, #2
 80065f0:	701a      	strb	r2, [r3, #0]
      break;
 80065f2:	e0f2      	b.n	80067da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	885b      	ldrh	r3, [r3, #2]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b05      	cmp	r3, #5
 80065fc:	f200 80ac 	bhi.w	8006758 <USBD_GetDescriptor+0x204>
 8006600:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <USBD_GetDescriptor+0xb4>)
 8006602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006606:	bf00      	nop
 8006608:	08006621 	.word	0x08006621
 800660c:	08006655 	.word	0x08006655
 8006610:	08006689 	.word	0x08006689
 8006614:	080066bd 	.word	0x080066bd
 8006618:	080066f1 	.word	0x080066f1
 800661c:	08006725 	.word	0x08006725
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00b      	beq.n	8006644 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	7c12      	ldrb	r2, [r2, #16]
 8006638:	f107 0108 	add.w	r1, r7, #8
 800663c:	4610      	mov	r0, r2
 800663e:	4798      	blx	r3
 8006640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006642:	e091      	b.n	8006768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006644:	6839      	ldr	r1, [r7, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 facb 	bl	8006be2 <USBD_CtlError>
            err++;
 800664c:	7afb      	ldrb	r3, [r7, #11]
 800664e:	3301      	adds	r3, #1
 8006650:	72fb      	strb	r3, [r7, #11]
          break;
 8006652:	e089      	b.n	8006768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	7c12      	ldrb	r2, [r2, #16]
 800666c:	f107 0108 	add.w	r1, r7, #8
 8006670:	4610      	mov	r0, r2
 8006672:	4798      	blx	r3
 8006674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006676:	e077      	b.n	8006768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fab1 	bl	8006be2 <USBD_CtlError>
            err++;
 8006680:	7afb      	ldrb	r3, [r7, #11]
 8006682:	3301      	adds	r3, #1
 8006684:	72fb      	strb	r3, [r7, #11]
          break;
 8006686:	e06f      	b.n	8006768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00b      	beq.n	80066ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	7c12      	ldrb	r2, [r2, #16]
 80066a0:	f107 0108 	add.w	r1, r7, #8
 80066a4:	4610      	mov	r0, r2
 80066a6:	4798      	blx	r3
 80066a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066aa:	e05d      	b.n	8006768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fa97 	bl	8006be2 <USBD_CtlError>
            err++;
 80066b4:	7afb      	ldrb	r3, [r7, #11]
 80066b6:	3301      	adds	r3, #1
 80066b8:	72fb      	strb	r3, [r7, #11]
          break;
 80066ba:	e055      	b.n	8006768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00b      	beq.n	80066e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	7c12      	ldrb	r2, [r2, #16]
 80066d4:	f107 0108 	add.w	r1, r7, #8
 80066d8:	4610      	mov	r0, r2
 80066da:	4798      	blx	r3
 80066dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066de:	e043      	b.n	8006768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066e0:	6839      	ldr	r1, [r7, #0]
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 fa7d 	bl	8006be2 <USBD_CtlError>
            err++;
 80066e8:	7afb      	ldrb	r3, [r7, #11]
 80066ea:	3301      	adds	r3, #1
 80066ec:	72fb      	strb	r3, [r7, #11]
          break;
 80066ee:	e03b      	b.n	8006768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00b      	beq.n	8006714 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	7c12      	ldrb	r2, [r2, #16]
 8006708:	f107 0108 	add.w	r1, r7, #8
 800670c:	4610      	mov	r0, r2
 800670e:	4798      	blx	r3
 8006710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006712:	e029      	b.n	8006768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fa63 	bl	8006be2 <USBD_CtlError>
            err++;
 800671c:	7afb      	ldrb	r3, [r7, #11]
 800671e:	3301      	adds	r3, #1
 8006720:	72fb      	strb	r3, [r7, #11]
          break;
 8006722:	e021      	b.n	8006768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00b      	beq.n	8006748 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	7c12      	ldrb	r2, [r2, #16]
 800673c:	f107 0108 	add.w	r1, r7, #8
 8006740:	4610      	mov	r0, r2
 8006742:	4798      	blx	r3
 8006744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006746:	e00f      	b.n	8006768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 fa49 	bl	8006be2 <USBD_CtlError>
            err++;
 8006750:	7afb      	ldrb	r3, [r7, #11]
 8006752:	3301      	adds	r3, #1
 8006754:	72fb      	strb	r3, [r7, #11]
          break;
 8006756:	e007      	b.n	8006768 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fa41 	bl	8006be2 <USBD_CtlError>
          err++;
 8006760:	7afb      	ldrb	r3, [r7, #11]
 8006762:	3301      	adds	r3, #1
 8006764:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006766:	bf00      	nop
      }
      break;
 8006768:	e037      	b.n	80067da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7c1b      	ldrb	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d109      	bne.n	8006786 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677a:	f107 0208 	add.w	r2, r7, #8
 800677e:	4610      	mov	r0, r2
 8006780:	4798      	blx	r3
 8006782:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006784:	e029      	b.n	80067da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006786:	6839      	ldr	r1, [r7, #0]
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fa2a 	bl	8006be2 <USBD_CtlError>
        err++;
 800678e:	7afb      	ldrb	r3, [r7, #11]
 8006790:	3301      	adds	r3, #1
 8006792:	72fb      	strb	r3, [r7, #11]
      break;
 8006794:	e021      	b.n	80067da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	7c1b      	ldrb	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10d      	bne.n	80067ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a6:	f107 0208 	add.w	r2, r7, #8
 80067aa:	4610      	mov	r0, r2
 80067ac:	4798      	blx	r3
 80067ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	2207      	movs	r2, #7
 80067b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80067b8:	e00f      	b.n	80067da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fa10 	bl	8006be2 <USBD_CtlError>
        err++;
 80067c2:	7afb      	ldrb	r3, [r7, #11]
 80067c4:	3301      	adds	r3, #1
 80067c6:	72fb      	strb	r3, [r7, #11]
      break;
 80067c8:	e007      	b.n	80067da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 fa08 	bl	8006be2 <USBD_CtlError>
      err++;
 80067d2:	7afb      	ldrb	r3, [r7, #11]
 80067d4:	3301      	adds	r3, #1
 80067d6:	72fb      	strb	r3, [r7, #11]
      break;
 80067d8:	bf00      	nop
  }

  if (err != 0U)
 80067da:	7afb      	ldrb	r3, [r7, #11]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d11e      	bne.n	800681e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	88db      	ldrh	r3, [r3, #6]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d016      	beq.n	8006816 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80067e8:	893b      	ldrh	r3, [r7, #8]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00e      	beq.n	800680c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	88da      	ldrh	r2, [r3, #6]
 80067f2:	893b      	ldrh	r3, [r7, #8]
 80067f4:	4293      	cmp	r3, r2
 80067f6:	bf28      	it	cs
 80067f8:	4613      	movcs	r3, r2
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067fe:	893b      	ldrh	r3, [r7, #8]
 8006800:	461a      	mov	r2, r3
 8006802:	68f9      	ldr	r1, [r7, #12]
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 fa5d 	bl	8006cc4 <USBD_CtlSendData>
 800680a:	e009      	b.n	8006820 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f9e7 	bl	8006be2 <USBD_CtlError>
 8006814:	e004      	b.n	8006820 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 faae 	bl	8006d78 <USBD_CtlSendStatus>
 800681c:	e000      	b.n	8006820 <USBD_GetDescriptor+0x2cc>
    return;
 800681e:	bf00      	nop
  }
}
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop

08006828 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	889b      	ldrh	r3, [r3, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d131      	bne.n	800689e <USBD_SetAddress+0x76>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	88db      	ldrh	r3, [r3, #6]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d12d      	bne.n	800689e <USBD_SetAddress+0x76>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	885b      	ldrh	r3, [r3, #2]
 8006846:	2b7f      	cmp	r3, #127	; 0x7f
 8006848:	d829      	bhi.n	800689e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	885b      	ldrh	r3, [r3, #2]
 800684e:	b2db      	uxtb	r3, r3
 8006850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006854:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b03      	cmp	r3, #3
 8006860:	d104      	bne.n	800686c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 f9bc 	bl	8006be2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800686a:	e01d      	b.n	80068a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7bfa      	ldrb	r2, [r7, #15]
 8006870:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006874:	7bfb      	ldrb	r3, [r7, #15]
 8006876:	4619      	mov	r1, r3
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 fefb 	bl	8007674 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa7a 	bl	8006d78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006884:	7bfb      	ldrb	r3, [r7, #15]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d004      	beq.n	8006894 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2202      	movs	r2, #2
 800688e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006892:	e009      	b.n	80068a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689c:	e004      	b.n	80068a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 f99e 	bl	8006be2 <USBD_CtlError>
  }
}
 80068a6:	bf00      	nop
 80068a8:	bf00      	nop
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	885b      	ldrh	r3, [r3, #2]
 80068c2:	b2da      	uxtb	r2, r3
 80068c4:	4b4e      	ldr	r3, [pc, #312]	; (8006a00 <USBD_SetConfig+0x150>)
 80068c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80068c8:	4b4d      	ldr	r3, [pc, #308]	; (8006a00 <USBD_SetConfig+0x150>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d905      	bls.n	80068dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f985 	bl	8006be2 <USBD_CtlError>
    return USBD_FAIL;
 80068d8:	2303      	movs	r3, #3
 80068da:	e08c      	b.n	80069f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d002      	beq.n	80068ee <USBD_SetConfig+0x3e>
 80068e8:	2b03      	cmp	r3, #3
 80068ea:	d029      	beq.n	8006940 <USBD_SetConfig+0x90>
 80068ec:	e075      	b.n	80069da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80068ee:	4b44      	ldr	r3, [pc, #272]	; (8006a00 <USBD_SetConfig+0x150>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d020      	beq.n	8006938 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80068f6:	4b42      	ldr	r3, [pc, #264]	; (8006a00 <USBD_SetConfig+0x150>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	461a      	mov	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006900:	4b3f      	ldr	r3, [pc, #252]	; (8006a00 <USBD_SetConfig+0x150>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fe ffe1 	bl	80058ce <USBD_SetClassConfig>
 800690c:	4603      	mov	r3, r0
 800690e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006910:	7bfb      	ldrb	r3, [r7, #15]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d008      	beq.n	8006928 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f962 	bl	8006be2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2202      	movs	r2, #2
 8006922:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006926:	e065      	b.n	80069f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fa25 	bl	8006d78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2203      	movs	r2, #3
 8006932:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006936:	e05d      	b.n	80069f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fa1d 	bl	8006d78 <USBD_CtlSendStatus>
      break;
 800693e:	e059      	b.n	80069f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006940:	4b2f      	ldr	r3, [pc, #188]	; (8006a00 <USBD_SetConfig+0x150>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d112      	bne.n	800696e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2202      	movs	r2, #2
 800694c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006950:	4b2b      	ldr	r3, [pc, #172]	; (8006a00 <USBD_SetConfig+0x150>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	461a      	mov	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800695a:	4b29      	ldr	r3, [pc, #164]	; (8006a00 <USBD_SetConfig+0x150>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	4619      	mov	r1, r3
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7fe ffd0 	bl	8005906 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 fa06 	bl	8006d78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800696c:	e042      	b.n	80069f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800696e:	4b24      	ldr	r3, [pc, #144]	; (8006a00 <USBD_SetConfig+0x150>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	429a      	cmp	r2, r3
 800697a:	d02a      	beq.n	80069d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	b2db      	uxtb	r3, r3
 8006982:	4619      	mov	r1, r3
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7fe ffbe 	bl	8005906 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800698a:	4b1d      	ldr	r3, [pc, #116]	; (8006a00 <USBD_SetConfig+0x150>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006994:	4b1a      	ldr	r3, [pc, #104]	; (8006a00 <USBD_SetConfig+0x150>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fe ff97 	bl	80058ce <USBD_SetClassConfig>
 80069a0:	4603      	mov	r3, r0
 80069a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00f      	beq.n	80069ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80069aa:	6839      	ldr	r1, [r7, #0]
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f918 	bl	8006be2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7fe ffa3 	bl	8005906 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80069c8:	e014      	b.n	80069f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f9d4 	bl	8006d78 <USBD_CtlSendStatus>
      break;
 80069d0:	e010      	b.n	80069f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f9d0 	bl	8006d78 <USBD_CtlSendStatus>
      break;
 80069d8:	e00c      	b.n	80069f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80069da:	6839      	ldr	r1, [r7, #0]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f900 	bl	8006be2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069e2:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <USBD_SetConfig+0x150>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	4619      	mov	r1, r3
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f7fe ff8c 	bl	8005906 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80069ee:	2303      	movs	r3, #3
 80069f0:	73fb      	strb	r3, [r7, #15]
      break;
 80069f2:	bf00      	nop
  }

  return ret;
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	200007d0 	.word	0x200007d0

08006a04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	88db      	ldrh	r3, [r3, #6]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d004      	beq.n	8006a20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f8e2 	bl	8006be2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006a1e:	e023      	b.n	8006a68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	dc02      	bgt.n	8006a32 <USBD_GetConfig+0x2e>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	dc03      	bgt.n	8006a38 <USBD_GetConfig+0x34>
 8006a30:	e015      	b.n	8006a5e <USBD_GetConfig+0x5a>
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d00b      	beq.n	8006a4e <USBD_GetConfig+0x4a>
 8006a36:	e012      	b.n	8006a5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	3308      	adds	r3, #8
 8006a42:	2201      	movs	r2, #1
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 f93c 	bl	8006cc4 <USBD_CtlSendData>
        break;
 8006a4c:	e00c      	b.n	8006a68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	3304      	adds	r3, #4
 8006a52:	2201      	movs	r2, #1
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f934 	bl	8006cc4 <USBD_CtlSendData>
        break;
 8006a5c:	e004      	b.n	8006a68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a5e:	6839      	ldr	r1, [r7, #0]
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 f8be 	bl	8006be2 <USBD_CtlError>
        break;
 8006a66:	bf00      	nop
}
 8006a68:	bf00      	nop
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d81e      	bhi.n	8006ac6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	88db      	ldrh	r3, [r3, #6]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d004      	beq.n	8006a9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f8a5 	bl	8006be2 <USBD_CtlError>
        break;
 8006a98:	e01a      	b.n	8006ad0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	f043 0202 	orr.w	r2, r3, #2
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	330c      	adds	r3, #12
 8006aba:	2202      	movs	r2, #2
 8006abc:	4619      	mov	r1, r3
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f900 	bl	8006cc4 <USBD_CtlSendData>
      break;
 8006ac4:	e004      	b.n	8006ad0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ac6:	6839      	ldr	r1, [r7, #0]
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f88a 	bl	8006be2 <USBD_CtlError>
      break;
 8006ace:	bf00      	nop
  }
}
 8006ad0:	bf00      	nop
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	885b      	ldrh	r3, [r3, #2]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d107      	bne.n	8006afa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f940 	bl	8006d78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006af8:	e013      	b.n	8006b22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	885b      	ldrh	r3, [r3, #2]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d10b      	bne.n	8006b1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	889b      	ldrh	r3, [r3, #4]
 8006b06:	0a1b      	lsrs	r3, r3, #8
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f930 	bl	8006d78 <USBD_CtlSendStatus>
}
 8006b18:	e003      	b.n	8006b22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006b1a:	6839      	ldr	r1, [r7, #0]
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f860 	bl	8006be2 <USBD_CtlError>
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b082      	sub	sp, #8
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d80b      	bhi.n	8006b5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	885b      	ldrh	r3, [r3, #2]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d10c      	bne.n	8006b64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f910 	bl	8006d78 <USBD_CtlSendStatus>
      }
      break;
 8006b58:	e004      	b.n	8006b64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 f840 	bl	8006be2 <USBD_CtlError>
      break;
 8006b62:	e000      	b.n	8006b66 <USBD_ClrFeature+0x3c>
      break;
 8006b64:	bf00      	nop
  }
}
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	781a      	ldrb	r2, [r3, #0]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3301      	adds	r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	781a      	ldrb	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3301      	adds	r3, #1
 8006b96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f7ff fa41 	bl	8006020 <SWAPBYTE>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f7ff fa34 	bl	8006020 <SWAPBYTE>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f7ff fa27 	bl	8006020 <SWAPBYTE>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	80da      	strh	r2, [r3, #6]
}
 8006bda:	bf00      	nop
 8006bdc:	3710      	adds	r7, #16
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b082      	sub	sp, #8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bec:	2180      	movs	r1, #128	; 0x80
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fcd6 	bl	80075a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fcd2 	bl	80075a0 <USBD_LL_StallEP>
}
 8006bfc:	bf00      	nop
 8006bfe:	3708      	adds	r7, #8
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d036      	beq.n	8006c88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006c1e:	6938      	ldr	r0, [r7, #16]
 8006c20:	f000 f836 	bl	8006c90 <USBD_GetLen>
 8006c24:	4603      	mov	r3, r0
 8006c26:	3301      	adds	r3, #1
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	005b      	lsls	r3, r3, #1
 8006c2c:	b29a      	uxth	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	68ba      	ldr	r2, [r7, #8]
 8006c36:	4413      	add	r3, r2
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	7812      	ldrb	r2, [r2, #0]
 8006c3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
 8006c40:	3301      	adds	r3, #1
 8006c42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c44:	7dfb      	ldrb	r3, [r7, #23]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	4413      	add	r3, r2
 8006c4a:	2203      	movs	r2, #3
 8006c4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	3301      	adds	r3, #1
 8006c52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c54:	e013      	b.n	8006c7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	7812      	ldrb	r2, [r2, #0]
 8006c60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	3301      	adds	r3, #1
 8006c66:	613b      	str	r3, [r7, #16]
    idx++;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	4413      	add	r3, r2
 8006c74:	2200      	movs	r2, #0
 8006c76:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e7      	bne.n	8006c56 <USBD_GetString+0x52>
 8006c86:	e000      	b.n	8006c8a <USBD_GetString+0x86>
    return;
 8006c88:	bf00      	nop
  }
}
 8006c8a:	3718      	adds	r7, #24
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ca0:	e005      	b.n	8006cae <USBD_GetLen+0x1e>
  {
    len++;
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1f5      	bne.n	8006ca2 <USBD_GetLen+0x12>
  }

  return len;
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	2100      	movs	r1, #0
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 fce1 	bl	80076b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	60f8      	str	r0, [r7, #12]
 8006d02:	60b9      	str	r1, [r7, #8]
 8006d04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f000 fcd0 	bl	80076b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2203      	movs	r2, #3
 8006d2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	2100      	movs	r1, #0
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 fcd4 	bl	80076f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	2100      	movs	r1, #0
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 fcc3 	bl	80076f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d6e:	2300      	movs	r3, #0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3710      	adds	r7, #16
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2204      	movs	r2, #4
 8006d84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fc8f 	bl	80076b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2205      	movs	r2, #5
 8006daa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006dae:	2300      	movs	r3, #0
 8006db0:	2200      	movs	r2, #0
 8006db2:	2100      	movs	r1, #0
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fc9d 	bl	80076f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	4912      	ldr	r1, [pc, #72]	; (8006e14 <MX_USB_DEVICE_Init+0x50>)
 8006dcc:	4812      	ldr	r0, [pc, #72]	; (8006e18 <MX_USB_DEVICE_Init+0x54>)
 8006dce:	f7fe fd01 	bl	80057d4 <USBD_Init>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006dd8:	f7fa f9da 	bl	8001190 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006ddc:	490f      	ldr	r1, [pc, #60]	; (8006e1c <MX_USB_DEVICE_Init+0x58>)
 8006dde:	480e      	ldr	r0, [pc, #56]	; (8006e18 <MX_USB_DEVICE_Init+0x54>)
 8006de0:	f7fe fd28 	bl	8005834 <USBD_RegisterClass>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d001      	beq.n	8006dee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006dea:	f7fa f9d1 	bl	8001190 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006dee:	490c      	ldr	r1, [pc, #48]	; (8006e20 <MX_USB_DEVICE_Init+0x5c>)
 8006df0:	4809      	ldr	r0, [pc, #36]	; (8006e18 <MX_USB_DEVICE_Init+0x54>)
 8006df2:	f7fe fc1f 	bl	8005634 <USBD_CDC_RegisterInterface>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006dfc:	f7fa f9c8 	bl	8001190 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006e00:	4805      	ldr	r0, [pc, #20]	; (8006e18 <MX_USB_DEVICE_Init+0x54>)
 8006e02:	f7fe fd4d 	bl	80058a0 <USBD_Start>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d001      	beq.n	8006e10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006e0c:	f7fa f9c0 	bl	8001190 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006e10:	bf00      	nop
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	200000ac 	.word	0x200000ac
 8006e18:	200007d4 	.word	0x200007d4
 8006e1c:	20000018 	.word	0x20000018
 8006e20:	20000098 	.word	0x20000098

08006e24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006e28:	2200      	movs	r2, #0
 8006e2a:	4905      	ldr	r1, [pc, #20]	; (8006e40 <CDC_Init_FS+0x1c>)
 8006e2c:	4805      	ldr	r0, [pc, #20]	; (8006e44 <CDC_Init_FS+0x20>)
 8006e2e:	f7fe fc1b 	bl	8005668 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006e32:	4905      	ldr	r1, [pc, #20]	; (8006e48 <CDC_Init_FS+0x24>)
 8006e34:	4803      	ldr	r0, [pc, #12]	; (8006e44 <CDC_Init_FS+0x20>)
 8006e36:	f7fe fc39 	bl	80056ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006e3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	200012b0 	.word	0x200012b0
 8006e44:	200007d4 	.word	0x200007d4
 8006e48:	20000ab0 	.word	0x20000ab0

08006e4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	6039      	str	r1, [r7, #0]
 8006e66:	71fb      	strb	r3, [r7, #7]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	2b23      	cmp	r3, #35	; 0x23
 8006e70:	d84a      	bhi.n	8006f08 <CDC_Control_FS+0xac>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <CDC_Control_FS+0x1c>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006f09 	.word	0x08006f09
 8006e7c:	08006f09 	.word	0x08006f09
 8006e80:	08006f09 	.word	0x08006f09
 8006e84:	08006f09 	.word	0x08006f09
 8006e88:	08006f09 	.word	0x08006f09
 8006e8c:	08006f09 	.word	0x08006f09
 8006e90:	08006f09 	.word	0x08006f09
 8006e94:	08006f09 	.word	0x08006f09
 8006e98:	08006f09 	.word	0x08006f09
 8006e9c:	08006f09 	.word	0x08006f09
 8006ea0:	08006f09 	.word	0x08006f09
 8006ea4:	08006f09 	.word	0x08006f09
 8006ea8:	08006f09 	.word	0x08006f09
 8006eac:	08006f09 	.word	0x08006f09
 8006eb0:	08006f09 	.word	0x08006f09
 8006eb4:	08006f09 	.word	0x08006f09
 8006eb8:	08006f09 	.word	0x08006f09
 8006ebc:	08006f09 	.word	0x08006f09
 8006ec0:	08006f09 	.word	0x08006f09
 8006ec4:	08006f09 	.word	0x08006f09
 8006ec8:	08006f09 	.word	0x08006f09
 8006ecc:	08006f09 	.word	0x08006f09
 8006ed0:	08006f09 	.word	0x08006f09
 8006ed4:	08006f09 	.word	0x08006f09
 8006ed8:	08006f09 	.word	0x08006f09
 8006edc:	08006f09 	.word	0x08006f09
 8006ee0:	08006f09 	.word	0x08006f09
 8006ee4:	08006f09 	.word	0x08006f09
 8006ee8:	08006f09 	.word	0x08006f09
 8006eec:	08006f09 	.word	0x08006f09
 8006ef0:	08006f09 	.word	0x08006f09
 8006ef4:	08006f09 	.word	0x08006f09
 8006ef8:	08006f09 	.word	0x08006f09
 8006efc:	08006f09 	.word	0x08006f09
 8006f00:	08006f09 	.word	0x08006f09
 8006f04:	08006f09 	.word	0x08006f09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f08:	bf00      	nop
  }

  return (USBD_OK);
 8006f0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4805      	ldr	r0, [pc, #20]	; (8006f3c <CDC_Receive_FS+0x24>)
 8006f26:	f7fe fbc1 	bl	80056ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f2a:	4804      	ldr	r0, [pc, #16]	; (8006f3c <CDC_Receive_FS+0x24>)
 8006f2c:	f7fe fc1c 	bl	8005768 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	200007d4 	.word	0x200007d4

08006f40 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f50:	4b0d      	ldr	r3, [pc, #52]	; (8006f88 <CDC_Transmit_FS+0x48>)
 8006f52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f56:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e00b      	b.n	8006f7e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f66:	887b      	ldrh	r3, [r7, #2]
 8006f68:	461a      	mov	r2, r3
 8006f6a:	6879      	ldr	r1, [r7, #4]
 8006f6c:	4806      	ldr	r0, [pc, #24]	; (8006f88 <CDC_Transmit_FS+0x48>)
 8006f6e:	f7fe fb7b 	bl	8005668 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f72:	4805      	ldr	r0, [pc, #20]	; (8006f88 <CDC_Transmit_FS+0x48>)
 8006f74:	f7fe fbb8 	bl	80056e8 <USBD_CDC_TransmitPacket>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	200007d4 	.word	0x200007d4

08006f8c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b087      	sub	sp, #28
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006f9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	371c      	adds	r7, #28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	6039      	str	r1, [r7, #0]
 8006fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	2212      	movs	r2, #18
 8006fc0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006fc2:	4b03      	ldr	r3, [pc, #12]	; (8006fd0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	370c      	adds	r7, #12
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	200000c8 	.word	0x200000c8

08006fd4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	6039      	str	r1, [r7, #0]
 8006fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006fe6:	4b03      	ldr	r3, [pc, #12]	; (8006ff4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	200000dc 	.word	0x200000dc

08006ff8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4603      	mov	r3, r0
 8007000:	6039      	str	r1, [r7, #0]
 8007002:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007004:	79fb      	ldrb	r3, [r7, #7]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d105      	bne.n	8007016 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	4907      	ldr	r1, [pc, #28]	; (800702c <USBD_FS_ProductStrDescriptor+0x34>)
 800700e:	4808      	ldr	r0, [pc, #32]	; (8007030 <USBD_FS_ProductStrDescriptor+0x38>)
 8007010:	f7ff fdf8 	bl	8006c04 <USBD_GetString>
 8007014:	e004      	b.n	8007020 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	4904      	ldr	r1, [pc, #16]	; (800702c <USBD_FS_ProductStrDescriptor+0x34>)
 800701a:	4805      	ldr	r0, [pc, #20]	; (8007030 <USBD_FS_ProductStrDescriptor+0x38>)
 800701c:	f7ff fdf2 	bl	8006c04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007020:	4b02      	ldr	r3, [pc, #8]	; (800702c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20001ab0 	.word	0x20001ab0
 8007030:	0800d36c 	.word	0x0800d36c

08007034 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	4603      	mov	r3, r0
 800703c:	6039      	str	r1, [r7, #0]
 800703e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007040:	683a      	ldr	r2, [r7, #0]
 8007042:	4904      	ldr	r1, [pc, #16]	; (8007054 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007044:	4804      	ldr	r0, [pc, #16]	; (8007058 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007046:	f7ff fddd 	bl	8006c04 <USBD_GetString>
  return USBD_StrDesc;
 800704a:	4b02      	ldr	r3, [pc, #8]	; (8007054 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800704c:	4618      	mov	r0, r3
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	20001ab0 	.word	0x20001ab0
 8007058:	0800d384 	.word	0x0800d384

0800705c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	4603      	mov	r3, r0
 8007064:	6039      	str	r1, [r7, #0]
 8007066:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	221a      	movs	r2, #26
 800706c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800706e:	f000 f843 	bl	80070f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007072:	4b02      	ldr	r3, [pc, #8]	; (800707c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	200000e0 	.word	0x200000e0

08007080 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	6039      	str	r1, [r7, #0]
 800708a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800708c:	79fb      	ldrb	r3, [r7, #7]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d105      	bne.n	800709e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	4907      	ldr	r1, [pc, #28]	; (80070b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007096:	4808      	ldr	r0, [pc, #32]	; (80070b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007098:	f7ff fdb4 	bl	8006c04 <USBD_GetString>
 800709c:	e004      	b.n	80070a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	4904      	ldr	r1, [pc, #16]	; (80070b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80070a2:	4805      	ldr	r0, [pc, #20]	; (80070b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80070a4:	f7ff fdae 	bl	8006c04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070a8:	4b02      	ldr	r3, [pc, #8]	; (80070b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20001ab0 	.word	0x20001ab0
 80070b8:	0800d398 	.word	0x0800d398

080070bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	6039      	str	r1, [r7, #0]
 80070c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070c8:	79fb      	ldrb	r3, [r7, #7]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d105      	bne.n	80070da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	4907      	ldr	r1, [pc, #28]	; (80070f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070d2:	4808      	ldr	r0, [pc, #32]	; (80070f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070d4:	f7ff fd96 	bl	8006c04 <USBD_GetString>
 80070d8:	e004      	b.n	80070e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	4904      	ldr	r1, [pc, #16]	; (80070f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80070de:	4805      	ldr	r0, [pc, #20]	; (80070f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80070e0:	f7ff fd90 	bl	8006c04 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070e4:	4b02      	ldr	r3, [pc, #8]	; (80070f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20001ab0 	.word	0x20001ab0
 80070f4:	0800d3a4 	.word	0x0800d3a4

080070f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070fe:	4b0f      	ldr	r3, [pc, #60]	; (800713c <Get_SerialNum+0x44>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007104:	4b0e      	ldr	r3, [pc, #56]	; (8007140 <Get_SerialNum+0x48>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800710a:	4b0e      	ldr	r3, [pc, #56]	; (8007144 <Get_SerialNum+0x4c>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007110:	68fa      	ldr	r2, [r7, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4413      	add	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800711e:	2208      	movs	r2, #8
 8007120:	4909      	ldr	r1, [pc, #36]	; (8007148 <Get_SerialNum+0x50>)
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 f814 	bl	8007150 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007128:	2204      	movs	r2, #4
 800712a:	4908      	ldr	r1, [pc, #32]	; (800714c <Get_SerialNum+0x54>)
 800712c:	68b8      	ldr	r0, [r7, #8]
 800712e:	f000 f80f 	bl	8007150 <IntToUnicode>
  }
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	1fff7a10 	.word	0x1fff7a10
 8007140:	1fff7a14 	.word	0x1fff7a14
 8007144:	1fff7a18 	.word	0x1fff7a18
 8007148:	200000e2 	.word	0x200000e2
 800714c:	200000f2 	.word	0x200000f2

08007150 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007162:	2300      	movs	r3, #0
 8007164:	75fb      	strb	r3, [r7, #23]
 8007166:	e027      	b.n	80071b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	0f1b      	lsrs	r3, r3, #28
 800716c:	2b09      	cmp	r3, #9
 800716e:	d80b      	bhi.n	8007188 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	0f1b      	lsrs	r3, r3, #28
 8007174:	b2da      	uxtb	r2, r3
 8007176:	7dfb      	ldrb	r3, [r7, #23]
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	4619      	mov	r1, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	440b      	add	r3, r1
 8007180:	3230      	adds	r2, #48	; 0x30
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	e00a      	b.n	800719e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	0f1b      	lsrs	r3, r3, #28
 800718c:	b2da      	uxtb	r2, r3
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	005b      	lsls	r3, r3, #1
 8007192:	4619      	mov	r1, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	440b      	add	r3, r1
 8007198:	3237      	adds	r2, #55	; 0x37
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	011b      	lsls	r3, r3, #4
 80071a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	3301      	adds	r3, #1
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	4413      	add	r3, r2
 80071ae:	2200      	movs	r2, #0
 80071b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80071b2:	7dfb      	ldrb	r3, [r7, #23]
 80071b4:	3301      	adds	r3, #1
 80071b6:	75fb      	strb	r3, [r7, #23]
 80071b8:	7dfa      	ldrb	r2, [r7, #23]
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d3d3      	bcc.n	8007168 <IntToUnicode+0x18>
  }
}
 80071c0:	bf00      	nop
 80071c2:	bf00      	nop
 80071c4:	371c      	adds	r7, #28
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
	...

080071d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b08a      	sub	sp, #40	; 0x28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071d8:	f107 0314 	add.w	r3, r7, #20
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	605a      	str	r2, [r3, #4]
 80071e2:	609a      	str	r2, [r3, #8]
 80071e4:	60da      	str	r2, [r3, #12]
 80071e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071f0:	d13a      	bne.n	8007268 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071f2:	2300      	movs	r3, #0
 80071f4:	613b      	str	r3, [r7, #16]
 80071f6:	4b1e      	ldr	r3, [pc, #120]	; (8007270 <HAL_PCD_MspInit+0xa0>)
 80071f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fa:	4a1d      	ldr	r2, [pc, #116]	; (8007270 <HAL_PCD_MspInit+0xa0>)
 80071fc:	f043 0301 	orr.w	r3, r3, #1
 8007200:	6313      	str	r3, [r2, #48]	; 0x30
 8007202:	4b1b      	ldr	r3, [pc, #108]	; (8007270 <HAL_PCD_MspInit+0xa0>)
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	f003 0301 	and.w	r3, r3, #1
 800720a:	613b      	str	r3, [r7, #16]
 800720c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800720e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007214:	2302      	movs	r3, #2
 8007216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007218:	2300      	movs	r3, #0
 800721a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800721c:	2303      	movs	r3, #3
 800721e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007220:	230a      	movs	r3, #10
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007224:	f107 0314 	add.w	r3, r7, #20
 8007228:	4619      	mov	r1, r3
 800722a:	4812      	ldr	r0, [pc, #72]	; (8007274 <HAL_PCD_MspInit+0xa4>)
 800722c:	f7fa fabc 	bl	80017a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007230:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <HAL_PCD_MspInit+0xa0>)
 8007232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007234:	4a0e      	ldr	r2, [pc, #56]	; (8007270 <HAL_PCD_MspInit+0xa0>)
 8007236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800723a:	6353      	str	r3, [r2, #52]	; 0x34
 800723c:	2300      	movs	r3, #0
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	4b0b      	ldr	r3, [pc, #44]	; (8007270 <HAL_PCD_MspInit+0xa0>)
 8007242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007244:	4a0a      	ldr	r2, [pc, #40]	; (8007270 <HAL_PCD_MspInit+0xa0>)
 8007246:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800724a:	6453      	str	r3, [r2, #68]	; 0x44
 800724c:	4b08      	ldr	r3, [pc, #32]	; (8007270 <HAL_PCD_MspInit+0xa0>)
 800724e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007258:	2200      	movs	r2, #0
 800725a:	2100      	movs	r1, #0
 800725c:	2043      	movs	r0, #67	; 0x43
 800725e:	f7fa fa6c 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007262:	2043      	movs	r0, #67	; 0x43
 8007264:	f7fa fa85 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007268:	bf00      	nop
 800726a:	3728      	adds	r7, #40	; 0x28
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40023800 	.word	0x40023800
 8007274:	40020000 	.word	0x40020000

08007278 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800728c:	4619      	mov	r1, r3
 800728e:	4610      	mov	r0, r2
 8007290:	f7fe fb53 	bl	800593a <USBD_LL_SetupStage>
}
 8007294:	bf00      	nop
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	460b      	mov	r3, r1
 80072a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	6879      	ldr	r1, [r7, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	00db      	lsls	r3, r3, #3
 80072b6:	4413      	add	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	440b      	add	r3, r1
 80072bc:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	78fb      	ldrb	r3, [r7, #3]
 80072c4:	4619      	mov	r1, r3
 80072c6:	f7fe fb8d 	bl	80059e4 <USBD_LL_DataOutStage>
}
 80072ca:	bf00      	nop
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b082      	sub	sp, #8
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	460b      	mov	r3, r1
 80072dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80072e4:	78fa      	ldrb	r2, [r7, #3]
 80072e6:	6879      	ldr	r1, [r7, #4]
 80072e8:	4613      	mov	r3, r2
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	4413      	add	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	440b      	add	r3, r1
 80072f2:	3320      	adds	r3, #32
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	78fb      	ldrb	r3, [r7, #3]
 80072f8:	4619      	mov	r1, r3
 80072fa:	f7fe fc26 	bl	8005b4a <USBD_LL_DataInStage>
}
 80072fe:	bf00      	nop
 8007300:	3708      	adds	r7, #8
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b082      	sub	sp, #8
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007314:	4618      	mov	r0, r3
 8007316:	f7fe fd60 	bl	8005dda <USBD_LL_SOF>
}
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800732a:	2301      	movs	r3, #1
 800732c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	79db      	ldrb	r3, [r3, #7]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d001      	beq.n	800733a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007336:	f7f9 ff2b 	bl	8001190 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007340:	7bfa      	ldrb	r2, [r7, #15]
 8007342:	4611      	mov	r1, r2
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fd04 	bl	8005d52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007350:	4618      	mov	r0, r3
 8007352:	f7fe fcac 	bl	8005cae <USBD_LL_Reset>
}
 8007356:	bf00      	nop
 8007358:	3710      	adds	r7, #16
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
	...

08007360 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fcff 	bl	8005d72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6812      	ldr	r2, [r2, #0]
 8007382:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007386:	f043 0301 	orr.w	r3, r3, #1
 800738a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	7adb      	ldrb	r3, [r3, #11]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d005      	beq.n	80073a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007394:	4b04      	ldr	r3, [pc, #16]	; (80073a8 <HAL_PCD_SuspendCallback+0x48>)
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	4a03      	ldr	r2, [pc, #12]	; (80073a8 <HAL_PCD_SuspendCallback+0x48>)
 800739a:	f043 0306 	orr.w	r3, r3, #6
 800739e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	e000ed00 	.word	0xe000ed00

080073ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fe fcf5 	bl	8005daa <USBD_LL_Resume>
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	460b      	mov	r3, r1
 80073d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80073da:	78fa      	ldrb	r2, [r7, #3]
 80073dc:	4611      	mov	r1, r2
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fd4d 	bl	8005e7e <USBD_LL_IsoOUTIncomplete>
}
 80073e4:	bf00      	nop
 80073e6:	3708      	adds	r7, #8
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80073fe:	78fa      	ldrb	r2, [r7, #3]
 8007400:	4611      	mov	r1, r2
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe fd09 	bl	8005e1a <USBD_LL_IsoINIncomplete>
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe fd5f 	bl	8005ee2 <USBD_LL_DevConnected>
}
 8007424:	bf00      	nop
 8007426:	3708      	adds	r7, #8
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800743a:	4618      	mov	r0, r3
 800743c:	f7fe fd5c 	bl	8005ef8 <USBD_LL_DevDisconnected>
}
 8007440:	bf00      	nop
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d13c      	bne.n	80074d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007458:	4a20      	ldr	r2, [pc, #128]	; (80074dc <USBD_LL_Init+0x94>)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a1e      	ldr	r2, [pc, #120]	; (80074dc <USBD_LL_Init+0x94>)
 8007464:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007468:	4b1c      	ldr	r3, [pc, #112]	; (80074dc <USBD_LL_Init+0x94>)
 800746a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800746e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007470:	4b1a      	ldr	r3, [pc, #104]	; (80074dc <USBD_LL_Init+0x94>)
 8007472:	2204      	movs	r2, #4
 8007474:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007476:	4b19      	ldr	r3, [pc, #100]	; (80074dc <USBD_LL_Init+0x94>)
 8007478:	2202      	movs	r2, #2
 800747a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800747c:	4b17      	ldr	r3, [pc, #92]	; (80074dc <USBD_LL_Init+0x94>)
 800747e:	2200      	movs	r2, #0
 8007480:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007482:	4b16      	ldr	r3, [pc, #88]	; (80074dc <USBD_LL_Init+0x94>)
 8007484:	2202      	movs	r2, #2
 8007486:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007488:	4b14      	ldr	r3, [pc, #80]	; (80074dc <USBD_LL_Init+0x94>)
 800748a:	2200      	movs	r2, #0
 800748c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800748e:	4b13      	ldr	r3, [pc, #76]	; (80074dc <USBD_LL_Init+0x94>)
 8007490:	2200      	movs	r2, #0
 8007492:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007494:	4b11      	ldr	r3, [pc, #68]	; (80074dc <USBD_LL_Init+0x94>)
 8007496:	2200      	movs	r2, #0
 8007498:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800749a:	4b10      	ldr	r3, [pc, #64]	; (80074dc <USBD_LL_Init+0x94>)
 800749c:	2200      	movs	r2, #0
 800749e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80074a0:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <USBD_LL_Init+0x94>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80074a6:	480d      	ldr	r0, [pc, #52]	; (80074dc <USBD_LL_Init+0x94>)
 80074a8:	f7fa fb02 	bl	8001ab0 <HAL_PCD_Init>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80074b2:	f7f9 fe6d 	bl	8001190 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80074b6:	2180      	movs	r1, #128	; 0x80
 80074b8:	4808      	ldr	r0, [pc, #32]	; (80074dc <USBD_LL_Init+0x94>)
 80074ba:	f7fb fd2c 	bl	8002f16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80074be:	2240      	movs	r2, #64	; 0x40
 80074c0:	2100      	movs	r1, #0
 80074c2:	4806      	ldr	r0, [pc, #24]	; (80074dc <USBD_LL_Init+0x94>)
 80074c4:	f7fb fce0 	bl	8002e88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80074c8:	2280      	movs	r2, #128	; 0x80
 80074ca:	2101      	movs	r1, #1
 80074cc:	4803      	ldr	r0, [pc, #12]	; (80074dc <USBD_LL_Init+0x94>)
 80074ce:	f7fb fcdb 	bl	8002e88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80074d2:	2300      	movs	r3, #0
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20001cb0 	.word	0x20001cb0

080074e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fa fbe9 	bl	8001cce <HAL_PCD_Start>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	4618      	mov	r0, r3
 8007504:	f000 f942 	bl	800778c <USBD_Get_USB_Status>
 8007508:	4603      	mov	r3, r0
 800750a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800750c:	7bbb      	ldrb	r3, [r7, #14]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	4608      	mov	r0, r1
 8007520:	4611      	mov	r1, r2
 8007522:	461a      	mov	r2, r3
 8007524:	4603      	mov	r3, r0
 8007526:	70fb      	strb	r3, [r7, #3]
 8007528:	460b      	mov	r3, r1
 800752a:	70bb      	strb	r3, [r7, #2]
 800752c:	4613      	mov	r3, r2
 800752e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007530:	2300      	movs	r3, #0
 8007532:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800753e:	78bb      	ldrb	r3, [r7, #2]
 8007540:	883a      	ldrh	r2, [r7, #0]
 8007542:	78f9      	ldrb	r1, [r7, #3]
 8007544:	f7fb f8bd 	bl	80026c2 <HAL_PCD_EP_Open>
 8007548:	4603      	mov	r3, r0
 800754a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	4618      	mov	r0, r3
 8007550:	f000 f91c 	bl	800778c <USBD_Get_USB_Status>
 8007554:	4603      	mov	r3, r0
 8007556:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007558:	7bbb      	ldrb	r3, [r7, #14]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800757c:	78fa      	ldrb	r2, [r7, #3]
 800757e:	4611      	mov	r1, r2
 8007580:	4618      	mov	r0, r3
 8007582:	f7fb f906 	bl	8002792 <HAL_PCD_EP_Close>
 8007586:	4603      	mov	r3, r0
 8007588:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	4618      	mov	r0, r3
 800758e:	f000 f8fd 	bl	800778c <USBD_Get_USB_Status>
 8007592:	4603      	mov	r3, r0
 8007594:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007596:	7bbb      	ldrb	r3, [r7, #14]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075ba:	78fa      	ldrb	r2, [r7, #3]
 80075bc:	4611      	mov	r1, r2
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fb f9be 	bl	8002940 <HAL_PCD_EP_SetStall>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	4618      	mov	r0, r3
 80075cc:	f000 f8de 	bl	800778c <USBD_Get_USB_Status>
 80075d0:	4603      	mov	r3, r0
 80075d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b084      	sub	sp, #16
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	460b      	mov	r3, r1
 80075e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075f8:	78fa      	ldrb	r2, [r7, #3]
 80075fa:	4611      	mov	r1, r2
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fb fa02 	bl	8002a06 <HAL_PCD_EP_ClrStall>
 8007602:	4603      	mov	r3, r0
 8007604:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	4618      	mov	r0, r3
 800760a:	f000 f8bf 	bl	800778c <USBD_Get_USB_Status>
 800760e:	4603      	mov	r3, r0
 8007610:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007612:	7bbb      	ldrb	r3, [r7, #14]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	460b      	mov	r3, r1
 8007626:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800762e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007630:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007634:	2b00      	cmp	r3, #0
 8007636:	da0b      	bge.n	8007650 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007638:	78fb      	ldrb	r3, [r7, #3]
 800763a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800763e:	68f9      	ldr	r1, [r7, #12]
 8007640:	4613      	mov	r3, r2
 8007642:	00db      	lsls	r3, r3, #3
 8007644:	4413      	add	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	440b      	add	r3, r1
 800764a:	3316      	adds	r3, #22
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	e00b      	b.n	8007668 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007656:	68f9      	ldr	r1, [r7, #12]
 8007658:	4613      	mov	r3, r2
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4413      	add	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	440b      	add	r3, r1
 8007662:	f203 2356 	addw	r3, r3, #598	; 0x256
 8007666:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800768e:	78fa      	ldrb	r2, [r7, #3]
 8007690:	4611      	mov	r1, r2
 8007692:	4618      	mov	r0, r3
 8007694:	f7fa fff1 	bl	800267a <HAL_PCD_SetAddress>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	4618      	mov	r0, r3
 80076a0:	f000 f874 	bl	800778c <USBD_Get_USB_Status>
 80076a4:	4603      	mov	r3, r0
 80076a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}

080076b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076b2:	b580      	push	{r7, lr}
 80076b4:	b086      	sub	sp, #24
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	607a      	str	r2, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]
 80076be:	460b      	mov	r3, r1
 80076c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076c6:	2300      	movs	r3, #0
 80076c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80076d0:	7af9      	ldrb	r1, [r7, #11]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	f7fb f8f9 	bl	80028cc <HAL_PCD_EP_Transmit>
 80076da:	4603      	mov	r3, r0
 80076dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	4618      	mov	r0, r3
 80076e2:	f000 f853 	bl	800778c <USBD_Get_USB_Status>
 80076e6:	4603      	mov	r3, r0
 80076e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	607a      	str	r2, [r7, #4]
 80076fe:	603b      	str	r3, [r7, #0]
 8007700:	460b      	mov	r3, r1
 8007702:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007712:	7af9      	ldrb	r1, [r7, #11]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	f7fb f885 	bl	8002826 <HAL_PCD_EP_Receive>
 800771c:	4603      	mov	r3, r0
 800771e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007720:	7dfb      	ldrb	r3, [r7, #23]
 8007722:	4618      	mov	r0, r3
 8007724:	f000 f832 	bl	800778c <USBD_Get_USB_Status>
 8007728:	4603      	mov	r3, r0
 800772a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800772c:	7dbb      	ldrb	r3, [r7, #22]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007748:	78fa      	ldrb	r2, [r7, #3]
 800774a:	4611      	mov	r1, r2
 800774c:	4618      	mov	r0, r3
 800774e:	f7fb f8a5 	bl	800289c <HAL_PCD_EP_GetRxCount>
 8007752:	4603      	mov	r3, r0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007764:	4b03      	ldr	r3, [pc, #12]	; (8007774 <USBD_static_malloc+0x18>)
}
 8007766:	4618      	mov	r0, r3
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	20002194 	.word	0x20002194

08007778 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]

}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	2b03      	cmp	r3, #3
 800779e:	d817      	bhi.n	80077d0 <USBD_Get_USB_Status+0x44>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <USBD_Get_USB_Status+0x1c>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077b9 	.word	0x080077b9
 80077ac:	080077bf 	.word	0x080077bf
 80077b0:	080077c5 	.word	0x080077c5
 80077b4:	080077cb 	.word	0x080077cb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73fb      	strb	r3, [r7, #15]
    break;
 80077bc:	e00b      	b.n	80077d6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80077be:	2303      	movs	r3, #3
 80077c0:	73fb      	strb	r3, [r7, #15]
    break;
 80077c2:	e008      	b.n	80077d6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]
    break;
 80077c8:	e005      	b.n	80077d6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80077ca:	2303      	movs	r3, #3
 80077cc:	73fb      	strb	r3, [r7, #15]
    break;
 80077ce:	e002      	b.n	80077d6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80077d0:	2303      	movs	r3, #3
 80077d2:	73fb      	strb	r3, [r7, #15]
    break;
 80077d4:	bf00      	nop
  }
  return usb_status;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <std>:
 80077e4:	2300      	movs	r3, #0
 80077e6:	b510      	push	{r4, lr}
 80077e8:	4604      	mov	r4, r0
 80077ea:	e9c0 3300 	strd	r3, r3, [r0]
 80077ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077f2:	6083      	str	r3, [r0, #8]
 80077f4:	8181      	strh	r1, [r0, #12]
 80077f6:	6643      	str	r3, [r0, #100]	; 0x64
 80077f8:	81c2      	strh	r2, [r0, #14]
 80077fa:	6183      	str	r3, [r0, #24]
 80077fc:	4619      	mov	r1, r3
 80077fe:	2208      	movs	r2, #8
 8007800:	305c      	adds	r0, #92	; 0x5c
 8007802:	f000 f914 	bl	8007a2e <memset>
 8007806:	4b0d      	ldr	r3, [pc, #52]	; (800783c <std+0x58>)
 8007808:	6223      	str	r3, [r4, #32]
 800780a:	4b0d      	ldr	r3, [pc, #52]	; (8007840 <std+0x5c>)
 800780c:	6263      	str	r3, [r4, #36]	; 0x24
 800780e:	4b0d      	ldr	r3, [pc, #52]	; (8007844 <std+0x60>)
 8007810:	62a3      	str	r3, [r4, #40]	; 0x28
 8007812:	4b0d      	ldr	r3, [pc, #52]	; (8007848 <std+0x64>)
 8007814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007816:	4b0d      	ldr	r3, [pc, #52]	; (800784c <std+0x68>)
 8007818:	61e4      	str	r4, [r4, #28]
 800781a:	429c      	cmp	r4, r3
 800781c:	d006      	beq.n	800782c <std+0x48>
 800781e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007822:	4294      	cmp	r4, r2
 8007824:	d002      	beq.n	800782c <std+0x48>
 8007826:	33d0      	adds	r3, #208	; 0xd0
 8007828:	429c      	cmp	r4, r3
 800782a:	d105      	bne.n	8007838 <std+0x54>
 800782c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007834:	f000 b974 	b.w	8007b20 <__retarget_lock_init_recursive>
 8007838:	bd10      	pop	{r4, pc}
 800783a:	bf00      	nop
 800783c:	080079a9 	.word	0x080079a9
 8007840:	080079cb 	.word	0x080079cb
 8007844:	08007a03 	.word	0x08007a03
 8007848:	08007a27 	.word	0x08007a27
 800784c:	200023b4 	.word	0x200023b4

08007850 <stdio_exit_handler>:
 8007850:	4a02      	ldr	r2, [pc, #8]	; (800785c <stdio_exit_handler+0xc>)
 8007852:	4903      	ldr	r1, [pc, #12]	; (8007860 <stdio_exit_handler+0x10>)
 8007854:	4803      	ldr	r0, [pc, #12]	; (8007864 <stdio_exit_handler+0x14>)
 8007856:	f000 b869 	b.w	800792c <_fwalk_sglue>
 800785a:	bf00      	nop
 800785c:	200000fc 	.word	0x200000fc
 8007860:	080095dd 	.word	0x080095dd
 8007864:	20000108 	.word	0x20000108

08007868 <cleanup_stdio>:
 8007868:	6841      	ldr	r1, [r0, #4]
 800786a:	4b0c      	ldr	r3, [pc, #48]	; (800789c <cleanup_stdio+0x34>)
 800786c:	4299      	cmp	r1, r3
 800786e:	b510      	push	{r4, lr}
 8007870:	4604      	mov	r4, r0
 8007872:	d001      	beq.n	8007878 <cleanup_stdio+0x10>
 8007874:	f001 feb2 	bl	80095dc <_fclose_r>
 8007878:	68a1      	ldr	r1, [r4, #8]
 800787a:	4b09      	ldr	r3, [pc, #36]	; (80078a0 <cleanup_stdio+0x38>)
 800787c:	4299      	cmp	r1, r3
 800787e:	d002      	beq.n	8007886 <cleanup_stdio+0x1e>
 8007880:	4620      	mov	r0, r4
 8007882:	f001 feab 	bl	80095dc <_fclose_r>
 8007886:	68e1      	ldr	r1, [r4, #12]
 8007888:	4b06      	ldr	r3, [pc, #24]	; (80078a4 <cleanup_stdio+0x3c>)
 800788a:	4299      	cmp	r1, r3
 800788c:	d004      	beq.n	8007898 <cleanup_stdio+0x30>
 800788e:	4620      	mov	r0, r4
 8007890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007894:	f001 bea2 	b.w	80095dc <_fclose_r>
 8007898:	bd10      	pop	{r4, pc}
 800789a:	bf00      	nop
 800789c:	200023b4 	.word	0x200023b4
 80078a0:	2000241c 	.word	0x2000241c
 80078a4:	20002484 	.word	0x20002484

080078a8 <global_stdio_init.part.0>:
 80078a8:	b510      	push	{r4, lr}
 80078aa:	4b0b      	ldr	r3, [pc, #44]	; (80078d8 <global_stdio_init.part.0+0x30>)
 80078ac:	4c0b      	ldr	r4, [pc, #44]	; (80078dc <global_stdio_init.part.0+0x34>)
 80078ae:	4a0c      	ldr	r2, [pc, #48]	; (80078e0 <global_stdio_init.part.0+0x38>)
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	4620      	mov	r0, r4
 80078b4:	2200      	movs	r2, #0
 80078b6:	2104      	movs	r1, #4
 80078b8:	f7ff ff94 	bl	80077e4 <std>
 80078bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80078c0:	2201      	movs	r2, #1
 80078c2:	2109      	movs	r1, #9
 80078c4:	f7ff ff8e 	bl	80077e4 <std>
 80078c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80078cc:	2202      	movs	r2, #2
 80078ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078d2:	2112      	movs	r1, #18
 80078d4:	f7ff bf86 	b.w	80077e4 <std>
 80078d8:	200024ec 	.word	0x200024ec
 80078dc:	200023b4 	.word	0x200023b4
 80078e0:	08007851 	.word	0x08007851

080078e4 <__sfp_lock_acquire>:
 80078e4:	4801      	ldr	r0, [pc, #4]	; (80078ec <__sfp_lock_acquire+0x8>)
 80078e6:	f000 b91d 	b.w	8007b24 <__retarget_lock_acquire_recursive>
 80078ea:	bf00      	nop
 80078ec:	200024f6 	.word	0x200024f6

080078f0 <__sfp_lock_release>:
 80078f0:	4801      	ldr	r0, [pc, #4]	; (80078f8 <__sfp_lock_release+0x8>)
 80078f2:	f000 b918 	b.w	8007b26 <__retarget_lock_release_recursive>
 80078f6:	bf00      	nop
 80078f8:	200024f6 	.word	0x200024f6

080078fc <__sinit>:
 80078fc:	b510      	push	{r4, lr}
 80078fe:	4604      	mov	r4, r0
 8007900:	f7ff fff0 	bl	80078e4 <__sfp_lock_acquire>
 8007904:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007906:	b11b      	cbz	r3, 8007910 <__sinit+0x14>
 8007908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800790c:	f7ff bff0 	b.w	80078f0 <__sfp_lock_release>
 8007910:	4b04      	ldr	r3, [pc, #16]	; (8007924 <__sinit+0x28>)
 8007912:	6363      	str	r3, [r4, #52]	; 0x34
 8007914:	4b04      	ldr	r3, [pc, #16]	; (8007928 <__sinit+0x2c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f5      	bne.n	8007908 <__sinit+0xc>
 800791c:	f7ff ffc4 	bl	80078a8 <global_stdio_init.part.0>
 8007920:	e7f2      	b.n	8007908 <__sinit+0xc>
 8007922:	bf00      	nop
 8007924:	08007869 	.word	0x08007869
 8007928:	200024ec 	.word	0x200024ec

0800792c <_fwalk_sglue>:
 800792c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007930:	4607      	mov	r7, r0
 8007932:	4688      	mov	r8, r1
 8007934:	4614      	mov	r4, r2
 8007936:	2600      	movs	r6, #0
 8007938:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800793c:	f1b9 0901 	subs.w	r9, r9, #1
 8007940:	d505      	bpl.n	800794e <_fwalk_sglue+0x22>
 8007942:	6824      	ldr	r4, [r4, #0]
 8007944:	2c00      	cmp	r4, #0
 8007946:	d1f7      	bne.n	8007938 <_fwalk_sglue+0xc>
 8007948:	4630      	mov	r0, r6
 800794a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800794e:	89ab      	ldrh	r3, [r5, #12]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d907      	bls.n	8007964 <_fwalk_sglue+0x38>
 8007954:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007958:	3301      	adds	r3, #1
 800795a:	d003      	beq.n	8007964 <_fwalk_sglue+0x38>
 800795c:	4629      	mov	r1, r5
 800795e:	4638      	mov	r0, r7
 8007960:	47c0      	blx	r8
 8007962:	4306      	orrs	r6, r0
 8007964:	3568      	adds	r5, #104	; 0x68
 8007966:	e7e9      	b.n	800793c <_fwalk_sglue+0x10>

08007968 <sprintf>:
 8007968:	b40e      	push	{r1, r2, r3}
 800796a:	b500      	push	{lr}
 800796c:	b09c      	sub	sp, #112	; 0x70
 800796e:	ab1d      	add	r3, sp, #116	; 0x74
 8007970:	9002      	str	r0, [sp, #8]
 8007972:	9006      	str	r0, [sp, #24]
 8007974:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007978:	4809      	ldr	r0, [pc, #36]	; (80079a0 <sprintf+0x38>)
 800797a:	9107      	str	r1, [sp, #28]
 800797c:	9104      	str	r1, [sp, #16]
 800797e:	4909      	ldr	r1, [pc, #36]	; (80079a4 <sprintf+0x3c>)
 8007980:	f853 2b04 	ldr.w	r2, [r3], #4
 8007984:	9105      	str	r1, [sp, #20]
 8007986:	6800      	ldr	r0, [r0, #0]
 8007988:	9301      	str	r3, [sp, #4]
 800798a:	a902      	add	r1, sp, #8
 800798c:	f000 fc38 	bl	8008200 <_svfprintf_r>
 8007990:	9b02      	ldr	r3, [sp, #8]
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
 8007996:	b01c      	add	sp, #112	; 0x70
 8007998:	f85d eb04 	ldr.w	lr, [sp], #4
 800799c:	b003      	add	sp, #12
 800799e:	4770      	bx	lr
 80079a0:	20000228 	.word	0x20000228
 80079a4:	ffff0208 	.word	0xffff0208

080079a8 <__sread>:
 80079a8:	b510      	push	{r4, lr}
 80079aa:	460c      	mov	r4, r1
 80079ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b0:	f000 f868 	bl	8007a84 <_read_r>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	bfab      	itete	ge
 80079b8:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80079ba:	89a3      	ldrhlt	r3, [r4, #12]
 80079bc:	181b      	addge	r3, r3, r0
 80079be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079c2:	bfac      	ite	ge
 80079c4:	6523      	strge	r3, [r4, #80]	; 0x50
 80079c6:	81a3      	strhlt	r3, [r4, #12]
 80079c8:	bd10      	pop	{r4, pc}

080079ca <__swrite>:
 80079ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ce:	461f      	mov	r7, r3
 80079d0:	898b      	ldrh	r3, [r1, #12]
 80079d2:	05db      	lsls	r3, r3, #23
 80079d4:	4605      	mov	r5, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	4616      	mov	r6, r2
 80079da:	d505      	bpl.n	80079e8 <__swrite+0x1e>
 80079dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e0:	2302      	movs	r3, #2
 80079e2:	2200      	movs	r2, #0
 80079e4:	f000 f83c 	bl	8007a60 <_lseek_r>
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079f2:	81a3      	strh	r3, [r4, #12]
 80079f4:	4632      	mov	r2, r6
 80079f6:	463b      	mov	r3, r7
 80079f8:	4628      	mov	r0, r5
 80079fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079fe:	f000 b853 	b.w	8007aa8 <_write_r>

08007a02 <__sseek>:
 8007a02:	b510      	push	{r4, lr}
 8007a04:	460c      	mov	r4, r1
 8007a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0a:	f000 f829 	bl	8007a60 <_lseek_r>
 8007a0e:	1c43      	adds	r3, r0, #1
 8007a10:	89a3      	ldrh	r3, [r4, #12]
 8007a12:	bf15      	itete	ne
 8007a14:	6520      	strne	r0, [r4, #80]	; 0x50
 8007a16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a1e:	81a3      	strheq	r3, [r4, #12]
 8007a20:	bf18      	it	ne
 8007a22:	81a3      	strhne	r3, [r4, #12]
 8007a24:	bd10      	pop	{r4, pc}

08007a26 <__sclose>:
 8007a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a2a:	f000 b809 	b.w	8007a40 <_close_r>

08007a2e <memset>:
 8007a2e:	4402      	add	r2, r0
 8007a30:	4603      	mov	r3, r0
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d100      	bne.n	8007a38 <memset+0xa>
 8007a36:	4770      	bx	lr
 8007a38:	f803 1b01 	strb.w	r1, [r3], #1
 8007a3c:	e7f9      	b.n	8007a32 <memset+0x4>
	...

08007a40 <_close_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4d06      	ldr	r5, [pc, #24]	; (8007a5c <_close_r+0x1c>)
 8007a44:	2300      	movs	r3, #0
 8007a46:	4604      	mov	r4, r0
 8007a48:	4608      	mov	r0, r1
 8007a4a:	602b      	str	r3, [r5, #0]
 8007a4c:	f7f9 fc5d 	bl	800130a <_close>
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	d102      	bne.n	8007a5a <_close_r+0x1a>
 8007a54:	682b      	ldr	r3, [r5, #0]
 8007a56:	b103      	cbz	r3, 8007a5a <_close_r+0x1a>
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	bd38      	pop	{r3, r4, r5, pc}
 8007a5c:	200024f0 	.word	0x200024f0

08007a60 <_lseek_r>:
 8007a60:	b538      	push	{r3, r4, r5, lr}
 8007a62:	4d07      	ldr	r5, [pc, #28]	; (8007a80 <_lseek_r+0x20>)
 8007a64:	4604      	mov	r4, r0
 8007a66:	4608      	mov	r0, r1
 8007a68:	4611      	mov	r1, r2
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	602a      	str	r2, [r5, #0]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f7f9 fc72 	bl	8001358 <_lseek>
 8007a74:	1c43      	adds	r3, r0, #1
 8007a76:	d102      	bne.n	8007a7e <_lseek_r+0x1e>
 8007a78:	682b      	ldr	r3, [r5, #0]
 8007a7a:	b103      	cbz	r3, 8007a7e <_lseek_r+0x1e>
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	bd38      	pop	{r3, r4, r5, pc}
 8007a80:	200024f0 	.word	0x200024f0

08007a84 <_read_r>:
 8007a84:	b538      	push	{r3, r4, r5, lr}
 8007a86:	4d07      	ldr	r5, [pc, #28]	; (8007aa4 <_read_r+0x20>)
 8007a88:	4604      	mov	r4, r0
 8007a8a:	4608      	mov	r0, r1
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	2200      	movs	r2, #0
 8007a90:	602a      	str	r2, [r5, #0]
 8007a92:	461a      	mov	r2, r3
 8007a94:	f7f9 fc00 	bl	8001298 <_read>
 8007a98:	1c43      	adds	r3, r0, #1
 8007a9a:	d102      	bne.n	8007aa2 <_read_r+0x1e>
 8007a9c:	682b      	ldr	r3, [r5, #0]
 8007a9e:	b103      	cbz	r3, 8007aa2 <_read_r+0x1e>
 8007aa0:	6023      	str	r3, [r4, #0]
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	200024f0 	.word	0x200024f0

08007aa8 <_write_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4d07      	ldr	r5, [pc, #28]	; (8007ac8 <_write_r+0x20>)
 8007aac:	4604      	mov	r4, r0
 8007aae:	4608      	mov	r0, r1
 8007ab0:	4611      	mov	r1, r2
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	602a      	str	r2, [r5, #0]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f7f9 fc0b 	bl	80012d2 <_write>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	d102      	bne.n	8007ac6 <_write_r+0x1e>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	b103      	cbz	r3, 8007ac6 <_write_r+0x1e>
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	bd38      	pop	{r3, r4, r5, pc}
 8007ac8:	200024f0 	.word	0x200024f0

08007acc <__errno>:
 8007acc:	4b01      	ldr	r3, [pc, #4]	; (8007ad4 <__errno+0x8>)
 8007ace:	6818      	ldr	r0, [r3, #0]
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	20000228 	.word	0x20000228

08007ad8 <__libc_init_array>:
 8007ad8:	b570      	push	{r4, r5, r6, lr}
 8007ada:	4d0d      	ldr	r5, [pc, #52]	; (8007b10 <__libc_init_array+0x38>)
 8007adc:	4c0d      	ldr	r4, [pc, #52]	; (8007b14 <__libc_init_array+0x3c>)
 8007ade:	1b64      	subs	r4, r4, r5
 8007ae0:	10a4      	asrs	r4, r4, #2
 8007ae2:	2600      	movs	r6, #0
 8007ae4:	42a6      	cmp	r6, r4
 8007ae6:	d109      	bne.n	8007afc <__libc_init_array+0x24>
 8007ae8:	4d0b      	ldr	r5, [pc, #44]	; (8007b18 <__libc_init_array+0x40>)
 8007aea:	4c0c      	ldr	r4, [pc, #48]	; (8007b1c <__libc_init_array+0x44>)
 8007aec:	f005 fc28 	bl	800d340 <_init>
 8007af0:	1b64      	subs	r4, r4, r5
 8007af2:	10a4      	asrs	r4, r4, #2
 8007af4:	2600      	movs	r6, #0
 8007af6:	42a6      	cmp	r6, r4
 8007af8:	d105      	bne.n	8007b06 <__libc_init_array+0x2e>
 8007afa:	bd70      	pop	{r4, r5, r6, pc}
 8007afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b00:	4798      	blx	r3
 8007b02:	3601      	adds	r6, #1
 8007b04:	e7ee      	b.n	8007ae4 <__libc_init_array+0xc>
 8007b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0a:	4798      	blx	r3
 8007b0c:	3601      	adds	r6, #1
 8007b0e:	e7f2      	b.n	8007af6 <__libc_init_array+0x1e>
 8007b10:	0800d930 	.word	0x0800d930
 8007b14:	0800d930 	.word	0x0800d930
 8007b18:	0800d930 	.word	0x0800d930
 8007b1c:	0800d938 	.word	0x0800d938

08007b20 <__retarget_lock_init_recursive>:
 8007b20:	4770      	bx	lr

08007b22 <__retarget_lock_close_recursive>:
 8007b22:	4770      	bx	lr

08007b24 <__retarget_lock_acquire_recursive>:
 8007b24:	4770      	bx	lr

08007b26 <__retarget_lock_release_recursive>:
 8007b26:	4770      	bx	lr

08007b28 <register_fini>:
 8007b28:	4b02      	ldr	r3, [pc, #8]	; (8007b34 <register_fini+0xc>)
 8007b2a:	b113      	cbz	r3, 8007b32 <register_fini+0xa>
 8007b2c:	4802      	ldr	r0, [pc, #8]	; (8007b38 <register_fini+0x10>)
 8007b2e:	f000 b805 	b.w	8007b3c <atexit>
 8007b32:	4770      	bx	lr
 8007b34:	00000000 	.word	0x00000000
 8007b38:	08009841 	.word	0x08009841

08007b3c <atexit>:
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	4601      	mov	r1, r0
 8007b40:	461a      	mov	r2, r3
 8007b42:	4618      	mov	r0, r3
 8007b44:	f001 bed4 	b.w	80098f0 <__register_exitproc>

08007b48 <_malloc_trim_r>:
 8007b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4c:	4606      	mov	r6, r0
 8007b4e:	2008      	movs	r0, #8
 8007b50:	460c      	mov	r4, r1
 8007b52:	f001 fe89 	bl	8009868 <sysconf>
 8007b56:	4f23      	ldr	r7, [pc, #140]	; (8007be4 <_malloc_trim_r+0x9c>)
 8007b58:	4680      	mov	r8, r0
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	f000 fb42 	bl	80081e4 <__malloc_lock>
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	685d      	ldr	r5, [r3, #4]
 8007b64:	f025 0503 	bic.w	r5, r5, #3
 8007b68:	1b2c      	subs	r4, r5, r4
 8007b6a:	3c11      	subs	r4, #17
 8007b6c:	4444      	add	r4, r8
 8007b6e:	fbb4 f4f8 	udiv	r4, r4, r8
 8007b72:	3c01      	subs	r4, #1
 8007b74:	fb08 f404 	mul.w	r4, r8, r4
 8007b78:	45a0      	cmp	r8, r4
 8007b7a:	dd05      	ble.n	8007b88 <_malloc_trim_r+0x40>
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f000 fb37 	bl	80081f0 <__malloc_unlock>
 8007b82:	2000      	movs	r0, #0
 8007b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f001 fe48 	bl	8009820 <_sbrk_r>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	442b      	add	r3, r5
 8007b94:	4298      	cmp	r0, r3
 8007b96:	d1f1      	bne.n	8007b7c <_malloc_trim_r+0x34>
 8007b98:	4261      	negs	r1, r4
 8007b9a:	4630      	mov	r0, r6
 8007b9c:	f001 fe40 	bl	8009820 <_sbrk_r>
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d110      	bne.n	8007bc6 <_malloc_trim_r+0x7e>
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f001 fe3a 	bl	8009820 <_sbrk_r>
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	1a83      	subs	r3, r0, r2
 8007bb0:	2b0f      	cmp	r3, #15
 8007bb2:	dde3      	ble.n	8007b7c <_malloc_trim_r+0x34>
 8007bb4:	490c      	ldr	r1, [pc, #48]	; (8007be8 <_malloc_trim_r+0xa0>)
 8007bb6:	6809      	ldr	r1, [r1, #0]
 8007bb8:	1a40      	subs	r0, r0, r1
 8007bba:	490c      	ldr	r1, [pc, #48]	; (8007bec <_malloc_trim_r+0xa4>)
 8007bbc:	f043 0301 	orr.w	r3, r3, #1
 8007bc0:	6008      	str	r0, [r1, #0]
 8007bc2:	6053      	str	r3, [r2, #4]
 8007bc4:	e7da      	b.n	8007b7c <_malloc_trim_r+0x34>
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	4a08      	ldr	r2, [pc, #32]	; (8007bec <_malloc_trim_r+0xa4>)
 8007bca:	1b2d      	subs	r5, r5, r4
 8007bcc:	f045 0501 	orr.w	r5, r5, #1
 8007bd0:	605d      	str	r5, [r3, #4]
 8007bd2:	6813      	ldr	r3, [r2, #0]
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	1b1b      	subs	r3, r3, r4
 8007bd8:	6013      	str	r3, [r2, #0]
 8007bda:	f000 fb09 	bl	80081f0 <__malloc_unlock>
 8007bde:	2001      	movs	r0, #1
 8007be0:	e7d0      	b.n	8007b84 <_malloc_trim_r+0x3c>
 8007be2:	bf00      	nop
 8007be4:	20000230 	.word	0x20000230
 8007be8:	20000638 	.word	0x20000638
 8007bec:	200024fc 	.word	0x200024fc

08007bf0 <_free_r>:
 8007bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	460f      	mov	r7, r1
 8007bf6:	2900      	cmp	r1, #0
 8007bf8:	f000 80b1 	beq.w	8007d5e <_free_r+0x16e>
 8007bfc:	f000 faf2 	bl	80081e4 <__malloc_lock>
 8007c00:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007c04:	4856      	ldr	r0, [pc, #344]	; (8007d60 <_free_r+0x170>)
 8007c06:	f022 0401 	bic.w	r4, r2, #1
 8007c0a:	f1a7 0308 	sub.w	r3, r7, #8
 8007c0e:	eb03 0c04 	add.w	ip, r3, r4
 8007c12:	6881      	ldr	r1, [r0, #8]
 8007c14:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007c18:	4561      	cmp	r1, ip
 8007c1a:	f026 0603 	bic.w	r6, r6, #3
 8007c1e:	f002 0201 	and.w	r2, r2, #1
 8007c22:	d11b      	bne.n	8007c5c <_free_r+0x6c>
 8007c24:	4426      	add	r6, r4
 8007c26:	b93a      	cbnz	r2, 8007c38 <_free_r+0x48>
 8007c28:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8007c2c:	1a9b      	subs	r3, r3, r2
 8007c2e:	4416      	add	r6, r2
 8007c30:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8007c34:	60ca      	str	r2, [r1, #12]
 8007c36:	6091      	str	r1, [r2, #8]
 8007c38:	f046 0201 	orr.w	r2, r6, #1
 8007c3c:	605a      	str	r2, [r3, #4]
 8007c3e:	6083      	str	r3, [r0, #8]
 8007c40:	4b48      	ldr	r3, [pc, #288]	; (8007d64 <_free_r+0x174>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	42b3      	cmp	r3, r6
 8007c46:	d804      	bhi.n	8007c52 <_free_r+0x62>
 8007c48:	4b47      	ldr	r3, [pc, #284]	; (8007d68 <_free_r+0x178>)
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	6819      	ldr	r1, [r3, #0]
 8007c4e:	f7ff ff7b 	bl	8007b48 <_malloc_trim_r>
 8007c52:	4628      	mov	r0, r5
 8007c54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c58:	f000 baca 	b.w	80081f0 <__malloc_unlock>
 8007c5c:	f8cc 6004 	str.w	r6, [ip, #4]
 8007c60:	2a00      	cmp	r2, #0
 8007c62:	d138      	bne.n	8007cd6 <_free_r+0xe6>
 8007c64:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8007c68:	1a5b      	subs	r3, r3, r1
 8007c6a:	440c      	add	r4, r1
 8007c6c:	6899      	ldr	r1, [r3, #8]
 8007c6e:	f100 0708 	add.w	r7, r0, #8
 8007c72:	42b9      	cmp	r1, r7
 8007c74:	d031      	beq.n	8007cda <_free_r+0xea>
 8007c76:	68df      	ldr	r7, [r3, #12]
 8007c78:	60cf      	str	r7, [r1, #12]
 8007c7a:	60b9      	str	r1, [r7, #8]
 8007c7c:	eb0c 0106 	add.w	r1, ip, r6
 8007c80:	6849      	ldr	r1, [r1, #4]
 8007c82:	07c9      	lsls	r1, r1, #31
 8007c84:	d40b      	bmi.n	8007c9e <_free_r+0xae>
 8007c86:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007c8a:	4434      	add	r4, r6
 8007c8c:	bb3a      	cbnz	r2, 8007cde <_free_r+0xee>
 8007c8e:	4e37      	ldr	r6, [pc, #220]	; (8007d6c <_free_r+0x17c>)
 8007c90:	42b1      	cmp	r1, r6
 8007c92:	d124      	bne.n	8007cde <_free_r+0xee>
 8007c94:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c98:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f044 0101 	orr.w	r1, r4, #1
 8007ca2:	6059      	str	r1, [r3, #4]
 8007ca4:	511c      	str	r4, [r3, r4]
 8007ca6:	2a00      	cmp	r2, #0
 8007ca8:	d1d3      	bne.n	8007c52 <_free_r+0x62>
 8007caa:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8007cae:	d21b      	bcs.n	8007ce8 <_free_r+0xf8>
 8007cb0:	08e2      	lsrs	r2, r4, #3
 8007cb2:	2101      	movs	r1, #1
 8007cb4:	0964      	lsrs	r4, r4, #5
 8007cb6:	40a1      	lsls	r1, r4
 8007cb8:	6844      	ldr	r4, [r0, #4]
 8007cba:	3201      	adds	r2, #1
 8007cbc:	4321      	orrs	r1, r4
 8007cbe:	6041      	str	r1, [r0, #4]
 8007cc0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8007cc4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8007cc8:	3908      	subs	r1, #8
 8007cca:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8007cce:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8007cd2:	60e3      	str	r3, [r4, #12]
 8007cd4:	e7bd      	b.n	8007c52 <_free_r+0x62>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	e7d0      	b.n	8007c7c <_free_r+0x8c>
 8007cda:	2201      	movs	r2, #1
 8007cdc:	e7ce      	b.n	8007c7c <_free_r+0x8c>
 8007cde:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8007ce2:	60ce      	str	r6, [r1, #12]
 8007ce4:	60b1      	str	r1, [r6, #8]
 8007ce6:	e7da      	b.n	8007c9e <_free_r+0xae>
 8007ce8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8007cec:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8007cf0:	d214      	bcs.n	8007d1c <_free_r+0x12c>
 8007cf2:	09a2      	lsrs	r2, r4, #6
 8007cf4:	3238      	adds	r2, #56	; 0x38
 8007cf6:	1c51      	adds	r1, r2, #1
 8007cf8:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8007cfc:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8007d00:	428e      	cmp	r6, r1
 8007d02:	d125      	bne.n	8007d50 <_free_r+0x160>
 8007d04:	2401      	movs	r4, #1
 8007d06:	1092      	asrs	r2, r2, #2
 8007d08:	fa04 f202 	lsl.w	r2, r4, r2
 8007d0c:	6844      	ldr	r4, [r0, #4]
 8007d0e:	4322      	orrs	r2, r4
 8007d10:	6042      	str	r2, [r0, #4]
 8007d12:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8007d16:	60b3      	str	r3, [r6, #8]
 8007d18:	60cb      	str	r3, [r1, #12]
 8007d1a:	e79a      	b.n	8007c52 <_free_r+0x62>
 8007d1c:	2a14      	cmp	r2, #20
 8007d1e:	d801      	bhi.n	8007d24 <_free_r+0x134>
 8007d20:	325b      	adds	r2, #91	; 0x5b
 8007d22:	e7e8      	b.n	8007cf6 <_free_r+0x106>
 8007d24:	2a54      	cmp	r2, #84	; 0x54
 8007d26:	d802      	bhi.n	8007d2e <_free_r+0x13e>
 8007d28:	0b22      	lsrs	r2, r4, #12
 8007d2a:	326e      	adds	r2, #110	; 0x6e
 8007d2c:	e7e3      	b.n	8007cf6 <_free_r+0x106>
 8007d2e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007d32:	d802      	bhi.n	8007d3a <_free_r+0x14a>
 8007d34:	0be2      	lsrs	r2, r4, #15
 8007d36:	3277      	adds	r2, #119	; 0x77
 8007d38:	e7dd      	b.n	8007cf6 <_free_r+0x106>
 8007d3a:	f240 5154 	movw	r1, #1364	; 0x554
 8007d3e:	428a      	cmp	r2, r1
 8007d40:	bf9a      	itte	ls
 8007d42:	0ca2      	lsrls	r2, r4, #18
 8007d44:	327c      	addls	r2, #124	; 0x7c
 8007d46:	227e      	movhi	r2, #126	; 0x7e
 8007d48:	e7d5      	b.n	8007cf6 <_free_r+0x106>
 8007d4a:	6889      	ldr	r1, [r1, #8]
 8007d4c:	428e      	cmp	r6, r1
 8007d4e:	d004      	beq.n	8007d5a <_free_r+0x16a>
 8007d50:	684a      	ldr	r2, [r1, #4]
 8007d52:	f022 0203 	bic.w	r2, r2, #3
 8007d56:	42a2      	cmp	r2, r4
 8007d58:	d8f7      	bhi.n	8007d4a <_free_r+0x15a>
 8007d5a:	68ce      	ldr	r6, [r1, #12]
 8007d5c:	e7d9      	b.n	8007d12 <_free_r+0x122>
 8007d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d60:	20000230 	.word	0x20000230
 8007d64:	2000063c 	.word	0x2000063c
 8007d68:	2000252c 	.word	0x2000252c
 8007d6c:	20000238 	.word	0x20000238

08007d70 <_malloc_r>:
 8007d70:	f101 030b 	add.w	r3, r1, #11
 8007d74:	2b16      	cmp	r3, #22
 8007d76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	d906      	bls.n	8007d8c <_malloc_r+0x1c>
 8007d7e:	f033 0707 	bics.w	r7, r3, #7
 8007d82:	d504      	bpl.n	8007d8e <_malloc_r+0x1e>
 8007d84:	230c      	movs	r3, #12
 8007d86:	602b      	str	r3, [r5, #0]
 8007d88:	2400      	movs	r4, #0
 8007d8a:	e1a3      	b.n	80080d4 <_malloc_r+0x364>
 8007d8c:	2710      	movs	r7, #16
 8007d8e:	42b9      	cmp	r1, r7
 8007d90:	d8f8      	bhi.n	8007d84 <_malloc_r+0x14>
 8007d92:	4628      	mov	r0, r5
 8007d94:	f000 fa26 	bl	80081e4 <__malloc_lock>
 8007d98:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8007d9c:	4eaf      	ldr	r6, [pc, #700]	; (800805c <_malloc_r+0x2ec>)
 8007d9e:	d237      	bcs.n	8007e10 <_malloc_r+0xa0>
 8007da0:	f107 0208 	add.w	r2, r7, #8
 8007da4:	4432      	add	r2, r6
 8007da6:	f1a2 0108 	sub.w	r1, r2, #8
 8007daa:	6854      	ldr	r4, [r2, #4]
 8007dac:	428c      	cmp	r4, r1
 8007dae:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8007db2:	d102      	bne.n	8007dba <_malloc_r+0x4a>
 8007db4:	68d4      	ldr	r4, [r2, #12]
 8007db6:	42a2      	cmp	r2, r4
 8007db8:	d010      	beq.n	8007ddc <_malloc_r+0x6c>
 8007dba:	6863      	ldr	r3, [r4, #4]
 8007dbc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007dc0:	f023 0303 	bic.w	r3, r3, #3
 8007dc4:	60ca      	str	r2, [r1, #12]
 8007dc6:	4423      	add	r3, r4
 8007dc8:	6091      	str	r1, [r2, #8]
 8007dca:	685a      	ldr	r2, [r3, #4]
 8007dcc:	f042 0201 	orr.w	r2, r2, #1
 8007dd0:	605a      	str	r2, [r3, #4]
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f000 fa0c 	bl	80081f0 <__malloc_unlock>
 8007dd8:	3408      	adds	r4, #8
 8007dda:	e17b      	b.n	80080d4 <_malloc_r+0x364>
 8007ddc:	3302      	adds	r3, #2
 8007dde:	6934      	ldr	r4, [r6, #16]
 8007de0:	499f      	ldr	r1, [pc, #636]	; (8008060 <_malloc_r+0x2f0>)
 8007de2:	428c      	cmp	r4, r1
 8007de4:	d077      	beq.n	8007ed6 <_malloc_r+0x166>
 8007de6:	6862      	ldr	r2, [r4, #4]
 8007de8:	f022 0c03 	bic.w	ip, r2, #3
 8007dec:	ebac 0007 	sub.w	r0, ip, r7
 8007df0:	280f      	cmp	r0, #15
 8007df2:	dd48      	ble.n	8007e86 <_malloc_r+0x116>
 8007df4:	19e2      	adds	r2, r4, r7
 8007df6:	f040 0301 	orr.w	r3, r0, #1
 8007dfa:	f047 0701 	orr.w	r7, r7, #1
 8007dfe:	6067      	str	r7, [r4, #4]
 8007e00:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8007e04:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8007e08:	6053      	str	r3, [r2, #4]
 8007e0a:	f844 000c 	str.w	r0, [r4, ip]
 8007e0e:	e7e0      	b.n	8007dd2 <_malloc_r+0x62>
 8007e10:	0a7b      	lsrs	r3, r7, #9
 8007e12:	d02a      	beq.n	8007e6a <_malloc_r+0xfa>
 8007e14:	2b04      	cmp	r3, #4
 8007e16:	d812      	bhi.n	8007e3e <_malloc_r+0xce>
 8007e18:	09bb      	lsrs	r3, r7, #6
 8007e1a:	3338      	adds	r3, #56	; 0x38
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8007e22:	f1a2 0c08 	sub.w	ip, r2, #8
 8007e26:	6854      	ldr	r4, [r2, #4]
 8007e28:	4564      	cmp	r4, ip
 8007e2a:	d006      	beq.n	8007e3a <_malloc_r+0xca>
 8007e2c:	6862      	ldr	r2, [r4, #4]
 8007e2e:	f022 0203 	bic.w	r2, r2, #3
 8007e32:	1bd0      	subs	r0, r2, r7
 8007e34:	280f      	cmp	r0, #15
 8007e36:	dd1c      	ble.n	8007e72 <_malloc_r+0x102>
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	e7cf      	b.n	8007dde <_malloc_r+0x6e>
 8007e3e:	2b14      	cmp	r3, #20
 8007e40:	d801      	bhi.n	8007e46 <_malloc_r+0xd6>
 8007e42:	335b      	adds	r3, #91	; 0x5b
 8007e44:	e7ea      	b.n	8007e1c <_malloc_r+0xac>
 8007e46:	2b54      	cmp	r3, #84	; 0x54
 8007e48:	d802      	bhi.n	8007e50 <_malloc_r+0xe0>
 8007e4a:	0b3b      	lsrs	r3, r7, #12
 8007e4c:	336e      	adds	r3, #110	; 0x6e
 8007e4e:	e7e5      	b.n	8007e1c <_malloc_r+0xac>
 8007e50:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007e54:	d802      	bhi.n	8007e5c <_malloc_r+0xec>
 8007e56:	0bfb      	lsrs	r3, r7, #15
 8007e58:	3377      	adds	r3, #119	; 0x77
 8007e5a:	e7df      	b.n	8007e1c <_malloc_r+0xac>
 8007e5c:	f240 5254 	movw	r2, #1364	; 0x554
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d804      	bhi.n	8007e6e <_malloc_r+0xfe>
 8007e64:	0cbb      	lsrs	r3, r7, #18
 8007e66:	337c      	adds	r3, #124	; 0x7c
 8007e68:	e7d8      	b.n	8007e1c <_malloc_r+0xac>
 8007e6a:	233f      	movs	r3, #63	; 0x3f
 8007e6c:	e7d6      	b.n	8007e1c <_malloc_r+0xac>
 8007e6e:	237e      	movs	r3, #126	; 0x7e
 8007e70:	e7d4      	b.n	8007e1c <_malloc_r+0xac>
 8007e72:	2800      	cmp	r0, #0
 8007e74:	68e1      	ldr	r1, [r4, #12]
 8007e76:	db04      	blt.n	8007e82 <_malloc_r+0x112>
 8007e78:	68a3      	ldr	r3, [r4, #8]
 8007e7a:	60d9      	str	r1, [r3, #12]
 8007e7c:	608b      	str	r3, [r1, #8]
 8007e7e:	18a3      	adds	r3, r4, r2
 8007e80:	e7a3      	b.n	8007dca <_malloc_r+0x5a>
 8007e82:	460c      	mov	r4, r1
 8007e84:	e7d0      	b.n	8007e28 <_malloc_r+0xb8>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8007e8c:	db07      	blt.n	8007e9e <_malloc_r+0x12e>
 8007e8e:	44a4      	add	ip, r4
 8007e90:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007e94:	f043 0301 	orr.w	r3, r3, #1
 8007e98:	f8cc 3004 	str.w	r3, [ip, #4]
 8007e9c:	e799      	b.n	8007dd2 <_malloc_r+0x62>
 8007e9e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8007ea2:	6870      	ldr	r0, [r6, #4]
 8007ea4:	f080 8095 	bcs.w	8007fd2 <_malloc_r+0x262>
 8007ea8:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8007eac:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8007eb0:	f04f 0c01 	mov.w	ip, #1
 8007eb4:	3201      	adds	r2, #1
 8007eb6:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007eba:	ea4c 0000 	orr.w	r0, ip, r0
 8007ebe:	6070      	str	r0, [r6, #4]
 8007ec0:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8007ec4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8007ec8:	3808      	subs	r0, #8
 8007eca:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8007ece:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8007ed2:	f8cc 400c 	str.w	r4, [ip, #12]
 8007ed6:	1098      	asrs	r0, r3, #2
 8007ed8:	2201      	movs	r2, #1
 8007eda:	4082      	lsls	r2, r0
 8007edc:	6870      	ldr	r0, [r6, #4]
 8007ede:	4290      	cmp	r0, r2
 8007ee0:	d326      	bcc.n	8007f30 <_malloc_r+0x1c0>
 8007ee2:	4210      	tst	r0, r2
 8007ee4:	d106      	bne.n	8007ef4 <_malloc_r+0x184>
 8007ee6:	f023 0303 	bic.w	r3, r3, #3
 8007eea:	0052      	lsls	r2, r2, #1
 8007eec:	4210      	tst	r0, r2
 8007eee:	f103 0304 	add.w	r3, r3, #4
 8007ef2:	d0fa      	beq.n	8007eea <_malloc_r+0x17a>
 8007ef4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8007ef8:	46c1      	mov	r9, r8
 8007efa:	469e      	mov	lr, r3
 8007efc:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8007f00:	454c      	cmp	r4, r9
 8007f02:	f040 80b9 	bne.w	8008078 <_malloc_r+0x308>
 8007f06:	f10e 0e01 	add.w	lr, lr, #1
 8007f0a:	f01e 0f03 	tst.w	lr, #3
 8007f0e:	f109 0908 	add.w	r9, r9, #8
 8007f12:	d1f3      	bne.n	8007efc <_malloc_r+0x18c>
 8007f14:	0798      	lsls	r0, r3, #30
 8007f16:	f040 80e3 	bne.w	80080e0 <_malloc_r+0x370>
 8007f1a:	6873      	ldr	r3, [r6, #4]
 8007f1c:	ea23 0302 	bic.w	r3, r3, r2
 8007f20:	6073      	str	r3, [r6, #4]
 8007f22:	6870      	ldr	r0, [r6, #4]
 8007f24:	0052      	lsls	r2, r2, #1
 8007f26:	4290      	cmp	r0, r2
 8007f28:	d302      	bcc.n	8007f30 <_malloc_r+0x1c0>
 8007f2a:	2a00      	cmp	r2, #0
 8007f2c:	f040 80e5 	bne.w	80080fa <_malloc_r+0x38a>
 8007f30:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8007f34:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007f38:	f023 0903 	bic.w	r9, r3, #3
 8007f3c:	45b9      	cmp	r9, r7
 8007f3e:	d304      	bcc.n	8007f4a <_malloc_r+0x1da>
 8007f40:	eba9 0207 	sub.w	r2, r9, r7
 8007f44:	2a0f      	cmp	r2, #15
 8007f46:	f300 8141 	bgt.w	80081cc <_malloc_r+0x45c>
 8007f4a:	4b46      	ldr	r3, [pc, #280]	; (8008064 <_malloc_r+0x2f4>)
 8007f4c:	6819      	ldr	r1, [r3, #0]
 8007f4e:	3110      	adds	r1, #16
 8007f50:	4439      	add	r1, r7
 8007f52:	2008      	movs	r0, #8
 8007f54:	9101      	str	r1, [sp, #4]
 8007f56:	f001 fc87 	bl	8009868 <sysconf>
 8007f5a:	4a43      	ldr	r2, [pc, #268]	; (8008068 <_malloc_r+0x2f8>)
 8007f5c:	9901      	ldr	r1, [sp, #4]
 8007f5e:	6813      	ldr	r3, [r2, #0]
 8007f60:	3301      	adds	r3, #1
 8007f62:	bf1f      	itttt	ne
 8007f64:	f101 31ff 	addne.w	r1, r1, #4294967295
 8007f68:	1809      	addne	r1, r1, r0
 8007f6a:	4243      	negne	r3, r0
 8007f6c:	4019      	andne	r1, r3
 8007f6e:	4680      	mov	r8, r0
 8007f70:	4628      	mov	r0, r5
 8007f72:	9101      	str	r1, [sp, #4]
 8007f74:	f001 fc54 	bl	8009820 <_sbrk_r>
 8007f78:	1c42      	adds	r2, r0, #1
 8007f7a:	eb0a 0b09 	add.w	fp, sl, r9
 8007f7e:	4604      	mov	r4, r0
 8007f80:	f000 80f7 	beq.w	8008172 <_malloc_r+0x402>
 8007f84:	4583      	cmp	fp, r0
 8007f86:	9901      	ldr	r1, [sp, #4]
 8007f88:	4a37      	ldr	r2, [pc, #220]	; (8008068 <_malloc_r+0x2f8>)
 8007f8a:	d902      	bls.n	8007f92 <_malloc_r+0x222>
 8007f8c:	45b2      	cmp	sl, r6
 8007f8e:	f040 80f0 	bne.w	8008172 <_malloc_r+0x402>
 8007f92:	4b36      	ldr	r3, [pc, #216]	; (800806c <_malloc_r+0x2fc>)
 8007f94:	6818      	ldr	r0, [r3, #0]
 8007f96:	45a3      	cmp	fp, r4
 8007f98:	eb00 0e01 	add.w	lr, r0, r1
 8007f9c:	f8c3 e000 	str.w	lr, [r3]
 8007fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8007fa4:	f040 80ab 	bne.w	80080fe <_malloc_r+0x38e>
 8007fa8:	ea1b 0f0c 	tst.w	fp, ip
 8007fac:	f040 80a7 	bne.w	80080fe <_malloc_r+0x38e>
 8007fb0:	68b2      	ldr	r2, [r6, #8]
 8007fb2:	4449      	add	r1, r9
 8007fb4:	f041 0101 	orr.w	r1, r1, #1
 8007fb8:	6051      	str	r1, [r2, #4]
 8007fba:	4a2d      	ldr	r2, [pc, #180]	; (8008070 <_malloc_r+0x300>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6811      	ldr	r1, [r2, #0]
 8007fc0:	428b      	cmp	r3, r1
 8007fc2:	bf88      	it	hi
 8007fc4:	6013      	strhi	r3, [r2, #0]
 8007fc6:	4a2b      	ldr	r2, [pc, #172]	; (8008074 <_malloc_r+0x304>)
 8007fc8:	6811      	ldr	r1, [r2, #0]
 8007fca:	428b      	cmp	r3, r1
 8007fcc:	bf88      	it	hi
 8007fce:	6013      	strhi	r3, [r2, #0]
 8007fd0:	e0cf      	b.n	8008172 <_malloc_r+0x402>
 8007fd2:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8007fd6:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8007fda:	d218      	bcs.n	800800e <_malloc_r+0x29e>
 8007fdc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8007fe0:	3238      	adds	r2, #56	; 0x38
 8007fe2:	f102 0e01 	add.w	lr, r2, #1
 8007fe6:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8007fea:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8007fee:	45f0      	cmp	r8, lr
 8007ff0:	d12b      	bne.n	800804a <_malloc_r+0x2da>
 8007ff2:	1092      	asrs	r2, r2, #2
 8007ff4:	f04f 0c01 	mov.w	ip, #1
 8007ff8:	fa0c f202 	lsl.w	r2, ip, r2
 8007ffc:	4302      	orrs	r2, r0
 8007ffe:	6072      	str	r2, [r6, #4]
 8008000:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8008004:	f8c8 4008 	str.w	r4, [r8, #8]
 8008008:	f8ce 400c 	str.w	r4, [lr, #12]
 800800c:	e763      	b.n	8007ed6 <_malloc_r+0x166>
 800800e:	2a14      	cmp	r2, #20
 8008010:	d801      	bhi.n	8008016 <_malloc_r+0x2a6>
 8008012:	325b      	adds	r2, #91	; 0x5b
 8008014:	e7e5      	b.n	8007fe2 <_malloc_r+0x272>
 8008016:	2a54      	cmp	r2, #84	; 0x54
 8008018:	d803      	bhi.n	8008022 <_malloc_r+0x2b2>
 800801a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800801e:	326e      	adds	r2, #110	; 0x6e
 8008020:	e7df      	b.n	8007fe2 <_malloc_r+0x272>
 8008022:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008026:	d803      	bhi.n	8008030 <_malloc_r+0x2c0>
 8008028:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800802c:	3277      	adds	r2, #119	; 0x77
 800802e:	e7d8      	b.n	8007fe2 <_malloc_r+0x272>
 8008030:	f240 5e54 	movw	lr, #1364	; 0x554
 8008034:	4572      	cmp	r2, lr
 8008036:	bf9a      	itte	ls
 8008038:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800803c:	327c      	addls	r2, #124	; 0x7c
 800803e:	227e      	movhi	r2, #126	; 0x7e
 8008040:	e7cf      	b.n	8007fe2 <_malloc_r+0x272>
 8008042:	f8de e008 	ldr.w	lr, [lr, #8]
 8008046:	45f0      	cmp	r8, lr
 8008048:	d005      	beq.n	8008056 <_malloc_r+0x2e6>
 800804a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800804e:	f022 0203 	bic.w	r2, r2, #3
 8008052:	4562      	cmp	r2, ip
 8008054:	d8f5      	bhi.n	8008042 <_malloc_r+0x2d2>
 8008056:	f8de 800c 	ldr.w	r8, [lr, #12]
 800805a:	e7d1      	b.n	8008000 <_malloc_r+0x290>
 800805c:	20000230 	.word	0x20000230
 8008060:	20000238 	.word	0x20000238
 8008064:	2000252c 	.word	0x2000252c
 8008068:	20000638 	.word	0x20000638
 800806c:	200024fc 	.word	0x200024fc
 8008070:	20002524 	.word	0x20002524
 8008074:	20002528 	.word	0x20002528
 8008078:	6860      	ldr	r0, [r4, #4]
 800807a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800807e:	f020 0003 	bic.w	r0, r0, #3
 8008082:	eba0 0a07 	sub.w	sl, r0, r7
 8008086:	f1ba 0f0f 	cmp.w	sl, #15
 800808a:	dd12      	ble.n	80080b2 <_malloc_r+0x342>
 800808c:	68a3      	ldr	r3, [r4, #8]
 800808e:	19e2      	adds	r2, r4, r7
 8008090:	f047 0701 	orr.w	r7, r7, #1
 8008094:	6067      	str	r7, [r4, #4]
 8008096:	f8c3 c00c 	str.w	ip, [r3, #12]
 800809a:	f8cc 3008 	str.w	r3, [ip, #8]
 800809e:	f04a 0301 	orr.w	r3, sl, #1
 80080a2:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80080a6:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80080aa:	6053      	str	r3, [r2, #4]
 80080ac:	f844 a000 	str.w	sl, [r4, r0]
 80080b0:	e68f      	b.n	8007dd2 <_malloc_r+0x62>
 80080b2:	f1ba 0f00 	cmp.w	sl, #0
 80080b6:	db11      	blt.n	80080dc <_malloc_r+0x36c>
 80080b8:	4420      	add	r0, r4
 80080ba:	6843      	ldr	r3, [r0, #4]
 80080bc:	f043 0301 	orr.w	r3, r3, #1
 80080c0:	6043      	str	r3, [r0, #4]
 80080c2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80080c6:	4628      	mov	r0, r5
 80080c8:	f8c3 c00c 	str.w	ip, [r3, #12]
 80080cc:	f8cc 3008 	str.w	r3, [ip, #8]
 80080d0:	f000 f88e 	bl	80081f0 <__malloc_unlock>
 80080d4:	4620      	mov	r0, r4
 80080d6:	b003      	add	sp, #12
 80080d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080dc:	4664      	mov	r4, ip
 80080de:	e70f      	b.n	8007f00 <_malloc_r+0x190>
 80080e0:	f858 0908 	ldr.w	r0, [r8], #-8
 80080e4:	4540      	cmp	r0, r8
 80080e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80080ea:	f43f af13 	beq.w	8007f14 <_malloc_r+0x1a4>
 80080ee:	e718      	b.n	8007f22 <_malloc_r+0x1b2>
 80080f0:	3304      	adds	r3, #4
 80080f2:	0052      	lsls	r2, r2, #1
 80080f4:	4210      	tst	r0, r2
 80080f6:	d0fb      	beq.n	80080f0 <_malloc_r+0x380>
 80080f8:	e6fc      	b.n	8007ef4 <_malloc_r+0x184>
 80080fa:	4673      	mov	r3, lr
 80080fc:	e7fa      	b.n	80080f4 <_malloc_r+0x384>
 80080fe:	6810      	ldr	r0, [r2, #0]
 8008100:	3001      	adds	r0, #1
 8008102:	bf1b      	ittet	ne
 8008104:	eba4 0b0b 	subne.w	fp, r4, fp
 8008108:	eb0b 020e 	addne.w	r2, fp, lr
 800810c:	6014      	streq	r4, [r2, #0]
 800810e:	601a      	strne	r2, [r3, #0]
 8008110:	f014 0b07 	ands.w	fp, r4, #7
 8008114:	bf1a      	itte	ne
 8008116:	f1cb 0008 	rsbne	r0, fp, #8
 800811a:	1824      	addne	r4, r4, r0
 800811c:	4658      	moveq	r0, fp
 800811e:	1862      	adds	r2, r4, r1
 8008120:	ea02 010c 	and.w	r1, r2, ip
 8008124:	4480      	add	r8, r0
 8008126:	eba8 0801 	sub.w	r8, r8, r1
 800812a:	ea08 080c 	and.w	r8, r8, ip
 800812e:	4641      	mov	r1, r8
 8008130:	4628      	mov	r0, r5
 8008132:	9201      	str	r2, [sp, #4]
 8008134:	f001 fb74 	bl	8009820 <_sbrk_r>
 8008138:	1c43      	adds	r3, r0, #1
 800813a:	9a01      	ldr	r2, [sp, #4]
 800813c:	4b28      	ldr	r3, [pc, #160]	; (80081e0 <_malloc_r+0x470>)
 800813e:	d107      	bne.n	8008150 <_malloc_r+0x3e0>
 8008140:	f1bb 0f00 	cmp.w	fp, #0
 8008144:	d023      	beq.n	800818e <_malloc_r+0x41e>
 8008146:	f1ab 0008 	sub.w	r0, fp, #8
 800814a:	4410      	add	r0, r2
 800814c:	f04f 0800 	mov.w	r8, #0
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	60b4      	str	r4, [r6, #8]
 8008154:	1b00      	subs	r0, r0, r4
 8008156:	4440      	add	r0, r8
 8008158:	4442      	add	r2, r8
 800815a:	f040 0001 	orr.w	r0, r0, #1
 800815e:	45b2      	cmp	sl, r6
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	6060      	str	r0, [r4, #4]
 8008164:	f43f af29 	beq.w	8007fba <_malloc_r+0x24a>
 8008168:	f1b9 0f0f 	cmp.w	r9, #15
 800816c:	d812      	bhi.n	8008194 <_malloc_r+0x424>
 800816e:	2301      	movs	r3, #1
 8008170:	6063      	str	r3, [r4, #4]
 8008172:	68b3      	ldr	r3, [r6, #8]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f023 0303 	bic.w	r3, r3, #3
 800817a:	42bb      	cmp	r3, r7
 800817c:	eba3 0207 	sub.w	r2, r3, r7
 8008180:	d301      	bcc.n	8008186 <_malloc_r+0x416>
 8008182:	2a0f      	cmp	r2, #15
 8008184:	dc22      	bgt.n	80081cc <_malloc_r+0x45c>
 8008186:	4628      	mov	r0, r5
 8008188:	f000 f832 	bl	80081f0 <__malloc_unlock>
 800818c:	e5fc      	b.n	8007d88 <_malloc_r+0x18>
 800818e:	4610      	mov	r0, r2
 8008190:	46d8      	mov	r8, fp
 8008192:	e7dd      	b.n	8008150 <_malloc_r+0x3e0>
 8008194:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008198:	f1a9 090c 	sub.w	r9, r9, #12
 800819c:	f029 0907 	bic.w	r9, r9, #7
 80081a0:	f002 0201 	and.w	r2, r2, #1
 80081a4:	ea42 0209 	orr.w	r2, r2, r9
 80081a8:	f8ca 2004 	str.w	r2, [sl, #4]
 80081ac:	2105      	movs	r1, #5
 80081ae:	eb0a 0209 	add.w	r2, sl, r9
 80081b2:	f1b9 0f0f 	cmp.w	r9, #15
 80081b6:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80081ba:	f67f aefe 	bls.w	8007fba <_malloc_r+0x24a>
 80081be:	f10a 0108 	add.w	r1, sl, #8
 80081c2:	4628      	mov	r0, r5
 80081c4:	f7ff fd14 	bl	8007bf0 <_free_r>
 80081c8:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <_malloc_r+0x470>)
 80081ca:	e6f6      	b.n	8007fba <_malloc_r+0x24a>
 80081cc:	68b4      	ldr	r4, [r6, #8]
 80081ce:	f047 0301 	orr.w	r3, r7, #1
 80081d2:	4427      	add	r7, r4
 80081d4:	f042 0201 	orr.w	r2, r2, #1
 80081d8:	6063      	str	r3, [r4, #4]
 80081da:	60b7      	str	r7, [r6, #8]
 80081dc:	607a      	str	r2, [r7, #4]
 80081de:	e5f8      	b.n	8007dd2 <_malloc_r+0x62>
 80081e0:	200024fc 	.word	0x200024fc

080081e4 <__malloc_lock>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__malloc_lock+0x8>)
 80081e6:	f7ff bc9d 	b.w	8007b24 <__retarget_lock_acquire_recursive>
 80081ea:	bf00      	nop
 80081ec:	200024f5 	.word	0x200024f5

080081f0 <__malloc_unlock>:
 80081f0:	4801      	ldr	r0, [pc, #4]	; (80081f8 <__malloc_unlock+0x8>)
 80081f2:	f7ff bc98 	b.w	8007b26 <__retarget_lock_release_recursive>
 80081f6:	bf00      	nop
 80081f8:	200024f5 	.word	0x200024f5
 80081fc:	00000000 	.word	0x00000000

08008200 <_svfprintf_r>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	ed2d 8b04 	vpush	{d8-d9}
 8008208:	b0cf      	sub	sp, #316	; 0x13c
 800820a:	4689      	mov	r9, r1
 800820c:	9203      	str	r2, [sp, #12]
 800820e:	461d      	mov	r5, r3
 8008210:	4682      	mov	sl, r0
 8008212:	f001 fb01 	bl	8009818 <_localeconv_r>
 8008216:	6803      	ldr	r3, [r0, #0]
 8008218:	9313      	str	r3, [sp, #76]	; 0x4c
 800821a:	4618      	mov	r0, r3
 800821c:	f7f7 ffe0 	bl	80001e0 <strlen>
 8008220:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008224:	900e      	str	r0, [sp, #56]	; 0x38
 8008226:	0619      	lsls	r1, r3, #24
 8008228:	d51a      	bpl.n	8008260 <_svfprintf_r+0x60>
 800822a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800822e:	b9bb      	cbnz	r3, 8008260 <_svfprintf_r+0x60>
 8008230:	2140      	movs	r1, #64	; 0x40
 8008232:	4650      	mov	r0, sl
 8008234:	f7ff fd9c 	bl	8007d70 <_malloc_r>
 8008238:	f8c9 0000 	str.w	r0, [r9]
 800823c:	f8c9 0010 	str.w	r0, [r9, #16]
 8008240:	b958      	cbnz	r0, 800825a <_svfprintf_r+0x5a>
 8008242:	230c      	movs	r3, #12
 8008244:	f8ca 3000 	str.w	r3, [sl]
 8008248:	f04f 33ff 	mov.w	r3, #4294967295
 800824c:	930b      	str	r3, [sp, #44]	; 0x2c
 800824e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008250:	b04f      	add	sp, #316	; 0x13c
 8008252:	ecbd 8b04 	vpop	{d8-d9}
 8008256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800825a:	2340      	movs	r3, #64	; 0x40
 800825c:	f8c9 3014 	str.w	r3, [r9, #20]
 8008260:	ed9f 7b91 	vldr	d7, [pc, #580]	; 80084a8 <_svfprintf_r+0x2a8>
 8008264:	2300      	movs	r3, #0
 8008266:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 800826a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800826e:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8008272:	ac25      	add	r4, sp, #148	; 0x94
 8008274:	9422      	str	r4, [sp, #136]	; 0x88
 8008276:	9305      	str	r3, [sp, #20]
 8008278:	9309      	str	r3, [sp, #36]	; 0x24
 800827a:	9311      	str	r3, [sp, #68]	; 0x44
 800827c:	9314      	str	r3, [sp, #80]	; 0x50
 800827e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	461e      	mov	r6, r3
 8008284:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008288:	b10a      	cbz	r2, 800828e <_svfprintf_r+0x8e>
 800828a:	2a25      	cmp	r2, #37	; 0x25
 800828c:	d1f9      	bne.n	8008282 <_svfprintf_r+0x82>
 800828e:	9b03      	ldr	r3, [sp, #12]
 8008290:	1af7      	subs	r7, r6, r3
 8008292:	d00d      	beq.n	80082b0 <_svfprintf_r+0xb0>
 8008294:	e9c4 3700 	strd	r3, r7, [r4]
 8008298:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800829a:	443b      	add	r3, r7
 800829c:	9324      	str	r3, [sp, #144]	; 0x90
 800829e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80082a0:	3301      	adds	r3, #1
 80082a2:	2b07      	cmp	r3, #7
 80082a4:	9323      	str	r3, [sp, #140]	; 0x8c
 80082a6:	dc78      	bgt.n	800839a <_svfprintf_r+0x19a>
 80082a8:	3408      	adds	r4, #8
 80082aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ac:	443b      	add	r3, r7
 80082ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80082b0:	7833      	ldrb	r3, [r6, #0]
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	f001 815a 	beq.w	800956c <_svfprintf_r+0x136c>
 80082b8:	2300      	movs	r3, #0
 80082ba:	3601      	adds	r6, #1
 80082bc:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80082c0:	f04f 38ff 	mov.w	r8, #4294967295
 80082c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80082c6:	469b      	mov	fp, r3
 80082c8:	270a      	movs	r7, #10
 80082ca:	212b      	movs	r1, #43	; 0x2b
 80082cc:	4633      	mov	r3, r6
 80082ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082d2:	9207      	str	r2, [sp, #28]
 80082d4:	930a      	str	r3, [sp, #40]	; 0x28
 80082d6:	9b07      	ldr	r3, [sp, #28]
 80082d8:	3b20      	subs	r3, #32
 80082da:	2b5a      	cmp	r3, #90	; 0x5a
 80082dc:	f200 85c6 	bhi.w	8008e6c <_svfprintf_r+0xc6c>
 80082e0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80082e4:	05c4007e 	.word	0x05c4007e
 80082e8:	008605c4 	.word	0x008605c4
 80082ec:	05c405c4 	.word	0x05c405c4
 80082f0:	006505c4 	.word	0x006505c4
 80082f4:	05c405c4 	.word	0x05c405c4
 80082f8:	00930089 	.word	0x00930089
 80082fc:	009005c4 	.word	0x009005c4
 8008300:	05c40096 	.word	0x05c40096
 8008304:	00b200af 	.word	0x00b200af
 8008308:	00b200b2 	.word	0x00b200b2
 800830c:	00b200b2 	.word	0x00b200b2
 8008310:	00b200b2 	.word	0x00b200b2
 8008314:	00b200b2 	.word	0x00b200b2
 8008318:	05c405c4 	.word	0x05c405c4
 800831c:	05c405c4 	.word	0x05c405c4
 8008320:	05c405c4 	.word	0x05c405c4
 8008324:	012905c4 	.word	0x012905c4
 8008328:	00e605c4 	.word	0x00e605c4
 800832c:	012900f9 	.word	0x012900f9
 8008330:	01290129 	.word	0x01290129
 8008334:	05c405c4 	.word	0x05c405c4
 8008338:	05c405c4 	.word	0x05c405c4
 800833c:	05c400c2 	.word	0x05c400c2
 8008340:	049105c4 	.word	0x049105c4
 8008344:	05c405c4 	.word	0x05c405c4
 8008348:	04db05c4 	.word	0x04db05c4
 800834c:	050105c4 	.word	0x050105c4
 8008350:	05c405c4 	.word	0x05c405c4
 8008354:	05c40523 	.word	0x05c40523
 8008358:	05c405c4 	.word	0x05c405c4
 800835c:	05c405c4 	.word	0x05c405c4
 8008360:	05c405c4 	.word	0x05c405c4
 8008364:	012905c4 	.word	0x012905c4
 8008368:	00e605c4 	.word	0x00e605c4
 800836c:	012900fb 	.word	0x012900fb
 8008370:	01290129 	.word	0x01290129
 8008374:	00fb00c5 	.word	0x00fb00c5
 8008378:	05c400d9 	.word	0x05c400d9
 800837c:	05c400d2 	.word	0x05c400d2
 8008380:	0493046c 	.word	0x0493046c
 8008384:	00d904ca 	.word	0x00d904ca
 8008388:	04db05c4 	.word	0x04db05c4
 800838c:	0503007c 	.word	0x0503007c
 8008390:	05c405c4 	.word	0x05c405c4
 8008394:	05c40542 	.word	0x05c40542
 8008398:	007c      	.short	0x007c
 800839a:	aa22      	add	r2, sp, #136	; 0x88
 800839c:	4649      	mov	r1, r9
 800839e:	4650      	mov	r0, sl
 80083a0:	f002 fc72 	bl	800ac88 <__ssprint_r>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	f040 8137 	bne.w	8008618 <_svfprintf_r+0x418>
 80083aa:	ac25      	add	r4, sp, #148	; 0x94
 80083ac:	e77d      	b.n	80082aa <_svfprintf_r+0xaa>
 80083ae:	4650      	mov	r0, sl
 80083b0:	f001 fa32 	bl	8009818 <_localeconv_r>
 80083b4:	6843      	ldr	r3, [r0, #4]
 80083b6:	9314      	str	r3, [sp, #80]	; 0x50
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7f7 ff11 	bl	80001e0 <strlen>
 80083be:	9011      	str	r0, [sp, #68]	; 0x44
 80083c0:	4650      	mov	r0, sl
 80083c2:	f001 fa29 	bl	8009818 <_localeconv_r>
 80083c6:	6883      	ldr	r3, [r0, #8]
 80083c8:	9309      	str	r3, [sp, #36]	; 0x24
 80083ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083cc:	212b      	movs	r1, #43	; 0x2b
 80083ce:	b12b      	cbz	r3, 80083dc <_svfprintf_r+0x1dc>
 80083d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d2:	b11b      	cbz	r3, 80083dc <_svfprintf_r+0x1dc>
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	b10b      	cbz	r3, 80083dc <_svfprintf_r+0x1dc>
 80083d8:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80083dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80083de:	e775      	b.n	80082cc <_svfprintf_r+0xcc>
 80083e0:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1f9      	bne.n	80083dc <_svfprintf_r+0x1dc>
 80083e8:	2320      	movs	r3, #32
 80083ea:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80083ee:	e7f5      	b.n	80083dc <_svfprintf_r+0x1dc>
 80083f0:	f04b 0b01 	orr.w	fp, fp, #1
 80083f4:	e7f2      	b.n	80083dc <_svfprintf_r+0x1dc>
 80083f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	daed      	bge.n	80083dc <_svfprintf_r+0x1dc>
 8008400:	425b      	negs	r3, r3
 8008402:	930f      	str	r3, [sp, #60]	; 0x3c
 8008404:	f04b 0b04 	orr.w	fp, fp, #4
 8008408:	e7e8      	b.n	80083dc <_svfprintf_r+0x1dc>
 800840a:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 800840e:	e7e5      	b.n	80083dc <_svfprintf_r+0x1dc>
 8008410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008412:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008416:	9207      	str	r2, [sp, #28]
 8008418:	2a2a      	cmp	r2, #42	; 0x2a
 800841a:	d10f      	bne.n	800843c <_svfprintf_r+0x23c>
 800841c:	f855 2b04 	ldr.w	r2, [r5], #4
 8008420:	930a      	str	r3, [sp, #40]	; 0x28
 8008422:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8008426:	e7d9      	b.n	80083dc <_svfprintf_r+0x1dc>
 8008428:	fb07 2808 	mla	r8, r7, r8, r2
 800842c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008430:	9207      	str	r2, [sp, #28]
 8008432:	9a07      	ldr	r2, [sp, #28]
 8008434:	3a30      	subs	r2, #48	; 0x30
 8008436:	2a09      	cmp	r2, #9
 8008438:	d9f6      	bls.n	8008428 <_svfprintf_r+0x228>
 800843a:	e74b      	b.n	80082d4 <_svfprintf_r+0xd4>
 800843c:	f04f 0800 	mov.w	r8, #0
 8008440:	e7f7      	b.n	8008432 <_svfprintf_r+0x232>
 8008442:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8008446:	e7c9      	b.n	80083dc <_svfprintf_r+0x1dc>
 8008448:	2200      	movs	r2, #0
 800844a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800844c:	920f      	str	r2, [sp, #60]	; 0x3c
 800844e:	9a07      	ldr	r2, [sp, #28]
 8008450:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008452:	3a30      	subs	r2, #48	; 0x30
 8008454:	fb07 2200 	mla	r2, r7, r0, r2
 8008458:	920f      	str	r2, [sp, #60]	; 0x3c
 800845a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800845e:	9207      	str	r2, [sp, #28]
 8008460:	3a30      	subs	r2, #48	; 0x30
 8008462:	2a09      	cmp	r2, #9
 8008464:	d9f3      	bls.n	800844e <_svfprintf_r+0x24e>
 8008466:	e735      	b.n	80082d4 <_svfprintf_r+0xd4>
 8008468:	f04b 0b08 	orr.w	fp, fp, #8
 800846c:	e7b6      	b.n	80083dc <_svfprintf_r+0x1dc>
 800846e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b68      	cmp	r3, #104	; 0x68
 8008474:	bf01      	itttt	eq
 8008476:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 8008478:	3301      	addeq	r3, #1
 800847a:	930a      	streq	r3, [sp, #40]	; 0x28
 800847c:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8008480:	bf18      	it	ne
 8008482:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8008486:	e7a9      	b.n	80083dc <_svfprintf_r+0x1dc>
 8008488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b6c      	cmp	r3, #108	; 0x6c
 800848e:	d105      	bne.n	800849c <_svfprintf_r+0x29c>
 8008490:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008492:	3301      	adds	r3, #1
 8008494:	930a      	str	r3, [sp, #40]	; 0x28
 8008496:	f04b 0b20 	orr.w	fp, fp, #32
 800849a:	e79f      	b.n	80083dc <_svfprintf_r+0x1dc>
 800849c:	f04b 0b10 	orr.w	fp, fp, #16
 80084a0:	e79c      	b.n	80083dc <_svfprintf_r+0x1dc>
 80084a2:	bf00      	nop
 80084a4:	f3af 8000 	nop.w
	...
 80084b0:	462a      	mov	r2, r5
 80084b2:	f852 3b04 	ldr.w	r3, [r2], #4
 80084b6:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80084ba:	2300      	movs	r3, #0
 80084bc:	9206      	str	r2, [sp, #24]
 80084be:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80084c2:	9304      	str	r3, [sp, #16]
 80084c4:	461f      	mov	r7, r3
 80084c6:	461e      	mov	r6, r3
 80084c8:	9308      	str	r3, [sp, #32]
 80084ca:	461d      	mov	r5, r3
 80084cc:	ab35      	add	r3, sp, #212	; 0xd4
 80084ce:	f04f 0801 	mov.w	r8, #1
 80084d2:	9303      	str	r3, [sp, #12]
 80084d4:	e1b9      	b.n	800884a <_svfprintf_r+0x64a>
 80084d6:	f04b 0b10 	orr.w	fp, fp, #16
 80084da:	f01b 0f20 	tst.w	fp, #32
 80084de:	d012      	beq.n	8008506 <_svfprintf_r+0x306>
 80084e0:	3507      	adds	r5, #7
 80084e2:	f025 0307 	bic.w	r3, r5, #7
 80084e6:	461a      	mov	r2, r3
 80084e8:	685e      	ldr	r6, [r3, #4]
 80084ea:	f852 5b08 	ldr.w	r5, [r2], #8
 80084ee:	9206      	str	r2, [sp, #24]
 80084f0:	2e00      	cmp	r6, #0
 80084f2:	da06      	bge.n	8008502 <_svfprintf_r+0x302>
 80084f4:	426d      	negs	r5, r5
 80084f6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80084fa:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 80084fe:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008502:	2301      	movs	r3, #1
 8008504:	e392      	b.n	8008c2c <_svfprintf_r+0xa2c>
 8008506:	462b      	mov	r3, r5
 8008508:	f01b 0f10 	tst.w	fp, #16
 800850c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008510:	9306      	str	r3, [sp, #24]
 8008512:	d002      	beq.n	800851a <_svfprintf_r+0x31a>
 8008514:	4635      	mov	r5, r6
 8008516:	17f6      	asrs	r6, r6, #31
 8008518:	e7ea      	b.n	80084f0 <_svfprintf_r+0x2f0>
 800851a:	f01b 0f40 	tst.w	fp, #64	; 0x40
 800851e:	d003      	beq.n	8008528 <_svfprintf_r+0x328>
 8008520:	b235      	sxth	r5, r6
 8008522:	f346 36c0 	sbfx	r6, r6, #15, #1
 8008526:	e7e3      	b.n	80084f0 <_svfprintf_r+0x2f0>
 8008528:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800852c:	d0f2      	beq.n	8008514 <_svfprintf_r+0x314>
 800852e:	b275      	sxtb	r5, r6
 8008530:	f346 16c0 	sbfx	r6, r6, #7, #1
 8008534:	e7dc      	b.n	80084f0 <_svfprintf_r+0x2f0>
 8008536:	3507      	adds	r5, #7
 8008538:	f025 0307 	bic.w	r3, r5, #7
 800853c:	ecb3 7b02 	vldmia	r3!, {d7}
 8008540:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008544:	9306      	str	r3, [sp, #24]
 8008546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008548:	ee09 3a10 	vmov	s18, r3
 800854c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800854e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008552:	ee09 3a90 	vmov	s19, r3
 8008556:	f04f 32ff 	mov.w	r2, #4294967295
 800855a:	4b34      	ldr	r3, [pc, #208]	; (800862c <_svfprintf_r+0x42c>)
 800855c:	ec51 0b19 	vmov	r0, r1, d9
 8008560:	f7f8 faec 	bl	8000b3c <__aeabi_dcmpun>
 8008564:	bb18      	cbnz	r0, 80085ae <_svfprintf_r+0x3ae>
 8008566:	4b31      	ldr	r3, [pc, #196]	; (800862c <_svfprintf_r+0x42c>)
 8008568:	ec51 0b19 	vmov	r0, r1, d9
 800856c:	f04f 32ff 	mov.w	r2, #4294967295
 8008570:	f7f8 fac6 	bl	8000b00 <__aeabi_dcmple>
 8008574:	b9d8      	cbnz	r0, 80085ae <_svfprintf_r+0x3ae>
 8008576:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800857a:	2200      	movs	r2, #0
 800857c:	2300      	movs	r3, #0
 800857e:	f7f8 fab5 	bl	8000aec <__aeabi_dcmplt>
 8008582:	b110      	cbz	r0, 800858a <_svfprintf_r+0x38a>
 8008584:	232d      	movs	r3, #45	; 0x2d
 8008586:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800858a:	4a29      	ldr	r2, [pc, #164]	; (8008630 <_svfprintf_r+0x430>)
 800858c:	4b29      	ldr	r3, [pc, #164]	; (8008634 <_svfprintf_r+0x434>)
 800858e:	9907      	ldr	r1, [sp, #28]
 8008590:	2947      	cmp	r1, #71	; 0x47
 8008592:	bfc8      	it	gt
 8008594:	461a      	movgt	r2, r3
 8008596:	2300      	movs	r3, #0
 8008598:	9203      	str	r2, [sp, #12]
 800859a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 800859e:	9304      	str	r3, [sp, #16]
 80085a0:	f04f 0803 	mov.w	r8, #3
 80085a4:	461f      	mov	r7, r3
 80085a6:	461e      	mov	r6, r3
 80085a8:	9308      	str	r3, [sp, #32]
 80085aa:	461d      	mov	r5, r3
 80085ac:	e14d      	b.n	800884a <_svfprintf_r+0x64a>
 80085ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80085b2:	4610      	mov	r0, r2
 80085b4:	4619      	mov	r1, r3
 80085b6:	f7f8 fac1 	bl	8000b3c <__aeabi_dcmpun>
 80085ba:	b140      	cbz	r0, 80085ce <_svfprintf_r+0x3ce>
 80085bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085be:	4a1e      	ldr	r2, [pc, #120]	; (8008638 <_svfprintf_r+0x438>)
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	bfbc      	itt	lt
 80085c4:	232d      	movlt	r3, #45	; 0x2d
 80085c6:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 80085ca:	4b1c      	ldr	r3, [pc, #112]	; (800863c <_svfprintf_r+0x43c>)
 80085cc:	e7df      	b.n	800858e <_svfprintf_r+0x38e>
 80085ce:	9b07      	ldr	r3, [sp, #28]
 80085d0:	f023 0320 	bic.w	r3, r3, #32
 80085d4:	2b41      	cmp	r3, #65	; 0x41
 80085d6:	9308      	str	r3, [sp, #32]
 80085d8:	d132      	bne.n	8008640 <_svfprintf_r+0x440>
 80085da:	2330      	movs	r3, #48	; 0x30
 80085dc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80085e0:	9b07      	ldr	r3, [sp, #28]
 80085e2:	2b61      	cmp	r3, #97	; 0x61
 80085e4:	bf0c      	ite	eq
 80085e6:	2378      	moveq	r3, #120	; 0x78
 80085e8:	2358      	movne	r3, #88	; 0x58
 80085ea:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 80085ee:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80085f2:	f04b 0b02 	orr.w	fp, fp, #2
 80085f6:	f340 8204 	ble.w	8008a02 <_svfprintf_r+0x802>
 80085fa:	f108 0101 	add.w	r1, r8, #1
 80085fe:	4650      	mov	r0, sl
 8008600:	f7ff fbb6 	bl	8007d70 <_malloc_r>
 8008604:	9003      	str	r0, [sp, #12]
 8008606:	2800      	cmp	r0, #0
 8008608:	f040 81ff 	bne.w	8008a0a <_svfprintf_r+0x80a>
 800860c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008614:	f8a9 300c 	strh.w	r3, [r9, #12]
 8008618:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800861c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008622:	bf18      	it	ne
 8008624:	f04f 33ff 	movne.w	r3, #4294967295
 8008628:	e610      	b.n	800824c <_svfprintf_r+0x4c>
 800862a:	bf00      	nop
 800862c:	7fefffff 	.word	0x7fefffff
 8008630:	0800d3c4 	.word	0x0800d3c4
 8008634:	0800d3c8 	.word	0x0800d3c8
 8008638:	0800d3cc 	.word	0x0800d3cc
 800863c:	0800d3d0 	.word	0x0800d3d0
 8008640:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008644:	f000 81e4 	beq.w	8008a10 <_svfprintf_r+0x810>
 8008648:	9b08      	ldr	r3, [sp, #32]
 800864a:	2b47      	cmp	r3, #71	; 0x47
 800864c:	f040 81e4 	bne.w	8008a18 <_svfprintf_r+0x818>
 8008650:	f1b8 0f00 	cmp.w	r8, #0
 8008654:	f040 81e0 	bne.w	8008a18 <_svfprintf_r+0x818>
 8008658:	f8cd 8010 	str.w	r8, [sp, #16]
 800865c:	f04f 0801 	mov.w	r8, #1
 8008660:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8008664:	9310      	str	r3, [sp, #64]	; 0x40
 8008666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008668:	2b00      	cmp	r3, #0
 800866a:	f280 81d7 	bge.w	8008a1c <_svfprintf_r+0x81c>
 800866e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008670:	ee08 3a10 	vmov	s16, r3
 8008674:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008676:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800867a:	ee08 3a90 	vmov	s17, r3
 800867e:	232d      	movs	r3, #45	; 0x2d
 8008680:	9318      	str	r3, [sp, #96]	; 0x60
 8008682:	9b08      	ldr	r3, [sp, #32]
 8008684:	2b41      	cmp	r3, #65	; 0x41
 8008686:	f040 81e7 	bne.w	8008a58 <_svfprintf_r+0x858>
 800868a:	eeb0 0a48 	vmov.f32	s0, s16
 800868e:	eef0 0a68 	vmov.f32	s1, s17
 8008692:	a81c      	add	r0, sp, #112	; 0x70
 8008694:	f001 f8f4 	bl	8009880 <frexp>
 8008698:	2200      	movs	r2, #0
 800869a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800869e:	ec51 0b10 	vmov	r0, r1, d0
 80086a2:	f7f7 ffb1 	bl	8000608 <__aeabi_dmul>
 80086a6:	2200      	movs	r2, #0
 80086a8:	2300      	movs	r3, #0
 80086aa:	4606      	mov	r6, r0
 80086ac:	460f      	mov	r7, r1
 80086ae:	f7f8 fa13 	bl	8000ad8 <__aeabi_dcmpeq>
 80086b2:	b108      	cbz	r0, 80086b8 <_svfprintf_r+0x4b8>
 80086b4:	2301      	movs	r3, #1
 80086b6:	931c      	str	r3, [sp, #112]	; 0x70
 80086b8:	4bac      	ldr	r3, [pc, #688]	; (800896c <_svfprintf_r+0x76c>)
 80086ba:	4aad      	ldr	r2, [pc, #692]	; (8008970 <_svfprintf_r+0x770>)
 80086bc:	9907      	ldr	r1, [sp, #28]
 80086be:	9d03      	ldr	r5, [sp, #12]
 80086c0:	2961      	cmp	r1, #97	; 0x61
 80086c2:	bf18      	it	ne
 80086c4:	461a      	movne	r2, r3
 80086c6:	f108 33ff 	add.w	r3, r8, #4294967295
 80086ca:	9217      	str	r2, [sp, #92]	; 0x5c
 80086cc:	9305      	str	r3, [sp, #20]
 80086ce:	4ba9      	ldr	r3, [pc, #676]	; (8008974 <_svfprintf_r+0x774>)
 80086d0:	2200      	movs	r2, #0
 80086d2:	4630      	mov	r0, r6
 80086d4:	4639      	mov	r1, r7
 80086d6:	f7f7 ff97 	bl	8000608 <__aeabi_dmul>
 80086da:	460f      	mov	r7, r1
 80086dc:	4606      	mov	r6, r0
 80086de:	f7f8 fa43 	bl	8000b68 <__aeabi_d2iz>
 80086e2:	9019      	str	r0, [sp, #100]	; 0x64
 80086e4:	f7f7 ff26 	bl	8000534 <__aeabi_i2d>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4630      	mov	r0, r6
 80086ee:	4639      	mov	r1, r7
 80086f0:	f7f7 fdd2 	bl	8000298 <__aeabi_dsub>
 80086f4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80086f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086f8:	5c9b      	ldrb	r3, [r3, r2]
 80086fa:	f805 3b01 	strb.w	r3, [r5], #1
 80086fe:	9b05      	ldr	r3, [sp, #20]
 8008700:	9312      	str	r3, [sp, #72]	; 0x48
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	4606      	mov	r6, r0
 8008706:	460f      	mov	r7, r1
 8008708:	d007      	beq.n	800871a <_svfprintf_r+0x51a>
 800870a:	3b01      	subs	r3, #1
 800870c:	9305      	str	r3, [sp, #20]
 800870e:	2200      	movs	r2, #0
 8008710:	2300      	movs	r3, #0
 8008712:	f7f8 f9e1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008716:	2800      	cmp	r0, #0
 8008718:	d0d9      	beq.n	80086ce <_svfprintf_r+0x4ce>
 800871a:	4b97      	ldr	r3, [pc, #604]	; (8008978 <_svfprintf_r+0x778>)
 800871c:	2200      	movs	r2, #0
 800871e:	4630      	mov	r0, r6
 8008720:	4639      	mov	r1, r7
 8008722:	f7f8 fa01 	bl	8000b28 <__aeabi_dcmpgt>
 8008726:	b960      	cbnz	r0, 8008742 <_svfprintf_r+0x542>
 8008728:	4b93      	ldr	r3, [pc, #588]	; (8008978 <_svfprintf_r+0x778>)
 800872a:	2200      	movs	r2, #0
 800872c:	4630      	mov	r0, r6
 800872e:	4639      	mov	r1, r7
 8008730:	f7f8 f9d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008734:	2800      	cmp	r0, #0
 8008736:	f000 818a 	beq.w	8008a4e <_svfprintf_r+0x84e>
 800873a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800873c:	07de      	lsls	r6, r3, #31
 800873e:	f140 8186 	bpl.w	8008a4e <_svfprintf_r+0x84e>
 8008742:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008744:	9520      	str	r5, [sp, #128]	; 0x80
 8008746:	7bd9      	ldrb	r1, [r3, #15]
 8008748:	2030      	movs	r0, #48	; 0x30
 800874a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800874c:	1e53      	subs	r3, r2, #1
 800874e:	9320      	str	r3, [sp, #128]	; 0x80
 8008750:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8008754:	428b      	cmp	r3, r1
 8008756:	f000 8169 	beq.w	8008a2c <_svfprintf_r+0x82c>
 800875a:	2b39      	cmp	r3, #57	; 0x39
 800875c:	bf0b      	itete	eq
 800875e:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8008760:	3301      	addne	r3, #1
 8008762:	7a9b      	ldrbeq	r3, [r3, #10]
 8008764:	b2db      	uxtbne	r3, r3
 8008766:	f802 3c01 	strb.w	r3, [r2, #-1]
 800876a:	9b03      	ldr	r3, [sp, #12]
 800876c:	1aeb      	subs	r3, r5, r3
 800876e:	9305      	str	r3, [sp, #20]
 8008770:	9b08      	ldr	r3, [sp, #32]
 8008772:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008774:	2b47      	cmp	r3, #71	; 0x47
 8008776:	f040 81b9 	bne.w	8008aec <_svfprintf_r+0x8ec>
 800877a:	1ce8      	adds	r0, r5, #3
 800877c:	db02      	blt.n	8008784 <_svfprintf_r+0x584>
 800877e:	45a8      	cmp	r8, r5
 8008780:	f280 81d7 	bge.w	8008b32 <_svfprintf_r+0x932>
 8008784:	9b07      	ldr	r3, [sp, #28]
 8008786:	3b02      	subs	r3, #2
 8008788:	9307      	str	r3, [sp, #28]
 800878a:	9907      	ldr	r1, [sp, #28]
 800878c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8008790:	f021 0120 	bic.w	r1, r1, #32
 8008794:	2941      	cmp	r1, #65	; 0x41
 8008796:	bf08      	it	eq
 8008798:	320f      	addeq	r2, #15
 800879a:	f105 33ff 	add.w	r3, r5, #4294967295
 800879e:	bf06      	itte	eq
 80087a0:	b2d2      	uxtbeq	r2, r2
 80087a2:	2101      	moveq	r1, #1
 80087a4:	2100      	movne	r1, #0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	931c      	str	r3, [sp, #112]	; 0x70
 80087aa:	bfb8      	it	lt
 80087ac:	f1c5 0301 	rsblt	r3, r5, #1
 80087b0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80087b4:	bfb4      	ite	lt
 80087b6:	222d      	movlt	r2, #45	; 0x2d
 80087b8:	222b      	movge	r2, #43	; 0x2b
 80087ba:	2b09      	cmp	r3, #9
 80087bc:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 80087c0:	f340 81aa 	ble.w	8008b18 <_svfprintf_r+0x918>
 80087c4:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 80087c8:	260a      	movs	r6, #10
 80087ca:	4602      	mov	r2, r0
 80087cc:	fb93 f5f6 	sdiv	r5, r3, r6
 80087d0:	fb06 3115 	mls	r1, r6, r5, r3
 80087d4:	3130      	adds	r1, #48	; 0x30
 80087d6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80087da:	4619      	mov	r1, r3
 80087dc:	2963      	cmp	r1, #99	; 0x63
 80087de:	f100 30ff 	add.w	r0, r0, #4294967295
 80087e2:	462b      	mov	r3, r5
 80087e4:	dcf1      	bgt.n	80087ca <_svfprintf_r+0x5ca>
 80087e6:	3330      	adds	r3, #48	; 0x30
 80087e8:	1e91      	subs	r1, r2, #2
 80087ea:	f800 3c01 	strb.w	r3, [r0, #-1]
 80087ee:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 80087f2:	460b      	mov	r3, r1
 80087f4:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 80087f8:	4283      	cmp	r3, r0
 80087fa:	f0c0 8188 	bcc.w	8008b0e <_svfprintf_r+0x90e>
 80087fe:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 8008802:	1a9b      	subs	r3, r3, r2
 8008804:	4281      	cmp	r1, r0
 8008806:	bf88      	it	hi
 8008808:	2300      	movhi	r3, #0
 800880a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800880e:	441a      	add	r2, r3
 8008810:	ab1e      	add	r3, sp, #120	; 0x78
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	9a05      	ldr	r2, [sp, #20]
 8008816:	9315      	str	r3, [sp, #84]	; 0x54
 8008818:	2a01      	cmp	r2, #1
 800881a:	eb03 0802 	add.w	r8, r3, r2
 800881e:	dc02      	bgt.n	8008826 <_svfprintf_r+0x626>
 8008820:	f01b 0f01 	tst.w	fp, #1
 8008824:	d001      	beq.n	800882a <_svfprintf_r+0x62a>
 8008826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008828:	4498      	add	r8, r3
 800882a:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800882e:	2600      	movs	r6, #0
 8008830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008834:	9310      	str	r3, [sp, #64]	; 0x40
 8008836:	9608      	str	r6, [sp, #32]
 8008838:	4635      	mov	r5, r6
 800883a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800883c:	b113      	cbz	r3, 8008844 <_svfprintf_r+0x644>
 800883e:	232d      	movs	r3, #45	; 0x2d
 8008840:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008844:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8008848:	2700      	movs	r7, #0
 800884a:	4547      	cmp	r7, r8
 800884c:	463b      	mov	r3, r7
 800884e:	bfb8      	it	lt
 8008850:	4643      	movlt	r3, r8
 8008852:	9310      	str	r3, [sp, #64]	; 0x40
 8008854:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8008858:	b113      	cbz	r3, 8008860 <_svfprintf_r+0x660>
 800885a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800885c:	3301      	adds	r3, #1
 800885e:	9310      	str	r3, [sp, #64]	; 0x40
 8008860:	f01b 0302 	ands.w	r3, fp, #2
 8008864:	9317      	str	r3, [sp, #92]	; 0x5c
 8008866:	bf1e      	ittt	ne
 8008868:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 800886a:	3302      	addne	r3, #2
 800886c:	9310      	strne	r3, [sp, #64]	; 0x40
 800886e:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8008872:	9318      	str	r3, [sp, #96]	; 0x60
 8008874:	d122      	bne.n	80088bc <_svfprintf_r+0x6bc>
 8008876:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800887a:	1a9b      	subs	r3, r3, r2
 800887c:	2b00      	cmp	r3, #0
 800887e:	9312      	str	r3, [sp, #72]	; 0x48
 8008880:	dd1c      	ble.n	80088bc <_svfprintf_r+0x6bc>
 8008882:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008884:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8008888:	2810      	cmp	r0, #16
 800888a:	483c      	ldr	r0, [pc, #240]	; (800897c <_svfprintf_r+0x77c>)
 800888c:	6020      	str	r0, [r4, #0]
 800888e:	f102 0201 	add.w	r2, r2, #1
 8008892:	f104 0108 	add.w	r1, r4, #8
 8008896:	f300 82f7 	bgt.w	8008e88 <_svfprintf_r+0xc88>
 800889a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800889c:	6060      	str	r0, [r4, #4]
 800889e:	4403      	add	r3, r0
 80088a0:	2a07      	cmp	r2, #7
 80088a2:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80088a6:	f340 8304 	ble.w	8008eb2 <_svfprintf_r+0xcb2>
 80088aa:	aa22      	add	r2, sp, #136	; 0x88
 80088ac:	4649      	mov	r1, r9
 80088ae:	4650      	mov	r0, sl
 80088b0:	f002 f9ea 	bl	800ac88 <__ssprint_r>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	f040 8637 	bne.w	8009528 <_svfprintf_r+0x1328>
 80088ba:	ac25      	add	r4, sp, #148	; 0x94
 80088bc:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 80088c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80088c2:	b16a      	cbz	r2, 80088e0 <_svfprintf_r+0x6e0>
 80088c4:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 80088c8:	6022      	str	r2, [r4, #0]
 80088ca:	2201      	movs	r2, #1
 80088cc:	4413      	add	r3, r2
 80088ce:	9324      	str	r3, [sp, #144]	; 0x90
 80088d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088d2:	6062      	str	r2, [r4, #4]
 80088d4:	4413      	add	r3, r2
 80088d6:	2b07      	cmp	r3, #7
 80088d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80088da:	f300 82ec 	bgt.w	8008eb6 <_svfprintf_r+0xcb6>
 80088de:	3408      	adds	r4, #8
 80088e0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088e2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80088e4:	b162      	cbz	r2, 8008900 <_svfprintf_r+0x700>
 80088e6:	aa1b      	add	r2, sp, #108	; 0x6c
 80088e8:	6022      	str	r2, [r4, #0]
 80088ea:	2202      	movs	r2, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	9324      	str	r3, [sp, #144]	; 0x90
 80088f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088f2:	6062      	str	r2, [r4, #4]
 80088f4:	3301      	adds	r3, #1
 80088f6:	2b07      	cmp	r3, #7
 80088f8:	9323      	str	r3, [sp, #140]	; 0x8c
 80088fa:	f300 82e6 	bgt.w	8008eca <_svfprintf_r+0xcca>
 80088fe:	3408      	adds	r4, #8
 8008900:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008902:	2b80      	cmp	r3, #128	; 0x80
 8008904:	d122      	bne.n	800894c <_svfprintf_r+0x74c>
 8008906:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800890a:	1a9b      	subs	r3, r3, r2
 800890c:	2b00      	cmp	r3, #0
 800890e:	9312      	str	r3, [sp, #72]	; 0x48
 8008910:	dd1c      	ble.n	800894c <_svfprintf_r+0x74c>
 8008912:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008914:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8008918:	2810      	cmp	r0, #16
 800891a:	4819      	ldr	r0, [pc, #100]	; (8008980 <_svfprintf_r+0x780>)
 800891c:	6020      	str	r0, [r4, #0]
 800891e:	f102 0201 	add.w	r2, r2, #1
 8008922:	f104 0108 	add.w	r1, r4, #8
 8008926:	f300 82da 	bgt.w	8008ede <_svfprintf_r+0xcde>
 800892a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800892c:	6060      	str	r0, [r4, #4]
 800892e:	4403      	add	r3, r0
 8008930:	2a07      	cmp	r2, #7
 8008932:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8008936:	f340 82e7 	ble.w	8008f08 <_svfprintf_r+0xd08>
 800893a:	aa22      	add	r2, sp, #136	; 0x88
 800893c:	4649      	mov	r1, r9
 800893e:	4650      	mov	r0, sl
 8008940:	f002 f9a2 	bl	800ac88 <__ssprint_r>
 8008944:	2800      	cmp	r0, #0
 8008946:	f040 85ef 	bne.w	8009528 <_svfprintf_r+0x1328>
 800894a:	ac25      	add	r4, sp, #148	; 0x94
 800894c:	eba7 0708 	sub.w	r7, r7, r8
 8008950:	2f00      	cmp	r7, #0
 8008952:	dd27      	ble.n	80089a4 <_svfprintf_r+0x7a4>
 8008954:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008958:	4809      	ldr	r0, [pc, #36]	; (8008980 <_svfprintf_r+0x780>)
 800895a:	6020      	str	r0, [r4, #0]
 800895c:	2f10      	cmp	r7, #16
 800895e:	f103 0301 	add.w	r3, r3, #1
 8008962:	f104 0108 	add.w	r1, r4, #8
 8008966:	f300 82d1 	bgt.w	8008f0c <_svfprintf_r+0xd0c>
 800896a:	e00b      	b.n	8008984 <_svfprintf_r+0x784>
 800896c:	0800d3e5 	.word	0x0800d3e5
 8008970:	0800d3d4 	.word	0x0800d3d4
 8008974:	40300000 	.word	0x40300000
 8008978:	3fe00000 	.word	0x3fe00000
 800897c:	0800d3f8 	.word	0x0800d3f8
 8008980:	0800d408 	.word	0x0800d408
 8008984:	6067      	str	r7, [r4, #4]
 8008986:	2b07      	cmp	r3, #7
 8008988:	4417      	add	r7, r2
 800898a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800898e:	f340 82d0 	ble.w	8008f32 <_svfprintf_r+0xd32>
 8008992:	aa22      	add	r2, sp, #136	; 0x88
 8008994:	4649      	mov	r1, r9
 8008996:	4650      	mov	r0, sl
 8008998:	f002 f976 	bl	800ac88 <__ssprint_r>
 800899c:	2800      	cmp	r0, #0
 800899e:	f040 85c3 	bne.w	8009528 <_svfprintf_r+0x1328>
 80089a2:	ac25      	add	r4, sp, #148	; 0x94
 80089a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80089a8:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80089aa:	f040 82c9 	bne.w	8008f40 <_svfprintf_r+0xd40>
 80089ae:	9b03      	ldr	r3, [sp, #12]
 80089b0:	e9c4 3800 	strd	r3, r8, [r4]
 80089b4:	4447      	add	r7, r8
 80089b6:	9724      	str	r7, [sp, #144]	; 0x90
 80089b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80089ba:	3301      	adds	r3, #1
 80089bc:	2b07      	cmp	r3, #7
 80089be:	9323      	str	r3, [sp, #140]	; 0x8c
 80089c0:	f300 8303 	bgt.w	8008fca <_svfprintf_r+0xdca>
 80089c4:	3408      	adds	r4, #8
 80089c6:	f01b 0f04 	tst.w	fp, #4
 80089ca:	f040 858f 	bne.w	80094ec <_svfprintf_r+0x12ec>
 80089ce:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 80089d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089d4:	428a      	cmp	r2, r1
 80089d6:	bfac      	ite	ge
 80089d8:	189b      	addge	r3, r3, r2
 80089da:	185b      	addlt	r3, r3, r1
 80089dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80089de:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80089e0:	b13b      	cbz	r3, 80089f2 <_svfprintf_r+0x7f2>
 80089e2:	aa22      	add	r2, sp, #136	; 0x88
 80089e4:	4649      	mov	r1, r9
 80089e6:	4650      	mov	r0, sl
 80089e8:	f002 f94e 	bl	800ac88 <__ssprint_r>
 80089ec:	2800      	cmp	r0, #0
 80089ee:	f040 859b 	bne.w	8009528 <_svfprintf_r+0x1328>
 80089f2:	2300      	movs	r3, #0
 80089f4:	9323      	str	r3, [sp, #140]	; 0x8c
 80089f6:	9b04      	ldr	r3, [sp, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f040 85b1 	bne.w	8009560 <_svfprintf_r+0x1360>
 80089fe:	ac25      	add	r4, sp, #148	; 0x94
 8008a00:	e0e7      	b.n	8008bd2 <_svfprintf_r+0x9d2>
 8008a02:	ab35      	add	r3, sp, #212	; 0xd4
 8008a04:	9004      	str	r0, [sp, #16]
 8008a06:	9303      	str	r3, [sp, #12]
 8008a08:	e62a      	b.n	8008660 <_svfprintf_r+0x460>
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	9304      	str	r3, [sp, #16]
 8008a0e:	e627      	b.n	8008660 <_svfprintf_r+0x460>
 8008a10:	9004      	str	r0, [sp, #16]
 8008a12:	f04f 0806 	mov.w	r8, #6
 8008a16:	e623      	b.n	8008660 <_svfprintf_r+0x460>
 8008a18:	9004      	str	r0, [sp, #16]
 8008a1a:	e621      	b.n	8008660 <_svfprintf_r+0x460>
 8008a1c:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8008a20:	2300      	movs	r3, #0
 8008a22:	eeb0 8a47 	vmov.f32	s16, s14
 8008a26:	eef0 8a67 	vmov.f32	s17, s15
 8008a2a:	e629      	b.n	8008680 <_svfprintf_r+0x480>
 8008a2c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8008a30:	e68b      	b.n	800874a <_svfprintf_r+0x54a>
 8008a32:	f803 0b01 	strb.w	r0, [r3], #1
 8008a36:	1aca      	subs	r2, r1, r3
 8008a38:	2a00      	cmp	r2, #0
 8008a3a:	dafa      	bge.n	8008a32 <_svfprintf_r+0x832>
 8008a3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a40:	3201      	adds	r2, #1
 8008a42:	f103 0301 	add.w	r3, r3, #1
 8008a46:	bfb8      	it	lt
 8008a48:	2300      	movlt	r3, #0
 8008a4a:	441d      	add	r5, r3
 8008a4c:	e68d      	b.n	800876a <_svfprintf_r+0x56a>
 8008a4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a50:	462b      	mov	r3, r5
 8008a52:	18a9      	adds	r1, r5, r2
 8008a54:	2030      	movs	r0, #48	; 0x30
 8008a56:	e7ee      	b.n	8008a36 <_svfprintf_r+0x836>
 8008a58:	9b08      	ldr	r3, [sp, #32]
 8008a5a:	2b46      	cmp	r3, #70	; 0x46
 8008a5c:	d005      	beq.n	8008a6a <_svfprintf_r+0x86a>
 8008a5e:	2b45      	cmp	r3, #69	; 0x45
 8008a60:	d11d      	bne.n	8008a9e <_svfprintf_r+0x89e>
 8008a62:	f108 0501 	add.w	r5, r8, #1
 8008a66:	2102      	movs	r1, #2
 8008a68:	e001      	b.n	8008a6e <_svfprintf_r+0x86e>
 8008a6a:	4645      	mov	r5, r8
 8008a6c:	2103      	movs	r1, #3
 8008a6e:	ab20      	add	r3, sp, #128	; 0x80
 8008a70:	9301      	str	r3, [sp, #4]
 8008a72:	ab1d      	add	r3, sp, #116	; 0x74
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	462a      	mov	r2, r5
 8008a78:	ab1c      	add	r3, sp, #112	; 0x70
 8008a7a:	4650      	mov	r0, sl
 8008a7c:	eeb0 0a48 	vmov.f32	s0, s16
 8008a80:	eef0 0a68 	vmov.f32	s1, s17
 8008a84:	f000 fffc 	bl	8009a80 <_dtoa_r>
 8008a88:	9b08      	ldr	r3, [sp, #32]
 8008a8a:	9003      	str	r0, [sp, #12]
 8008a8c:	2b47      	cmp	r3, #71	; 0x47
 8008a8e:	d108      	bne.n	8008aa2 <_svfprintf_r+0x8a2>
 8008a90:	f01b 0f01 	tst.w	fp, #1
 8008a94:	d105      	bne.n	8008aa2 <_svfprintf_r+0x8a2>
 8008a96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008a98:	9a03      	ldr	r2, [sp, #12]
 8008a9a:	1a9b      	subs	r3, r3, r2
 8008a9c:	e667      	b.n	800876e <_svfprintf_r+0x56e>
 8008a9e:	4645      	mov	r5, r8
 8008aa0:	e7e1      	b.n	8008a66 <_svfprintf_r+0x866>
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	195e      	adds	r6, r3, r5
 8008aa6:	9b08      	ldr	r3, [sp, #32]
 8008aa8:	2b46      	cmp	r3, #70	; 0x46
 8008aaa:	d10f      	bne.n	8008acc <_svfprintf_r+0x8cc>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b30      	cmp	r3, #48	; 0x30
 8008ab2:	d109      	bne.n	8008ac8 <_svfprintf_r+0x8c8>
 8008ab4:	ec51 0b18 	vmov	r0, r1, d8
 8008ab8:	2200      	movs	r2, #0
 8008aba:	2300      	movs	r3, #0
 8008abc:	f7f8 f80c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ac0:	b910      	cbnz	r0, 8008ac8 <_svfprintf_r+0x8c8>
 8008ac2:	f1c5 0501 	rsb	r5, r5, #1
 8008ac6:	951c      	str	r5, [sp, #112]	; 0x70
 8008ac8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008aca:	441e      	add	r6, r3
 8008acc:	ec51 0b18 	vmov	r0, r1, d8
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f7f8 f800 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ad8:	b100      	cbz	r0, 8008adc <_svfprintf_r+0x8dc>
 8008ada:	9620      	str	r6, [sp, #128]	; 0x80
 8008adc:	2230      	movs	r2, #48	; 0x30
 8008ade:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ae0:	429e      	cmp	r6, r3
 8008ae2:	d9d8      	bls.n	8008a96 <_svfprintf_r+0x896>
 8008ae4:	1c59      	adds	r1, r3, #1
 8008ae6:	9120      	str	r1, [sp, #128]	; 0x80
 8008ae8:	701a      	strb	r2, [r3, #0]
 8008aea:	e7f8      	b.n	8008ade <_svfprintf_r+0x8de>
 8008aec:	9b08      	ldr	r3, [sp, #32]
 8008aee:	2b46      	cmp	r3, #70	; 0x46
 8008af0:	f47f ae4b 	bne.w	800878a <_svfprintf_r+0x58a>
 8008af4:	f00b 0301 	and.w	r3, fp, #1
 8008af8:	2d00      	cmp	r5, #0
 8008afa:	ea43 0308 	orr.w	r3, r3, r8
 8008afe:	dd25      	ble.n	8008b4c <_svfprintf_r+0x94c>
 8008b00:	b383      	cbz	r3, 8008b64 <_svfprintf_r+0x964>
 8008b02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b04:	18eb      	adds	r3, r5, r3
 8008b06:	4498      	add	r8, r3
 8008b08:	2366      	movs	r3, #102	; 0x66
 8008b0a:	9307      	str	r3, [sp, #28]
 8008b0c:	e030      	b.n	8008b70 <_svfprintf_r+0x970>
 8008b0e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008b12:	f805 6f01 	strb.w	r6, [r5, #1]!
 8008b16:	e66f      	b.n	80087f8 <_svfprintf_r+0x5f8>
 8008b18:	b941      	cbnz	r1, 8008b2c <_svfprintf_r+0x92c>
 8008b1a:	2230      	movs	r2, #48	; 0x30
 8008b1c:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8008b20:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8008b24:	3330      	adds	r3, #48	; 0x30
 8008b26:	f802 3b01 	strb.w	r3, [r2], #1
 8008b2a:	e671      	b.n	8008810 <_svfprintf_r+0x610>
 8008b2c:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8008b30:	e7f8      	b.n	8008b24 <_svfprintf_r+0x924>
 8008b32:	9b05      	ldr	r3, [sp, #20]
 8008b34:	42ab      	cmp	r3, r5
 8008b36:	dd0d      	ble.n	8008b54 <_svfprintf_r+0x954>
 8008b38:	9b05      	ldr	r3, [sp, #20]
 8008b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b3c:	2d00      	cmp	r5, #0
 8008b3e:	eb03 0802 	add.w	r8, r3, r2
 8008b42:	dc0d      	bgt.n	8008b60 <_svfprintf_r+0x960>
 8008b44:	f1c5 0301 	rsb	r3, r5, #1
 8008b48:	4498      	add	r8, r3
 8008b4a:	e009      	b.n	8008b60 <_svfprintf_r+0x960>
 8008b4c:	b163      	cbz	r3, 8008b68 <_svfprintf_r+0x968>
 8008b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b50:	3301      	adds	r3, #1
 8008b52:	e7d8      	b.n	8008b06 <_svfprintf_r+0x906>
 8008b54:	f01b 0f01 	tst.w	fp, #1
 8008b58:	d01d      	beq.n	8008b96 <_svfprintf_r+0x996>
 8008b5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b5c:	eb05 0803 	add.w	r8, r5, r3
 8008b60:	2367      	movs	r3, #103	; 0x67
 8008b62:	e7d2      	b.n	8008b0a <_svfprintf_r+0x90a>
 8008b64:	46a8      	mov	r8, r5
 8008b66:	e7cf      	b.n	8008b08 <_svfprintf_r+0x908>
 8008b68:	2366      	movs	r3, #102	; 0x66
 8008b6a:	9307      	str	r3, [sp, #28]
 8008b6c:	f04f 0801 	mov.w	r8, #1
 8008b70:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8008b74:	9308      	str	r3, [sp, #32]
 8008b76:	d01f      	beq.n	8008bb8 <_svfprintf_r+0x9b8>
 8008b78:	2600      	movs	r6, #0
 8008b7a:	2d00      	cmp	r5, #0
 8008b7c:	9608      	str	r6, [sp, #32]
 8008b7e:	f77f ae5c 	ble.w	800883a <_svfprintf_r+0x63a>
 8008b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2bff      	cmp	r3, #255	; 0xff
 8008b88:	d107      	bne.n	8008b9a <_svfprintf_r+0x99a>
 8008b8a:	9b08      	ldr	r3, [sp, #32]
 8008b8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b8e:	4433      	add	r3, r6
 8008b90:	fb02 8803 	mla	r8, r2, r3, r8
 8008b94:	e651      	b.n	800883a <_svfprintf_r+0x63a>
 8008b96:	46a8      	mov	r8, r5
 8008b98:	e7e2      	b.n	8008b60 <_svfprintf_r+0x960>
 8008b9a:	42ab      	cmp	r3, r5
 8008b9c:	daf5      	bge.n	8008b8a <_svfprintf_r+0x98a>
 8008b9e:	1aed      	subs	r5, r5, r3
 8008ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ba2:	785b      	ldrb	r3, [r3, #1]
 8008ba4:	b133      	cbz	r3, 8008bb4 <_svfprintf_r+0x9b4>
 8008ba6:	9b08      	ldr	r3, [sp, #32]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	9308      	str	r3, [sp, #32]
 8008bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bae:	3301      	adds	r3, #1
 8008bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb2:	e7e6      	b.n	8008b82 <_svfprintf_r+0x982>
 8008bb4:	3601      	adds	r6, #1
 8008bb6:	e7e4      	b.n	8008b82 <_svfprintf_r+0x982>
 8008bb8:	9e08      	ldr	r6, [sp, #32]
 8008bba:	e63e      	b.n	800883a <_svfprintf_r+0x63a>
 8008bbc:	1d2b      	adds	r3, r5, #4
 8008bbe:	f01b 0f20 	tst.w	fp, #32
 8008bc2:	9306      	str	r3, [sp, #24]
 8008bc4:	d00a      	beq.n	8008bdc <_svfprintf_r+0x9dc>
 8008bc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bcc:	17d2      	asrs	r2, r2, #31
 8008bce:	e9c3 1200 	strd	r1, r2, [r3]
 8008bd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bd4:	9d06      	ldr	r5, [sp, #24]
 8008bd6:	9303      	str	r3, [sp, #12]
 8008bd8:	f7ff bb52 	b.w	8008280 <_svfprintf_r+0x80>
 8008bdc:	f01b 0f10 	tst.w	fp, #16
 8008be0:	d003      	beq.n	8008bea <_svfprintf_r+0x9ea>
 8008be2:	682b      	ldr	r3, [r5, #0]
 8008be4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008be6:	601a      	str	r2, [r3, #0]
 8008be8:	e7f3      	b.n	8008bd2 <_svfprintf_r+0x9d2>
 8008bea:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8008bee:	d003      	beq.n	8008bf8 <_svfprintf_r+0x9f8>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bf4:	801a      	strh	r2, [r3, #0]
 8008bf6:	e7ec      	b.n	8008bd2 <_svfprintf_r+0x9d2>
 8008bf8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8008bfc:	d0f1      	beq.n	8008be2 <_svfprintf_r+0x9e2>
 8008bfe:	682b      	ldr	r3, [r5, #0]
 8008c00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c02:	701a      	strb	r2, [r3, #0]
 8008c04:	e7e5      	b.n	8008bd2 <_svfprintf_r+0x9d2>
 8008c06:	f04b 0b10 	orr.w	fp, fp, #16
 8008c0a:	f01b 0320 	ands.w	r3, fp, #32
 8008c0e:	d020      	beq.n	8008c52 <_svfprintf_r+0xa52>
 8008c10:	3507      	adds	r5, #7
 8008c12:	f025 0307 	bic.w	r3, r5, #7
 8008c16:	461a      	mov	r2, r3
 8008c18:	685e      	ldr	r6, [r3, #4]
 8008c1a:	f852 5b08 	ldr.w	r5, [r2], #8
 8008c1e:	9206      	str	r2, [sp, #24]
 8008c20:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8008c24:	2300      	movs	r3, #0
 8008c26:	2200      	movs	r2, #0
 8008c28:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8008c2c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008c30:	f000 84a7 	beq.w	8009582 <_svfprintf_r+0x1382>
 8008c34:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8008c38:	9204      	str	r2, [sp, #16]
 8008c3a:	ea55 0206 	orrs.w	r2, r5, r6
 8008c3e:	f040 84a6 	bne.w	800958e <_svfprintf_r+0x138e>
 8008c42:	f1b8 0f00 	cmp.w	r8, #0
 8008c46:	f000 8107 	beq.w	8008e58 <_svfprintf_r+0xc58>
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	f040 84a2 	bne.w	8009594 <_svfprintf_r+0x1394>
 8008c50:	e0a3      	b.n	8008d9a <_svfprintf_r+0xb9a>
 8008c52:	462a      	mov	r2, r5
 8008c54:	f01b 0610 	ands.w	r6, fp, #16
 8008c58:	f852 5b04 	ldr.w	r5, [r2], #4
 8008c5c:	9206      	str	r2, [sp, #24]
 8008c5e:	d001      	beq.n	8008c64 <_svfprintf_r+0xa64>
 8008c60:	461e      	mov	r6, r3
 8008c62:	e7dd      	b.n	8008c20 <_svfprintf_r+0xa20>
 8008c64:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8008c68:	d001      	beq.n	8008c6e <_svfprintf_r+0xa6e>
 8008c6a:	b2ad      	uxth	r5, r5
 8008c6c:	e7d8      	b.n	8008c20 <_svfprintf_r+0xa20>
 8008c6e:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8008c72:	d0d5      	beq.n	8008c20 <_svfprintf_r+0xa20>
 8008c74:	b2ed      	uxtb	r5, r5
 8008c76:	e7f3      	b.n	8008c60 <_svfprintf_r+0xa60>
 8008c78:	462b      	mov	r3, r5
 8008c7a:	2278      	movs	r2, #120	; 0x78
 8008c7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c80:	9306      	str	r3, [sp, #24]
 8008c82:	f647 0330 	movw	r3, #30768	; 0x7830
 8008c86:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8008c8a:	4bab      	ldr	r3, [pc, #684]	; (8008f38 <_svfprintf_r+0xd38>)
 8008c8c:	9316      	str	r3, [sp, #88]	; 0x58
 8008c8e:	2600      	movs	r6, #0
 8008c90:	f04b 0b02 	orr.w	fp, fp, #2
 8008c94:	2302      	movs	r3, #2
 8008c96:	9207      	str	r2, [sp, #28]
 8008c98:	e7c5      	b.n	8008c26 <_svfprintf_r+0xa26>
 8008c9a:	462b      	mov	r3, r5
 8008c9c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ca4:	9203      	str	r2, [sp, #12]
 8008ca6:	f04f 0500 	mov.w	r5, #0
 8008caa:	9306      	str	r3, [sp, #24]
 8008cac:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8008cb0:	d010      	beq.n	8008cd4 <_svfprintf_r+0xad4>
 8008cb2:	9803      	ldr	r0, [sp, #12]
 8008cb4:	4642      	mov	r2, r8
 8008cb6:	4629      	mov	r1, r5
 8008cb8:	f7f7 fa9a 	bl	80001f0 <memchr>
 8008cbc:	9004      	str	r0, [sp, #16]
 8008cbe:	2800      	cmp	r0, #0
 8008cc0:	f000 80e0 	beq.w	8008e84 <_svfprintf_r+0xc84>
 8008cc4:	9a03      	ldr	r2, [sp, #12]
 8008cc6:	9504      	str	r5, [sp, #16]
 8008cc8:	eba0 0802 	sub.w	r8, r0, r2
 8008ccc:	462f      	mov	r7, r5
 8008cce:	462e      	mov	r6, r5
 8008cd0:	9508      	str	r5, [sp, #32]
 8008cd2:	e5ba      	b.n	800884a <_svfprintf_r+0x64a>
 8008cd4:	9803      	ldr	r0, [sp, #12]
 8008cd6:	f7f7 fa83 	bl	80001e0 <strlen>
 8008cda:	462f      	mov	r7, r5
 8008cdc:	4680      	mov	r8, r0
 8008cde:	9504      	str	r5, [sp, #16]
 8008ce0:	463e      	mov	r6, r7
 8008ce2:	463b      	mov	r3, r7
 8008ce4:	e460      	b.n	80085a8 <_svfprintf_r+0x3a8>
 8008ce6:	f04b 0b10 	orr.w	fp, fp, #16
 8008cea:	f01b 0320 	ands.w	r3, fp, #32
 8008cee:	d009      	beq.n	8008d04 <_svfprintf_r+0xb04>
 8008cf0:	3507      	adds	r5, #7
 8008cf2:	f025 0307 	bic.w	r3, r5, #7
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	685e      	ldr	r6, [r3, #4]
 8008cfa:	f852 5b08 	ldr.w	r5, [r2], #8
 8008cfe:	9206      	str	r2, [sp, #24]
 8008d00:	2301      	movs	r3, #1
 8008d02:	e790      	b.n	8008c26 <_svfprintf_r+0xa26>
 8008d04:	462a      	mov	r2, r5
 8008d06:	f01b 0610 	ands.w	r6, fp, #16
 8008d0a:	f852 5b04 	ldr.w	r5, [r2], #4
 8008d0e:	9206      	str	r2, [sp, #24]
 8008d10:	d001      	beq.n	8008d16 <_svfprintf_r+0xb16>
 8008d12:	461e      	mov	r6, r3
 8008d14:	e7f4      	b.n	8008d00 <_svfprintf_r+0xb00>
 8008d16:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8008d1a:	d001      	beq.n	8008d20 <_svfprintf_r+0xb20>
 8008d1c:	b2ad      	uxth	r5, r5
 8008d1e:	e7ef      	b.n	8008d00 <_svfprintf_r+0xb00>
 8008d20:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8008d24:	d0ec      	beq.n	8008d00 <_svfprintf_r+0xb00>
 8008d26:	b2ed      	uxtb	r5, r5
 8008d28:	e7f3      	b.n	8008d12 <_svfprintf_r+0xb12>
 8008d2a:	4b84      	ldr	r3, [pc, #528]	; (8008f3c <_svfprintf_r+0xd3c>)
 8008d2c:	9316      	str	r3, [sp, #88]	; 0x58
 8008d2e:	f01b 0320 	ands.w	r3, fp, #32
 8008d32:	d01b      	beq.n	8008d6c <_svfprintf_r+0xb6c>
 8008d34:	3507      	adds	r5, #7
 8008d36:	f025 0307 	bic.w	r3, r5, #7
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	685e      	ldr	r6, [r3, #4]
 8008d3e:	f852 5b08 	ldr.w	r5, [r2], #8
 8008d42:	9206      	str	r2, [sp, #24]
 8008d44:	f01b 0f01 	tst.w	fp, #1
 8008d48:	d00a      	beq.n	8008d60 <_svfprintf_r+0xb60>
 8008d4a:	ea55 0306 	orrs.w	r3, r5, r6
 8008d4e:	d007      	beq.n	8008d60 <_svfprintf_r+0xb60>
 8008d50:	2330      	movs	r3, #48	; 0x30
 8008d52:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8008d56:	9b07      	ldr	r3, [sp, #28]
 8008d58:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8008d5c:	f04b 0b02 	orr.w	fp, fp, #2
 8008d60:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8008d64:	2302      	movs	r3, #2
 8008d66:	e75e      	b.n	8008c26 <_svfprintf_r+0xa26>
 8008d68:	4b73      	ldr	r3, [pc, #460]	; (8008f38 <_svfprintf_r+0xd38>)
 8008d6a:	e7df      	b.n	8008d2c <_svfprintf_r+0xb2c>
 8008d6c:	462a      	mov	r2, r5
 8008d6e:	f01b 0610 	ands.w	r6, fp, #16
 8008d72:	f852 5b04 	ldr.w	r5, [r2], #4
 8008d76:	9206      	str	r2, [sp, #24]
 8008d78:	d001      	beq.n	8008d7e <_svfprintf_r+0xb7e>
 8008d7a:	461e      	mov	r6, r3
 8008d7c:	e7e2      	b.n	8008d44 <_svfprintf_r+0xb44>
 8008d7e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8008d82:	d001      	beq.n	8008d88 <_svfprintf_r+0xb88>
 8008d84:	b2ad      	uxth	r5, r5
 8008d86:	e7dd      	b.n	8008d44 <_svfprintf_r+0xb44>
 8008d88:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8008d8c:	d0da      	beq.n	8008d44 <_svfprintf_r+0xb44>
 8008d8e:	b2ed      	uxtb	r5, r5
 8008d90:	e7f3      	b.n	8008d7a <_svfprintf_r+0xb7a>
 8008d92:	2d0a      	cmp	r5, #10
 8008d94:	f176 0300 	sbcs.w	r3, r6, #0
 8008d98:	d206      	bcs.n	8008da8 <_svfprintf_r+0xba8>
 8008d9a:	3530      	adds	r5, #48	; 0x30
 8008d9c:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 8008da0:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8008da4:	f000 bc16 	b.w	80095d4 <_svfprintf_r+0x13d4>
 8008da8:	2300      	movs	r3, #0
 8008daa:	9305      	str	r3, [sp, #20]
 8008dac:	9b04      	ldr	r3, [sp, #16]
 8008dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008db2:	af4e      	add	r7, sp, #312	; 0x138
 8008db4:	9308      	str	r3, [sp, #32]
 8008db6:	220a      	movs	r2, #10
 8008db8:	2300      	movs	r3, #0
 8008dba:	4628      	mov	r0, r5
 8008dbc:	4631      	mov	r1, r6
 8008dbe:	f7f7 ff4b 	bl	8000c58 <__aeabi_uldivmod>
 8008dc2:	1e7b      	subs	r3, r7, #1
 8008dc4:	9303      	str	r3, [sp, #12]
 8008dc6:	9b05      	ldr	r3, [sp, #20]
 8008dc8:	9010      	str	r0, [sp, #64]	; 0x40
 8008dca:	3301      	adds	r3, #1
 8008dcc:	9305      	str	r3, [sp, #20]
 8008dce:	9b08      	ldr	r3, [sp, #32]
 8008dd0:	3230      	adds	r2, #48	; 0x30
 8008dd2:	468b      	mov	fp, r1
 8008dd4:	f807 2c01 	strb.w	r2, [r7, #-1]
 8008dd8:	b1d3      	cbz	r3, 8008e10 <_svfprintf_r+0xc10>
 8008dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ddc:	9a05      	ldr	r2, [sp, #20]
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d115      	bne.n	8008e10 <_svfprintf_r+0xc10>
 8008de4:	2aff      	cmp	r2, #255	; 0xff
 8008de6:	d013      	beq.n	8008e10 <_svfprintf_r+0xc10>
 8008de8:	2d0a      	cmp	r5, #10
 8008dea:	f176 0300 	sbcs.w	r3, r6, #0
 8008dee:	d30f      	bcc.n	8008e10 <_svfprintf_r+0xc10>
 8008df0:	9b03      	ldr	r3, [sp, #12]
 8008df2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008df4:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008df6:	1a9b      	subs	r3, r3, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	9303      	str	r3, [sp, #12]
 8008dfc:	f000 fcf9 	bl	80097f2 <strncpy>
 8008e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e02:	785b      	ldrb	r3, [r3, #1]
 8008e04:	b11b      	cbz	r3, 8008e0e <_svfprintf_r+0xc0e>
 8008e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e08:	3301      	adds	r3, #1
 8008e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	9305      	str	r3, [sp, #20]
 8008e10:	2d0a      	cmp	r5, #10
 8008e12:	f176 0600 	sbcs.w	r6, r6, #0
 8008e16:	d20b      	bcs.n	8008e30 <_svfprintf_r+0xc30>
 8008e18:	9b03      	ldr	r3, [sp, #12]
 8008e1a:	f8dd b010 	ldr.w	fp, [sp, #16]
 8008e1e:	aa4e      	add	r2, sp, #312	; 0x138
 8008e20:	4647      	mov	r7, r8
 8008e22:	eba2 0803 	sub.w	r8, r2, r3
 8008e26:	2300      	movs	r3, #0
 8008e28:	9304      	str	r3, [sp, #16]
 8008e2a:	461e      	mov	r6, r3
 8008e2c:	f7ff bbbc 	b.w	80085a8 <_svfprintf_r+0x3a8>
 8008e30:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008e32:	9f03      	ldr	r7, [sp, #12]
 8008e34:	465e      	mov	r6, fp
 8008e36:	e7be      	b.n	8008db6 <_svfprintf_r+0xbb6>
 8008e38:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e3a:	f005 030f 	and.w	r3, r5, #15
 8008e3e:	092d      	lsrs	r5, r5, #4
 8008e40:	5cd3      	ldrb	r3, [r2, r3]
 8008e42:	9a03      	ldr	r2, [sp, #12]
 8008e44:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 8008e48:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8008e4c:	0936      	lsrs	r6, r6, #4
 8008e4e:	ea55 0306 	orrs.w	r3, r5, r6
 8008e52:	9203      	str	r2, [sp, #12]
 8008e54:	d1f0      	bne.n	8008e38 <_svfprintf_r+0xc38>
 8008e56:	e7df      	b.n	8008e18 <_svfprintf_r+0xc18>
 8008e58:	b933      	cbnz	r3, 8008e68 <_svfprintf_r+0xc68>
 8008e5a:	f01b 0f01 	tst.w	fp, #1
 8008e5e:	d003      	beq.n	8008e68 <_svfprintf_r+0xc68>
 8008e60:	2330      	movs	r3, #48	; 0x30
 8008e62:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8008e66:	e79b      	b.n	8008da0 <_svfprintf_r+0xba0>
 8008e68:	ab4e      	add	r3, sp, #312	; 0x138
 8008e6a:	e3b3      	b.n	80095d4 <_svfprintf_r+0x13d4>
 8008e6c:	9b07      	ldr	r3, [sp, #28]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	f000 837c 	beq.w	800956c <_svfprintf_r+0x136c>
 8008e74:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008e7e:	9506      	str	r5, [sp, #24]
 8008e80:	f7ff bb1f 	b.w	80084c2 <_svfprintf_r+0x2c2>
 8008e84:	9f04      	ldr	r7, [sp, #16]
 8008e86:	e72b      	b.n	8008ce0 <_svfprintf_r+0xae0>
 8008e88:	2010      	movs	r0, #16
 8008e8a:	4403      	add	r3, r0
 8008e8c:	2a07      	cmp	r2, #7
 8008e8e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8008e92:	6060      	str	r0, [r4, #4]
 8008e94:	dd08      	ble.n	8008ea8 <_svfprintf_r+0xca8>
 8008e96:	aa22      	add	r2, sp, #136	; 0x88
 8008e98:	4649      	mov	r1, r9
 8008e9a:	4650      	mov	r0, sl
 8008e9c:	f001 fef4 	bl	800ac88 <__ssprint_r>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	f040 8341 	bne.w	8009528 <_svfprintf_r+0x1328>
 8008ea6:	a925      	add	r1, sp, #148	; 0x94
 8008ea8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008eaa:	3b10      	subs	r3, #16
 8008eac:	9312      	str	r3, [sp, #72]	; 0x48
 8008eae:	460c      	mov	r4, r1
 8008eb0:	e4e7      	b.n	8008882 <_svfprintf_r+0x682>
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	e502      	b.n	80088bc <_svfprintf_r+0x6bc>
 8008eb6:	aa22      	add	r2, sp, #136	; 0x88
 8008eb8:	4649      	mov	r1, r9
 8008eba:	4650      	mov	r0, sl
 8008ebc:	f001 fee4 	bl	800ac88 <__ssprint_r>
 8008ec0:	2800      	cmp	r0, #0
 8008ec2:	f040 8331 	bne.w	8009528 <_svfprintf_r+0x1328>
 8008ec6:	ac25      	add	r4, sp, #148	; 0x94
 8008ec8:	e50a      	b.n	80088e0 <_svfprintf_r+0x6e0>
 8008eca:	aa22      	add	r2, sp, #136	; 0x88
 8008ecc:	4649      	mov	r1, r9
 8008ece:	4650      	mov	r0, sl
 8008ed0:	f001 feda 	bl	800ac88 <__ssprint_r>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	f040 8327 	bne.w	8009528 <_svfprintf_r+0x1328>
 8008eda:	ac25      	add	r4, sp, #148	; 0x94
 8008edc:	e510      	b.n	8008900 <_svfprintf_r+0x700>
 8008ede:	2010      	movs	r0, #16
 8008ee0:	4403      	add	r3, r0
 8008ee2:	2a07      	cmp	r2, #7
 8008ee4:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8008ee8:	6060      	str	r0, [r4, #4]
 8008eea:	dd08      	ble.n	8008efe <_svfprintf_r+0xcfe>
 8008eec:	aa22      	add	r2, sp, #136	; 0x88
 8008eee:	4649      	mov	r1, r9
 8008ef0:	4650      	mov	r0, sl
 8008ef2:	f001 fec9 	bl	800ac88 <__ssprint_r>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f040 8316 	bne.w	8009528 <_svfprintf_r+0x1328>
 8008efc:	a925      	add	r1, sp, #148	; 0x94
 8008efe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f00:	3b10      	subs	r3, #16
 8008f02:	9312      	str	r3, [sp, #72]	; 0x48
 8008f04:	460c      	mov	r4, r1
 8008f06:	e504      	b.n	8008912 <_svfprintf_r+0x712>
 8008f08:	460c      	mov	r4, r1
 8008f0a:	e51f      	b.n	800894c <_svfprintf_r+0x74c>
 8008f0c:	2010      	movs	r0, #16
 8008f0e:	4402      	add	r2, r0
 8008f10:	2b07      	cmp	r3, #7
 8008f12:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008f16:	6060      	str	r0, [r4, #4]
 8008f18:	dd08      	ble.n	8008f2c <_svfprintf_r+0xd2c>
 8008f1a:	aa22      	add	r2, sp, #136	; 0x88
 8008f1c:	4649      	mov	r1, r9
 8008f1e:	4650      	mov	r0, sl
 8008f20:	f001 feb2 	bl	800ac88 <__ssprint_r>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	f040 82ff 	bne.w	8009528 <_svfprintf_r+0x1328>
 8008f2a:	a925      	add	r1, sp, #148	; 0x94
 8008f2c:	3f10      	subs	r7, #16
 8008f2e:	460c      	mov	r4, r1
 8008f30:	e510      	b.n	8008954 <_svfprintf_r+0x754>
 8008f32:	460c      	mov	r4, r1
 8008f34:	e536      	b.n	80089a4 <_svfprintf_r+0x7a4>
 8008f36:	bf00      	nop
 8008f38:	0800d3d4 	.word	0x0800d3d4
 8008f3c:	0800d3e5 	.word	0x0800d3e5
 8008f40:	9b07      	ldr	r3, [sp, #28]
 8008f42:	2b65      	cmp	r3, #101	; 0x65
 8008f44:	f340 823a 	ble.w	80093bc <_svfprintf_r+0x11bc>
 8008f48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f7f7 fdc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d068      	beq.n	800902a <_svfprintf_r+0xe2a>
 8008f58:	4b6d      	ldr	r3, [pc, #436]	; (8009110 <_svfprintf_r+0xf10>)
 8008f5a:	6023      	str	r3, [r4, #0]
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	441f      	add	r7, r3
 8008f60:	6063      	str	r3, [r4, #4]
 8008f62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f64:	9724      	str	r7, [sp, #144]	; 0x90
 8008f66:	3301      	adds	r3, #1
 8008f68:	2b07      	cmp	r3, #7
 8008f6a:	9323      	str	r3, [sp, #140]	; 0x8c
 8008f6c:	dc37      	bgt.n	8008fde <_svfprintf_r+0xdde>
 8008f6e:	3408      	adds	r4, #8
 8008f70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008f72:	9a05      	ldr	r2, [sp, #20]
 8008f74:	4293      	cmp	r3, r2
 8008f76:	db03      	blt.n	8008f80 <_svfprintf_r+0xd80>
 8008f78:	f01b 0f01 	tst.w	fp, #1
 8008f7c:	f43f ad23 	beq.w	80089c6 <_svfprintf_r+0x7c6>
 8008f80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f88:	6063      	str	r3, [r4, #4]
 8008f8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f8c:	4413      	add	r3, r2
 8008f8e:	9324      	str	r3, [sp, #144]	; 0x90
 8008f90:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f92:	3301      	adds	r3, #1
 8008f94:	2b07      	cmp	r3, #7
 8008f96:	9323      	str	r3, [sp, #140]	; 0x8c
 8008f98:	dc2b      	bgt.n	8008ff2 <_svfprintf_r+0xdf2>
 8008f9a:	3408      	adds	r4, #8
 8008f9c:	9b05      	ldr	r3, [sp, #20]
 8008f9e:	1e5d      	subs	r5, r3, #1
 8008fa0:	2d00      	cmp	r5, #0
 8008fa2:	f77f ad10 	ble.w	80089c6 <_svfprintf_r+0x7c6>
 8008fa6:	4e5b      	ldr	r6, [pc, #364]	; (8009114 <_svfprintf_r+0xf14>)
 8008fa8:	2710      	movs	r7, #16
 8008faa:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008fae:	2d10      	cmp	r5, #16
 8008fb0:	f103 0301 	add.w	r3, r3, #1
 8008fb4:	f104 0108 	add.w	r1, r4, #8
 8008fb8:	6026      	str	r6, [r4, #0]
 8008fba:	dc24      	bgt.n	8009006 <_svfprintf_r+0xe06>
 8008fbc:	6065      	str	r5, [r4, #4]
 8008fbe:	4415      	add	r5, r2
 8008fc0:	9524      	str	r5, [sp, #144]	; 0x90
 8008fc2:	2b07      	cmp	r3, #7
 8008fc4:	9323      	str	r3, [sp, #140]	; 0x8c
 8008fc6:	f340 828e 	ble.w	80094e6 <_svfprintf_r+0x12e6>
 8008fca:	aa22      	add	r2, sp, #136	; 0x88
 8008fcc:	4649      	mov	r1, r9
 8008fce:	4650      	mov	r0, sl
 8008fd0:	f001 fe5a 	bl	800ac88 <__ssprint_r>
 8008fd4:	2800      	cmp	r0, #0
 8008fd6:	f040 82a7 	bne.w	8009528 <_svfprintf_r+0x1328>
 8008fda:	ac25      	add	r4, sp, #148	; 0x94
 8008fdc:	e4f3      	b.n	80089c6 <_svfprintf_r+0x7c6>
 8008fde:	aa22      	add	r2, sp, #136	; 0x88
 8008fe0:	4649      	mov	r1, r9
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	f001 fe50 	bl	800ac88 <__ssprint_r>
 8008fe8:	2800      	cmp	r0, #0
 8008fea:	f040 829d 	bne.w	8009528 <_svfprintf_r+0x1328>
 8008fee:	ac25      	add	r4, sp, #148	; 0x94
 8008ff0:	e7be      	b.n	8008f70 <_svfprintf_r+0xd70>
 8008ff2:	aa22      	add	r2, sp, #136	; 0x88
 8008ff4:	4649      	mov	r1, r9
 8008ff6:	4650      	mov	r0, sl
 8008ff8:	f001 fe46 	bl	800ac88 <__ssprint_r>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f040 8293 	bne.w	8009528 <_svfprintf_r+0x1328>
 8009002:	ac25      	add	r4, sp, #148	; 0x94
 8009004:	e7ca      	b.n	8008f9c <_svfprintf_r+0xd9c>
 8009006:	3210      	adds	r2, #16
 8009008:	2b07      	cmp	r3, #7
 800900a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800900e:	6067      	str	r7, [r4, #4]
 8009010:	dd08      	ble.n	8009024 <_svfprintf_r+0xe24>
 8009012:	aa22      	add	r2, sp, #136	; 0x88
 8009014:	4649      	mov	r1, r9
 8009016:	4650      	mov	r0, sl
 8009018:	f001 fe36 	bl	800ac88 <__ssprint_r>
 800901c:	2800      	cmp	r0, #0
 800901e:	f040 8283 	bne.w	8009528 <_svfprintf_r+0x1328>
 8009022:	a925      	add	r1, sp, #148	; 0x94
 8009024:	3d10      	subs	r5, #16
 8009026:	460c      	mov	r4, r1
 8009028:	e7bf      	b.n	8008faa <_svfprintf_r+0xdaa>
 800902a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800902c:	2b00      	cmp	r3, #0
 800902e:	dc73      	bgt.n	8009118 <_svfprintf_r+0xf18>
 8009030:	4b37      	ldr	r3, [pc, #220]	; (8009110 <_svfprintf_r+0xf10>)
 8009032:	6023      	str	r3, [r4, #0]
 8009034:	2301      	movs	r3, #1
 8009036:	441f      	add	r7, r3
 8009038:	6063      	str	r3, [r4, #4]
 800903a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800903c:	9724      	str	r7, [sp, #144]	; 0x90
 800903e:	3301      	adds	r3, #1
 8009040:	2b07      	cmp	r3, #7
 8009042:	9323      	str	r3, [sp, #140]	; 0x8c
 8009044:	dc3d      	bgt.n	80090c2 <_svfprintf_r+0xec2>
 8009046:	3408      	adds	r4, #8
 8009048:	9905      	ldr	r1, [sp, #20]
 800904a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800904c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800904e:	430b      	orrs	r3, r1
 8009050:	f00b 0101 	and.w	r1, fp, #1
 8009054:	430b      	orrs	r3, r1
 8009056:	f43f acb6 	beq.w	80089c6 <_svfprintf_r+0x7c6>
 800905a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009060:	6063      	str	r3, [r4, #4]
 8009062:	441a      	add	r2, r3
 8009064:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009066:	9224      	str	r2, [sp, #144]	; 0x90
 8009068:	3301      	adds	r3, #1
 800906a:	2b07      	cmp	r3, #7
 800906c:	9323      	str	r3, [sp, #140]	; 0x8c
 800906e:	dc32      	bgt.n	80090d6 <_svfprintf_r+0xed6>
 8009070:	3408      	adds	r4, #8
 8009072:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009074:	2d00      	cmp	r5, #0
 8009076:	da1b      	bge.n	80090b0 <_svfprintf_r+0xeb0>
 8009078:	4e26      	ldr	r6, [pc, #152]	; (8009114 <_svfprintf_r+0xf14>)
 800907a:	426d      	negs	r5, r5
 800907c:	4623      	mov	r3, r4
 800907e:	2710      	movs	r7, #16
 8009080:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8009084:	2d10      	cmp	r5, #16
 8009086:	f102 0201 	add.w	r2, r2, #1
 800908a:	f104 0408 	add.w	r4, r4, #8
 800908e:	601e      	str	r6, [r3, #0]
 8009090:	dc2b      	bgt.n	80090ea <_svfprintf_r+0xeea>
 8009092:	605d      	str	r5, [r3, #4]
 8009094:	2a07      	cmp	r2, #7
 8009096:	440d      	add	r5, r1
 8009098:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800909c:	dd08      	ble.n	80090b0 <_svfprintf_r+0xeb0>
 800909e:	aa22      	add	r2, sp, #136	; 0x88
 80090a0:	4649      	mov	r1, r9
 80090a2:	4650      	mov	r0, sl
 80090a4:	f001 fdf0 	bl	800ac88 <__ssprint_r>
 80090a8:	2800      	cmp	r0, #0
 80090aa:	f040 823d 	bne.w	8009528 <_svfprintf_r+0x1328>
 80090ae:	ac25      	add	r4, sp, #148	; 0x94
 80090b0:	9b03      	ldr	r3, [sp, #12]
 80090b2:	6023      	str	r3, [r4, #0]
 80090b4:	9b05      	ldr	r3, [sp, #20]
 80090b6:	9a05      	ldr	r2, [sp, #20]
 80090b8:	6063      	str	r3, [r4, #4]
 80090ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80090bc:	4413      	add	r3, r2
 80090be:	9324      	str	r3, [sp, #144]	; 0x90
 80090c0:	e47a      	b.n	80089b8 <_svfprintf_r+0x7b8>
 80090c2:	aa22      	add	r2, sp, #136	; 0x88
 80090c4:	4649      	mov	r1, r9
 80090c6:	4650      	mov	r0, sl
 80090c8:	f001 fdde 	bl	800ac88 <__ssprint_r>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	f040 822b 	bne.w	8009528 <_svfprintf_r+0x1328>
 80090d2:	ac25      	add	r4, sp, #148	; 0x94
 80090d4:	e7b8      	b.n	8009048 <_svfprintf_r+0xe48>
 80090d6:	aa22      	add	r2, sp, #136	; 0x88
 80090d8:	4649      	mov	r1, r9
 80090da:	4650      	mov	r0, sl
 80090dc:	f001 fdd4 	bl	800ac88 <__ssprint_r>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	f040 8221 	bne.w	8009528 <_svfprintf_r+0x1328>
 80090e6:	ac25      	add	r4, sp, #148	; 0x94
 80090e8:	e7c3      	b.n	8009072 <_svfprintf_r+0xe72>
 80090ea:	3110      	adds	r1, #16
 80090ec:	2a07      	cmp	r2, #7
 80090ee:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 80090f2:	605f      	str	r7, [r3, #4]
 80090f4:	dd08      	ble.n	8009108 <_svfprintf_r+0xf08>
 80090f6:	aa22      	add	r2, sp, #136	; 0x88
 80090f8:	4649      	mov	r1, r9
 80090fa:	4650      	mov	r0, sl
 80090fc:	f001 fdc4 	bl	800ac88 <__ssprint_r>
 8009100:	2800      	cmp	r0, #0
 8009102:	f040 8211 	bne.w	8009528 <_svfprintf_r+0x1328>
 8009106:	ac25      	add	r4, sp, #148	; 0x94
 8009108:	3d10      	subs	r5, #16
 800910a:	4623      	mov	r3, r4
 800910c:	e7b8      	b.n	8009080 <_svfprintf_r+0xe80>
 800910e:	bf00      	nop
 8009110:	0800d3f6 	.word	0x0800d3f6
 8009114:	0800d408 	.word	0x0800d408
 8009118:	9b05      	ldr	r3, [sp, #20]
 800911a:	42ab      	cmp	r3, r5
 800911c:	bfa8      	it	ge
 800911e:	462b      	movge	r3, r5
 8009120:	2b00      	cmp	r3, #0
 8009122:	4698      	mov	r8, r3
 8009124:	dd0a      	ble.n	800913c <_svfprintf_r+0xf3c>
 8009126:	9b03      	ldr	r3, [sp, #12]
 8009128:	e9c4 3800 	strd	r3, r8, [r4]
 800912c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800912e:	3301      	adds	r3, #1
 8009130:	4447      	add	r7, r8
 8009132:	2b07      	cmp	r3, #7
 8009134:	9724      	str	r7, [sp, #144]	; 0x90
 8009136:	9323      	str	r3, [sp, #140]	; 0x8c
 8009138:	dc7b      	bgt.n	8009232 <_svfprintf_r+0x1032>
 800913a:	3408      	adds	r4, #8
 800913c:	f1b8 0f00 	cmp.w	r8, #0
 8009140:	bfac      	ite	ge
 8009142:	eba5 0708 	subge.w	r7, r5, r8
 8009146:	462f      	movlt	r7, r5
 8009148:	2f00      	cmp	r7, #0
 800914a:	dd1a      	ble.n	8009182 <_svfprintf_r+0xf82>
 800914c:	f8df 8368 	ldr.w	r8, [pc, #872]	; 80094b8 <_svfprintf_r+0x12b8>
 8009150:	f8c4 8000 	str.w	r8, [r4]
 8009154:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009158:	2f10      	cmp	r7, #16
 800915a:	f103 0301 	add.w	r3, r3, #1
 800915e:	f104 0108 	add.w	r1, r4, #8
 8009162:	dc70      	bgt.n	8009246 <_svfprintf_r+0x1046>
 8009164:	6067      	str	r7, [r4, #4]
 8009166:	2b07      	cmp	r3, #7
 8009168:	4417      	add	r7, r2
 800916a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800916e:	dd7d      	ble.n	800926c <_svfprintf_r+0x106c>
 8009170:	aa22      	add	r2, sp, #136	; 0x88
 8009172:	4649      	mov	r1, r9
 8009174:	4650      	mov	r0, sl
 8009176:	f001 fd87 	bl	800ac88 <__ssprint_r>
 800917a:	2800      	cmp	r0, #0
 800917c:	f040 81d4 	bne.w	8009528 <_svfprintf_r+0x1328>
 8009180:	ac25      	add	r4, sp, #148	; 0x94
 8009182:	9b03      	ldr	r3, [sp, #12]
 8009184:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8009188:	441d      	add	r5, r3
 800918a:	d00a      	beq.n	80091a2 <_svfprintf_r+0xfa2>
 800918c:	9b08      	ldr	r3, [sp, #32]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d16e      	bne.n	8009270 <_svfprintf_r+0x1070>
 8009192:	2e00      	cmp	r6, #0
 8009194:	d16e      	bne.n	8009274 <_svfprintf_r+0x1074>
 8009196:	9b03      	ldr	r3, [sp, #12]
 8009198:	9a05      	ldr	r2, [sp, #20]
 800919a:	4413      	add	r3, r2
 800919c:	429d      	cmp	r5, r3
 800919e:	bf28      	it	cs
 80091a0:	461d      	movcs	r5, r3
 80091a2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80091a4:	9a05      	ldr	r2, [sp, #20]
 80091a6:	4293      	cmp	r3, r2
 80091a8:	db02      	blt.n	80091b0 <_svfprintf_r+0xfb0>
 80091aa:	f01b 0f01 	tst.w	fp, #1
 80091ae:	d00e      	beq.n	80091ce <_svfprintf_r+0xfce>
 80091b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80091b2:	6023      	str	r3, [r4, #0]
 80091b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091b8:	6063      	str	r3, [r4, #4]
 80091ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80091bc:	4413      	add	r3, r2
 80091be:	9324      	str	r3, [sp, #144]	; 0x90
 80091c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091c2:	3301      	adds	r3, #1
 80091c4:	2b07      	cmp	r3, #7
 80091c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80091c8:	f300 80d2 	bgt.w	8009370 <_svfprintf_r+0x1170>
 80091cc:	3408      	adds	r4, #8
 80091ce:	9b05      	ldr	r3, [sp, #20]
 80091d0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80091d2:	9a05      	ldr	r2, [sp, #20]
 80091d4:	1b9e      	subs	r6, r3, r6
 80091d6:	9b03      	ldr	r3, [sp, #12]
 80091d8:	4413      	add	r3, r2
 80091da:	1b5b      	subs	r3, r3, r5
 80091dc:	429e      	cmp	r6, r3
 80091de:	bfa8      	it	ge
 80091e0:	461e      	movge	r6, r3
 80091e2:	2e00      	cmp	r6, #0
 80091e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80091e6:	dd0a      	ble.n	80091fe <_svfprintf_r+0xffe>
 80091e8:	4433      	add	r3, r6
 80091ea:	9324      	str	r3, [sp, #144]	; 0x90
 80091ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091ee:	3301      	adds	r3, #1
 80091f0:	2b07      	cmp	r3, #7
 80091f2:	e9c4 5600 	strd	r5, r6, [r4]
 80091f6:	9323      	str	r3, [sp, #140]	; 0x8c
 80091f8:	f300 80c4 	bgt.w	8009384 <_svfprintf_r+0x1184>
 80091fc:	3408      	adds	r4, #8
 80091fe:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009200:	9b05      	ldr	r3, [sp, #20]
 8009202:	2e00      	cmp	r6, #0
 8009204:	eba3 0505 	sub.w	r5, r3, r5
 8009208:	bfa8      	it	ge
 800920a:	1bad      	subge	r5, r5, r6
 800920c:	2d00      	cmp	r5, #0
 800920e:	f77f abda 	ble.w	80089c6 <_svfprintf_r+0x7c6>
 8009212:	4ea9      	ldr	r6, [pc, #676]	; (80094b8 <_svfprintf_r+0x12b8>)
 8009214:	2710      	movs	r7, #16
 8009216:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800921a:	2d10      	cmp	r5, #16
 800921c:	f103 0301 	add.w	r3, r3, #1
 8009220:	f104 0108 	add.w	r1, r4, #8
 8009224:	6026      	str	r6, [r4, #0]
 8009226:	f300 80b7 	bgt.w	8009398 <_svfprintf_r+0x1198>
 800922a:	442a      	add	r2, r5
 800922c:	6065      	str	r5, [r4, #4]
 800922e:	9224      	str	r2, [sp, #144]	; 0x90
 8009230:	e6c7      	b.n	8008fc2 <_svfprintf_r+0xdc2>
 8009232:	aa22      	add	r2, sp, #136	; 0x88
 8009234:	4649      	mov	r1, r9
 8009236:	4650      	mov	r0, sl
 8009238:	f001 fd26 	bl	800ac88 <__ssprint_r>
 800923c:	2800      	cmp	r0, #0
 800923e:	f040 8173 	bne.w	8009528 <_svfprintf_r+0x1328>
 8009242:	ac25      	add	r4, sp, #148	; 0x94
 8009244:	e77a      	b.n	800913c <_svfprintf_r+0xf3c>
 8009246:	2010      	movs	r0, #16
 8009248:	4402      	add	r2, r0
 800924a:	2b07      	cmp	r3, #7
 800924c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009250:	6060      	str	r0, [r4, #4]
 8009252:	dd08      	ble.n	8009266 <_svfprintf_r+0x1066>
 8009254:	aa22      	add	r2, sp, #136	; 0x88
 8009256:	4649      	mov	r1, r9
 8009258:	4650      	mov	r0, sl
 800925a:	f001 fd15 	bl	800ac88 <__ssprint_r>
 800925e:	2800      	cmp	r0, #0
 8009260:	f040 8162 	bne.w	8009528 <_svfprintf_r+0x1328>
 8009264:	a925      	add	r1, sp, #148	; 0x94
 8009266:	3f10      	subs	r7, #16
 8009268:	460c      	mov	r4, r1
 800926a:	e771      	b.n	8009150 <_svfprintf_r+0xf50>
 800926c:	460c      	mov	r4, r1
 800926e:	e788      	b.n	8009182 <_svfprintf_r+0xf82>
 8009270:	2e00      	cmp	r6, #0
 8009272:	d04d      	beq.n	8009310 <_svfprintf_r+0x1110>
 8009274:	3e01      	subs	r6, #1
 8009276:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009278:	6023      	str	r3, [r4, #0]
 800927a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800927c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800927e:	6063      	str	r3, [r4, #4]
 8009280:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009282:	4413      	add	r3, r2
 8009284:	9324      	str	r3, [sp, #144]	; 0x90
 8009286:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009288:	3301      	adds	r3, #1
 800928a:	2b07      	cmp	r3, #7
 800928c:	9323      	str	r3, [sp, #140]	; 0x8c
 800928e:	dc46      	bgt.n	800931e <_svfprintf_r+0x111e>
 8009290:	3408      	adds	r4, #8
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	9a05      	ldr	r2, [sp, #20]
 8009296:	eb03 0802 	add.w	r8, r3, r2
 800929a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	eba8 0805 	sub.w	r8, r8, r5
 80092a2:	4598      	cmp	r8, r3
 80092a4:	bfa8      	it	ge
 80092a6:	4698      	movge	r8, r3
 80092a8:	f1b8 0f00 	cmp.w	r8, #0
 80092ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80092ae:	dd09      	ble.n	80092c4 <_svfprintf_r+0x10c4>
 80092b0:	4443      	add	r3, r8
 80092b2:	9324      	str	r3, [sp, #144]	; 0x90
 80092b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80092b6:	3301      	adds	r3, #1
 80092b8:	2b07      	cmp	r3, #7
 80092ba:	e9c4 5800 	strd	r5, r8, [r4]
 80092be:	9323      	str	r3, [sp, #140]	; 0x8c
 80092c0:	dc37      	bgt.n	8009332 <_svfprintf_r+0x1132>
 80092c2:	3408      	adds	r4, #8
 80092c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c6:	781f      	ldrb	r7, [r3, #0]
 80092c8:	f1b8 0f00 	cmp.w	r8, #0
 80092cc:	bfa8      	it	ge
 80092ce:	eba7 0708 	subge.w	r7, r7, r8
 80092d2:	2f00      	cmp	r7, #0
 80092d4:	dd18      	ble.n	8009308 <_svfprintf_r+0x1108>
 80092d6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80092da:	4877      	ldr	r0, [pc, #476]	; (80094b8 <_svfprintf_r+0x12b8>)
 80092dc:	6020      	str	r0, [r4, #0]
 80092de:	2f10      	cmp	r7, #16
 80092e0:	f103 0301 	add.w	r3, r3, #1
 80092e4:	f104 0108 	add.w	r1, r4, #8
 80092e8:	dc2d      	bgt.n	8009346 <_svfprintf_r+0x1146>
 80092ea:	443a      	add	r2, r7
 80092ec:	2b07      	cmp	r3, #7
 80092ee:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80092f2:	6067      	str	r7, [r4, #4]
 80092f4:	dd3a      	ble.n	800936c <_svfprintf_r+0x116c>
 80092f6:	aa22      	add	r2, sp, #136	; 0x88
 80092f8:	4649      	mov	r1, r9
 80092fa:	4650      	mov	r0, sl
 80092fc:	f001 fcc4 	bl	800ac88 <__ssprint_r>
 8009300:	2800      	cmp	r0, #0
 8009302:	f040 8111 	bne.w	8009528 <_svfprintf_r+0x1328>
 8009306:	ac25      	add	r4, sp, #148	; 0x94
 8009308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	441d      	add	r5, r3
 800930e:	e73d      	b.n	800918c <_svfprintf_r+0xf8c>
 8009310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009312:	3b01      	subs	r3, #1
 8009314:	9309      	str	r3, [sp, #36]	; 0x24
 8009316:	9b08      	ldr	r3, [sp, #32]
 8009318:	3b01      	subs	r3, #1
 800931a:	9308      	str	r3, [sp, #32]
 800931c:	e7ab      	b.n	8009276 <_svfprintf_r+0x1076>
 800931e:	aa22      	add	r2, sp, #136	; 0x88
 8009320:	4649      	mov	r1, r9
 8009322:	4650      	mov	r0, sl
 8009324:	f001 fcb0 	bl	800ac88 <__ssprint_r>
 8009328:	2800      	cmp	r0, #0
 800932a:	f040 80fd 	bne.w	8009528 <_svfprintf_r+0x1328>
 800932e:	ac25      	add	r4, sp, #148	; 0x94
 8009330:	e7af      	b.n	8009292 <_svfprintf_r+0x1092>
 8009332:	aa22      	add	r2, sp, #136	; 0x88
 8009334:	4649      	mov	r1, r9
 8009336:	4650      	mov	r0, sl
 8009338:	f001 fca6 	bl	800ac88 <__ssprint_r>
 800933c:	2800      	cmp	r0, #0
 800933e:	f040 80f3 	bne.w	8009528 <_svfprintf_r+0x1328>
 8009342:	ac25      	add	r4, sp, #148	; 0x94
 8009344:	e7be      	b.n	80092c4 <_svfprintf_r+0x10c4>
 8009346:	2010      	movs	r0, #16
 8009348:	4402      	add	r2, r0
 800934a:	2b07      	cmp	r3, #7
 800934c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009350:	6060      	str	r0, [r4, #4]
 8009352:	dd08      	ble.n	8009366 <_svfprintf_r+0x1166>
 8009354:	aa22      	add	r2, sp, #136	; 0x88
 8009356:	4649      	mov	r1, r9
 8009358:	4650      	mov	r0, sl
 800935a:	f001 fc95 	bl	800ac88 <__ssprint_r>
 800935e:	2800      	cmp	r0, #0
 8009360:	f040 80e2 	bne.w	8009528 <_svfprintf_r+0x1328>
 8009364:	a925      	add	r1, sp, #148	; 0x94
 8009366:	3f10      	subs	r7, #16
 8009368:	460c      	mov	r4, r1
 800936a:	e7b4      	b.n	80092d6 <_svfprintf_r+0x10d6>
 800936c:	460c      	mov	r4, r1
 800936e:	e7cb      	b.n	8009308 <_svfprintf_r+0x1108>
 8009370:	aa22      	add	r2, sp, #136	; 0x88
 8009372:	4649      	mov	r1, r9
 8009374:	4650      	mov	r0, sl
 8009376:	f001 fc87 	bl	800ac88 <__ssprint_r>
 800937a:	2800      	cmp	r0, #0
 800937c:	f040 80d4 	bne.w	8009528 <_svfprintf_r+0x1328>
 8009380:	ac25      	add	r4, sp, #148	; 0x94
 8009382:	e724      	b.n	80091ce <_svfprintf_r+0xfce>
 8009384:	aa22      	add	r2, sp, #136	; 0x88
 8009386:	4649      	mov	r1, r9
 8009388:	4650      	mov	r0, sl
 800938a:	f001 fc7d 	bl	800ac88 <__ssprint_r>
 800938e:	2800      	cmp	r0, #0
 8009390:	f040 80ca 	bne.w	8009528 <_svfprintf_r+0x1328>
 8009394:	ac25      	add	r4, sp, #148	; 0x94
 8009396:	e732      	b.n	80091fe <_svfprintf_r+0xffe>
 8009398:	3210      	adds	r2, #16
 800939a:	2b07      	cmp	r3, #7
 800939c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80093a0:	6067      	str	r7, [r4, #4]
 80093a2:	dd08      	ble.n	80093b6 <_svfprintf_r+0x11b6>
 80093a4:	aa22      	add	r2, sp, #136	; 0x88
 80093a6:	4649      	mov	r1, r9
 80093a8:	4650      	mov	r0, sl
 80093aa:	f001 fc6d 	bl	800ac88 <__ssprint_r>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f040 80ba 	bne.w	8009528 <_svfprintf_r+0x1328>
 80093b4:	a925      	add	r1, sp, #148	; 0x94
 80093b6:	3d10      	subs	r5, #16
 80093b8:	460c      	mov	r4, r1
 80093ba:	e72c      	b.n	8009216 <_svfprintf_r+0x1016>
 80093bc:	9a05      	ldr	r2, [sp, #20]
 80093be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093c0:	2a01      	cmp	r2, #1
 80093c2:	9a03      	ldr	r2, [sp, #12]
 80093c4:	6022      	str	r2, [r4, #0]
 80093c6:	f107 0701 	add.w	r7, r7, #1
 80093ca:	f103 0301 	add.w	r3, r3, #1
 80093ce:	f04f 0201 	mov.w	r2, #1
 80093d2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80093d6:	f104 0508 	add.w	r5, r4, #8
 80093da:	6062      	str	r2, [r4, #4]
 80093dc:	dc02      	bgt.n	80093e4 <_svfprintf_r+0x11e4>
 80093de:	f01b 0f01 	tst.w	fp, #1
 80093e2:	d07b      	beq.n	80094dc <_svfprintf_r+0x12dc>
 80093e4:	2b07      	cmp	r3, #7
 80093e6:	dd08      	ble.n	80093fa <_svfprintf_r+0x11fa>
 80093e8:	aa22      	add	r2, sp, #136	; 0x88
 80093ea:	4649      	mov	r1, r9
 80093ec:	4650      	mov	r0, sl
 80093ee:	f001 fc4b 	bl	800ac88 <__ssprint_r>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	f040 8098 	bne.w	8009528 <_svfprintf_r+0x1328>
 80093f8:	ad25      	add	r5, sp, #148	; 0x94
 80093fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093fc:	602b      	str	r3, [r5, #0]
 80093fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009400:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009402:	606b      	str	r3, [r5, #4]
 8009404:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009406:	4413      	add	r3, r2
 8009408:	9324      	str	r3, [sp, #144]	; 0x90
 800940a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800940c:	3301      	adds	r3, #1
 800940e:	2b07      	cmp	r3, #7
 8009410:	9323      	str	r3, [sp, #140]	; 0x8c
 8009412:	dc32      	bgt.n	800947a <_svfprintf_r+0x127a>
 8009414:	3508      	adds	r5, #8
 8009416:	9b05      	ldr	r3, [sp, #20]
 8009418:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800941c:	1e5c      	subs	r4, r3, #1
 800941e:	2200      	movs	r2, #0
 8009420:	2300      	movs	r3, #0
 8009422:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 8009426:	f7f7 fb57 	bl	8000ad8 <__aeabi_dcmpeq>
 800942a:	2800      	cmp	r0, #0
 800942c:	d12e      	bne.n	800948c <_svfprintf_r+0x128c>
 800942e:	9b03      	ldr	r3, [sp, #12]
 8009430:	3301      	adds	r3, #1
 8009432:	e9c5 3400 	strd	r3, r4, [r5]
 8009436:	9b05      	ldr	r3, [sp, #20]
 8009438:	3701      	adds	r7, #1
 800943a:	3e01      	subs	r6, #1
 800943c:	441e      	add	r6, r3
 800943e:	2f07      	cmp	r7, #7
 8009440:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 8009444:	dd4d      	ble.n	80094e2 <_svfprintf_r+0x12e2>
 8009446:	aa22      	add	r2, sp, #136	; 0x88
 8009448:	4649      	mov	r1, r9
 800944a:	4650      	mov	r0, sl
 800944c:	f001 fc1c 	bl	800ac88 <__ssprint_r>
 8009450:	2800      	cmp	r0, #0
 8009452:	d169      	bne.n	8009528 <_svfprintf_r+0x1328>
 8009454:	ad25      	add	r5, sp, #148	; 0x94
 8009456:	ab1e      	add	r3, sp, #120	; 0x78
 8009458:	602b      	str	r3, [r5, #0]
 800945a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800945c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800945e:	606b      	str	r3, [r5, #4]
 8009460:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009462:	4413      	add	r3, r2
 8009464:	9324      	str	r3, [sp, #144]	; 0x90
 8009466:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009468:	3301      	adds	r3, #1
 800946a:	2b07      	cmp	r3, #7
 800946c:	9323      	str	r3, [sp, #140]	; 0x8c
 800946e:	f73f adac 	bgt.w	8008fca <_svfprintf_r+0xdca>
 8009472:	f105 0408 	add.w	r4, r5, #8
 8009476:	f7ff baa6 	b.w	80089c6 <_svfprintf_r+0x7c6>
 800947a:	aa22      	add	r2, sp, #136	; 0x88
 800947c:	4649      	mov	r1, r9
 800947e:	4650      	mov	r0, sl
 8009480:	f001 fc02 	bl	800ac88 <__ssprint_r>
 8009484:	2800      	cmp	r0, #0
 8009486:	d14f      	bne.n	8009528 <_svfprintf_r+0x1328>
 8009488:	ad25      	add	r5, sp, #148	; 0x94
 800948a:	e7c4      	b.n	8009416 <_svfprintf_r+0x1216>
 800948c:	2c00      	cmp	r4, #0
 800948e:	dde2      	ble.n	8009456 <_svfprintf_r+0x1256>
 8009490:	4e09      	ldr	r6, [pc, #36]	; (80094b8 <_svfprintf_r+0x12b8>)
 8009492:	2710      	movs	r7, #16
 8009494:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009498:	2c10      	cmp	r4, #16
 800949a:	f103 0301 	add.w	r3, r3, #1
 800949e:	f105 0108 	add.w	r1, r5, #8
 80094a2:	602e      	str	r6, [r5, #0]
 80094a4:	dc0a      	bgt.n	80094bc <_svfprintf_r+0x12bc>
 80094a6:	606c      	str	r4, [r5, #4]
 80094a8:	2b07      	cmp	r3, #7
 80094aa:	4414      	add	r4, r2
 80094ac:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80094b0:	dcc9      	bgt.n	8009446 <_svfprintf_r+0x1246>
 80094b2:	460d      	mov	r5, r1
 80094b4:	e7cf      	b.n	8009456 <_svfprintf_r+0x1256>
 80094b6:	bf00      	nop
 80094b8:	0800d408 	.word	0x0800d408
 80094bc:	3210      	adds	r2, #16
 80094be:	2b07      	cmp	r3, #7
 80094c0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80094c4:	606f      	str	r7, [r5, #4]
 80094c6:	dd06      	ble.n	80094d6 <_svfprintf_r+0x12d6>
 80094c8:	aa22      	add	r2, sp, #136	; 0x88
 80094ca:	4649      	mov	r1, r9
 80094cc:	4650      	mov	r0, sl
 80094ce:	f001 fbdb 	bl	800ac88 <__ssprint_r>
 80094d2:	bb48      	cbnz	r0, 8009528 <_svfprintf_r+0x1328>
 80094d4:	a925      	add	r1, sp, #148	; 0x94
 80094d6:	3c10      	subs	r4, #16
 80094d8:	460d      	mov	r5, r1
 80094da:	e7db      	b.n	8009494 <_svfprintf_r+0x1294>
 80094dc:	2b07      	cmp	r3, #7
 80094de:	ddba      	ble.n	8009456 <_svfprintf_r+0x1256>
 80094e0:	e7b1      	b.n	8009446 <_svfprintf_r+0x1246>
 80094e2:	3508      	adds	r5, #8
 80094e4:	e7b7      	b.n	8009456 <_svfprintf_r+0x1256>
 80094e6:	460c      	mov	r4, r1
 80094e8:	f7ff ba6d 	b.w	80089c6 <_svfprintf_r+0x7c6>
 80094ec:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80094f0:	1a9d      	subs	r5, r3, r2
 80094f2:	2d00      	cmp	r5, #0
 80094f4:	f77f aa6b 	ble.w	80089ce <_svfprintf_r+0x7ce>
 80094f8:	4e37      	ldr	r6, [pc, #220]	; (80095d8 <_svfprintf_r+0x13d8>)
 80094fa:	2710      	movs	r7, #16
 80094fc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009500:	2d10      	cmp	r5, #16
 8009502:	f103 0301 	add.w	r3, r3, #1
 8009506:	6026      	str	r6, [r4, #0]
 8009508:	dc18      	bgt.n	800953c <_svfprintf_r+0x133c>
 800950a:	6065      	str	r5, [r4, #4]
 800950c:	2b07      	cmp	r3, #7
 800950e:	4415      	add	r5, r2
 8009510:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8009514:	f77f aa5b 	ble.w	80089ce <_svfprintf_r+0x7ce>
 8009518:	aa22      	add	r2, sp, #136	; 0x88
 800951a:	4649      	mov	r1, r9
 800951c:	4650      	mov	r0, sl
 800951e:	f001 fbb3 	bl	800ac88 <__ssprint_r>
 8009522:	2800      	cmp	r0, #0
 8009524:	f43f aa53 	beq.w	80089ce <_svfprintf_r+0x7ce>
 8009528:	9b04      	ldr	r3, [sp, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	f43f a874 	beq.w	8008618 <_svfprintf_r+0x418>
 8009530:	4619      	mov	r1, r3
 8009532:	4650      	mov	r0, sl
 8009534:	f7fe fb5c 	bl	8007bf0 <_free_r>
 8009538:	f7ff b86e 	b.w	8008618 <_svfprintf_r+0x418>
 800953c:	3210      	adds	r2, #16
 800953e:	2b07      	cmp	r3, #7
 8009540:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009544:	6067      	str	r7, [r4, #4]
 8009546:	dc02      	bgt.n	800954e <_svfprintf_r+0x134e>
 8009548:	3408      	adds	r4, #8
 800954a:	3d10      	subs	r5, #16
 800954c:	e7d6      	b.n	80094fc <_svfprintf_r+0x12fc>
 800954e:	aa22      	add	r2, sp, #136	; 0x88
 8009550:	4649      	mov	r1, r9
 8009552:	4650      	mov	r0, sl
 8009554:	f001 fb98 	bl	800ac88 <__ssprint_r>
 8009558:	2800      	cmp	r0, #0
 800955a:	d1e5      	bne.n	8009528 <_svfprintf_r+0x1328>
 800955c:	ac25      	add	r4, sp, #148	; 0x94
 800955e:	e7f4      	b.n	800954a <_svfprintf_r+0x134a>
 8009560:	9904      	ldr	r1, [sp, #16]
 8009562:	4650      	mov	r0, sl
 8009564:	f7fe fb44 	bl	8007bf0 <_free_r>
 8009568:	f7ff ba49 	b.w	80089fe <_svfprintf_r+0x7fe>
 800956c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800956e:	2b00      	cmp	r3, #0
 8009570:	f43f a852 	beq.w	8008618 <_svfprintf_r+0x418>
 8009574:	aa22      	add	r2, sp, #136	; 0x88
 8009576:	4649      	mov	r1, r9
 8009578:	4650      	mov	r0, sl
 800957a:	f001 fb85 	bl	800ac88 <__ssprint_r>
 800957e:	f7ff b84b 	b.w	8008618 <_svfprintf_r+0x418>
 8009582:	ea55 0206 	orrs.w	r2, r5, r6
 8009586:	f8cd b010 	str.w	fp, [sp, #16]
 800958a:	f43f ab5e 	beq.w	8008c4a <_svfprintf_r+0xa4a>
 800958e:	2b01      	cmp	r3, #1
 8009590:	f43f abff 	beq.w	8008d92 <_svfprintf_r+0xb92>
 8009594:	2b02      	cmp	r3, #2
 8009596:	ab4e      	add	r3, sp, #312	; 0x138
 8009598:	9303      	str	r3, [sp, #12]
 800959a:	f43f ac4d 	beq.w	8008e38 <_svfprintf_r+0xc38>
 800959e:	9a03      	ldr	r2, [sp, #12]
 80095a0:	f005 0307 	and.w	r3, r5, #7
 80095a4:	4611      	mov	r1, r2
 80095a6:	3330      	adds	r3, #48	; 0x30
 80095a8:	f801 3d01 	strb.w	r3, [r1, #-1]!
 80095ac:	08ed      	lsrs	r5, r5, #3
 80095ae:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 80095b2:	08f6      	lsrs	r6, r6, #3
 80095b4:	9103      	str	r1, [sp, #12]
 80095b6:	ea55 0106 	orrs.w	r1, r5, r6
 80095ba:	d1f0      	bne.n	800959e <_svfprintf_r+0x139e>
 80095bc:	9904      	ldr	r1, [sp, #16]
 80095be:	07c9      	lsls	r1, r1, #31
 80095c0:	f57f ac2a 	bpl.w	8008e18 <_svfprintf_r+0xc18>
 80095c4:	2b30      	cmp	r3, #48	; 0x30
 80095c6:	f43f ac27 	beq.w	8008e18 <_svfprintf_r+0xc18>
 80095ca:	9903      	ldr	r1, [sp, #12]
 80095cc:	2330      	movs	r3, #48	; 0x30
 80095ce:	f801 3c01 	strb.w	r3, [r1, #-1]
 80095d2:	1e93      	subs	r3, r2, #2
 80095d4:	9303      	str	r3, [sp, #12]
 80095d6:	e41f      	b.n	8008e18 <_svfprintf_r+0xc18>
 80095d8:	0800d3f8 	.word	0x0800d3f8

080095dc <_fclose_r>:
 80095dc:	b570      	push	{r4, r5, r6, lr}
 80095de:	4606      	mov	r6, r0
 80095e0:	460c      	mov	r4, r1
 80095e2:	b911      	cbnz	r1, 80095ea <_fclose_r+0xe>
 80095e4:	2500      	movs	r5, #0
 80095e6:	4628      	mov	r0, r5
 80095e8:	bd70      	pop	{r4, r5, r6, pc}
 80095ea:	b118      	cbz	r0, 80095f4 <_fclose_r+0x18>
 80095ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80095ee:	b90b      	cbnz	r3, 80095f4 <_fclose_r+0x18>
 80095f0:	f7fe f984 	bl	80078fc <__sinit>
 80095f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095f6:	07d8      	lsls	r0, r3, #31
 80095f8:	d405      	bmi.n	8009606 <_fclose_r+0x2a>
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	0599      	lsls	r1, r3, #22
 80095fe:	d402      	bmi.n	8009606 <_fclose_r+0x2a>
 8009600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009602:	f7fe fa8f 	bl	8007b24 <__retarget_lock_acquire_recursive>
 8009606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800960a:	b93b      	cbnz	r3, 800961c <_fclose_r+0x40>
 800960c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800960e:	f015 0501 	ands.w	r5, r5, #1
 8009612:	d1e7      	bne.n	80095e4 <_fclose_r+0x8>
 8009614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009616:	f7fe fa86 	bl	8007b26 <__retarget_lock_release_recursive>
 800961a:	e7e4      	b.n	80095e6 <_fclose_r+0xa>
 800961c:	4621      	mov	r1, r4
 800961e:	4630      	mov	r0, r6
 8009620:	f000 f834 	bl	800968c <__sflush_r>
 8009624:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009626:	4605      	mov	r5, r0
 8009628:	b133      	cbz	r3, 8009638 <_fclose_r+0x5c>
 800962a:	69e1      	ldr	r1, [r4, #28]
 800962c:	4630      	mov	r0, r6
 800962e:	4798      	blx	r3
 8009630:	2800      	cmp	r0, #0
 8009632:	bfb8      	it	lt
 8009634:	f04f 35ff 	movlt.w	r5, #4294967295
 8009638:	89a3      	ldrh	r3, [r4, #12]
 800963a:	061a      	lsls	r2, r3, #24
 800963c:	d503      	bpl.n	8009646 <_fclose_r+0x6a>
 800963e:	6921      	ldr	r1, [r4, #16]
 8009640:	4630      	mov	r0, r6
 8009642:	f7fe fad5 	bl	8007bf0 <_free_r>
 8009646:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009648:	b141      	cbz	r1, 800965c <_fclose_r+0x80>
 800964a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800964e:	4299      	cmp	r1, r3
 8009650:	d002      	beq.n	8009658 <_fclose_r+0x7c>
 8009652:	4630      	mov	r0, r6
 8009654:	f7fe facc 	bl	8007bf0 <_free_r>
 8009658:	2300      	movs	r3, #0
 800965a:	6323      	str	r3, [r4, #48]	; 0x30
 800965c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800965e:	b121      	cbz	r1, 800966a <_fclose_r+0x8e>
 8009660:	4630      	mov	r0, r6
 8009662:	f7fe fac5 	bl	8007bf0 <_free_r>
 8009666:	2300      	movs	r3, #0
 8009668:	6463      	str	r3, [r4, #68]	; 0x44
 800966a:	f7fe f93b 	bl	80078e4 <__sfp_lock_acquire>
 800966e:	2300      	movs	r3, #0
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009674:	07db      	lsls	r3, r3, #31
 8009676:	d402      	bmi.n	800967e <_fclose_r+0xa2>
 8009678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800967a:	f7fe fa54 	bl	8007b26 <__retarget_lock_release_recursive>
 800967e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009680:	f7fe fa4f 	bl	8007b22 <__retarget_lock_close_recursive>
 8009684:	f7fe f934 	bl	80078f0 <__sfp_lock_release>
 8009688:	e7ad      	b.n	80095e6 <_fclose_r+0xa>
	...

0800968c <__sflush_r>:
 800968c:	898b      	ldrh	r3, [r1, #12]
 800968e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009696:	4605      	mov	r5, r0
 8009698:	0718      	lsls	r0, r3, #28
 800969a:	460c      	mov	r4, r1
 800969c:	d45f      	bmi.n	800975e <__sflush_r+0xd2>
 800969e:	684b      	ldr	r3, [r1, #4]
 80096a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	818a      	strh	r2, [r1, #12]
 80096a8:	dc05      	bgt.n	80096b6 <__sflush_r+0x2a>
 80096aa:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	dc02      	bgt.n	80096b6 <__sflush_r+0x2a>
 80096b0:	2000      	movs	r0, #0
 80096b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096b8:	2e00      	cmp	r6, #0
 80096ba:	d0f9      	beq.n	80096b0 <__sflush_r+0x24>
 80096bc:	2300      	movs	r3, #0
 80096be:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096c2:	682f      	ldr	r7, [r5, #0]
 80096c4:	69e1      	ldr	r1, [r4, #28]
 80096c6:	602b      	str	r3, [r5, #0]
 80096c8:	d036      	beq.n	8009738 <__sflush_r+0xac>
 80096ca:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	075a      	lsls	r2, r3, #29
 80096d0:	d505      	bpl.n	80096de <__sflush_r+0x52>
 80096d2:	6863      	ldr	r3, [r4, #4]
 80096d4:	1ac0      	subs	r0, r0, r3
 80096d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80096d8:	b10b      	cbz	r3, 80096de <__sflush_r+0x52>
 80096da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80096dc:	1ac0      	subs	r0, r0, r3
 80096de:	2300      	movs	r3, #0
 80096e0:	4602      	mov	r2, r0
 80096e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096e4:	69e1      	ldr	r1, [r4, #28]
 80096e6:	4628      	mov	r0, r5
 80096e8:	47b0      	blx	r6
 80096ea:	1c43      	adds	r3, r0, #1
 80096ec:	89a3      	ldrh	r3, [r4, #12]
 80096ee:	d106      	bne.n	80096fe <__sflush_r+0x72>
 80096f0:	6829      	ldr	r1, [r5, #0]
 80096f2:	291d      	cmp	r1, #29
 80096f4:	d82f      	bhi.n	8009756 <__sflush_r+0xca>
 80096f6:	4a2b      	ldr	r2, [pc, #172]	; (80097a4 <__sflush_r+0x118>)
 80096f8:	410a      	asrs	r2, r1
 80096fa:	07d6      	lsls	r6, r2, #31
 80096fc:	d42b      	bmi.n	8009756 <__sflush_r+0xca>
 80096fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009702:	b21b      	sxth	r3, r3
 8009704:	2200      	movs	r2, #0
 8009706:	6062      	str	r2, [r4, #4]
 8009708:	04d9      	lsls	r1, r3, #19
 800970a:	6922      	ldr	r2, [r4, #16]
 800970c:	81a3      	strh	r3, [r4, #12]
 800970e:	6022      	str	r2, [r4, #0]
 8009710:	d504      	bpl.n	800971c <__sflush_r+0x90>
 8009712:	1c42      	adds	r2, r0, #1
 8009714:	d101      	bne.n	800971a <__sflush_r+0x8e>
 8009716:	682b      	ldr	r3, [r5, #0]
 8009718:	b903      	cbnz	r3, 800971c <__sflush_r+0x90>
 800971a:	6520      	str	r0, [r4, #80]	; 0x50
 800971c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800971e:	602f      	str	r7, [r5, #0]
 8009720:	2900      	cmp	r1, #0
 8009722:	d0c5      	beq.n	80096b0 <__sflush_r+0x24>
 8009724:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009728:	4299      	cmp	r1, r3
 800972a:	d002      	beq.n	8009732 <__sflush_r+0xa6>
 800972c:	4628      	mov	r0, r5
 800972e:	f7fe fa5f 	bl	8007bf0 <_free_r>
 8009732:	2000      	movs	r0, #0
 8009734:	6320      	str	r0, [r4, #48]	; 0x30
 8009736:	e7bc      	b.n	80096b2 <__sflush_r+0x26>
 8009738:	2301      	movs	r3, #1
 800973a:	4628      	mov	r0, r5
 800973c:	47b0      	blx	r6
 800973e:	1c41      	adds	r1, r0, #1
 8009740:	d1c4      	bne.n	80096cc <__sflush_r+0x40>
 8009742:	682b      	ldr	r3, [r5, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0c1      	beq.n	80096cc <__sflush_r+0x40>
 8009748:	2b1d      	cmp	r3, #29
 800974a:	d001      	beq.n	8009750 <__sflush_r+0xc4>
 800974c:	2b16      	cmp	r3, #22
 800974e:	d101      	bne.n	8009754 <__sflush_r+0xc8>
 8009750:	602f      	str	r7, [r5, #0]
 8009752:	e7ad      	b.n	80096b0 <__sflush_r+0x24>
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	e7a9      	b.n	80096b2 <__sflush_r+0x26>
 800975e:	690f      	ldr	r7, [r1, #16]
 8009760:	2f00      	cmp	r7, #0
 8009762:	d0a5      	beq.n	80096b0 <__sflush_r+0x24>
 8009764:	079b      	lsls	r3, r3, #30
 8009766:	680e      	ldr	r6, [r1, #0]
 8009768:	bf08      	it	eq
 800976a:	694b      	ldreq	r3, [r1, #20]
 800976c:	600f      	str	r7, [r1, #0]
 800976e:	bf18      	it	ne
 8009770:	2300      	movne	r3, #0
 8009772:	eba6 0807 	sub.w	r8, r6, r7
 8009776:	608b      	str	r3, [r1, #8]
 8009778:	f1b8 0f00 	cmp.w	r8, #0
 800977c:	dd98      	ble.n	80096b0 <__sflush_r+0x24>
 800977e:	69e1      	ldr	r1, [r4, #28]
 8009780:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009782:	4643      	mov	r3, r8
 8009784:	463a      	mov	r2, r7
 8009786:	4628      	mov	r0, r5
 8009788:	47b0      	blx	r6
 800978a:	2800      	cmp	r0, #0
 800978c:	dc06      	bgt.n	800979c <__sflush_r+0x110>
 800978e:	89a3      	ldrh	r3, [r4, #12]
 8009790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009794:	81a3      	strh	r3, [r4, #12]
 8009796:	f04f 30ff 	mov.w	r0, #4294967295
 800979a:	e78a      	b.n	80096b2 <__sflush_r+0x26>
 800979c:	4407      	add	r7, r0
 800979e:	eba8 0800 	sub.w	r8, r8, r0
 80097a2:	e7e9      	b.n	8009778 <__sflush_r+0xec>
 80097a4:	dfbffffe 	.word	0xdfbffffe

080097a8 <_fflush_r>:
 80097a8:	b538      	push	{r3, r4, r5, lr}
 80097aa:	460c      	mov	r4, r1
 80097ac:	4605      	mov	r5, r0
 80097ae:	b118      	cbz	r0, 80097b8 <_fflush_r+0x10>
 80097b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80097b2:	b90b      	cbnz	r3, 80097b8 <_fflush_r+0x10>
 80097b4:	f7fe f8a2 	bl	80078fc <__sinit>
 80097b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097bc:	b1bb      	cbz	r3, 80097ee <_fflush_r+0x46>
 80097be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097c0:	07d0      	lsls	r0, r2, #31
 80097c2:	d404      	bmi.n	80097ce <_fflush_r+0x26>
 80097c4:	0599      	lsls	r1, r3, #22
 80097c6:	d402      	bmi.n	80097ce <_fflush_r+0x26>
 80097c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ca:	f7fe f9ab 	bl	8007b24 <__retarget_lock_acquire_recursive>
 80097ce:	4628      	mov	r0, r5
 80097d0:	4621      	mov	r1, r4
 80097d2:	f7ff ff5b 	bl	800968c <__sflush_r>
 80097d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097d8:	07da      	lsls	r2, r3, #31
 80097da:	4605      	mov	r5, r0
 80097dc:	d405      	bmi.n	80097ea <_fflush_r+0x42>
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	059b      	lsls	r3, r3, #22
 80097e2:	d402      	bmi.n	80097ea <_fflush_r+0x42>
 80097e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097e6:	f7fe f99e 	bl	8007b26 <__retarget_lock_release_recursive>
 80097ea:	4628      	mov	r0, r5
 80097ec:	bd38      	pop	{r3, r4, r5, pc}
 80097ee:	461d      	mov	r5, r3
 80097f0:	e7fb      	b.n	80097ea <_fflush_r+0x42>

080097f2 <strncpy>:
 80097f2:	b510      	push	{r4, lr}
 80097f4:	3901      	subs	r1, #1
 80097f6:	4603      	mov	r3, r0
 80097f8:	b132      	cbz	r2, 8009808 <strncpy+0x16>
 80097fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80097fe:	f803 4b01 	strb.w	r4, [r3], #1
 8009802:	3a01      	subs	r2, #1
 8009804:	2c00      	cmp	r4, #0
 8009806:	d1f7      	bne.n	80097f8 <strncpy+0x6>
 8009808:	441a      	add	r2, r3
 800980a:	2100      	movs	r1, #0
 800980c:	4293      	cmp	r3, r2
 800980e:	d100      	bne.n	8009812 <strncpy+0x20>
 8009810:	bd10      	pop	{r4, pc}
 8009812:	f803 1b01 	strb.w	r1, [r3], #1
 8009816:	e7f9      	b.n	800980c <strncpy+0x1a>

08009818 <_localeconv_r>:
 8009818:	4800      	ldr	r0, [pc, #0]	; (800981c <_localeconv_r+0x4>)
 800981a:	4770      	bx	lr
 800981c:	20000730 	.word	0x20000730

08009820 <_sbrk_r>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4d06      	ldr	r5, [pc, #24]	; (800983c <_sbrk_r+0x1c>)
 8009824:	2300      	movs	r3, #0
 8009826:	4604      	mov	r4, r0
 8009828:	4608      	mov	r0, r1
 800982a:	602b      	str	r3, [r5, #0]
 800982c:	f7f7 fda2 	bl	8001374 <_sbrk>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_sbrk_r+0x1a>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_sbrk_r+0x1a>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	200024f0 	.word	0x200024f0

08009840 <__libc_fini_array>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d07      	ldr	r5, [pc, #28]	; (8009860 <__libc_fini_array+0x20>)
 8009844:	4c07      	ldr	r4, [pc, #28]	; (8009864 <__libc_fini_array+0x24>)
 8009846:	1b64      	subs	r4, r4, r5
 8009848:	10a4      	asrs	r4, r4, #2
 800984a:	b91c      	cbnz	r4, 8009854 <__libc_fini_array+0x14>
 800984c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009850:	f003 bd7c 	b.w	800d34c <_fini>
 8009854:	3c01      	subs	r4, #1
 8009856:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800985a:	4798      	blx	r3
 800985c:	e7f5      	b.n	800984a <__libc_fini_array+0xa>
 800985e:	bf00      	nop
 8009860:	0800d938 	.word	0x0800d938
 8009864:	0800d93c 	.word	0x0800d93c

08009868 <sysconf>:
 8009868:	2808      	cmp	r0, #8
 800986a:	b508      	push	{r3, lr}
 800986c:	d006      	beq.n	800987c <sysconf+0x14>
 800986e:	f7fe f92d 	bl	8007acc <__errno>
 8009872:	2316      	movs	r3, #22
 8009874:	6003      	str	r3, [r0, #0]
 8009876:	f04f 30ff 	mov.w	r0, #4294967295
 800987a:	bd08      	pop	{r3, pc}
 800987c:	2080      	movs	r0, #128	; 0x80
 800987e:	e7fc      	b.n	800987a <sysconf+0x12>

08009880 <frexp>:
 8009880:	b570      	push	{r4, r5, r6, lr}
 8009882:	2100      	movs	r1, #0
 8009884:	ec55 4b10 	vmov	r4, r5, d0
 8009888:	6001      	str	r1, [r0, #0]
 800988a:	4916      	ldr	r1, [pc, #88]	; (80098e4 <frexp+0x64>)
 800988c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8009890:	428a      	cmp	r2, r1
 8009892:	4606      	mov	r6, r0
 8009894:	462b      	mov	r3, r5
 8009896:	dc22      	bgt.n	80098de <frexp+0x5e>
 8009898:	ee10 1a10 	vmov	r1, s0
 800989c:	4311      	orrs	r1, r2
 800989e:	d01e      	beq.n	80098de <frexp+0x5e>
 80098a0:	4911      	ldr	r1, [pc, #68]	; (80098e8 <frexp+0x68>)
 80098a2:	4029      	ands	r1, r5
 80098a4:	b969      	cbnz	r1, 80098c2 <frexp+0x42>
 80098a6:	4b11      	ldr	r3, [pc, #68]	; (80098ec <frexp+0x6c>)
 80098a8:	2200      	movs	r2, #0
 80098aa:	ee10 0a10 	vmov	r0, s0
 80098ae:	4629      	mov	r1, r5
 80098b0:	f7f6 feaa 	bl	8000608 <__aeabi_dmul>
 80098b4:	460b      	mov	r3, r1
 80098b6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80098ba:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80098be:	4604      	mov	r4, r0
 80098c0:	6031      	str	r1, [r6, #0]
 80098c2:	6831      	ldr	r1, [r6, #0]
 80098c4:	1512      	asrs	r2, r2, #20
 80098c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098ca:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80098ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098d2:	4411      	add	r1, r2
 80098d4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80098d8:	6031      	str	r1, [r6, #0]
 80098da:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80098de:	ec45 4b10 	vmov	d0, r4, r5
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
 80098e4:	7fefffff 	.word	0x7fefffff
 80098e8:	7ff00000 	.word	0x7ff00000
 80098ec:	43500000 	.word	0x43500000

080098f0 <__register_exitproc>:
 80098f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f4:	f8df a074 	ldr.w	sl, [pc, #116]	; 800996c <__register_exitproc+0x7c>
 80098f8:	4606      	mov	r6, r0
 80098fa:	f8da 0000 	ldr.w	r0, [sl]
 80098fe:	4698      	mov	r8, r3
 8009900:	460f      	mov	r7, r1
 8009902:	4691      	mov	r9, r2
 8009904:	f7fe f90e 	bl	8007b24 <__retarget_lock_acquire_recursive>
 8009908:	4b16      	ldr	r3, [pc, #88]	; (8009964 <__register_exitproc+0x74>)
 800990a:	681c      	ldr	r4, [r3, #0]
 800990c:	b90c      	cbnz	r4, 8009912 <__register_exitproc+0x22>
 800990e:	4c16      	ldr	r4, [pc, #88]	; (8009968 <__register_exitproc+0x78>)
 8009910:	601c      	str	r4, [r3, #0]
 8009912:	6865      	ldr	r5, [r4, #4]
 8009914:	f8da 0000 	ldr.w	r0, [sl]
 8009918:	2d1f      	cmp	r5, #31
 800991a:	dd05      	ble.n	8009928 <__register_exitproc+0x38>
 800991c:	f7fe f903 	bl	8007b26 <__retarget_lock_release_recursive>
 8009920:	f04f 30ff 	mov.w	r0, #4294967295
 8009924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009928:	b19e      	cbz	r6, 8009952 <__register_exitproc+0x62>
 800992a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800992e:	2201      	movs	r2, #1
 8009930:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8009934:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8009938:	40aa      	lsls	r2, r5
 800993a:	4313      	orrs	r3, r2
 800993c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8009940:	2e02      	cmp	r6, #2
 8009942:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8009946:	bf02      	ittt	eq
 8009948:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800994c:	4313      	orreq	r3, r2
 800994e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8009952:	1c6b      	adds	r3, r5, #1
 8009954:	3502      	adds	r5, #2
 8009956:	6063      	str	r3, [r4, #4]
 8009958:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800995c:	f7fe f8e3 	bl	8007b26 <__retarget_lock_release_recursive>
 8009960:	2000      	movs	r0, #0
 8009962:	e7df      	b.n	8009924 <__register_exitproc+0x34>
 8009964:	200024f8 	.word	0x200024f8
 8009968:	20002530 	.word	0x20002530
 800996c:	2000022c 	.word	0x2000022c

08009970 <quorem>:
 8009970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	6903      	ldr	r3, [r0, #16]
 8009976:	690c      	ldr	r4, [r1, #16]
 8009978:	42a3      	cmp	r3, r4
 800997a:	4607      	mov	r7, r0
 800997c:	db7e      	blt.n	8009a7c <quorem+0x10c>
 800997e:	3c01      	subs	r4, #1
 8009980:	f101 0814 	add.w	r8, r1, #20
 8009984:	f100 0514 	add.w	r5, r0, #20
 8009988:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009996:	3301      	adds	r3, #1
 8009998:	429a      	cmp	r2, r3
 800999a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800999e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80099a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80099a6:	d331      	bcc.n	8009a0c <quorem+0x9c>
 80099a8:	f04f 0e00 	mov.w	lr, #0
 80099ac:	4640      	mov	r0, r8
 80099ae:	46ac      	mov	ip, r5
 80099b0:	46f2      	mov	sl, lr
 80099b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80099b6:	b293      	uxth	r3, r2
 80099b8:	fb06 e303 	mla	r3, r6, r3, lr
 80099bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099c0:	0c1a      	lsrs	r2, r3, #16
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	ebaa 0303 	sub.w	r3, sl, r3
 80099c8:	f8dc a000 	ldr.w	sl, [ip]
 80099cc:	fa13 f38a 	uxtah	r3, r3, sl
 80099d0:	fb06 220e 	mla	r2, r6, lr, r2
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	9b00      	ldr	r3, [sp, #0]
 80099d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099dc:	b292      	uxth	r2, r2
 80099de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80099e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80099ea:	4581      	cmp	r9, r0
 80099ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099f0:	f84c 3b04 	str.w	r3, [ip], #4
 80099f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80099f8:	d2db      	bcs.n	80099b2 <quorem+0x42>
 80099fa:	f855 300b 	ldr.w	r3, [r5, fp]
 80099fe:	b92b      	cbnz	r3, 8009a0c <quorem+0x9c>
 8009a00:	9b01      	ldr	r3, [sp, #4]
 8009a02:	3b04      	subs	r3, #4
 8009a04:	429d      	cmp	r5, r3
 8009a06:	461a      	mov	r2, r3
 8009a08:	d32c      	bcc.n	8009a64 <quorem+0xf4>
 8009a0a:	613c      	str	r4, [r7, #16]
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	f001 f83b 	bl	800aa88 <__mcmp>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	db22      	blt.n	8009a5c <quorem+0xec>
 8009a16:	3601      	adds	r6, #1
 8009a18:	4629      	mov	r1, r5
 8009a1a:	2000      	movs	r0, #0
 8009a1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a20:	f8d1 c000 	ldr.w	ip, [r1]
 8009a24:	b293      	uxth	r3, r2
 8009a26:	1ac3      	subs	r3, r0, r3
 8009a28:	0c12      	lsrs	r2, r2, #16
 8009a2a:	fa13 f38c 	uxtah	r3, r3, ip
 8009a2e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009a32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a3c:	45c1      	cmp	r9, r8
 8009a3e:	f841 3b04 	str.w	r3, [r1], #4
 8009a42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009a46:	d2e9      	bcs.n	8009a1c <quorem+0xac>
 8009a48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a50:	b922      	cbnz	r2, 8009a5c <quorem+0xec>
 8009a52:	3b04      	subs	r3, #4
 8009a54:	429d      	cmp	r5, r3
 8009a56:	461a      	mov	r2, r3
 8009a58:	d30a      	bcc.n	8009a70 <quorem+0x100>
 8009a5a:	613c      	str	r4, [r7, #16]
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	b003      	add	sp, #12
 8009a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a64:	6812      	ldr	r2, [r2, #0]
 8009a66:	3b04      	subs	r3, #4
 8009a68:	2a00      	cmp	r2, #0
 8009a6a:	d1ce      	bne.n	8009a0a <quorem+0x9a>
 8009a6c:	3c01      	subs	r4, #1
 8009a6e:	e7c9      	b.n	8009a04 <quorem+0x94>
 8009a70:	6812      	ldr	r2, [r2, #0]
 8009a72:	3b04      	subs	r3, #4
 8009a74:	2a00      	cmp	r2, #0
 8009a76:	d1f0      	bne.n	8009a5a <quorem+0xea>
 8009a78:	3c01      	subs	r4, #1
 8009a7a:	e7eb      	b.n	8009a54 <quorem+0xe4>
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	e7ee      	b.n	8009a5e <quorem+0xee>

08009a80 <_dtoa_r>:
 8009a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a84:	ed2d 8b04 	vpush	{d8-d9}
 8009a88:	b093      	sub	sp, #76	; 0x4c
 8009a8a:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a8e:	9107      	str	r1, [sp, #28]
 8009a90:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009a92:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8009a94:	920a      	str	r2, [sp, #40]	; 0x28
 8009a96:	ec57 6b10 	vmov	r6, r7, d0
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a9e:	b141      	cbz	r1, 8009ab2 <_dtoa_r+0x32>
 8009aa0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009aa2:	604a      	str	r2, [r1, #4]
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	4093      	lsls	r3, r2
 8009aa8:	608b      	str	r3, [r1, #8]
 8009aaa:	f000 fde4 	bl	800a676 <_Bfree>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	63a3      	str	r3, [r4, #56]	; 0x38
 8009ab2:	1e3b      	subs	r3, r7, #0
 8009ab4:	bfb9      	ittee	lt
 8009ab6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009aba:	9303      	strlt	r3, [sp, #12]
 8009abc:	2300      	movge	r3, #0
 8009abe:	602b      	strge	r3, [r5, #0]
 8009ac0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009ac4:	4ba2      	ldr	r3, [pc, #648]	; (8009d50 <_dtoa_r+0x2d0>)
 8009ac6:	bfbc      	itt	lt
 8009ac8:	2201      	movlt	r2, #1
 8009aca:	602a      	strlt	r2, [r5, #0]
 8009acc:	ea33 0308 	bics.w	r3, r3, r8
 8009ad0:	d11b      	bne.n	8009b0a <_dtoa_r+0x8a>
 8009ad2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ad4:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009ade:	4333      	orrs	r3, r6
 8009ae0:	f000 858f 	beq.w	800a602 <_dtoa_r+0xb82>
 8009ae4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ae6:	b90b      	cbnz	r3, 8009aec <_dtoa_r+0x6c>
 8009ae8:	4b9a      	ldr	r3, [pc, #616]	; (8009d54 <_dtoa_r+0x2d4>)
 8009aea:	e027      	b.n	8009b3c <_dtoa_r+0xbc>
 8009aec:	4b99      	ldr	r3, [pc, #612]	; (8009d54 <_dtoa_r+0x2d4>)
 8009aee:	9300      	str	r3, [sp, #0]
 8009af0:	3303      	adds	r3, #3
 8009af2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009af4:	6013      	str	r3, [r2, #0]
 8009af6:	9800      	ldr	r0, [sp, #0]
 8009af8:	b013      	add	sp, #76	; 0x4c
 8009afa:	ecbd 8b04 	vpop	{d8-d9}
 8009afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b02:	4b95      	ldr	r3, [pc, #596]	; (8009d58 <_dtoa_r+0x2d8>)
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	3308      	adds	r3, #8
 8009b08:	e7f3      	b.n	8009af2 <_dtoa_r+0x72>
 8009b0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	ec51 0b17 	vmov	r0, r1, d7
 8009b14:	eeb0 8a47 	vmov.f32	s16, s14
 8009b18:	eef0 8a67 	vmov.f32	s17, s15
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	f7f6 ffdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b22:	4681      	mov	r9, r0
 8009b24:	b160      	cbz	r0, 8009b40 <_dtoa_r+0xc0>
 8009b26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b28:	2301      	movs	r3, #1
 8009b2a:	6013      	str	r3, [r2, #0]
 8009b2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 8564 	beq.w	800a5fc <_dtoa_r+0xb7c>
 8009b34:	4b89      	ldr	r3, [pc, #548]	; (8009d5c <_dtoa_r+0x2dc>)
 8009b36:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	9300      	str	r3, [sp, #0]
 8009b3e:	e7da      	b.n	8009af6 <_dtoa_r+0x76>
 8009b40:	aa10      	add	r2, sp, #64	; 0x40
 8009b42:	a911      	add	r1, sp, #68	; 0x44
 8009b44:	4620      	mov	r0, r4
 8009b46:	eeb0 0a48 	vmov.f32	s0, s16
 8009b4a:	eef0 0a68 	vmov.f32	s1, s17
 8009b4e:	f001 f841 	bl	800abd4 <__d2b>
 8009b52:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009b56:	4682      	mov	sl, r0
 8009b58:	2d00      	cmp	r5, #0
 8009b5a:	d07e      	beq.n	8009c5a <_dtoa_r+0x1da>
 8009b5c:	ee18 3a90 	vmov	r3, s17
 8009b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b64:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009b68:	ec51 0b18 	vmov	r0, r1, d8
 8009b6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009b70:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b74:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009b78:	4619      	mov	r1, r3
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	4b78      	ldr	r3, [pc, #480]	; (8009d60 <_dtoa_r+0x2e0>)
 8009b7e:	f7f6 fb8b 	bl	8000298 <__aeabi_dsub>
 8009b82:	a36d      	add	r3, pc, #436	; (adr r3, 8009d38 <_dtoa_r+0x2b8>)
 8009b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b88:	f7f6 fd3e 	bl	8000608 <__aeabi_dmul>
 8009b8c:	a36c      	add	r3, pc, #432	; (adr r3, 8009d40 <_dtoa_r+0x2c0>)
 8009b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b92:	f7f6 fb83 	bl	800029c <__adddf3>
 8009b96:	4606      	mov	r6, r0
 8009b98:	4628      	mov	r0, r5
 8009b9a:	460f      	mov	r7, r1
 8009b9c:	f7f6 fcca 	bl	8000534 <__aeabi_i2d>
 8009ba0:	a369      	add	r3, pc, #420	; (adr r3, 8009d48 <_dtoa_r+0x2c8>)
 8009ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba6:	f7f6 fd2f 	bl	8000608 <__aeabi_dmul>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	4630      	mov	r0, r6
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	f7f6 fb73 	bl	800029c <__adddf3>
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	460f      	mov	r7, r1
 8009bba:	f7f6 ffd5 	bl	8000b68 <__aeabi_d2iz>
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	4683      	mov	fp, r0
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	4639      	mov	r1, r7
 8009bc8:	f7f6 ff90 	bl	8000aec <__aeabi_dcmplt>
 8009bcc:	b148      	cbz	r0, 8009be2 <_dtoa_r+0x162>
 8009bce:	4658      	mov	r0, fp
 8009bd0:	f7f6 fcb0 	bl	8000534 <__aeabi_i2d>
 8009bd4:	4632      	mov	r2, r6
 8009bd6:	463b      	mov	r3, r7
 8009bd8:	f7f6 ff7e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bdc:	b908      	cbnz	r0, 8009be2 <_dtoa_r+0x162>
 8009bde:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009be2:	f1bb 0f16 	cmp.w	fp, #22
 8009be6:	d856      	bhi.n	8009c96 <_dtoa_r+0x216>
 8009be8:	4b5e      	ldr	r3, [pc, #376]	; (8009d64 <_dtoa_r+0x2e4>)
 8009bea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf2:	ec51 0b18 	vmov	r0, r1, d8
 8009bf6:	f7f6 ff79 	bl	8000aec <__aeabi_dcmplt>
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d04d      	beq.n	8009c9a <_dtoa_r+0x21a>
 8009bfe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009c02:	2300      	movs	r3, #0
 8009c04:	930c      	str	r3, [sp, #48]	; 0x30
 8009c06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009c08:	1b5b      	subs	r3, r3, r5
 8009c0a:	1e5a      	subs	r2, r3, #1
 8009c0c:	bf45      	ittet	mi
 8009c0e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009c12:	9305      	strmi	r3, [sp, #20]
 8009c14:	2300      	movpl	r3, #0
 8009c16:	2300      	movmi	r3, #0
 8009c18:	9206      	str	r2, [sp, #24]
 8009c1a:	bf54      	ite	pl
 8009c1c:	9305      	strpl	r3, [sp, #20]
 8009c1e:	9306      	strmi	r3, [sp, #24]
 8009c20:	f1bb 0f00 	cmp.w	fp, #0
 8009c24:	db3b      	blt.n	8009c9e <_dtoa_r+0x21e>
 8009c26:	9b06      	ldr	r3, [sp, #24]
 8009c28:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009c2c:	445b      	add	r3, fp
 8009c2e:	9306      	str	r3, [sp, #24]
 8009c30:	2300      	movs	r3, #0
 8009c32:	9308      	str	r3, [sp, #32]
 8009c34:	9b07      	ldr	r3, [sp, #28]
 8009c36:	2b09      	cmp	r3, #9
 8009c38:	d868      	bhi.n	8009d0c <_dtoa_r+0x28c>
 8009c3a:	2b05      	cmp	r3, #5
 8009c3c:	bfc4      	itt	gt
 8009c3e:	3b04      	subgt	r3, #4
 8009c40:	9307      	strgt	r3, [sp, #28]
 8009c42:	9b07      	ldr	r3, [sp, #28]
 8009c44:	f1a3 0302 	sub.w	r3, r3, #2
 8009c48:	bfcc      	ite	gt
 8009c4a:	2500      	movgt	r5, #0
 8009c4c:	2501      	movle	r5, #1
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	d867      	bhi.n	8009d22 <_dtoa_r+0x2a2>
 8009c52:	e8df f003 	tbb	[pc, r3]
 8009c56:	3b2e      	.short	0x3b2e
 8009c58:	5939      	.short	0x5939
 8009c5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c5e:	441d      	add	r5, r3
 8009c60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c64:	2b20      	cmp	r3, #32
 8009c66:	bfc1      	itttt	gt
 8009c68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009c70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009c74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009c78:	bfd6      	itet	le
 8009c7a:	f1c3 0320 	rsble	r3, r3, #32
 8009c7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009c82:	fa06 f003 	lslle.w	r0, r6, r3
 8009c86:	f7f6 fc45 	bl	8000514 <__aeabi_ui2d>
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009c90:	3d01      	subs	r5, #1
 8009c92:	920e      	str	r2, [sp, #56]	; 0x38
 8009c94:	e770      	b.n	8009b78 <_dtoa_r+0xf8>
 8009c96:	2301      	movs	r3, #1
 8009c98:	e7b4      	b.n	8009c04 <_dtoa_r+0x184>
 8009c9a:	900c      	str	r0, [sp, #48]	; 0x30
 8009c9c:	e7b3      	b.n	8009c06 <_dtoa_r+0x186>
 8009c9e:	9b05      	ldr	r3, [sp, #20]
 8009ca0:	eba3 030b 	sub.w	r3, r3, fp
 8009ca4:	9305      	str	r3, [sp, #20]
 8009ca6:	f1cb 0300 	rsb	r3, fp, #0
 8009caa:	9308      	str	r3, [sp, #32]
 8009cac:	2300      	movs	r3, #0
 8009cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cb0:	e7c0      	b.n	8009c34 <_dtoa_r+0x1b4>
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dc35      	bgt.n	8009d28 <_dtoa_r+0x2a8>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	9301      	str	r3, [sp, #4]
 8009cc0:	9304      	str	r3, [sp, #16]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	920a      	str	r2, [sp, #40]	; 0x28
 8009cc6:	e00b      	b.n	8009ce0 <_dtoa_r+0x260>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e7f3      	b.n	8009cb4 <_dtoa_r+0x234>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd2:	445b      	add	r3, fp
 8009cd4:	9301      	str	r3, [sp, #4]
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	9304      	str	r3, [sp, #16]
 8009cdc:	bfb8      	it	lt
 8009cde:	2301      	movlt	r3, #1
 8009ce0:	2100      	movs	r1, #0
 8009ce2:	2204      	movs	r2, #4
 8009ce4:	f102 0014 	add.w	r0, r2, #20
 8009ce8:	4298      	cmp	r0, r3
 8009cea:	d921      	bls.n	8009d30 <_dtoa_r+0x2b0>
 8009cec:	63e1      	str	r1, [r4, #60]	; 0x3c
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 fc9c 	bl	800a62c <_Balloc>
 8009cf4:	9000      	str	r0, [sp, #0]
 8009cf6:	2800      	cmp	r0, #0
 8009cf8:	d13a      	bne.n	8009d70 <_dtoa_r+0x2f0>
 8009cfa:	4b1b      	ldr	r3, [pc, #108]	; (8009d68 <_dtoa_r+0x2e8>)
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	f240 11af 	movw	r1, #431	; 0x1af
 8009d02:	481a      	ldr	r0, [pc, #104]	; (8009d6c <_dtoa_r+0x2ec>)
 8009d04:	f001 f86c 	bl	800ade0 <__assert_func>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e7e0      	b.n	8009cce <_dtoa_r+0x24e>
 8009d0c:	2501      	movs	r5, #1
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9307      	str	r3, [sp, #28]
 8009d12:	9509      	str	r5, [sp, #36]	; 0x24
 8009d14:	f04f 33ff 	mov.w	r3, #4294967295
 8009d18:	9301      	str	r3, [sp, #4]
 8009d1a:	9304      	str	r3, [sp, #16]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2312      	movs	r3, #18
 8009d20:	e7d0      	b.n	8009cc4 <_dtoa_r+0x244>
 8009d22:	2301      	movs	r3, #1
 8009d24:	9309      	str	r3, [sp, #36]	; 0x24
 8009d26:	e7f5      	b.n	8009d14 <_dtoa_r+0x294>
 8009d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d2a:	9301      	str	r3, [sp, #4]
 8009d2c:	9304      	str	r3, [sp, #16]
 8009d2e:	e7d7      	b.n	8009ce0 <_dtoa_r+0x260>
 8009d30:	3101      	adds	r1, #1
 8009d32:	0052      	lsls	r2, r2, #1
 8009d34:	e7d6      	b.n	8009ce4 <_dtoa_r+0x264>
 8009d36:	bf00      	nop
 8009d38:	636f4361 	.word	0x636f4361
 8009d3c:	3fd287a7 	.word	0x3fd287a7
 8009d40:	8b60c8b3 	.word	0x8b60c8b3
 8009d44:	3fc68a28 	.word	0x3fc68a28
 8009d48:	509f79fb 	.word	0x509f79fb
 8009d4c:	3fd34413 	.word	0x3fd34413
 8009d50:	7ff00000 	.word	0x7ff00000
 8009d54:	0800d421 	.word	0x0800d421
 8009d58:	0800d418 	.word	0x0800d418
 8009d5c:	0800d3f7 	.word	0x0800d3f7
 8009d60:	3ff80000 	.word	0x3ff80000
 8009d64:	0800d510 	.word	0x0800d510
 8009d68:	0800d425 	.word	0x0800d425
 8009d6c:	0800d436 	.word	0x0800d436
 8009d70:	9b00      	ldr	r3, [sp, #0]
 8009d72:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d74:	9b04      	ldr	r3, [sp, #16]
 8009d76:	2b0e      	cmp	r3, #14
 8009d78:	f200 80a8 	bhi.w	8009ecc <_dtoa_r+0x44c>
 8009d7c:	2d00      	cmp	r5, #0
 8009d7e:	f000 80a5 	beq.w	8009ecc <_dtoa_r+0x44c>
 8009d82:	f1bb 0f00 	cmp.w	fp, #0
 8009d86:	dd38      	ble.n	8009dfa <_dtoa_r+0x37a>
 8009d88:	4bbf      	ldr	r3, [pc, #764]	; (800a088 <_dtoa_r+0x608>)
 8009d8a:	f00b 020f 	and.w	r2, fp, #15
 8009d8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d92:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009d96:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009d9a:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009d9e:	d019      	beq.n	8009dd4 <_dtoa_r+0x354>
 8009da0:	4bba      	ldr	r3, [pc, #744]	; (800a08c <_dtoa_r+0x60c>)
 8009da2:	ec51 0b18 	vmov	r0, r1, d8
 8009da6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009daa:	f7f6 fd57 	bl	800085c <__aeabi_ddiv>
 8009dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009db2:	f008 080f 	and.w	r8, r8, #15
 8009db6:	2503      	movs	r5, #3
 8009db8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800a08c <_dtoa_r+0x60c>
 8009dbc:	f1b8 0f00 	cmp.w	r8, #0
 8009dc0:	d10a      	bne.n	8009dd8 <_dtoa_r+0x358>
 8009dc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dc6:	4632      	mov	r2, r6
 8009dc8:	463b      	mov	r3, r7
 8009dca:	f7f6 fd47 	bl	800085c <__aeabi_ddiv>
 8009dce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dd2:	e02b      	b.n	8009e2c <_dtoa_r+0x3ac>
 8009dd4:	2502      	movs	r5, #2
 8009dd6:	e7ef      	b.n	8009db8 <_dtoa_r+0x338>
 8009dd8:	f018 0f01 	tst.w	r8, #1
 8009ddc:	d008      	beq.n	8009df0 <_dtoa_r+0x370>
 8009dde:	4630      	mov	r0, r6
 8009de0:	4639      	mov	r1, r7
 8009de2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009de6:	f7f6 fc0f 	bl	8000608 <__aeabi_dmul>
 8009dea:	3501      	adds	r5, #1
 8009dec:	4606      	mov	r6, r0
 8009dee:	460f      	mov	r7, r1
 8009df0:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009df4:	f109 0908 	add.w	r9, r9, #8
 8009df8:	e7e0      	b.n	8009dbc <_dtoa_r+0x33c>
 8009dfa:	f000 809f 	beq.w	8009f3c <_dtoa_r+0x4bc>
 8009dfe:	f1cb 0600 	rsb	r6, fp, #0
 8009e02:	4ba1      	ldr	r3, [pc, #644]	; (800a088 <_dtoa_r+0x608>)
 8009e04:	4fa1      	ldr	r7, [pc, #644]	; (800a08c <_dtoa_r+0x60c>)
 8009e06:	f006 020f 	and.w	r2, r6, #15
 8009e0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e12:	ec51 0b18 	vmov	r0, r1, d8
 8009e16:	f7f6 fbf7 	bl	8000608 <__aeabi_dmul>
 8009e1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e1e:	1136      	asrs	r6, r6, #4
 8009e20:	2300      	movs	r3, #0
 8009e22:	2502      	movs	r5, #2
 8009e24:	2e00      	cmp	r6, #0
 8009e26:	d17e      	bne.n	8009f26 <_dtoa_r+0x4a6>
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1d0      	bne.n	8009dce <_dtoa_r+0x34e>
 8009e2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 8084 	beq.w	8009f40 <_dtoa_r+0x4c0>
 8009e38:	4b95      	ldr	r3, [pc, #596]	; (800a090 <_dtoa_r+0x610>)
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	4649      	mov	r1, r9
 8009e40:	f7f6 fe54 	bl	8000aec <__aeabi_dcmplt>
 8009e44:	2800      	cmp	r0, #0
 8009e46:	d07b      	beq.n	8009f40 <_dtoa_r+0x4c0>
 8009e48:	9b04      	ldr	r3, [sp, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d078      	beq.n	8009f40 <_dtoa_r+0x4c0>
 8009e4e:	9b01      	ldr	r3, [sp, #4]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	dd39      	ble.n	8009ec8 <_dtoa_r+0x448>
 8009e54:	4b8f      	ldr	r3, [pc, #572]	; (800a094 <_dtoa_r+0x614>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	4640      	mov	r0, r8
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	f7f6 fbd4 	bl	8000608 <__aeabi_dmul>
 8009e60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e64:	9e01      	ldr	r6, [sp, #4]
 8009e66:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009e6a:	3501      	adds	r5, #1
 8009e6c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009e70:	4628      	mov	r0, r5
 8009e72:	f7f6 fb5f 	bl	8000534 <__aeabi_i2d>
 8009e76:	4642      	mov	r2, r8
 8009e78:	464b      	mov	r3, r9
 8009e7a:	f7f6 fbc5 	bl	8000608 <__aeabi_dmul>
 8009e7e:	4b86      	ldr	r3, [pc, #536]	; (800a098 <_dtoa_r+0x618>)
 8009e80:	2200      	movs	r2, #0
 8009e82:	f7f6 fa0b 	bl	800029c <__adddf3>
 8009e86:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009e8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e8e:	9303      	str	r3, [sp, #12]
 8009e90:	2e00      	cmp	r6, #0
 8009e92:	d158      	bne.n	8009f46 <_dtoa_r+0x4c6>
 8009e94:	4b81      	ldr	r3, [pc, #516]	; (800a09c <_dtoa_r+0x61c>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	4640      	mov	r0, r8
 8009e9a:	4649      	mov	r1, r9
 8009e9c:	f7f6 f9fc 	bl	8000298 <__aeabi_dsub>
 8009ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	4689      	mov	r9, r1
 8009ea8:	f7f6 fe3e 	bl	8000b28 <__aeabi_dcmpgt>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	f040 8295 	bne.w	800a3dc <_dtoa_r+0x95c>
 8009eb2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009eb6:	4640      	mov	r0, r8
 8009eb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009ebc:	4649      	mov	r1, r9
 8009ebe:	f7f6 fe15 	bl	8000aec <__aeabi_dcmplt>
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	f040 8288 	bne.w	800a3d8 <_dtoa_r+0x958>
 8009ec8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009ecc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	f2c0 814d 	blt.w	800a16e <_dtoa_r+0x6ee>
 8009ed4:	f1bb 0f0e 	cmp.w	fp, #14
 8009ed8:	f300 8149 	bgt.w	800a16e <_dtoa_r+0x6ee>
 8009edc:	4b6a      	ldr	r3, [pc, #424]	; (800a088 <_dtoa_r+0x608>)
 8009ede:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ee2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f280 80db 	bge.w	800a0a4 <_dtoa_r+0x624>
 8009eee:	9b04      	ldr	r3, [sp, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f300 80d7 	bgt.w	800a0a4 <_dtoa_r+0x624>
 8009ef6:	f040 826e 	bne.w	800a3d6 <_dtoa_r+0x956>
 8009efa:	4b68      	ldr	r3, [pc, #416]	; (800a09c <_dtoa_r+0x61c>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	4640      	mov	r0, r8
 8009f00:	4649      	mov	r1, r9
 8009f02:	f7f6 fb81 	bl	8000608 <__aeabi_dmul>
 8009f06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f0a:	f7f6 fe03 	bl	8000b14 <__aeabi_dcmpge>
 8009f0e:	9e04      	ldr	r6, [sp, #16]
 8009f10:	4637      	mov	r7, r6
 8009f12:	2800      	cmp	r0, #0
 8009f14:	f040 8244 	bne.w	800a3a0 <_dtoa_r+0x920>
 8009f18:	9d00      	ldr	r5, [sp, #0]
 8009f1a:	2331      	movs	r3, #49	; 0x31
 8009f1c:	f805 3b01 	strb.w	r3, [r5], #1
 8009f20:	f10b 0b01 	add.w	fp, fp, #1
 8009f24:	e240      	b.n	800a3a8 <_dtoa_r+0x928>
 8009f26:	07f2      	lsls	r2, r6, #31
 8009f28:	d505      	bpl.n	8009f36 <_dtoa_r+0x4b6>
 8009f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f2e:	f7f6 fb6b 	bl	8000608 <__aeabi_dmul>
 8009f32:	3501      	adds	r5, #1
 8009f34:	2301      	movs	r3, #1
 8009f36:	1076      	asrs	r6, r6, #1
 8009f38:	3708      	adds	r7, #8
 8009f3a:	e773      	b.n	8009e24 <_dtoa_r+0x3a4>
 8009f3c:	2502      	movs	r5, #2
 8009f3e:	e775      	b.n	8009e2c <_dtoa_r+0x3ac>
 8009f40:	9e04      	ldr	r6, [sp, #16]
 8009f42:	465f      	mov	r7, fp
 8009f44:	e792      	b.n	8009e6c <_dtoa_r+0x3ec>
 8009f46:	9900      	ldr	r1, [sp, #0]
 8009f48:	4b4f      	ldr	r3, [pc, #316]	; (800a088 <_dtoa_r+0x608>)
 8009f4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f4e:	4431      	add	r1, r6
 8009f50:	9102      	str	r1, [sp, #8]
 8009f52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f54:	eeb0 9a47 	vmov.f32	s18, s14
 8009f58:	eef0 9a67 	vmov.f32	s19, s15
 8009f5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f64:	2900      	cmp	r1, #0
 8009f66:	d044      	beq.n	8009ff2 <_dtoa_r+0x572>
 8009f68:	494d      	ldr	r1, [pc, #308]	; (800a0a0 <_dtoa_r+0x620>)
 8009f6a:	2000      	movs	r0, #0
 8009f6c:	f7f6 fc76 	bl	800085c <__aeabi_ddiv>
 8009f70:	ec53 2b19 	vmov	r2, r3, d9
 8009f74:	f7f6 f990 	bl	8000298 <__aeabi_dsub>
 8009f78:	9d00      	ldr	r5, [sp, #0]
 8009f7a:	ec41 0b19 	vmov	d9, r0, r1
 8009f7e:	4649      	mov	r1, r9
 8009f80:	4640      	mov	r0, r8
 8009f82:	f7f6 fdf1 	bl	8000b68 <__aeabi_d2iz>
 8009f86:	4606      	mov	r6, r0
 8009f88:	f7f6 fad4 	bl	8000534 <__aeabi_i2d>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4640      	mov	r0, r8
 8009f92:	4649      	mov	r1, r9
 8009f94:	f7f6 f980 	bl	8000298 <__aeabi_dsub>
 8009f98:	3630      	adds	r6, #48	; 0x30
 8009f9a:	f805 6b01 	strb.w	r6, [r5], #1
 8009f9e:	ec53 2b19 	vmov	r2, r3, d9
 8009fa2:	4680      	mov	r8, r0
 8009fa4:	4689      	mov	r9, r1
 8009fa6:	f7f6 fda1 	bl	8000aec <__aeabi_dcmplt>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	d164      	bne.n	800a078 <_dtoa_r+0x5f8>
 8009fae:	4642      	mov	r2, r8
 8009fb0:	464b      	mov	r3, r9
 8009fb2:	4937      	ldr	r1, [pc, #220]	; (800a090 <_dtoa_r+0x610>)
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	f7f6 f96f 	bl	8000298 <__aeabi_dsub>
 8009fba:	ec53 2b19 	vmov	r2, r3, d9
 8009fbe:	f7f6 fd95 	bl	8000aec <__aeabi_dcmplt>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	f040 80b5 	bne.w	800a132 <_dtoa_r+0x6b2>
 8009fc8:	9b02      	ldr	r3, [sp, #8]
 8009fca:	429d      	cmp	r5, r3
 8009fcc:	f43f af7c 	beq.w	8009ec8 <_dtoa_r+0x448>
 8009fd0:	4b30      	ldr	r3, [pc, #192]	; (800a094 <_dtoa_r+0x614>)
 8009fd2:	ec51 0b19 	vmov	r0, r1, d9
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f7f6 fb16 	bl	8000608 <__aeabi_dmul>
 8009fdc:	4b2d      	ldr	r3, [pc, #180]	; (800a094 <_dtoa_r+0x614>)
 8009fde:	ec41 0b19 	vmov	d9, r0, r1
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	4640      	mov	r0, r8
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	f7f6 fb0e 	bl	8000608 <__aeabi_dmul>
 8009fec:	4680      	mov	r8, r0
 8009fee:	4689      	mov	r9, r1
 8009ff0:	e7c5      	b.n	8009f7e <_dtoa_r+0x4fe>
 8009ff2:	ec51 0b17 	vmov	r0, r1, d7
 8009ff6:	f7f6 fb07 	bl	8000608 <__aeabi_dmul>
 8009ffa:	9b02      	ldr	r3, [sp, #8]
 8009ffc:	9d00      	ldr	r5, [sp, #0]
 8009ffe:	930f      	str	r3, [sp, #60]	; 0x3c
 800a000:	ec41 0b19 	vmov	d9, r0, r1
 800a004:	4649      	mov	r1, r9
 800a006:	4640      	mov	r0, r8
 800a008:	f7f6 fdae 	bl	8000b68 <__aeabi_d2iz>
 800a00c:	4606      	mov	r6, r0
 800a00e:	f7f6 fa91 	bl	8000534 <__aeabi_i2d>
 800a012:	3630      	adds	r6, #48	; 0x30
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	4640      	mov	r0, r8
 800a01a:	4649      	mov	r1, r9
 800a01c:	f7f6 f93c 	bl	8000298 <__aeabi_dsub>
 800a020:	f805 6b01 	strb.w	r6, [r5], #1
 800a024:	9b02      	ldr	r3, [sp, #8]
 800a026:	429d      	cmp	r5, r3
 800a028:	4680      	mov	r8, r0
 800a02a:	4689      	mov	r9, r1
 800a02c:	f04f 0200 	mov.w	r2, #0
 800a030:	d124      	bne.n	800a07c <_dtoa_r+0x5fc>
 800a032:	4b1b      	ldr	r3, [pc, #108]	; (800a0a0 <_dtoa_r+0x620>)
 800a034:	ec51 0b19 	vmov	r0, r1, d9
 800a038:	f7f6 f930 	bl	800029c <__adddf3>
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	4640      	mov	r0, r8
 800a042:	4649      	mov	r1, r9
 800a044:	f7f6 fd70 	bl	8000b28 <__aeabi_dcmpgt>
 800a048:	2800      	cmp	r0, #0
 800a04a:	d172      	bne.n	800a132 <_dtoa_r+0x6b2>
 800a04c:	ec53 2b19 	vmov	r2, r3, d9
 800a050:	4913      	ldr	r1, [pc, #76]	; (800a0a0 <_dtoa_r+0x620>)
 800a052:	2000      	movs	r0, #0
 800a054:	f7f6 f920 	bl	8000298 <__aeabi_dsub>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4640      	mov	r0, r8
 800a05e:	4649      	mov	r1, r9
 800a060:	f7f6 fd44 	bl	8000aec <__aeabi_dcmplt>
 800a064:	2800      	cmp	r0, #0
 800a066:	f43f af2f 	beq.w	8009ec8 <_dtoa_r+0x448>
 800a06a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a06c:	1e6b      	subs	r3, r5, #1
 800a06e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a070:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a074:	2b30      	cmp	r3, #48	; 0x30
 800a076:	d0f8      	beq.n	800a06a <_dtoa_r+0x5ea>
 800a078:	46bb      	mov	fp, r7
 800a07a:	e049      	b.n	800a110 <_dtoa_r+0x690>
 800a07c:	4b05      	ldr	r3, [pc, #20]	; (800a094 <_dtoa_r+0x614>)
 800a07e:	f7f6 fac3 	bl	8000608 <__aeabi_dmul>
 800a082:	4680      	mov	r8, r0
 800a084:	4689      	mov	r9, r1
 800a086:	e7bd      	b.n	800a004 <_dtoa_r+0x584>
 800a088:	0800d510 	.word	0x0800d510
 800a08c:	0800d4e8 	.word	0x0800d4e8
 800a090:	3ff00000 	.word	0x3ff00000
 800a094:	40240000 	.word	0x40240000
 800a098:	401c0000 	.word	0x401c0000
 800a09c:	40140000 	.word	0x40140000
 800a0a0:	3fe00000 	.word	0x3fe00000
 800a0a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a0a8:	9d00      	ldr	r5, [sp, #0]
 800a0aa:	4642      	mov	r2, r8
 800a0ac:	464b      	mov	r3, r9
 800a0ae:	4630      	mov	r0, r6
 800a0b0:	4639      	mov	r1, r7
 800a0b2:	f7f6 fbd3 	bl	800085c <__aeabi_ddiv>
 800a0b6:	f7f6 fd57 	bl	8000b68 <__aeabi_d2iz>
 800a0ba:	9001      	str	r0, [sp, #4]
 800a0bc:	f7f6 fa3a 	bl	8000534 <__aeabi_i2d>
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	464b      	mov	r3, r9
 800a0c4:	f7f6 faa0 	bl	8000608 <__aeabi_dmul>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4630      	mov	r0, r6
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	f7f6 f8e2 	bl	8000298 <__aeabi_dsub>
 800a0d4:	9e01      	ldr	r6, [sp, #4]
 800a0d6:	9f04      	ldr	r7, [sp, #16]
 800a0d8:	3630      	adds	r6, #48	; 0x30
 800a0da:	f805 6b01 	strb.w	r6, [r5], #1
 800a0de:	9e00      	ldr	r6, [sp, #0]
 800a0e0:	1bae      	subs	r6, r5, r6
 800a0e2:	42b7      	cmp	r7, r6
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	460b      	mov	r3, r1
 800a0e8:	d134      	bne.n	800a154 <_dtoa_r+0x6d4>
 800a0ea:	f7f6 f8d7 	bl	800029c <__adddf3>
 800a0ee:	4642      	mov	r2, r8
 800a0f0:	464b      	mov	r3, r9
 800a0f2:	4606      	mov	r6, r0
 800a0f4:	460f      	mov	r7, r1
 800a0f6:	f7f6 fd17 	bl	8000b28 <__aeabi_dcmpgt>
 800a0fa:	b9c8      	cbnz	r0, 800a130 <_dtoa_r+0x6b0>
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	464b      	mov	r3, r9
 800a100:	4630      	mov	r0, r6
 800a102:	4639      	mov	r1, r7
 800a104:	f7f6 fce8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a108:	b110      	cbz	r0, 800a110 <_dtoa_r+0x690>
 800a10a:	9b01      	ldr	r3, [sp, #4]
 800a10c:	07db      	lsls	r3, r3, #31
 800a10e:	d40f      	bmi.n	800a130 <_dtoa_r+0x6b0>
 800a110:	4651      	mov	r1, sl
 800a112:	4620      	mov	r0, r4
 800a114:	f000 faaf 	bl	800a676 <_Bfree>
 800a118:	2300      	movs	r3, #0
 800a11a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a11c:	702b      	strb	r3, [r5, #0]
 800a11e:	f10b 0301 	add.w	r3, fp, #1
 800a122:	6013      	str	r3, [r2, #0]
 800a124:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a126:	2b00      	cmp	r3, #0
 800a128:	f43f ace5 	beq.w	8009af6 <_dtoa_r+0x76>
 800a12c:	601d      	str	r5, [r3, #0]
 800a12e:	e4e2      	b.n	8009af6 <_dtoa_r+0x76>
 800a130:	465f      	mov	r7, fp
 800a132:	462b      	mov	r3, r5
 800a134:	461d      	mov	r5, r3
 800a136:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a13a:	2a39      	cmp	r2, #57	; 0x39
 800a13c:	d106      	bne.n	800a14c <_dtoa_r+0x6cc>
 800a13e:	9a00      	ldr	r2, [sp, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d1f7      	bne.n	800a134 <_dtoa_r+0x6b4>
 800a144:	9900      	ldr	r1, [sp, #0]
 800a146:	2230      	movs	r2, #48	; 0x30
 800a148:	3701      	adds	r7, #1
 800a14a:	700a      	strb	r2, [r1, #0]
 800a14c:	781a      	ldrb	r2, [r3, #0]
 800a14e:	3201      	adds	r2, #1
 800a150:	701a      	strb	r2, [r3, #0]
 800a152:	e791      	b.n	800a078 <_dtoa_r+0x5f8>
 800a154:	4ba3      	ldr	r3, [pc, #652]	; (800a3e4 <_dtoa_r+0x964>)
 800a156:	2200      	movs	r2, #0
 800a158:	f7f6 fa56 	bl	8000608 <__aeabi_dmul>
 800a15c:	2200      	movs	r2, #0
 800a15e:	2300      	movs	r3, #0
 800a160:	4606      	mov	r6, r0
 800a162:	460f      	mov	r7, r1
 800a164:	f7f6 fcb8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a168:	2800      	cmp	r0, #0
 800a16a:	d09e      	beq.n	800a0aa <_dtoa_r+0x62a>
 800a16c:	e7d0      	b.n	800a110 <_dtoa_r+0x690>
 800a16e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a170:	2a00      	cmp	r2, #0
 800a172:	f000 80ca 	beq.w	800a30a <_dtoa_r+0x88a>
 800a176:	9a07      	ldr	r2, [sp, #28]
 800a178:	2a01      	cmp	r2, #1
 800a17a:	f300 80ad 	bgt.w	800a2d8 <_dtoa_r+0x858>
 800a17e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a180:	2a00      	cmp	r2, #0
 800a182:	f000 80a5 	beq.w	800a2d0 <_dtoa_r+0x850>
 800a186:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a18a:	9e08      	ldr	r6, [sp, #32]
 800a18c:	9d05      	ldr	r5, [sp, #20]
 800a18e:	9a05      	ldr	r2, [sp, #20]
 800a190:	441a      	add	r2, r3
 800a192:	9205      	str	r2, [sp, #20]
 800a194:	9a06      	ldr	r2, [sp, #24]
 800a196:	2101      	movs	r1, #1
 800a198:	441a      	add	r2, r3
 800a19a:	4620      	mov	r0, r4
 800a19c:	9206      	str	r2, [sp, #24]
 800a19e:	f000 fb07 	bl	800a7b0 <__i2b>
 800a1a2:	4607      	mov	r7, r0
 800a1a4:	b165      	cbz	r5, 800a1c0 <_dtoa_r+0x740>
 800a1a6:	9b06      	ldr	r3, [sp, #24]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	dd09      	ble.n	800a1c0 <_dtoa_r+0x740>
 800a1ac:	42ab      	cmp	r3, r5
 800a1ae:	9a05      	ldr	r2, [sp, #20]
 800a1b0:	bfa8      	it	ge
 800a1b2:	462b      	movge	r3, r5
 800a1b4:	1ad2      	subs	r2, r2, r3
 800a1b6:	9205      	str	r2, [sp, #20]
 800a1b8:	9a06      	ldr	r2, [sp, #24]
 800a1ba:	1aed      	subs	r5, r5, r3
 800a1bc:	1ad3      	subs	r3, r2, r3
 800a1be:	9306      	str	r3, [sp, #24]
 800a1c0:	9b08      	ldr	r3, [sp, #32]
 800a1c2:	b1f3      	cbz	r3, 800a202 <_dtoa_r+0x782>
 800a1c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	f000 80a3 	beq.w	800a312 <_dtoa_r+0x892>
 800a1cc:	2e00      	cmp	r6, #0
 800a1ce:	dd10      	ble.n	800a1f2 <_dtoa_r+0x772>
 800a1d0:	4639      	mov	r1, r7
 800a1d2:	4632      	mov	r2, r6
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f000 fbab 	bl	800a930 <__pow5mult>
 800a1da:	4652      	mov	r2, sl
 800a1dc:	4601      	mov	r1, r0
 800a1de:	4607      	mov	r7, r0
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fafb 	bl	800a7dc <__multiply>
 800a1e6:	4651      	mov	r1, sl
 800a1e8:	4680      	mov	r8, r0
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	f000 fa43 	bl	800a676 <_Bfree>
 800a1f0:	46c2      	mov	sl, r8
 800a1f2:	9b08      	ldr	r3, [sp, #32]
 800a1f4:	1b9a      	subs	r2, r3, r6
 800a1f6:	d004      	beq.n	800a202 <_dtoa_r+0x782>
 800a1f8:	4651      	mov	r1, sl
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f000 fb98 	bl	800a930 <__pow5mult>
 800a200:	4682      	mov	sl, r0
 800a202:	2101      	movs	r1, #1
 800a204:	4620      	mov	r0, r4
 800a206:	f000 fad3 	bl	800a7b0 <__i2b>
 800a20a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	4606      	mov	r6, r0
 800a210:	f340 8081 	ble.w	800a316 <_dtoa_r+0x896>
 800a214:	461a      	mov	r2, r3
 800a216:	4601      	mov	r1, r0
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 fb89 	bl	800a930 <__pow5mult>
 800a21e:	9b07      	ldr	r3, [sp, #28]
 800a220:	2b01      	cmp	r3, #1
 800a222:	4606      	mov	r6, r0
 800a224:	dd7a      	ble.n	800a31c <_dtoa_r+0x89c>
 800a226:	f04f 0800 	mov.w	r8, #0
 800a22a:	6933      	ldr	r3, [r6, #16]
 800a22c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a230:	6918      	ldr	r0, [r3, #16]
 800a232:	f000 fa6f 	bl	800a714 <__hi0bits>
 800a236:	f1c0 0020 	rsb	r0, r0, #32
 800a23a:	9b06      	ldr	r3, [sp, #24]
 800a23c:	4418      	add	r0, r3
 800a23e:	f010 001f 	ands.w	r0, r0, #31
 800a242:	f000 8094 	beq.w	800a36e <_dtoa_r+0x8ee>
 800a246:	f1c0 0320 	rsb	r3, r0, #32
 800a24a:	2b04      	cmp	r3, #4
 800a24c:	f340 8085 	ble.w	800a35a <_dtoa_r+0x8da>
 800a250:	9b05      	ldr	r3, [sp, #20]
 800a252:	f1c0 001c 	rsb	r0, r0, #28
 800a256:	4403      	add	r3, r0
 800a258:	9305      	str	r3, [sp, #20]
 800a25a:	9b06      	ldr	r3, [sp, #24]
 800a25c:	4403      	add	r3, r0
 800a25e:	4405      	add	r5, r0
 800a260:	9306      	str	r3, [sp, #24]
 800a262:	9b05      	ldr	r3, [sp, #20]
 800a264:	2b00      	cmp	r3, #0
 800a266:	dd05      	ble.n	800a274 <_dtoa_r+0x7f4>
 800a268:	4651      	mov	r1, sl
 800a26a:	461a      	mov	r2, r3
 800a26c:	4620      	mov	r0, r4
 800a26e:	f000 fb9f 	bl	800a9b0 <__lshift>
 800a272:	4682      	mov	sl, r0
 800a274:	9b06      	ldr	r3, [sp, #24]
 800a276:	2b00      	cmp	r3, #0
 800a278:	dd05      	ble.n	800a286 <_dtoa_r+0x806>
 800a27a:	4631      	mov	r1, r6
 800a27c:	461a      	mov	r2, r3
 800a27e:	4620      	mov	r0, r4
 800a280:	f000 fb96 	bl	800a9b0 <__lshift>
 800a284:	4606      	mov	r6, r0
 800a286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d072      	beq.n	800a372 <_dtoa_r+0x8f2>
 800a28c:	4631      	mov	r1, r6
 800a28e:	4650      	mov	r0, sl
 800a290:	f000 fbfa 	bl	800aa88 <__mcmp>
 800a294:	2800      	cmp	r0, #0
 800a296:	da6c      	bge.n	800a372 <_dtoa_r+0x8f2>
 800a298:	2300      	movs	r3, #0
 800a29a:	4651      	mov	r1, sl
 800a29c:	220a      	movs	r2, #10
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f000 f9f2 	bl	800a688 <__multadd>
 800a2a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a2aa:	4682      	mov	sl, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f000 81af 	beq.w	800a610 <_dtoa_r+0xb90>
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	4639      	mov	r1, r7
 800a2b6:	220a      	movs	r2, #10
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f000 f9e5 	bl	800a688 <__multadd>
 800a2be:	9b01      	ldr	r3, [sp, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	4607      	mov	r7, r0
 800a2c4:	f300 8096 	bgt.w	800a3f4 <_dtoa_r+0x974>
 800a2c8:	9b07      	ldr	r3, [sp, #28]
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	dc59      	bgt.n	800a382 <_dtoa_r+0x902>
 800a2ce:	e091      	b.n	800a3f4 <_dtoa_r+0x974>
 800a2d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2d6:	e758      	b.n	800a18a <_dtoa_r+0x70a>
 800a2d8:	9b04      	ldr	r3, [sp, #16]
 800a2da:	1e5e      	subs	r6, r3, #1
 800a2dc:	9b08      	ldr	r3, [sp, #32]
 800a2de:	42b3      	cmp	r3, r6
 800a2e0:	bfbf      	itttt	lt
 800a2e2:	9b08      	ldrlt	r3, [sp, #32]
 800a2e4:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a2e6:	9608      	strlt	r6, [sp, #32]
 800a2e8:	1af3      	sublt	r3, r6, r3
 800a2ea:	bfb4      	ite	lt
 800a2ec:	18d2      	addlt	r2, r2, r3
 800a2ee:	1b9e      	subge	r6, r3, r6
 800a2f0:	9b04      	ldr	r3, [sp, #16]
 800a2f2:	bfbc      	itt	lt
 800a2f4:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a2f6:	2600      	movlt	r6, #0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	bfb7      	itett	lt
 800a2fc:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a300:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a304:	1a9d      	sublt	r5, r3, r2
 800a306:	2300      	movlt	r3, #0
 800a308:	e741      	b.n	800a18e <_dtoa_r+0x70e>
 800a30a:	9e08      	ldr	r6, [sp, #32]
 800a30c:	9d05      	ldr	r5, [sp, #20]
 800a30e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a310:	e748      	b.n	800a1a4 <_dtoa_r+0x724>
 800a312:	9a08      	ldr	r2, [sp, #32]
 800a314:	e770      	b.n	800a1f8 <_dtoa_r+0x778>
 800a316:	9b07      	ldr	r3, [sp, #28]
 800a318:	2b01      	cmp	r3, #1
 800a31a:	dc19      	bgt.n	800a350 <_dtoa_r+0x8d0>
 800a31c:	9b02      	ldr	r3, [sp, #8]
 800a31e:	b9bb      	cbnz	r3, 800a350 <_dtoa_r+0x8d0>
 800a320:	9b03      	ldr	r3, [sp, #12]
 800a322:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a326:	b99b      	cbnz	r3, 800a350 <_dtoa_r+0x8d0>
 800a328:	9b03      	ldr	r3, [sp, #12]
 800a32a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a32e:	0d1b      	lsrs	r3, r3, #20
 800a330:	051b      	lsls	r3, r3, #20
 800a332:	b183      	cbz	r3, 800a356 <_dtoa_r+0x8d6>
 800a334:	9b05      	ldr	r3, [sp, #20]
 800a336:	3301      	adds	r3, #1
 800a338:	9305      	str	r3, [sp, #20]
 800a33a:	9b06      	ldr	r3, [sp, #24]
 800a33c:	3301      	adds	r3, #1
 800a33e:	9306      	str	r3, [sp, #24]
 800a340:	f04f 0801 	mov.w	r8, #1
 800a344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a346:	2b00      	cmp	r3, #0
 800a348:	f47f af6f 	bne.w	800a22a <_dtoa_r+0x7aa>
 800a34c:	2001      	movs	r0, #1
 800a34e:	e774      	b.n	800a23a <_dtoa_r+0x7ba>
 800a350:	f04f 0800 	mov.w	r8, #0
 800a354:	e7f6      	b.n	800a344 <_dtoa_r+0x8c4>
 800a356:	4698      	mov	r8, r3
 800a358:	e7f4      	b.n	800a344 <_dtoa_r+0x8c4>
 800a35a:	d082      	beq.n	800a262 <_dtoa_r+0x7e2>
 800a35c:	9a05      	ldr	r2, [sp, #20]
 800a35e:	331c      	adds	r3, #28
 800a360:	441a      	add	r2, r3
 800a362:	9205      	str	r2, [sp, #20]
 800a364:	9a06      	ldr	r2, [sp, #24]
 800a366:	441a      	add	r2, r3
 800a368:	441d      	add	r5, r3
 800a36a:	9206      	str	r2, [sp, #24]
 800a36c:	e779      	b.n	800a262 <_dtoa_r+0x7e2>
 800a36e:	4603      	mov	r3, r0
 800a370:	e7f4      	b.n	800a35c <_dtoa_r+0x8dc>
 800a372:	9b04      	ldr	r3, [sp, #16]
 800a374:	2b00      	cmp	r3, #0
 800a376:	dc37      	bgt.n	800a3e8 <_dtoa_r+0x968>
 800a378:	9b07      	ldr	r3, [sp, #28]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	dd34      	ble.n	800a3e8 <_dtoa_r+0x968>
 800a37e:	9b04      	ldr	r3, [sp, #16]
 800a380:	9301      	str	r3, [sp, #4]
 800a382:	9b01      	ldr	r3, [sp, #4]
 800a384:	b963      	cbnz	r3, 800a3a0 <_dtoa_r+0x920>
 800a386:	4631      	mov	r1, r6
 800a388:	2205      	movs	r2, #5
 800a38a:	4620      	mov	r0, r4
 800a38c:	f000 f97c 	bl	800a688 <__multadd>
 800a390:	4601      	mov	r1, r0
 800a392:	4606      	mov	r6, r0
 800a394:	4650      	mov	r0, sl
 800a396:	f000 fb77 	bl	800aa88 <__mcmp>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	f73f adbc 	bgt.w	8009f18 <_dtoa_r+0x498>
 800a3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3a2:	9d00      	ldr	r5, [sp, #0]
 800a3a4:	ea6f 0b03 	mvn.w	fp, r3
 800a3a8:	f04f 0800 	mov.w	r8, #0
 800a3ac:	4631      	mov	r1, r6
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 f961 	bl	800a676 <_Bfree>
 800a3b4:	2f00      	cmp	r7, #0
 800a3b6:	f43f aeab 	beq.w	800a110 <_dtoa_r+0x690>
 800a3ba:	f1b8 0f00 	cmp.w	r8, #0
 800a3be:	d005      	beq.n	800a3cc <_dtoa_r+0x94c>
 800a3c0:	45b8      	cmp	r8, r7
 800a3c2:	d003      	beq.n	800a3cc <_dtoa_r+0x94c>
 800a3c4:	4641      	mov	r1, r8
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f000 f955 	bl	800a676 <_Bfree>
 800a3cc:	4639      	mov	r1, r7
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f000 f951 	bl	800a676 <_Bfree>
 800a3d4:	e69c      	b.n	800a110 <_dtoa_r+0x690>
 800a3d6:	2600      	movs	r6, #0
 800a3d8:	4637      	mov	r7, r6
 800a3da:	e7e1      	b.n	800a3a0 <_dtoa_r+0x920>
 800a3dc:	46bb      	mov	fp, r7
 800a3de:	4637      	mov	r7, r6
 800a3e0:	e59a      	b.n	8009f18 <_dtoa_r+0x498>
 800a3e2:	bf00      	nop
 800a3e4:	40240000 	.word	0x40240000
 800a3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 80c7 	beq.w	800a57e <_dtoa_r+0xafe>
 800a3f0:	9b04      	ldr	r3, [sp, #16]
 800a3f2:	9301      	str	r3, [sp, #4]
 800a3f4:	2d00      	cmp	r5, #0
 800a3f6:	dd05      	ble.n	800a404 <_dtoa_r+0x984>
 800a3f8:	4639      	mov	r1, r7
 800a3fa:	462a      	mov	r2, r5
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f000 fad7 	bl	800a9b0 <__lshift>
 800a402:	4607      	mov	r7, r0
 800a404:	f1b8 0f00 	cmp.w	r8, #0
 800a408:	d05a      	beq.n	800a4c0 <_dtoa_r+0xa40>
 800a40a:	6879      	ldr	r1, [r7, #4]
 800a40c:	4620      	mov	r0, r4
 800a40e:	f000 f90d 	bl	800a62c <_Balloc>
 800a412:	4605      	mov	r5, r0
 800a414:	b920      	cbnz	r0, 800a420 <_dtoa_r+0x9a0>
 800a416:	4b82      	ldr	r3, [pc, #520]	; (800a620 <_dtoa_r+0xba0>)
 800a418:	4602      	mov	r2, r0
 800a41a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a41e:	e470      	b.n	8009d02 <_dtoa_r+0x282>
 800a420:	693a      	ldr	r2, [r7, #16]
 800a422:	3202      	adds	r2, #2
 800a424:	0092      	lsls	r2, r2, #2
 800a426:	f107 010c 	add.w	r1, r7, #12
 800a42a:	300c      	adds	r0, #12
 800a42c:	f000 fcca 	bl	800adc4 <memcpy>
 800a430:	2201      	movs	r2, #1
 800a432:	4629      	mov	r1, r5
 800a434:	4620      	mov	r0, r4
 800a436:	f000 fabb 	bl	800a9b0 <__lshift>
 800a43a:	9b00      	ldr	r3, [sp, #0]
 800a43c:	3301      	adds	r3, #1
 800a43e:	9304      	str	r3, [sp, #16]
 800a440:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a444:	4413      	add	r3, r2
 800a446:	9308      	str	r3, [sp, #32]
 800a448:	9b02      	ldr	r3, [sp, #8]
 800a44a:	f003 0301 	and.w	r3, r3, #1
 800a44e:	46b8      	mov	r8, r7
 800a450:	9306      	str	r3, [sp, #24]
 800a452:	4607      	mov	r7, r0
 800a454:	9b04      	ldr	r3, [sp, #16]
 800a456:	4631      	mov	r1, r6
 800a458:	3b01      	subs	r3, #1
 800a45a:	4650      	mov	r0, sl
 800a45c:	9301      	str	r3, [sp, #4]
 800a45e:	f7ff fa87 	bl	8009970 <quorem>
 800a462:	4641      	mov	r1, r8
 800a464:	9002      	str	r0, [sp, #8]
 800a466:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a46a:	4650      	mov	r0, sl
 800a46c:	f000 fb0c 	bl	800aa88 <__mcmp>
 800a470:	463a      	mov	r2, r7
 800a472:	9005      	str	r0, [sp, #20]
 800a474:	4631      	mov	r1, r6
 800a476:	4620      	mov	r0, r4
 800a478:	f000 fb22 	bl	800aac0 <__mdiff>
 800a47c:	68c2      	ldr	r2, [r0, #12]
 800a47e:	4605      	mov	r5, r0
 800a480:	bb02      	cbnz	r2, 800a4c4 <_dtoa_r+0xa44>
 800a482:	4601      	mov	r1, r0
 800a484:	4650      	mov	r0, sl
 800a486:	f000 faff 	bl	800aa88 <__mcmp>
 800a48a:	4602      	mov	r2, r0
 800a48c:	4629      	mov	r1, r5
 800a48e:	4620      	mov	r0, r4
 800a490:	9209      	str	r2, [sp, #36]	; 0x24
 800a492:	f000 f8f0 	bl	800a676 <_Bfree>
 800a496:	9b07      	ldr	r3, [sp, #28]
 800a498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a49a:	9d04      	ldr	r5, [sp, #16]
 800a49c:	ea43 0102 	orr.w	r1, r3, r2
 800a4a0:	9b06      	ldr	r3, [sp, #24]
 800a4a2:	4319      	orrs	r1, r3
 800a4a4:	d110      	bne.n	800a4c8 <_dtoa_r+0xa48>
 800a4a6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a4aa:	d029      	beq.n	800a500 <_dtoa_r+0xa80>
 800a4ac:	9b05      	ldr	r3, [sp, #20]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	dd02      	ble.n	800a4b8 <_dtoa_r+0xa38>
 800a4b2:	9b02      	ldr	r3, [sp, #8]
 800a4b4:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a4b8:	9b01      	ldr	r3, [sp, #4]
 800a4ba:	f883 9000 	strb.w	r9, [r3]
 800a4be:	e775      	b.n	800a3ac <_dtoa_r+0x92c>
 800a4c0:	4638      	mov	r0, r7
 800a4c2:	e7ba      	b.n	800a43a <_dtoa_r+0x9ba>
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	e7e1      	b.n	800a48c <_dtoa_r+0xa0c>
 800a4c8:	9b05      	ldr	r3, [sp, #20]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	db04      	blt.n	800a4d8 <_dtoa_r+0xa58>
 800a4ce:	9907      	ldr	r1, [sp, #28]
 800a4d0:	430b      	orrs	r3, r1
 800a4d2:	9906      	ldr	r1, [sp, #24]
 800a4d4:	430b      	orrs	r3, r1
 800a4d6:	d120      	bne.n	800a51a <_dtoa_r+0xa9a>
 800a4d8:	2a00      	cmp	r2, #0
 800a4da:	dded      	ble.n	800a4b8 <_dtoa_r+0xa38>
 800a4dc:	4651      	mov	r1, sl
 800a4de:	2201      	movs	r2, #1
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f000 fa65 	bl	800a9b0 <__lshift>
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	4682      	mov	sl, r0
 800a4ea:	f000 facd 	bl	800aa88 <__mcmp>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	dc03      	bgt.n	800a4fa <_dtoa_r+0xa7a>
 800a4f2:	d1e1      	bne.n	800a4b8 <_dtoa_r+0xa38>
 800a4f4:	f019 0f01 	tst.w	r9, #1
 800a4f8:	d0de      	beq.n	800a4b8 <_dtoa_r+0xa38>
 800a4fa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a4fe:	d1d8      	bne.n	800a4b2 <_dtoa_r+0xa32>
 800a500:	9a01      	ldr	r2, [sp, #4]
 800a502:	2339      	movs	r3, #57	; 0x39
 800a504:	7013      	strb	r3, [r2, #0]
 800a506:	462b      	mov	r3, r5
 800a508:	461d      	mov	r5, r3
 800a50a:	3b01      	subs	r3, #1
 800a50c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a510:	2a39      	cmp	r2, #57	; 0x39
 800a512:	d06c      	beq.n	800a5ee <_dtoa_r+0xb6e>
 800a514:	3201      	adds	r2, #1
 800a516:	701a      	strb	r2, [r3, #0]
 800a518:	e748      	b.n	800a3ac <_dtoa_r+0x92c>
 800a51a:	2a00      	cmp	r2, #0
 800a51c:	dd07      	ble.n	800a52e <_dtoa_r+0xaae>
 800a51e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a522:	d0ed      	beq.n	800a500 <_dtoa_r+0xa80>
 800a524:	9a01      	ldr	r2, [sp, #4]
 800a526:	f109 0301 	add.w	r3, r9, #1
 800a52a:	7013      	strb	r3, [r2, #0]
 800a52c:	e73e      	b.n	800a3ac <_dtoa_r+0x92c>
 800a52e:	9b04      	ldr	r3, [sp, #16]
 800a530:	9a08      	ldr	r2, [sp, #32]
 800a532:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a536:	4293      	cmp	r3, r2
 800a538:	d043      	beq.n	800a5c2 <_dtoa_r+0xb42>
 800a53a:	4651      	mov	r1, sl
 800a53c:	2300      	movs	r3, #0
 800a53e:	220a      	movs	r2, #10
 800a540:	4620      	mov	r0, r4
 800a542:	f000 f8a1 	bl	800a688 <__multadd>
 800a546:	45b8      	cmp	r8, r7
 800a548:	4682      	mov	sl, r0
 800a54a:	f04f 0300 	mov.w	r3, #0
 800a54e:	f04f 020a 	mov.w	r2, #10
 800a552:	4641      	mov	r1, r8
 800a554:	4620      	mov	r0, r4
 800a556:	d107      	bne.n	800a568 <_dtoa_r+0xae8>
 800a558:	f000 f896 	bl	800a688 <__multadd>
 800a55c:	4680      	mov	r8, r0
 800a55e:	4607      	mov	r7, r0
 800a560:	9b04      	ldr	r3, [sp, #16]
 800a562:	3301      	adds	r3, #1
 800a564:	9304      	str	r3, [sp, #16]
 800a566:	e775      	b.n	800a454 <_dtoa_r+0x9d4>
 800a568:	f000 f88e 	bl	800a688 <__multadd>
 800a56c:	4639      	mov	r1, r7
 800a56e:	4680      	mov	r8, r0
 800a570:	2300      	movs	r3, #0
 800a572:	220a      	movs	r2, #10
 800a574:	4620      	mov	r0, r4
 800a576:	f000 f887 	bl	800a688 <__multadd>
 800a57a:	4607      	mov	r7, r0
 800a57c:	e7f0      	b.n	800a560 <_dtoa_r+0xae0>
 800a57e:	9b04      	ldr	r3, [sp, #16]
 800a580:	9301      	str	r3, [sp, #4]
 800a582:	9d00      	ldr	r5, [sp, #0]
 800a584:	4631      	mov	r1, r6
 800a586:	4650      	mov	r0, sl
 800a588:	f7ff f9f2 	bl	8009970 <quorem>
 800a58c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a590:	9b00      	ldr	r3, [sp, #0]
 800a592:	f805 9b01 	strb.w	r9, [r5], #1
 800a596:	1aea      	subs	r2, r5, r3
 800a598:	9b01      	ldr	r3, [sp, #4]
 800a59a:	4293      	cmp	r3, r2
 800a59c:	dd07      	ble.n	800a5ae <_dtoa_r+0xb2e>
 800a59e:	4651      	mov	r1, sl
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	220a      	movs	r2, #10
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f000 f86f 	bl	800a688 <__multadd>
 800a5aa:	4682      	mov	sl, r0
 800a5ac:	e7ea      	b.n	800a584 <_dtoa_r+0xb04>
 800a5ae:	9b01      	ldr	r3, [sp, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	bfc8      	it	gt
 800a5b4:	461d      	movgt	r5, r3
 800a5b6:	9b00      	ldr	r3, [sp, #0]
 800a5b8:	bfd8      	it	le
 800a5ba:	2501      	movle	r5, #1
 800a5bc:	441d      	add	r5, r3
 800a5be:	f04f 0800 	mov.w	r8, #0
 800a5c2:	4651      	mov	r1, sl
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f000 f9f2 	bl	800a9b0 <__lshift>
 800a5cc:	4631      	mov	r1, r6
 800a5ce:	4682      	mov	sl, r0
 800a5d0:	f000 fa5a 	bl	800aa88 <__mcmp>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	dc96      	bgt.n	800a506 <_dtoa_r+0xa86>
 800a5d8:	d102      	bne.n	800a5e0 <_dtoa_r+0xb60>
 800a5da:	f019 0f01 	tst.w	r9, #1
 800a5de:	d192      	bne.n	800a506 <_dtoa_r+0xa86>
 800a5e0:	462b      	mov	r3, r5
 800a5e2:	461d      	mov	r5, r3
 800a5e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5e8:	2a30      	cmp	r2, #48	; 0x30
 800a5ea:	d0fa      	beq.n	800a5e2 <_dtoa_r+0xb62>
 800a5ec:	e6de      	b.n	800a3ac <_dtoa_r+0x92c>
 800a5ee:	9a00      	ldr	r2, [sp, #0]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d189      	bne.n	800a508 <_dtoa_r+0xa88>
 800a5f4:	f10b 0b01 	add.w	fp, fp, #1
 800a5f8:	2331      	movs	r3, #49	; 0x31
 800a5fa:	e796      	b.n	800a52a <_dtoa_r+0xaaa>
 800a5fc:	4b09      	ldr	r3, [pc, #36]	; (800a624 <_dtoa_r+0xba4>)
 800a5fe:	f7ff ba9d 	b.w	8009b3c <_dtoa_r+0xbc>
 800a602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a604:	2b00      	cmp	r3, #0
 800a606:	f47f aa7c 	bne.w	8009b02 <_dtoa_r+0x82>
 800a60a:	4b07      	ldr	r3, [pc, #28]	; (800a628 <_dtoa_r+0xba8>)
 800a60c:	f7ff ba96 	b.w	8009b3c <_dtoa_r+0xbc>
 800a610:	9b01      	ldr	r3, [sp, #4]
 800a612:	2b00      	cmp	r3, #0
 800a614:	dcb5      	bgt.n	800a582 <_dtoa_r+0xb02>
 800a616:	9b07      	ldr	r3, [sp, #28]
 800a618:	2b02      	cmp	r3, #2
 800a61a:	f73f aeb2 	bgt.w	800a382 <_dtoa_r+0x902>
 800a61e:	e7b0      	b.n	800a582 <_dtoa_r+0xb02>
 800a620:	0800d425 	.word	0x0800d425
 800a624:	0800d3f6 	.word	0x0800d3f6
 800a628:	0800d418 	.word	0x0800d418

0800a62c <_Balloc>:
 800a62c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a62e:	b570      	push	{r4, r5, r6, lr}
 800a630:	4605      	mov	r5, r0
 800a632:	460c      	mov	r4, r1
 800a634:	b17b      	cbz	r3, 800a656 <_Balloc+0x2a>
 800a636:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a638:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a63c:	b9a0      	cbnz	r0, 800a668 <_Balloc+0x3c>
 800a63e:	2101      	movs	r1, #1
 800a640:	fa01 f604 	lsl.w	r6, r1, r4
 800a644:	1d72      	adds	r2, r6, #5
 800a646:	0092      	lsls	r2, r2, #2
 800a648:	4628      	mov	r0, r5
 800a64a:	f000 fbe7 	bl	800ae1c <_calloc_r>
 800a64e:	b148      	cbz	r0, 800a664 <_Balloc+0x38>
 800a650:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800a654:	e00b      	b.n	800a66e <_Balloc+0x42>
 800a656:	2221      	movs	r2, #33	; 0x21
 800a658:	2104      	movs	r1, #4
 800a65a:	f000 fbdf 	bl	800ae1c <_calloc_r>
 800a65e:	6468      	str	r0, [r5, #68]	; 0x44
 800a660:	2800      	cmp	r0, #0
 800a662:	d1e8      	bne.n	800a636 <_Balloc+0xa>
 800a664:	2000      	movs	r0, #0
 800a666:	bd70      	pop	{r4, r5, r6, pc}
 800a668:	6802      	ldr	r2, [r0, #0]
 800a66a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a66e:	2300      	movs	r3, #0
 800a670:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a674:	e7f7      	b.n	800a666 <_Balloc+0x3a>

0800a676 <_Bfree>:
 800a676:	b131      	cbz	r1, 800a686 <_Bfree+0x10>
 800a678:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a67a:	684a      	ldr	r2, [r1, #4]
 800a67c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a680:	6008      	str	r0, [r1, #0]
 800a682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a686:	4770      	bx	lr

0800a688 <__multadd>:
 800a688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a68c:	690d      	ldr	r5, [r1, #16]
 800a68e:	4607      	mov	r7, r0
 800a690:	460c      	mov	r4, r1
 800a692:	461e      	mov	r6, r3
 800a694:	f101 0c14 	add.w	ip, r1, #20
 800a698:	2000      	movs	r0, #0
 800a69a:	f8dc 3000 	ldr.w	r3, [ip]
 800a69e:	b299      	uxth	r1, r3
 800a6a0:	fb02 6101 	mla	r1, r2, r1, r6
 800a6a4:	0c1e      	lsrs	r6, r3, #16
 800a6a6:	0c0b      	lsrs	r3, r1, #16
 800a6a8:	fb02 3306 	mla	r3, r2, r6, r3
 800a6ac:	b289      	uxth	r1, r1
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6b4:	4285      	cmp	r5, r0
 800a6b6:	f84c 1b04 	str.w	r1, [ip], #4
 800a6ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6be:	dcec      	bgt.n	800a69a <__multadd+0x12>
 800a6c0:	b30e      	cbz	r6, 800a706 <__multadd+0x7e>
 800a6c2:	68a3      	ldr	r3, [r4, #8]
 800a6c4:	42ab      	cmp	r3, r5
 800a6c6:	dc19      	bgt.n	800a6fc <__multadd+0x74>
 800a6c8:	6861      	ldr	r1, [r4, #4]
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	3101      	adds	r1, #1
 800a6ce:	f7ff ffad 	bl	800a62c <_Balloc>
 800a6d2:	4680      	mov	r8, r0
 800a6d4:	b928      	cbnz	r0, 800a6e2 <__multadd+0x5a>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	4b0c      	ldr	r3, [pc, #48]	; (800a70c <__multadd+0x84>)
 800a6da:	480d      	ldr	r0, [pc, #52]	; (800a710 <__multadd+0x88>)
 800a6dc:	21ba      	movs	r1, #186	; 0xba
 800a6de:	f000 fb7f 	bl	800ade0 <__assert_func>
 800a6e2:	6922      	ldr	r2, [r4, #16]
 800a6e4:	3202      	adds	r2, #2
 800a6e6:	f104 010c 	add.w	r1, r4, #12
 800a6ea:	0092      	lsls	r2, r2, #2
 800a6ec:	300c      	adds	r0, #12
 800a6ee:	f000 fb69 	bl	800adc4 <memcpy>
 800a6f2:	4621      	mov	r1, r4
 800a6f4:	4638      	mov	r0, r7
 800a6f6:	f7ff ffbe 	bl	800a676 <_Bfree>
 800a6fa:	4644      	mov	r4, r8
 800a6fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a700:	3501      	adds	r5, #1
 800a702:	615e      	str	r6, [r3, #20]
 800a704:	6125      	str	r5, [r4, #16]
 800a706:	4620      	mov	r0, r4
 800a708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a70c:	0800d425 	.word	0x0800d425
 800a710:	0800d48e 	.word	0x0800d48e

0800a714 <__hi0bits>:
 800a714:	0c03      	lsrs	r3, r0, #16
 800a716:	041b      	lsls	r3, r3, #16
 800a718:	b9d3      	cbnz	r3, 800a750 <__hi0bits+0x3c>
 800a71a:	0400      	lsls	r0, r0, #16
 800a71c:	2310      	movs	r3, #16
 800a71e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a722:	bf04      	itt	eq
 800a724:	0200      	lsleq	r0, r0, #8
 800a726:	3308      	addeq	r3, #8
 800a728:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a72c:	bf04      	itt	eq
 800a72e:	0100      	lsleq	r0, r0, #4
 800a730:	3304      	addeq	r3, #4
 800a732:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a736:	bf04      	itt	eq
 800a738:	0080      	lsleq	r0, r0, #2
 800a73a:	3302      	addeq	r3, #2
 800a73c:	2800      	cmp	r0, #0
 800a73e:	db05      	blt.n	800a74c <__hi0bits+0x38>
 800a740:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a744:	f103 0301 	add.w	r3, r3, #1
 800a748:	bf08      	it	eq
 800a74a:	2320      	moveq	r3, #32
 800a74c:	4618      	mov	r0, r3
 800a74e:	4770      	bx	lr
 800a750:	2300      	movs	r3, #0
 800a752:	e7e4      	b.n	800a71e <__hi0bits+0xa>

0800a754 <__lo0bits>:
 800a754:	6803      	ldr	r3, [r0, #0]
 800a756:	f013 0207 	ands.w	r2, r3, #7
 800a75a:	d00c      	beq.n	800a776 <__lo0bits+0x22>
 800a75c:	07d9      	lsls	r1, r3, #31
 800a75e:	d422      	bmi.n	800a7a6 <__lo0bits+0x52>
 800a760:	079a      	lsls	r2, r3, #30
 800a762:	bf49      	itett	mi
 800a764:	085b      	lsrmi	r3, r3, #1
 800a766:	089b      	lsrpl	r3, r3, #2
 800a768:	6003      	strmi	r3, [r0, #0]
 800a76a:	2201      	movmi	r2, #1
 800a76c:	bf5c      	itt	pl
 800a76e:	6003      	strpl	r3, [r0, #0]
 800a770:	2202      	movpl	r2, #2
 800a772:	4610      	mov	r0, r2
 800a774:	4770      	bx	lr
 800a776:	b299      	uxth	r1, r3
 800a778:	b909      	cbnz	r1, 800a77e <__lo0bits+0x2a>
 800a77a:	0c1b      	lsrs	r3, r3, #16
 800a77c:	2210      	movs	r2, #16
 800a77e:	b2d9      	uxtb	r1, r3
 800a780:	b909      	cbnz	r1, 800a786 <__lo0bits+0x32>
 800a782:	3208      	adds	r2, #8
 800a784:	0a1b      	lsrs	r3, r3, #8
 800a786:	0719      	lsls	r1, r3, #28
 800a788:	bf04      	itt	eq
 800a78a:	091b      	lsreq	r3, r3, #4
 800a78c:	3204      	addeq	r2, #4
 800a78e:	0799      	lsls	r1, r3, #30
 800a790:	bf04      	itt	eq
 800a792:	089b      	lsreq	r3, r3, #2
 800a794:	3202      	addeq	r2, #2
 800a796:	07d9      	lsls	r1, r3, #31
 800a798:	d403      	bmi.n	800a7a2 <__lo0bits+0x4e>
 800a79a:	085b      	lsrs	r3, r3, #1
 800a79c:	f102 0201 	add.w	r2, r2, #1
 800a7a0:	d003      	beq.n	800a7aa <__lo0bits+0x56>
 800a7a2:	6003      	str	r3, [r0, #0]
 800a7a4:	e7e5      	b.n	800a772 <__lo0bits+0x1e>
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	e7e3      	b.n	800a772 <__lo0bits+0x1e>
 800a7aa:	2220      	movs	r2, #32
 800a7ac:	e7e1      	b.n	800a772 <__lo0bits+0x1e>
	...

0800a7b0 <__i2b>:
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	2101      	movs	r1, #1
 800a7b6:	f7ff ff39 	bl	800a62c <_Balloc>
 800a7ba:	4602      	mov	r2, r0
 800a7bc:	b928      	cbnz	r0, 800a7ca <__i2b+0x1a>
 800a7be:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <__i2b+0x24>)
 800a7c0:	4805      	ldr	r0, [pc, #20]	; (800a7d8 <__i2b+0x28>)
 800a7c2:	f240 1145 	movw	r1, #325	; 0x145
 800a7c6:	f000 fb0b 	bl	800ade0 <__assert_func>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	6144      	str	r4, [r0, #20]
 800a7ce:	6103      	str	r3, [r0, #16]
 800a7d0:	bd10      	pop	{r4, pc}
 800a7d2:	bf00      	nop
 800a7d4:	0800d425 	.word	0x0800d425
 800a7d8:	0800d48e 	.word	0x0800d48e

0800a7dc <__multiply>:
 800a7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e0:	4691      	mov	r9, r2
 800a7e2:	690a      	ldr	r2, [r1, #16]
 800a7e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	bfb8      	it	lt
 800a7ec:	460b      	movlt	r3, r1
 800a7ee:	460c      	mov	r4, r1
 800a7f0:	bfbc      	itt	lt
 800a7f2:	464c      	movlt	r4, r9
 800a7f4:	4699      	movlt	r9, r3
 800a7f6:	6927      	ldr	r7, [r4, #16]
 800a7f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a7fc:	68a3      	ldr	r3, [r4, #8]
 800a7fe:	6861      	ldr	r1, [r4, #4]
 800a800:	eb07 060a 	add.w	r6, r7, sl
 800a804:	42b3      	cmp	r3, r6
 800a806:	b085      	sub	sp, #20
 800a808:	bfb8      	it	lt
 800a80a:	3101      	addlt	r1, #1
 800a80c:	f7ff ff0e 	bl	800a62c <_Balloc>
 800a810:	b930      	cbnz	r0, 800a820 <__multiply+0x44>
 800a812:	4602      	mov	r2, r0
 800a814:	4b44      	ldr	r3, [pc, #272]	; (800a928 <__multiply+0x14c>)
 800a816:	4845      	ldr	r0, [pc, #276]	; (800a92c <__multiply+0x150>)
 800a818:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a81c:	f000 fae0 	bl	800ade0 <__assert_func>
 800a820:	f100 0514 	add.w	r5, r0, #20
 800a824:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a828:	462b      	mov	r3, r5
 800a82a:	2200      	movs	r2, #0
 800a82c:	4543      	cmp	r3, r8
 800a82e:	d321      	bcc.n	800a874 <__multiply+0x98>
 800a830:	f104 0314 	add.w	r3, r4, #20
 800a834:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a838:	f109 0314 	add.w	r3, r9, #20
 800a83c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a840:	9202      	str	r2, [sp, #8]
 800a842:	1b3a      	subs	r2, r7, r4
 800a844:	3a15      	subs	r2, #21
 800a846:	f022 0203 	bic.w	r2, r2, #3
 800a84a:	3204      	adds	r2, #4
 800a84c:	f104 0115 	add.w	r1, r4, #21
 800a850:	428f      	cmp	r7, r1
 800a852:	bf38      	it	cc
 800a854:	2204      	movcc	r2, #4
 800a856:	9201      	str	r2, [sp, #4]
 800a858:	9a02      	ldr	r2, [sp, #8]
 800a85a:	9303      	str	r3, [sp, #12]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d80c      	bhi.n	800a87a <__multiply+0x9e>
 800a860:	2e00      	cmp	r6, #0
 800a862:	dd03      	ble.n	800a86c <__multiply+0x90>
 800a864:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d05b      	beq.n	800a924 <__multiply+0x148>
 800a86c:	6106      	str	r6, [r0, #16]
 800a86e:	b005      	add	sp, #20
 800a870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a874:	f843 2b04 	str.w	r2, [r3], #4
 800a878:	e7d8      	b.n	800a82c <__multiply+0x50>
 800a87a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a87e:	f1ba 0f00 	cmp.w	sl, #0
 800a882:	d024      	beq.n	800a8ce <__multiply+0xf2>
 800a884:	f104 0e14 	add.w	lr, r4, #20
 800a888:	46a9      	mov	r9, r5
 800a88a:	f04f 0c00 	mov.w	ip, #0
 800a88e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a892:	f8d9 1000 	ldr.w	r1, [r9]
 800a896:	fa1f fb82 	uxth.w	fp, r2
 800a89a:	b289      	uxth	r1, r1
 800a89c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a8a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a8a4:	f8d9 2000 	ldr.w	r2, [r9]
 800a8a8:	4461      	add	r1, ip
 800a8aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8ae:	fb0a c20b 	mla	r2, sl, fp, ip
 800a8b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a8b6:	b289      	uxth	r1, r1
 800a8b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8bc:	4577      	cmp	r7, lr
 800a8be:	f849 1b04 	str.w	r1, [r9], #4
 800a8c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8c6:	d8e2      	bhi.n	800a88e <__multiply+0xb2>
 800a8c8:	9a01      	ldr	r2, [sp, #4]
 800a8ca:	f845 c002 	str.w	ip, [r5, r2]
 800a8ce:	9a03      	ldr	r2, [sp, #12]
 800a8d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	f1b9 0f00 	cmp.w	r9, #0
 800a8da:	d021      	beq.n	800a920 <__multiply+0x144>
 800a8dc:	6829      	ldr	r1, [r5, #0]
 800a8de:	f104 0c14 	add.w	ip, r4, #20
 800a8e2:	46ae      	mov	lr, r5
 800a8e4:	f04f 0a00 	mov.w	sl, #0
 800a8e8:	f8bc b000 	ldrh.w	fp, [ip]
 800a8ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a8f0:	fb09 220b 	mla	r2, r9, fp, r2
 800a8f4:	4452      	add	r2, sl
 800a8f6:	b289      	uxth	r1, r1
 800a8f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8fc:	f84e 1b04 	str.w	r1, [lr], #4
 800a900:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a904:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a908:	f8be 1000 	ldrh.w	r1, [lr]
 800a90c:	fb09 110a 	mla	r1, r9, sl, r1
 800a910:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a914:	4567      	cmp	r7, ip
 800a916:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a91a:	d8e5      	bhi.n	800a8e8 <__multiply+0x10c>
 800a91c:	9a01      	ldr	r2, [sp, #4]
 800a91e:	50a9      	str	r1, [r5, r2]
 800a920:	3504      	adds	r5, #4
 800a922:	e799      	b.n	800a858 <__multiply+0x7c>
 800a924:	3e01      	subs	r6, #1
 800a926:	e79b      	b.n	800a860 <__multiply+0x84>
 800a928:	0800d425 	.word	0x0800d425
 800a92c:	0800d48e 	.word	0x0800d48e

0800a930 <__pow5mult>:
 800a930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a934:	4615      	mov	r5, r2
 800a936:	f012 0203 	ands.w	r2, r2, #3
 800a93a:	4606      	mov	r6, r0
 800a93c:	460f      	mov	r7, r1
 800a93e:	d007      	beq.n	800a950 <__pow5mult+0x20>
 800a940:	4c1a      	ldr	r4, [pc, #104]	; (800a9ac <__pow5mult+0x7c>)
 800a942:	3a01      	subs	r2, #1
 800a944:	2300      	movs	r3, #0
 800a946:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a94a:	f7ff fe9d 	bl	800a688 <__multadd>
 800a94e:	4607      	mov	r7, r0
 800a950:	10ad      	asrs	r5, r5, #2
 800a952:	d027      	beq.n	800a9a4 <__pow5mult+0x74>
 800a954:	6c34      	ldr	r4, [r6, #64]	; 0x40
 800a956:	b944      	cbnz	r4, 800a96a <__pow5mult+0x3a>
 800a958:	f240 2171 	movw	r1, #625	; 0x271
 800a95c:	4630      	mov	r0, r6
 800a95e:	f7ff ff27 	bl	800a7b0 <__i2b>
 800a962:	2300      	movs	r3, #0
 800a964:	6430      	str	r0, [r6, #64]	; 0x40
 800a966:	4604      	mov	r4, r0
 800a968:	6003      	str	r3, [r0, #0]
 800a96a:	f04f 0900 	mov.w	r9, #0
 800a96e:	07eb      	lsls	r3, r5, #31
 800a970:	d50a      	bpl.n	800a988 <__pow5mult+0x58>
 800a972:	4639      	mov	r1, r7
 800a974:	4622      	mov	r2, r4
 800a976:	4630      	mov	r0, r6
 800a978:	f7ff ff30 	bl	800a7dc <__multiply>
 800a97c:	4639      	mov	r1, r7
 800a97e:	4680      	mov	r8, r0
 800a980:	4630      	mov	r0, r6
 800a982:	f7ff fe78 	bl	800a676 <_Bfree>
 800a986:	4647      	mov	r7, r8
 800a988:	106d      	asrs	r5, r5, #1
 800a98a:	d00b      	beq.n	800a9a4 <__pow5mult+0x74>
 800a98c:	6820      	ldr	r0, [r4, #0]
 800a98e:	b938      	cbnz	r0, 800a9a0 <__pow5mult+0x70>
 800a990:	4622      	mov	r2, r4
 800a992:	4621      	mov	r1, r4
 800a994:	4630      	mov	r0, r6
 800a996:	f7ff ff21 	bl	800a7dc <__multiply>
 800a99a:	6020      	str	r0, [r4, #0]
 800a99c:	f8c0 9000 	str.w	r9, [r0]
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	e7e4      	b.n	800a96e <__pow5mult+0x3e>
 800a9a4:	4638      	mov	r0, r7
 800a9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9aa:	bf00      	nop
 800a9ac:	0800d5d8 	.word	0x0800d5d8

0800a9b0 <__lshift>:
 800a9b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	6849      	ldr	r1, [r1, #4]
 800a9b8:	6923      	ldr	r3, [r4, #16]
 800a9ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9be:	68a3      	ldr	r3, [r4, #8]
 800a9c0:	4607      	mov	r7, r0
 800a9c2:	4691      	mov	r9, r2
 800a9c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9c8:	f108 0601 	add.w	r6, r8, #1
 800a9cc:	42b3      	cmp	r3, r6
 800a9ce:	db0b      	blt.n	800a9e8 <__lshift+0x38>
 800a9d0:	4638      	mov	r0, r7
 800a9d2:	f7ff fe2b 	bl	800a62c <_Balloc>
 800a9d6:	4605      	mov	r5, r0
 800a9d8:	b948      	cbnz	r0, 800a9ee <__lshift+0x3e>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	4b28      	ldr	r3, [pc, #160]	; (800aa80 <__lshift+0xd0>)
 800a9de:	4829      	ldr	r0, [pc, #164]	; (800aa84 <__lshift+0xd4>)
 800a9e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a9e4:	f000 f9fc 	bl	800ade0 <__assert_func>
 800a9e8:	3101      	adds	r1, #1
 800a9ea:	005b      	lsls	r3, r3, #1
 800a9ec:	e7ee      	b.n	800a9cc <__lshift+0x1c>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	f100 0114 	add.w	r1, r0, #20
 800a9f4:	f100 0210 	add.w	r2, r0, #16
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	4553      	cmp	r3, sl
 800a9fc:	db33      	blt.n	800aa66 <__lshift+0xb6>
 800a9fe:	6920      	ldr	r0, [r4, #16]
 800aa00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa04:	f104 0314 	add.w	r3, r4, #20
 800aa08:	f019 091f 	ands.w	r9, r9, #31
 800aa0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa14:	d02b      	beq.n	800aa6e <__lshift+0xbe>
 800aa16:	f1c9 0e20 	rsb	lr, r9, #32
 800aa1a:	468a      	mov	sl, r1
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	6818      	ldr	r0, [r3, #0]
 800aa20:	fa00 f009 	lsl.w	r0, r0, r9
 800aa24:	4310      	orrs	r0, r2
 800aa26:	f84a 0b04 	str.w	r0, [sl], #4
 800aa2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa2e:	459c      	cmp	ip, r3
 800aa30:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa34:	d8f3      	bhi.n	800aa1e <__lshift+0x6e>
 800aa36:	ebac 0304 	sub.w	r3, ip, r4
 800aa3a:	3b15      	subs	r3, #21
 800aa3c:	f023 0303 	bic.w	r3, r3, #3
 800aa40:	3304      	adds	r3, #4
 800aa42:	f104 0015 	add.w	r0, r4, #21
 800aa46:	4584      	cmp	ip, r0
 800aa48:	bf38      	it	cc
 800aa4a:	2304      	movcc	r3, #4
 800aa4c:	50ca      	str	r2, [r1, r3]
 800aa4e:	b10a      	cbz	r2, 800aa54 <__lshift+0xa4>
 800aa50:	f108 0602 	add.w	r6, r8, #2
 800aa54:	3e01      	subs	r6, #1
 800aa56:	4638      	mov	r0, r7
 800aa58:	612e      	str	r6, [r5, #16]
 800aa5a:	4621      	mov	r1, r4
 800aa5c:	f7ff fe0b 	bl	800a676 <_Bfree>
 800aa60:	4628      	mov	r0, r5
 800aa62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa66:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	e7c5      	b.n	800a9fa <__lshift+0x4a>
 800aa6e:	3904      	subs	r1, #4
 800aa70:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa74:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa78:	459c      	cmp	ip, r3
 800aa7a:	d8f9      	bhi.n	800aa70 <__lshift+0xc0>
 800aa7c:	e7ea      	b.n	800aa54 <__lshift+0xa4>
 800aa7e:	bf00      	nop
 800aa80:	0800d425 	.word	0x0800d425
 800aa84:	0800d48e 	.word	0x0800d48e

0800aa88 <__mcmp>:
 800aa88:	b530      	push	{r4, r5, lr}
 800aa8a:	6902      	ldr	r2, [r0, #16]
 800aa8c:	690c      	ldr	r4, [r1, #16]
 800aa8e:	1b12      	subs	r2, r2, r4
 800aa90:	d10e      	bne.n	800aab0 <__mcmp+0x28>
 800aa92:	f100 0314 	add.w	r3, r0, #20
 800aa96:	3114      	adds	r1, #20
 800aa98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aaa0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aaa4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aaa8:	42a5      	cmp	r5, r4
 800aaaa:	d003      	beq.n	800aab4 <__mcmp+0x2c>
 800aaac:	d305      	bcc.n	800aaba <__mcmp+0x32>
 800aaae:	2201      	movs	r2, #1
 800aab0:	4610      	mov	r0, r2
 800aab2:	bd30      	pop	{r4, r5, pc}
 800aab4:	4283      	cmp	r3, r0
 800aab6:	d3f3      	bcc.n	800aaa0 <__mcmp+0x18>
 800aab8:	e7fa      	b.n	800aab0 <__mcmp+0x28>
 800aaba:	f04f 32ff 	mov.w	r2, #4294967295
 800aabe:	e7f7      	b.n	800aab0 <__mcmp+0x28>

0800aac0 <__mdiff>:
 800aac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac4:	460c      	mov	r4, r1
 800aac6:	4606      	mov	r6, r0
 800aac8:	4611      	mov	r1, r2
 800aaca:	4620      	mov	r0, r4
 800aacc:	4690      	mov	r8, r2
 800aace:	f7ff ffdb 	bl	800aa88 <__mcmp>
 800aad2:	1e05      	subs	r5, r0, #0
 800aad4:	d110      	bne.n	800aaf8 <__mdiff+0x38>
 800aad6:	4629      	mov	r1, r5
 800aad8:	4630      	mov	r0, r6
 800aada:	f7ff fda7 	bl	800a62c <_Balloc>
 800aade:	b930      	cbnz	r0, 800aaee <__mdiff+0x2e>
 800aae0:	4b3a      	ldr	r3, [pc, #232]	; (800abcc <__mdiff+0x10c>)
 800aae2:	4602      	mov	r2, r0
 800aae4:	f240 2137 	movw	r1, #567	; 0x237
 800aae8:	4839      	ldr	r0, [pc, #228]	; (800abd0 <__mdiff+0x110>)
 800aaea:	f000 f979 	bl	800ade0 <__assert_func>
 800aaee:	2301      	movs	r3, #1
 800aaf0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aaf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf8:	bfa4      	itt	ge
 800aafa:	4643      	movge	r3, r8
 800aafc:	46a0      	movge	r8, r4
 800aafe:	4630      	mov	r0, r6
 800ab00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ab04:	bfa6      	itte	ge
 800ab06:	461c      	movge	r4, r3
 800ab08:	2500      	movge	r5, #0
 800ab0a:	2501      	movlt	r5, #1
 800ab0c:	f7ff fd8e 	bl	800a62c <_Balloc>
 800ab10:	b920      	cbnz	r0, 800ab1c <__mdiff+0x5c>
 800ab12:	4b2e      	ldr	r3, [pc, #184]	; (800abcc <__mdiff+0x10c>)
 800ab14:	4602      	mov	r2, r0
 800ab16:	f240 2145 	movw	r1, #581	; 0x245
 800ab1a:	e7e5      	b.n	800aae8 <__mdiff+0x28>
 800ab1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab20:	6926      	ldr	r6, [r4, #16]
 800ab22:	60c5      	str	r5, [r0, #12]
 800ab24:	f104 0914 	add.w	r9, r4, #20
 800ab28:	f108 0514 	add.w	r5, r8, #20
 800ab2c:	f100 0e14 	add.w	lr, r0, #20
 800ab30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ab34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab38:	f108 0210 	add.w	r2, r8, #16
 800ab3c:	46f2      	mov	sl, lr
 800ab3e:	2100      	movs	r1, #0
 800ab40:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab48:	fa11 f88b 	uxtah	r8, r1, fp
 800ab4c:	b299      	uxth	r1, r3
 800ab4e:	0c1b      	lsrs	r3, r3, #16
 800ab50:	eba8 0801 	sub.w	r8, r8, r1
 800ab54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab58:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab5c:	fa1f f888 	uxth.w	r8, r8
 800ab60:	1419      	asrs	r1, r3, #16
 800ab62:	454e      	cmp	r6, r9
 800ab64:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab68:	f84a 3b04 	str.w	r3, [sl], #4
 800ab6c:	d8e8      	bhi.n	800ab40 <__mdiff+0x80>
 800ab6e:	1b33      	subs	r3, r6, r4
 800ab70:	3b15      	subs	r3, #21
 800ab72:	f023 0303 	bic.w	r3, r3, #3
 800ab76:	3304      	adds	r3, #4
 800ab78:	3415      	adds	r4, #21
 800ab7a:	42a6      	cmp	r6, r4
 800ab7c:	bf38      	it	cc
 800ab7e:	2304      	movcc	r3, #4
 800ab80:	441d      	add	r5, r3
 800ab82:	4473      	add	r3, lr
 800ab84:	469e      	mov	lr, r3
 800ab86:	462e      	mov	r6, r5
 800ab88:	4566      	cmp	r6, ip
 800ab8a:	d30e      	bcc.n	800abaa <__mdiff+0xea>
 800ab8c:	f10c 0203 	add.w	r2, ip, #3
 800ab90:	1b52      	subs	r2, r2, r5
 800ab92:	f022 0203 	bic.w	r2, r2, #3
 800ab96:	3d03      	subs	r5, #3
 800ab98:	45ac      	cmp	ip, r5
 800ab9a:	bf38      	it	cc
 800ab9c:	2200      	movcc	r2, #0
 800ab9e:	4413      	add	r3, r2
 800aba0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800aba4:	b17a      	cbz	r2, 800abc6 <__mdiff+0x106>
 800aba6:	6107      	str	r7, [r0, #16]
 800aba8:	e7a4      	b.n	800aaf4 <__mdiff+0x34>
 800abaa:	f856 8b04 	ldr.w	r8, [r6], #4
 800abae:	fa11 f288 	uxtah	r2, r1, r8
 800abb2:	1414      	asrs	r4, r2, #16
 800abb4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800abb8:	b292      	uxth	r2, r2
 800abba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800abbe:	f84e 2b04 	str.w	r2, [lr], #4
 800abc2:	1421      	asrs	r1, r4, #16
 800abc4:	e7e0      	b.n	800ab88 <__mdiff+0xc8>
 800abc6:	3f01      	subs	r7, #1
 800abc8:	e7ea      	b.n	800aba0 <__mdiff+0xe0>
 800abca:	bf00      	nop
 800abcc:	0800d425 	.word	0x0800d425
 800abd0:	0800d48e 	.word	0x0800d48e

0800abd4 <__d2b>:
 800abd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abd8:	460f      	mov	r7, r1
 800abda:	2101      	movs	r1, #1
 800abdc:	ec59 8b10 	vmov	r8, r9, d0
 800abe0:	4616      	mov	r6, r2
 800abe2:	f7ff fd23 	bl	800a62c <_Balloc>
 800abe6:	4604      	mov	r4, r0
 800abe8:	b930      	cbnz	r0, 800abf8 <__d2b+0x24>
 800abea:	4602      	mov	r2, r0
 800abec:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <__d2b+0xac>)
 800abee:	4825      	ldr	r0, [pc, #148]	; (800ac84 <__d2b+0xb0>)
 800abf0:	f240 310f 	movw	r1, #783	; 0x30f
 800abf4:	f000 f8f4 	bl	800ade0 <__assert_func>
 800abf8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac00:	bb2d      	cbnz	r5, 800ac4e <__d2b+0x7a>
 800ac02:	9301      	str	r3, [sp, #4]
 800ac04:	f1b8 0300 	subs.w	r3, r8, #0
 800ac08:	d026      	beq.n	800ac58 <__d2b+0x84>
 800ac0a:	4668      	mov	r0, sp
 800ac0c:	9300      	str	r3, [sp, #0]
 800ac0e:	f7ff fda1 	bl	800a754 <__lo0bits>
 800ac12:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac16:	b1e8      	cbz	r0, 800ac54 <__d2b+0x80>
 800ac18:	f1c0 0320 	rsb	r3, r0, #32
 800ac1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ac20:	430b      	orrs	r3, r1
 800ac22:	40c2      	lsrs	r2, r0
 800ac24:	6163      	str	r3, [r4, #20]
 800ac26:	9201      	str	r2, [sp, #4]
 800ac28:	9b01      	ldr	r3, [sp, #4]
 800ac2a:	61a3      	str	r3, [r4, #24]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	bf14      	ite	ne
 800ac30:	2202      	movne	r2, #2
 800ac32:	2201      	moveq	r2, #1
 800ac34:	6122      	str	r2, [r4, #16]
 800ac36:	b1bd      	cbz	r5, 800ac68 <__d2b+0x94>
 800ac38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac3c:	4405      	add	r5, r0
 800ac3e:	603d      	str	r5, [r7, #0]
 800ac40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac44:	6030      	str	r0, [r6, #0]
 800ac46:	4620      	mov	r0, r4
 800ac48:	b003      	add	sp, #12
 800ac4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac52:	e7d6      	b.n	800ac02 <__d2b+0x2e>
 800ac54:	6161      	str	r1, [r4, #20]
 800ac56:	e7e7      	b.n	800ac28 <__d2b+0x54>
 800ac58:	a801      	add	r0, sp, #4
 800ac5a:	f7ff fd7b 	bl	800a754 <__lo0bits>
 800ac5e:	9b01      	ldr	r3, [sp, #4]
 800ac60:	6163      	str	r3, [r4, #20]
 800ac62:	3020      	adds	r0, #32
 800ac64:	2201      	movs	r2, #1
 800ac66:	e7e5      	b.n	800ac34 <__d2b+0x60>
 800ac68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac70:	6038      	str	r0, [r7, #0]
 800ac72:	6918      	ldr	r0, [r3, #16]
 800ac74:	f7ff fd4e 	bl	800a714 <__hi0bits>
 800ac78:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac7c:	e7e2      	b.n	800ac44 <__d2b+0x70>
 800ac7e:	bf00      	nop
 800ac80:	0800d425 	.word	0x0800d425
 800ac84:	0800d48e 	.word	0x0800d48e

0800ac88 <__ssprint_r>:
 800ac88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	6813      	ldr	r3, [r2, #0]
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	6893      	ldr	r3, [r2, #8]
 800ac92:	4680      	mov	r8, r0
 800ac94:	460c      	mov	r4, r1
 800ac96:	4617      	mov	r7, r2
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d157      	bne.n	800ad4c <__ssprint_r+0xc4>
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	2300      	movs	r3, #0
 800aca0:	607b      	str	r3, [r7, #4]
 800aca2:	b003      	add	sp, #12
 800aca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800acae:	3308      	adds	r3, #8
 800acb0:	9301      	str	r3, [sp, #4]
 800acb2:	68a6      	ldr	r6, [r4, #8]
 800acb4:	6820      	ldr	r0, [r4, #0]
 800acb6:	f1bb 0f00 	cmp.w	fp, #0
 800acba:	d0f5      	beq.n	800aca8 <__ssprint_r+0x20>
 800acbc:	45b3      	cmp	fp, r6
 800acbe:	d32d      	bcc.n	800ad1c <__ssprint_r+0x94>
 800acc0:	89a2      	ldrh	r2, [r4, #12]
 800acc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acc6:	d029      	beq.n	800ad1c <__ssprint_r+0x94>
 800acc8:	6921      	ldr	r1, [r4, #16]
 800acca:	6965      	ldr	r5, [r4, #20]
 800accc:	eba0 0901 	sub.w	r9, r0, r1
 800acd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acd8:	f109 0001 	add.w	r0, r9, #1
 800acdc:	106d      	asrs	r5, r5, #1
 800acde:	4458      	add	r0, fp
 800ace0:	4285      	cmp	r5, r0
 800ace2:	bf38      	it	cc
 800ace4:	4605      	movcc	r5, r0
 800ace6:	0553      	lsls	r3, r2, #21
 800ace8:	d534      	bpl.n	800ad54 <__ssprint_r+0xcc>
 800acea:	4629      	mov	r1, r5
 800acec:	4640      	mov	r0, r8
 800acee:	f7fd f83f 	bl	8007d70 <_malloc_r>
 800acf2:	4606      	mov	r6, r0
 800acf4:	2800      	cmp	r0, #0
 800acf6:	d038      	beq.n	800ad6a <__ssprint_r+0xe2>
 800acf8:	464a      	mov	r2, r9
 800acfa:	6921      	ldr	r1, [r4, #16]
 800acfc:	f000 f862 	bl	800adc4 <memcpy>
 800ad00:	89a2      	ldrh	r2, [r4, #12]
 800ad02:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ad06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ad0a:	81a2      	strh	r2, [r4, #12]
 800ad0c:	6126      	str	r6, [r4, #16]
 800ad0e:	6165      	str	r5, [r4, #20]
 800ad10:	444e      	add	r6, r9
 800ad12:	eba5 0509 	sub.w	r5, r5, r9
 800ad16:	6026      	str	r6, [r4, #0]
 800ad18:	60a5      	str	r5, [r4, #8]
 800ad1a:	465e      	mov	r6, fp
 800ad1c:	455e      	cmp	r6, fp
 800ad1e:	bf28      	it	cs
 800ad20:	465e      	movcs	r6, fp
 800ad22:	4632      	mov	r2, r6
 800ad24:	4651      	mov	r1, sl
 800ad26:	6820      	ldr	r0, [r4, #0]
 800ad28:	f000 f82b 	bl	800ad82 <memmove>
 800ad2c:	68a2      	ldr	r2, [r4, #8]
 800ad2e:	1b92      	subs	r2, r2, r6
 800ad30:	60a2      	str	r2, [r4, #8]
 800ad32:	6822      	ldr	r2, [r4, #0]
 800ad34:	4432      	add	r2, r6
 800ad36:	6022      	str	r2, [r4, #0]
 800ad38:	68ba      	ldr	r2, [r7, #8]
 800ad3a:	eba2 030b 	sub.w	r3, r2, fp
 800ad3e:	44da      	add	sl, fp
 800ad40:	60bb      	str	r3, [r7, #8]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d0aa      	beq.n	800ac9c <__ssprint_r+0x14>
 800ad46:	f04f 0b00 	mov.w	fp, #0
 800ad4a:	e7b2      	b.n	800acb2 <__ssprint_r+0x2a>
 800ad4c:	f04f 0a00 	mov.w	sl, #0
 800ad50:	46d3      	mov	fp, sl
 800ad52:	e7ae      	b.n	800acb2 <__ssprint_r+0x2a>
 800ad54:	462a      	mov	r2, r5
 800ad56:	4640      	mov	r0, r8
 800ad58:	f000 f8a8 	bl	800aeac <_realloc_r>
 800ad5c:	4606      	mov	r6, r0
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d1d4      	bne.n	800ad0c <__ssprint_r+0x84>
 800ad62:	6921      	ldr	r1, [r4, #16]
 800ad64:	4640      	mov	r0, r8
 800ad66:	f7fc ff43 	bl	8007bf0 <_free_r>
 800ad6a:	230c      	movs	r3, #12
 800ad6c:	f8c8 3000 	str.w	r3, [r8]
 800ad70:	89a3      	ldrh	r3, [r4, #12]
 800ad72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad76:	81a3      	strh	r3, [r4, #12]
 800ad78:	2300      	movs	r3, #0
 800ad7a:	60bb      	str	r3, [r7, #8]
 800ad7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad80:	e78d      	b.n	800ac9e <__ssprint_r+0x16>

0800ad82 <memmove>:
 800ad82:	4288      	cmp	r0, r1
 800ad84:	b510      	push	{r4, lr}
 800ad86:	eb01 0402 	add.w	r4, r1, r2
 800ad8a:	d902      	bls.n	800ad92 <memmove+0x10>
 800ad8c:	4284      	cmp	r4, r0
 800ad8e:	4623      	mov	r3, r4
 800ad90:	d807      	bhi.n	800ada2 <memmove+0x20>
 800ad92:	1e43      	subs	r3, r0, #1
 800ad94:	42a1      	cmp	r1, r4
 800ad96:	d008      	beq.n	800adaa <memmove+0x28>
 800ad98:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ada0:	e7f8      	b.n	800ad94 <memmove+0x12>
 800ada2:	4402      	add	r2, r0
 800ada4:	4601      	mov	r1, r0
 800ada6:	428a      	cmp	r2, r1
 800ada8:	d100      	bne.n	800adac <memmove+0x2a>
 800adaa:	bd10      	pop	{r4, pc}
 800adac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adb0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adb4:	e7f7      	b.n	800ada6 <memmove+0x24>
	...

0800adb8 <__locale_mb_cur_max>:
 800adb8:	4b01      	ldr	r3, [pc, #4]	; (800adc0 <__locale_mb_cur_max+0x8>)
 800adba:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800adbe:	4770      	bx	lr
 800adc0:	20000640 	.word	0x20000640

0800adc4 <memcpy>:
 800adc4:	440a      	add	r2, r1
 800adc6:	4291      	cmp	r1, r2
 800adc8:	f100 33ff 	add.w	r3, r0, #4294967295
 800adcc:	d100      	bne.n	800add0 <memcpy+0xc>
 800adce:	4770      	bx	lr
 800add0:	b510      	push	{r4, lr}
 800add2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800add6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adda:	4291      	cmp	r1, r2
 800addc:	d1f9      	bne.n	800add2 <memcpy+0xe>
 800adde:	bd10      	pop	{r4, pc}

0800ade0 <__assert_func>:
 800ade0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ade2:	4614      	mov	r4, r2
 800ade4:	461a      	mov	r2, r3
 800ade6:	4b09      	ldr	r3, [pc, #36]	; (800ae0c <__assert_func+0x2c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4605      	mov	r5, r0
 800adec:	68d8      	ldr	r0, [r3, #12]
 800adee:	b14c      	cbz	r4, 800ae04 <__assert_func+0x24>
 800adf0:	4b07      	ldr	r3, [pc, #28]	; (800ae10 <__assert_func+0x30>)
 800adf2:	9100      	str	r1, [sp, #0]
 800adf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adf8:	4906      	ldr	r1, [pc, #24]	; (800ae14 <__assert_func+0x34>)
 800adfa:	462b      	mov	r3, r5
 800adfc:	f000 fa0c 	bl	800b218 <fiprintf>
 800ae00:	f001 f92d 	bl	800c05e <abort>
 800ae04:	4b04      	ldr	r3, [pc, #16]	; (800ae18 <__assert_func+0x38>)
 800ae06:	461c      	mov	r4, r3
 800ae08:	e7f3      	b.n	800adf2 <__assert_func+0x12>
 800ae0a:	bf00      	nop
 800ae0c:	20000228 	.word	0x20000228
 800ae10:	0800d5ee 	.word	0x0800d5ee
 800ae14:	0800d5fb 	.word	0x0800d5fb
 800ae18:	0800d629 	.word	0x0800d629

0800ae1c <_calloc_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	fba1 1502 	umull	r1, r5, r1, r2
 800ae22:	b92d      	cbnz	r5, 800ae30 <_calloc_r+0x14>
 800ae24:	f7fc ffa4 	bl	8007d70 <_malloc_r>
 800ae28:	4604      	mov	r4, r0
 800ae2a:	b938      	cbnz	r0, 800ae3c <_calloc_r+0x20>
 800ae2c:	4620      	mov	r0, r4
 800ae2e:	bd38      	pop	{r3, r4, r5, pc}
 800ae30:	f7fc fe4c 	bl	8007acc <__errno>
 800ae34:	230c      	movs	r3, #12
 800ae36:	6003      	str	r3, [r0, #0]
 800ae38:	2400      	movs	r4, #0
 800ae3a:	e7f7      	b.n	800ae2c <_calloc_r+0x10>
 800ae3c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ae40:	f022 0203 	bic.w	r2, r2, #3
 800ae44:	3a04      	subs	r2, #4
 800ae46:	2a24      	cmp	r2, #36	; 0x24
 800ae48:	d819      	bhi.n	800ae7e <_calloc_r+0x62>
 800ae4a:	2a13      	cmp	r2, #19
 800ae4c:	d915      	bls.n	800ae7a <_calloc_r+0x5e>
 800ae4e:	2a1b      	cmp	r2, #27
 800ae50:	e9c0 5500 	strd	r5, r5, [r0]
 800ae54:	d806      	bhi.n	800ae64 <_calloc_r+0x48>
 800ae56:	f100 0308 	add.w	r3, r0, #8
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	e9c3 2200 	strd	r2, r2, [r3]
 800ae60:	609a      	str	r2, [r3, #8]
 800ae62:	e7e3      	b.n	800ae2c <_calloc_r+0x10>
 800ae64:	2a24      	cmp	r2, #36	; 0x24
 800ae66:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800ae6a:	bf11      	iteee	ne
 800ae6c:	f100 0310 	addne.w	r3, r0, #16
 800ae70:	6105      	streq	r5, [r0, #16]
 800ae72:	f100 0318 	addeq.w	r3, r0, #24
 800ae76:	6145      	streq	r5, [r0, #20]
 800ae78:	e7ef      	b.n	800ae5a <_calloc_r+0x3e>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	e7ed      	b.n	800ae5a <_calloc_r+0x3e>
 800ae7e:	4629      	mov	r1, r5
 800ae80:	f7fc fdd5 	bl	8007a2e <memset>
 800ae84:	e7d2      	b.n	800ae2c <_calloc_r+0x10>

0800ae86 <__ascii_mbtowc>:
 800ae86:	b082      	sub	sp, #8
 800ae88:	b901      	cbnz	r1, 800ae8c <__ascii_mbtowc+0x6>
 800ae8a:	a901      	add	r1, sp, #4
 800ae8c:	b142      	cbz	r2, 800aea0 <__ascii_mbtowc+0x1a>
 800ae8e:	b14b      	cbz	r3, 800aea4 <__ascii_mbtowc+0x1e>
 800ae90:	7813      	ldrb	r3, [r2, #0]
 800ae92:	600b      	str	r3, [r1, #0]
 800ae94:	7812      	ldrb	r2, [r2, #0]
 800ae96:	1e10      	subs	r0, r2, #0
 800ae98:	bf18      	it	ne
 800ae9a:	2001      	movne	r0, #1
 800ae9c:	b002      	add	sp, #8
 800ae9e:	4770      	bx	lr
 800aea0:	4610      	mov	r0, r2
 800aea2:	e7fb      	b.n	800ae9c <__ascii_mbtowc+0x16>
 800aea4:	f06f 0001 	mvn.w	r0, #1
 800aea8:	e7f8      	b.n	800ae9c <__ascii_mbtowc+0x16>
	...

0800aeac <_realloc_r>:
 800aeac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb0:	4682      	mov	sl, r0
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	b929      	cbnz	r1, 800aec2 <_realloc_r+0x16>
 800aeb6:	4611      	mov	r1, r2
 800aeb8:	b003      	add	sp, #12
 800aeba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebe:	f7fc bf57 	b.w	8007d70 <_malloc_r>
 800aec2:	9201      	str	r2, [sp, #4]
 800aec4:	f7fd f98e 	bl	80081e4 <__malloc_lock>
 800aec8:	9a01      	ldr	r2, [sp, #4]
 800aeca:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800aece:	f102 080b 	add.w	r8, r2, #11
 800aed2:	f1b8 0f16 	cmp.w	r8, #22
 800aed6:	d90b      	bls.n	800aef0 <_realloc_r+0x44>
 800aed8:	f038 0807 	bics.w	r8, r8, #7
 800aedc:	d50a      	bpl.n	800aef4 <_realloc_r+0x48>
 800aede:	230c      	movs	r3, #12
 800aee0:	f8ca 3000 	str.w	r3, [sl]
 800aee4:	f04f 0b00 	mov.w	fp, #0
 800aee8:	4658      	mov	r0, fp
 800aeea:	b003      	add	sp, #12
 800aeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef0:	f04f 0810 	mov.w	r8, #16
 800aef4:	4590      	cmp	r8, r2
 800aef6:	d3f2      	bcc.n	800aede <_realloc_r+0x32>
 800aef8:	f025 0603 	bic.w	r6, r5, #3
 800aefc:	45b0      	cmp	r8, r6
 800aefe:	f1a4 0908 	sub.w	r9, r4, #8
 800af02:	f340 8170 	ble.w	800b1e6 <_realloc_r+0x33a>
 800af06:	499c      	ldr	r1, [pc, #624]	; (800b178 <_realloc_r+0x2cc>)
 800af08:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800af0c:	eb09 0306 	add.w	r3, r9, r6
 800af10:	459c      	cmp	ip, r3
 800af12:	6859      	ldr	r1, [r3, #4]
 800af14:	d005      	beq.n	800af22 <_realloc_r+0x76>
 800af16:	f021 0001 	bic.w	r0, r1, #1
 800af1a:	4418      	add	r0, r3
 800af1c:	6840      	ldr	r0, [r0, #4]
 800af1e:	07c7      	lsls	r7, r0, #31
 800af20:	d447      	bmi.n	800afb2 <_realloc_r+0x106>
 800af22:	f021 0103 	bic.w	r1, r1, #3
 800af26:	459c      	cmp	ip, r3
 800af28:	eb06 0701 	add.w	r7, r6, r1
 800af2c:	d119      	bne.n	800af62 <_realloc_r+0xb6>
 800af2e:	f108 0010 	add.w	r0, r8, #16
 800af32:	42b8      	cmp	r0, r7
 800af34:	dc3f      	bgt.n	800afb6 <_realloc_r+0x10a>
 800af36:	eb09 0308 	add.w	r3, r9, r8
 800af3a:	4a8f      	ldr	r2, [pc, #572]	; (800b178 <_realloc_r+0x2cc>)
 800af3c:	eba7 0708 	sub.w	r7, r7, r8
 800af40:	f047 0701 	orr.w	r7, r7, #1
 800af44:	6093      	str	r3, [r2, #8]
 800af46:	605f      	str	r7, [r3, #4]
 800af48:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800af4c:	f003 0301 	and.w	r3, r3, #1
 800af50:	ea43 0308 	orr.w	r3, r3, r8
 800af54:	f844 3c04 	str.w	r3, [r4, #-4]
 800af58:	4650      	mov	r0, sl
 800af5a:	f7fd f949 	bl	80081f0 <__malloc_unlock>
 800af5e:	46a3      	mov	fp, r4
 800af60:	e7c2      	b.n	800aee8 <_realloc_r+0x3c>
 800af62:	45b8      	cmp	r8, r7
 800af64:	dc27      	bgt.n	800afb6 <_realloc_r+0x10a>
 800af66:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800af6a:	60da      	str	r2, [r3, #12]
 800af6c:	6093      	str	r3, [r2, #8]
 800af6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800af72:	eba7 0008 	sub.w	r0, r7, r8
 800af76:	280f      	cmp	r0, #15
 800af78:	f003 0301 	and.w	r3, r3, #1
 800af7c:	eb09 0207 	add.w	r2, r9, r7
 800af80:	f240 8133 	bls.w	800b1ea <_realloc_r+0x33e>
 800af84:	eb09 0108 	add.w	r1, r9, r8
 800af88:	ea48 0303 	orr.w	r3, r8, r3
 800af8c:	f040 0001 	orr.w	r0, r0, #1
 800af90:	f8c9 3004 	str.w	r3, [r9, #4]
 800af94:	6048      	str	r0, [r1, #4]
 800af96:	6853      	ldr	r3, [r2, #4]
 800af98:	f043 0301 	orr.w	r3, r3, #1
 800af9c:	6053      	str	r3, [r2, #4]
 800af9e:	3108      	adds	r1, #8
 800afa0:	4650      	mov	r0, sl
 800afa2:	f7fc fe25 	bl	8007bf0 <_free_r>
 800afa6:	4650      	mov	r0, sl
 800afa8:	f7fd f922 	bl	80081f0 <__malloc_unlock>
 800afac:	f109 0b08 	add.w	fp, r9, #8
 800afb0:	e79a      	b.n	800aee8 <_realloc_r+0x3c>
 800afb2:	2100      	movs	r1, #0
 800afb4:	460b      	mov	r3, r1
 800afb6:	07e8      	lsls	r0, r5, #31
 800afb8:	f100 80c6 	bmi.w	800b148 <_realloc_r+0x29c>
 800afbc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800afc0:	eba9 0505 	sub.w	r5, r9, r5
 800afc4:	6868      	ldr	r0, [r5, #4]
 800afc6:	f020 0003 	bic.w	r0, r0, #3
 800afca:	eb00 0b06 	add.w	fp, r0, r6
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f000 8086 	beq.w	800b0e0 <_realloc_r+0x234>
 800afd4:	459c      	cmp	ip, r3
 800afd6:	eb01 070b 	add.w	r7, r1, fp
 800afda:	d149      	bne.n	800b070 <_realloc_r+0x1c4>
 800afdc:	f108 0310 	add.w	r3, r8, #16
 800afe0:	42bb      	cmp	r3, r7
 800afe2:	dc7d      	bgt.n	800b0e0 <_realloc_r+0x234>
 800afe4:	46ab      	mov	fp, r5
 800afe6:	68eb      	ldr	r3, [r5, #12]
 800afe8:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800afec:	60d3      	str	r3, [r2, #12]
 800afee:	609a      	str	r2, [r3, #8]
 800aff0:	1f32      	subs	r2, r6, #4
 800aff2:	2a24      	cmp	r2, #36	; 0x24
 800aff4:	d837      	bhi.n	800b066 <_realloc_r+0x1ba>
 800aff6:	2a13      	cmp	r2, #19
 800aff8:	d933      	bls.n	800b062 <_realloc_r+0x1b6>
 800affa:	6823      	ldr	r3, [r4, #0]
 800affc:	60ab      	str	r3, [r5, #8]
 800affe:	6863      	ldr	r3, [r4, #4]
 800b000:	60eb      	str	r3, [r5, #12]
 800b002:	2a1b      	cmp	r2, #27
 800b004:	d81b      	bhi.n	800b03e <_realloc_r+0x192>
 800b006:	3408      	adds	r4, #8
 800b008:	f105 0310 	add.w	r3, r5, #16
 800b00c:	6822      	ldr	r2, [r4, #0]
 800b00e:	601a      	str	r2, [r3, #0]
 800b010:	6862      	ldr	r2, [r4, #4]
 800b012:	605a      	str	r2, [r3, #4]
 800b014:	68a2      	ldr	r2, [r4, #8]
 800b016:	609a      	str	r2, [r3, #8]
 800b018:	eb05 0308 	add.w	r3, r5, r8
 800b01c:	4a56      	ldr	r2, [pc, #344]	; (800b178 <_realloc_r+0x2cc>)
 800b01e:	eba7 0708 	sub.w	r7, r7, r8
 800b022:	f047 0701 	orr.w	r7, r7, #1
 800b026:	6093      	str	r3, [r2, #8]
 800b028:	605f      	str	r7, [r3, #4]
 800b02a:	686b      	ldr	r3, [r5, #4]
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	ea43 0308 	orr.w	r3, r3, r8
 800b034:	606b      	str	r3, [r5, #4]
 800b036:	4650      	mov	r0, sl
 800b038:	f7fd f8da 	bl	80081f0 <__malloc_unlock>
 800b03c:	e754      	b.n	800aee8 <_realloc_r+0x3c>
 800b03e:	68a3      	ldr	r3, [r4, #8]
 800b040:	612b      	str	r3, [r5, #16]
 800b042:	68e3      	ldr	r3, [r4, #12]
 800b044:	616b      	str	r3, [r5, #20]
 800b046:	2a24      	cmp	r2, #36	; 0x24
 800b048:	bf01      	itttt	eq
 800b04a:	6923      	ldreq	r3, [r4, #16]
 800b04c:	61ab      	streq	r3, [r5, #24]
 800b04e:	6962      	ldreq	r2, [r4, #20]
 800b050:	61ea      	streq	r2, [r5, #28]
 800b052:	bf19      	ittee	ne
 800b054:	3410      	addne	r4, #16
 800b056:	f105 0318 	addne.w	r3, r5, #24
 800b05a:	f105 0320 	addeq.w	r3, r5, #32
 800b05e:	3418      	addeq	r4, #24
 800b060:	e7d4      	b.n	800b00c <_realloc_r+0x160>
 800b062:	465b      	mov	r3, fp
 800b064:	e7d2      	b.n	800b00c <_realloc_r+0x160>
 800b066:	4621      	mov	r1, r4
 800b068:	4658      	mov	r0, fp
 800b06a:	f7ff fe8a 	bl	800ad82 <memmove>
 800b06e:	e7d3      	b.n	800b018 <_realloc_r+0x16c>
 800b070:	45b8      	cmp	r8, r7
 800b072:	dc35      	bgt.n	800b0e0 <_realloc_r+0x234>
 800b074:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800b078:	4628      	mov	r0, r5
 800b07a:	60da      	str	r2, [r3, #12]
 800b07c:	6093      	str	r3, [r2, #8]
 800b07e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b082:	68eb      	ldr	r3, [r5, #12]
 800b084:	60d3      	str	r3, [r2, #12]
 800b086:	609a      	str	r2, [r3, #8]
 800b088:	1f32      	subs	r2, r6, #4
 800b08a:	2a24      	cmp	r2, #36	; 0x24
 800b08c:	d824      	bhi.n	800b0d8 <_realloc_r+0x22c>
 800b08e:	2a13      	cmp	r2, #19
 800b090:	d908      	bls.n	800b0a4 <_realloc_r+0x1f8>
 800b092:	6823      	ldr	r3, [r4, #0]
 800b094:	60ab      	str	r3, [r5, #8]
 800b096:	6863      	ldr	r3, [r4, #4]
 800b098:	60eb      	str	r3, [r5, #12]
 800b09a:	2a1b      	cmp	r2, #27
 800b09c:	d80a      	bhi.n	800b0b4 <_realloc_r+0x208>
 800b09e:	3408      	adds	r4, #8
 800b0a0:	f105 0010 	add.w	r0, r5, #16
 800b0a4:	6823      	ldr	r3, [r4, #0]
 800b0a6:	6003      	str	r3, [r0, #0]
 800b0a8:	6863      	ldr	r3, [r4, #4]
 800b0aa:	6043      	str	r3, [r0, #4]
 800b0ac:	68a3      	ldr	r3, [r4, #8]
 800b0ae:	6083      	str	r3, [r0, #8]
 800b0b0:	46a9      	mov	r9, r5
 800b0b2:	e75c      	b.n	800af6e <_realloc_r+0xc2>
 800b0b4:	68a3      	ldr	r3, [r4, #8]
 800b0b6:	612b      	str	r3, [r5, #16]
 800b0b8:	68e3      	ldr	r3, [r4, #12]
 800b0ba:	616b      	str	r3, [r5, #20]
 800b0bc:	2a24      	cmp	r2, #36	; 0x24
 800b0be:	bf01      	itttt	eq
 800b0c0:	6923      	ldreq	r3, [r4, #16]
 800b0c2:	61ab      	streq	r3, [r5, #24]
 800b0c4:	6963      	ldreq	r3, [r4, #20]
 800b0c6:	61eb      	streq	r3, [r5, #28]
 800b0c8:	bf19      	ittee	ne
 800b0ca:	3410      	addne	r4, #16
 800b0cc:	f105 0018 	addne.w	r0, r5, #24
 800b0d0:	f105 0020 	addeq.w	r0, r5, #32
 800b0d4:	3418      	addeq	r4, #24
 800b0d6:	e7e5      	b.n	800b0a4 <_realloc_r+0x1f8>
 800b0d8:	4621      	mov	r1, r4
 800b0da:	f7ff fe52 	bl	800ad82 <memmove>
 800b0de:	e7e7      	b.n	800b0b0 <_realloc_r+0x204>
 800b0e0:	45d8      	cmp	r8, fp
 800b0e2:	dc31      	bgt.n	800b148 <_realloc_r+0x29c>
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	68eb      	ldr	r3, [r5, #12]
 800b0e8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b0ec:	60d3      	str	r3, [r2, #12]
 800b0ee:	609a      	str	r2, [r3, #8]
 800b0f0:	1f32      	subs	r2, r6, #4
 800b0f2:	2a24      	cmp	r2, #36	; 0x24
 800b0f4:	d824      	bhi.n	800b140 <_realloc_r+0x294>
 800b0f6:	2a13      	cmp	r2, #19
 800b0f8:	d908      	bls.n	800b10c <_realloc_r+0x260>
 800b0fa:	6823      	ldr	r3, [r4, #0]
 800b0fc:	60ab      	str	r3, [r5, #8]
 800b0fe:	6863      	ldr	r3, [r4, #4]
 800b100:	60eb      	str	r3, [r5, #12]
 800b102:	2a1b      	cmp	r2, #27
 800b104:	d80a      	bhi.n	800b11c <_realloc_r+0x270>
 800b106:	3408      	adds	r4, #8
 800b108:	f105 0010 	add.w	r0, r5, #16
 800b10c:	6823      	ldr	r3, [r4, #0]
 800b10e:	6003      	str	r3, [r0, #0]
 800b110:	6863      	ldr	r3, [r4, #4]
 800b112:	6043      	str	r3, [r0, #4]
 800b114:	68a3      	ldr	r3, [r4, #8]
 800b116:	6083      	str	r3, [r0, #8]
 800b118:	465f      	mov	r7, fp
 800b11a:	e7c9      	b.n	800b0b0 <_realloc_r+0x204>
 800b11c:	68a3      	ldr	r3, [r4, #8]
 800b11e:	612b      	str	r3, [r5, #16]
 800b120:	68e3      	ldr	r3, [r4, #12]
 800b122:	616b      	str	r3, [r5, #20]
 800b124:	2a24      	cmp	r2, #36	; 0x24
 800b126:	bf01      	itttt	eq
 800b128:	6923      	ldreq	r3, [r4, #16]
 800b12a:	61ab      	streq	r3, [r5, #24]
 800b12c:	6963      	ldreq	r3, [r4, #20]
 800b12e:	61eb      	streq	r3, [r5, #28]
 800b130:	bf19      	ittee	ne
 800b132:	3410      	addne	r4, #16
 800b134:	f105 0018 	addne.w	r0, r5, #24
 800b138:	f105 0020 	addeq.w	r0, r5, #32
 800b13c:	3418      	addeq	r4, #24
 800b13e:	e7e5      	b.n	800b10c <_realloc_r+0x260>
 800b140:	4621      	mov	r1, r4
 800b142:	f7ff fe1e 	bl	800ad82 <memmove>
 800b146:	e7e7      	b.n	800b118 <_realloc_r+0x26c>
 800b148:	4611      	mov	r1, r2
 800b14a:	4650      	mov	r0, sl
 800b14c:	f7fc fe10 	bl	8007d70 <_malloc_r>
 800b150:	4683      	mov	fp, r0
 800b152:	2800      	cmp	r0, #0
 800b154:	f43f af6f 	beq.w	800b036 <_realloc_r+0x18a>
 800b158:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b15c:	f023 0301 	bic.w	r3, r3, #1
 800b160:	444b      	add	r3, r9
 800b162:	f1a0 0208 	sub.w	r2, r0, #8
 800b166:	4293      	cmp	r3, r2
 800b168:	d108      	bne.n	800b17c <_realloc_r+0x2d0>
 800b16a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b16e:	f027 0703 	bic.w	r7, r7, #3
 800b172:	4437      	add	r7, r6
 800b174:	e6fb      	b.n	800af6e <_realloc_r+0xc2>
 800b176:	bf00      	nop
 800b178:	20000230 	.word	0x20000230
 800b17c:	1f32      	subs	r2, r6, #4
 800b17e:	2a24      	cmp	r2, #36	; 0x24
 800b180:	d82d      	bhi.n	800b1de <_realloc_r+0x332>
 800b182:	2a13      	cmp	r2, #19
 800b184:	d928      	bls.n	800b1d8 <_realloc_r+0x32c>
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	6003      	str	r3, [r0, #0]
 800b18a:	6863      	ldr	r3, [r4, #4]
 800b18c:	6043      	str	r3, [r0, #4]
 800b18e:	2a1b      	cmp	r2, #27
 800b190:	d80e      	bhi.n	800b1b0 <_realloc_r+0x304>
 800b192:	f104 0208 	add.w	r2, r4, #8
 800b196:	f100 0308 	add.w	r3, r0, #8
 800b19a:	6811      	ldr	r1, [r2, #0]
 800b19c:	6019      	str	r1, [r3, #0]
 800b19e:	6851      	ldr	r1, [r2, #4]
 800b1a0:	6059      	str	r1, [r3, #4]
 800b1a2:	6892      	ldr	r2, [r2, #8]
 800b1a4:	609a      	str	r2, [r3, #8]
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4650      	mov	r0, sl
 800b1aa:	f7fc fd21 	bl	8007bf0 <_free_r>
 800b1ae:	e742      	b.n	800b036 <_realloc_r+0x18a>
 800b1b0:	68a3      	ldr	r3, [r4, #8]
 800b1b2:	6083      	str	r3, [r0, #8]
 800b1b4:	68e3      	ldr	r3, [r4, #12]
 800b1b6:	60c3      	str	r3, [r0, #12]
 800b1b8:	2a24      	cmp	r2, #36	; 0x24
 800b1ba:	bf01      	itttt	eq
 800b1bc:	6923      	ldreq	r3, [r4, #16]
 800b1be:	6103      	streq	r3, [r0, #16]
 800b1c0:	6961      	ldreq	r1, [r4, #20]
 800b1c2:	6141      	streq	r1, [r0, #20]
 800b1c4:	bf19      	ittee	ne
 800b1c6:	f104 0210 	addne.w	r2, r4, #16
 800b1ca:	f100 0310 	addne.w	r3, r0, #16
 800b1ce:	f104 0218 	addeq.w	r2, r4, #24
 800b1d2:	f100 0318 	addeq.w	r3, r0, #24
 800b1d6:	e7e0      	b.n	800b19a <_realloc_r+0x2ee>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	4622      	mov	r2, r4
 800b1dc:	e7dd      	b.n	800b19a <_realloc_r+0x2ee>
 800b1de:	4621      	mov	r1, r4
 800b1e0:	f7ff fdcf 	bl	800ad82 <memmove>
 800b1e4:	e7df      	b.n	800b1a6 <_realloc_r+0x2fa>
 800b1e6:	4637      	mov	r7, r6
 800b1e8:	e6c1      	b.n	800af6e <_realloc_r+0xc2>
 800b1ea:	431f      	orrs	r7, r3
 800b1ec:	f8c9 7004 	str.w	r7, [r9, #4]
 800b1f0:	6853      	ldr	r3, [r2, #4]
 800b1f2:	f043 0301 	orr.w	r3, r3, #1
 800b1f6:	6053      	str	r3, [r2, #4]
 800b1f8:	e6d5      	b.n	800afa6 <_realloc_r+0xfa>
 800b1fa:	bf00      	nop

0800b1fc <__ascii_wctomb>:
 800b1fc:	b149      	cbz	r1, 800b212 <__ascii_wctomb+0x16>
 800b1fe:	2aff      	cmp	r2, #255	; 0xff
 800b200:	bf85      	ittet	hi
 800b202:	238a      	movhi	r3, #138	; 0x8a
 800b204:	6003      	strhi	r3, [r0, #0]
 800b206:	700a      	strbls	r2, [r1, #0]
 800b208:	f04f 30ff 	movhi.w	r0, #4294967295
 800b20c:	bf98      	it	ls
 800b20e:	2001      	movls	r0, #1
 800b210:	4770      	bx	lr
 800b212:	4608      	mov	r0, r1
 800b214:	4770      	bx	lr
	...

0800b218 <fiprintf>:
 800b218:	b40e      	push	{r1, r2, r3}
 800b21a:	b503      	push	{r0, r1, lr}
 800b21c:	4601      	mov	r1, r0
 800b21e:	ab03      	add	r3, sp, #12
 800b220:	4805      	ldr	r0, [pc, #20]	; (800b238 <fiprintf+0x20>)
 800b222:	f853 2b04 	ldr.w	r2, [r3], #4
 800b226:	6800      	ldr	r0, [r0, #0]
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	f000 f839 	bl	800b2a0 <_vfiprintf_r>
 800b22e:	b002      	add	sp, #8
 800b230:	f85d eb04 	ldr.w	lr, [sp], #4
 800b234:	b003      	add	sp, #12
 800b236:	4770      	bx	lr
 800b238:	20000228 	.word	0x20000228

0800b23c <__sprint_r>:
 800b23c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b240:	6893      	ldr	r3, [r2, #8]
 800b242:	4680      	mov	r8, r0
 800b244:	460f      	mov	r7, r1
 800b246:	4614      	mov	r4, r2
 800b248:	b343      	cbz	r3, 800b29c <__sprint_r+0x60>
 800b24a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b24c:	049d      	lsls	r5, r3, #18
 800b24e:	d522      	bpl.n	800b296 <__sprint_r+0x5a>
 800b250:	6815      	ldr	r5, [r2, #0]
 800b252:	3508      	adds	r5, #8
 800b254:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800b258:	f04f 0900 	mov.w	r9, #0
 800b25c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800b260:	45ca      	cmp	sl, r9
 800b262:	dc0d      	bgt.n	800b280 <__sprint_r+0x44>
 800b264:	68a3      	ldr	r3, [r4, #8]
 800b266:	f026 0603 	bic.w	r6, r6, #3
 800b26a:	1b98      	subs	r0, r3, r6
 800b26c:	60a0      	str	r0, [r4, #8]
 800b26e:	3508      	adds	r5, #8
 800b270:	2800      	cmp	r0, #0
 800b272:	d1ef      	bne.n	800b254 <__sprint_r+0x18>
 800b274:	2300      	movs	r3, #0
 800b276:	60a3      	str	r3, [r4, #8]
 800b278:	2300      	movs	r3, #0
 800b27a:	6063      	str	r3, [r4, #4]
 800b27c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b280:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800b284:	463a      	mov	r2, r7
 800b286:	4640      	mov	r0, r8
 800b288:	f000 febf 	bl	800c00a <_fputwc_r>
 800b28c:	1c43      	adds	r3, r0, #1
 800b28e:	d0f1      	beq.n	800b274 <__sprint_r+0x38>
 800b290:	f109 0901 	add.w	r9, r9, #1
 800b294:	e7e4      	b.n	800b260 <__sprint_r+0x24>
 800b296:	f000 fcd5 	bl	800bc44 <__sfvwrite_r>
 800b29a:	e7eb      	b.n	800b274 <__sprint_r+0x38>
 800b29c:	4618      	mov	r0, r3
 800b29e:	e7eb      	b.n	800b278 <__sprint_r+0x3c>

0800b2a0 <_vfiprintf_r>:
 800b2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2a4:	ed2d 8b02 	vpush	{d8}
 800b2a8:	b0bb      	sub	sp, #236	; 0xec
 800b2aa:	460f      	mov	r7, r1
 800b2ac:	9201      	str	r2, [sp, #4]
 800b2ae:	461d      	mov	r5, r3
 800b2b0:	461c      	mov	r4, r3
 800b2b2:	4681      	mov	r9, r0
 800b2b4:	b118      	cbz	r0, 800b2be <_vfiprintf_r+0x1e>
 800b2b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b2b8:	b90b      	cbnz	r3, 800b2be <_vfiprintf_r+0x1e>
 800b2ba:	f7fc fb1f 	bl	80078fc <__sinit>
 800b2be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2c0:	07d8      	lsls	r0, r3, #31
 800b2c2:	d405      	bmi.n	800b2d0 <_vfiprintf_r+0x30>
 800b2c4:	89bb      	ldrh	r3, [r7, #12]
 800b2c6:	0599      	lsls	r1, r3, #22
 800b2c8:	d402      	bmi.n	800b2d0 <_vfiprintf_r+0x30>
 800b2ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b2cc:	f7fc fc2a 	bl	8007b24 <__retarget_lock_acquire_recursive>
 800b2d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b2d4:	049a      	lsls	r2, r3, #18
 800b2d6:	d406      	bmi.n	800b2e6 <_vfiprintf_r+0x46>
 800b2d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b2dc:	81bb      	strh	r3, [r7, #12]
 800b2de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2e4:	667b      	str	r3, [r7, #100]	; 0x64
 800b2e6:	89bb      	ldrh	r3, [r7, #12]
 800b2e8:	071e      	lsls	r6, r3, #28
 800b2ea:	d501      	bpl.n	800b2f0 <_vfiprintf_r+0x50>
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	b9bb      	cbnz	r3, 800b320 <_vfiprintf_r+0x80>
 800b2f0:	4639      	mov	r1, r7
 800b2f2:	4648      	mov	r0, r9
 800b2f4:	f000 fdf0 	bl	800bed8 <__swsetup_r>
 800b2f8:	b190      	cbz	r0, 800b320 <_vfiprintf_r+0x80>
 800b2fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2fc:	07d8      	lsls	r0, r3, #31
 800b2fe:	d508      	bpl.n	800b312 <_vfiprintf_r+0x72>
 800b300:	f04f 33ff 	mov.w	r3, #4294967295
 800b304:	9302      	str	r3, [sp, #8]
 800b306:	9802      	ldr	r0, [sp, #8]
 800b308:	b03b      	add	sp, #236	; 0xec
 800b30a:	ecbd 8b02 	vpop	{d8}
 800b30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b312:	89bb      	ldrh	r3, [r7, #12]
 800b314:	0599      	lsls	r1, r3, #22
 800b316:	d4f3      	bmi.n	800b300 <_vfiprintf_r+0x60>
 800b318:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b31a:	f7fc fc04 	bl	8007b26 <__retarget_lock_release_recursive>
 800b31e:	e7ef      	b.n	800b300 <_vfiprintf_r+0x60>
 800b320:	89bb      	ldrh	r3, [r7, #12]
 800b322:	f003 021a 	and.w	r2, r3, #26
 800b326:	2a0a      	cmp	r2, #10
 800b328:	d116      	bne.n	800b358 <_vfiprintf_r+0xb8>
 800b32a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b32e:	2a00      	cmp	r2, #0
 800b330:	db12      	blt.n	800b358 <_vfiprintf_r+0xb8>
 800b332:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b334:	07d2      	lsls	r2, r2, #31
 800b336:	d404      	bmi.n	800b342 <_vfiprintf_r+0xa2>
 800b338:	059e      	lsls	r6, r3, #22
 800b33a:	d402      	bmi.n	800b342 <_vfiprintf_r+0xa2>
 800b33c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b33e:	f7fc fbf2 	bl	8007b26 <__retarget_lock_release_recursive>
 800b342:	9a01      	ldr	r2, [sp, #4]
 800b344:	462b      	mov	r3, r5
 800b346:	4639      	mov	r1, r7
 800b348:	4648      	mov	r0, r9
 800b34a:	b03b      	add	sp, #236	; 0xec
 800b34c:	ecbd 8b02 	vpop	{d8}
 800b350:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	f000 bc36 	b.w	800bbc4 <__sbprintf>
 800b358:	2300      	movs	r3, #0
 800b35a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800b35e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800b362:	ae11      	add	r6, sp, #68	; 0x44
 800b364:	ee08 3a10 	vmov	s16, r3
 800b368:	960e      	str	r6, [sp, #56]	; 0x38
 800b36a:	9307      	str	r3, [sp, #28]
 800b36c:	9302      	str	r3, [sp, #8]
 800b36e:	9b01      	ldr	r3, [sp, #4]
 800b370:	461d      	mov	r5, r3
 800b372:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b376:	b10a      	cbz	r2, 800b37c <_vfiprintf_r+0xdc>
 800b378:	2a25      	cmp	r2, #37	; 0x25
 800b37a:	d1f9      	bne.n	800b370 <_vfiprintf_r+0xd0>
 800b37c:	9b01      	ldr	r3, [sp, #4]
 800b37e:	ebb5 0803 	subs.w	r8, r5, r3
 800b382:	d00d      	beq.n	800b3a0 <_vfiprintf_r+0x100>
 800b384:	e9c6 3800 	strd	r3, r8, [r6]
 800b388:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b38a:	4443      	add	r3, r8
 800b38c:	9310      	str	r3, [sp, #64]	; 0x40
 800b38e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b390:	3301      	adds	r3, #1
 800b392:	2b07      	cmp	r3, #7
 800b394:	930f      	str	r3, [sp, #60]	; 0x3c
 800b396:	dc76      	bgt.n	800b486 <_vfiprintf_r+0x1e6>
 800b398:	3608      	adds	r6, #8
 800b39a:	9b02      	ldr	r3, [sp, #8]
 800b39c:	4443      	add	r3, r8
 800b39e:	9302      	str	r3, [sp, #8]
 800b3a0:	782b      	ldrb	r3, [r5, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	f000 83d0 	beq.w	800bb48 <_vfiprintf_r+0x8a8>
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ae:	3501      	adds	r5, #1
 800b3b0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800b3b4:	9200      	str	r2, [sp, #0]
 800b3b6:	9303      	str	r3, [sp, #12]
 800b3b8:	469a      	mov	sl, r3
 800b3ba:	462a      	mov	r2, r5
 800b3bc:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b3c0:	9201      	str	r2, [sp, #4]
 800b3c2:	f1a3 0220 	sub.w	r2, r3, #32
 800b3c6:	2a5a      	cmp	r2, #90	; 0x5a
 800b3c8:	f200 831c 	bhi.w	800ba04 <_vfiprintf_r+0x764>
 800b3cc:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b3d0:	031a007e 	.word	0x031a007e
 800b3d4:	0086031a 	.word	0x0086031a
 800b3d8:	031a031a 	.word	0x031a031a
 800b3dc:	0065031a 	.word	0x0065031a
 800b3e0:	031a031a 	.word	0x031a031a
 800b3e4:	00930089 	.word	0x00930089
 800b3e8:	0090031a 	.word	0x0090031a
 800b3ec:	031a0095 	.word	0x031a0095
 800b3f0:	00b300b0 	.word	0x00b300b0
 800b3f4:	00b300b3 	.word	0x00b300b3
 800b3f8:	00b300b3 	.word	0x00b300b3
 800b3fc:	00b300b3 	.word	0x00b300b3
 800b400:	00b300b3 	.word	0x00b300b3
 800b404:	031a031a 	.word	0x031a031a
 800b408:	031a031a 	.word	0x031a031a
 800b40c:	031a031a 	.word	0x031a031a
 800b410:	031a031a 	.word	0x031a031a
 800b414:	00dd031a 	.word	0x00dd031a
 800b418:	031a00eb 	.word	0x031a00eb
 800b41c:	031a031a 	.word	0x031a031a
 800b420:	031a031a 	.word	0x031a031a
 800b424:	031a031a 	.word	0x031a031a
 800b428:	031a031a 	.word	0x031a031a
 800b42c:	013b031a 	.word	0x013b031a
 800b430:	031a031a 	.word	0x031a031a
 800b434:	0180031a 	.word	0x0180031a
 800b438:	025e031a 	.word	0x025e031a
 800b43c:	031a031a 	.word	0x031a031a
 800b440:	031a027e 	.word	0x031a027e
 800b444:	031a031a 	.word	0x031a031a
 800b448:	031a031a 	.word	0x031a031a
 800b44c:	031a031a 	.word	0x031a031a
 800b450:	031a031a 	.word	0x031a031a
 800b454:	00dd031a 	.word	0x00dd031a
 800b458:	031a00ed 	.word	0x031a00ed
 800b45c:	031a031a 	.word	0x031a031a
 800b460:	00ed00c3 	.word	0x00ed00c3
 800b464:	031a00d7 	.word	0x031a00d7
 800b468:	031a00d0 	.word	0x031a00d0
 800b46c:	013d0119 	.word	0x013d0119
 800b470:	00d70172 	.word	0x00d70172
 800b474:	0180031a 	.word	0x0180031a
 800b478:	0260007c 	.word	0x0260007c
 800b47c:	031a031a 	.word	0x031a031a
 800b480:	031a029a 	.word	0x031a029a
 800b484:	007c      	.short	0x007c
 800b486:	aa0e      	add	r2, sp, #56	; 0x38
 800b488:	4639      	mov	r1, r7
 800b48a:	4648      	mov	r0, r9
 800b48c:	f7ff fed6 	bl	800b23c <__sprint_r>
 800b490:	2800      	cmp	r0, #0
 800b492:	f040 8338 	bne.w	800bb06 <_vfiprintf_r+0x866>
 800b496:	ae11      	add	r6, sp, #68	; 0x44
 800b498:	e77f      	b.n	800b39a <_vfiprintf_r+0xfa>
 800b49a:	4648      	mov	r0, r9
 800b49c:	f7fe f9bc 	bl	8009818 <_localeconv_r>
 800b4a0:	6843      	ldr	r3, [r0, #4]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	ee08 3a10 	vmov	s16, r3
 800b4a8:	f7f4 fe9a 	bl	80001e0 <strlen>
 800b4ac:	9007      	str	r0, [sp, #28]
 800b4ae:	4648      	mov	r0, r9
 800b4b0:	f7fe f9b2 	bl	8009818 <_localeconv_r>
 800b4b4:	6883      	ldr	r3, [r0, #8]
 800b4b6:	9306      	str	r3, [sp, #24]
 800b4b8:	9b07      	ldr	r3, [sp, #28]
 800b4ba:	b12b      	cbz	r3, 800b4c8 <_vfiprintf_r+0x228>
 800b4bc:	9b06      	ldr	r3, [sp, #24]
 800b4be:	b11b      	cbz	r3, 800b4c8 <_vfiprintf_r+0x228>
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	b10b      	cbz	r3, 800b4c8 <_vfiprintf_r+0x228>
 800b4c4:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800b4c8:	9d01      	ldr	r5, [sp, #4]
 800b4ca:	e776      	b.n	800b3ba <_vfiprintf_r+0x11a>
 800b4cc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1f9      	bne.n	800b4c8 <_vfiprintf_r+0x228>
 800b4d4:	2320      	movs	r3, #32
 800b4d6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800b4da:	e7f5      	b.n	800b4c8 <_vfiprintf_r+0x228>
 800b4dc:	f04a 0a01 	orr.w	sl, sl, #1
 800b4e0:	e7f2      	b.n	800b4c8 <_vfiprintf_r+0x228>
 800b4e2:	f854 3b04 	ldr.w	r3, [r4], #4
 800b4e6:	9303      	str	r3, [sp, #12]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	daed      	bge.n	800b4c8 <_vfiprintf_r+0x228>
 800b4ec:	425b      	negs	r3, r3
 800b4ee:	9303      	str	r3, [sp, #12]
 800b4f0:	f04a 0a04 	orr.w	sl, sl, #4
 800b4f4:	e7e8      	b.n	800b4c8 <_vfiprintf_r+0x228>
 800b4f6:	232b      	movs	r3, #43	; 0x2b
 800b4f8:	e7ed      	b.n	800b4d6 <_vfiprintf_r+0x236>
 800b4fa:	9a01      	ldr	r2, [sp, #4]
 800b4fc:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b500:	2b2a      	cmp	r3, #42	; 0x2a
 800b502:	d112      	bne.n	800b52a <_vfiprintf_r+0x28a>
 800b504:	f854 3b04 	ldr.w	r3, [r4], #4
 800b508:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b50c:	e9cd 3200 	strd	r3, r2, [sp]
 800b510:	e7da      	b.n	800b4c8 <_vfiprintf_r+0x228>
 800b512:	9b00      	ldr	r3, [sp, #0]
 800b514:	200a      	movs	r0, #10
 800b516:	fb00 1303 	mla	r3, r0, r3, r1
 800b51a:	9300      	str	r3, [sp, #0]
 800b51c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b520:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b524:	2909      	cmp	r1, #9
 800b526:	d9f4      	bls.n	800b512 <_vfiprintf_r+0x272>
 800b528:	e74a      	b.n	800b3c0 <_vfiprintf_r+0x120>
 800b52a:	2100      	movs	r1, #0
 800b52c:	9100      	str	r1, [sp, #0]
 800b52e:	e7f7      	b.n	800b520 <_vfiprintf_r+0x280>
 800b530:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800b534:	e7c8      	b.n	800b4c8 <_vfiprintf_r+0x228>
 800b536:	2100      	movs	r1, #0
 800b538:	9a01      	ldr	r2, [sp, #4]
 800b53a:	9103      	str	r1, [sp, #12]
 800b53c:	9903      	ldr	r1, [sp, #12]
 800b53e:	3b30      	subs	r3, #48	; 0x30
 800b540:	200a      	movs	r0, #10
 800b542:	fb00 3301 	mla	r3, r0, r1, r3
 800b546:	9303      	str	r3, [sp, #12]
 800b548:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b54c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b550:	2909      	cmp	r1, #9
 800b552:	d9f3      	bls.n	800b53c <_vfiprintf_r+0x29c>
 800b554:	e734      	b.n	800b3c0 <_vfiprintf_r+0x120>
 800b556:	9b01      	ldr	r3, [sp, #4]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	2b68      	cmp	r3, #104	; 0x68
 800b55c:	bf01      	itttt	eq
 800b55e:	9b01      	ldreq	r3, [sp, #4]
 800b560:	3301      	addeq	r3, #1
 800b562:	9301      	streq	r3, [sp, #4]
 800b564:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800b568:	bf18      	it	ne
 800b56a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800b56e:	e7ab      	b.n	800b4c8 <_vfiprintf_r+0x228>
 800b570:	9b01      	ldr	r3, [sp, #4]
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	2b6c      	cmp	r3, #108	; 0x6c
 800b576:	d105      	bne.n	800b584 <_vfiprintf_r+0x2e4>
 800b578:	9b01      	ldr	r3, [sp, #4]
 800b57a:	3301      	adds	r3, #1
 800b57c:	9301      	str	r3, [sp, #4]
 800b57e:	f04a 0a20 	orr.w	sl, sl, #32
 800b582:	e7a1      	b.n	800b4c8 <_vfiprintf_r+0x228>
 800b584:	f04a 0a10 	orr.w	sl, sl, #16
 800b588:	e79e      	b.n	800b4c8 <_vfiprintf_r+0x228>
 800b58a:	46a0      	mov	r8, r4
 800b58c:	f858 3b04 	ldr.w	r3, [r8], #4
 800b590:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800b594:	2300      	movs	r3, #0
 800b596:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800b59a:	2201      	movs	r2, #1
 800b59c:	9200      	str	r2, [sp, #0]
 800b59e:	461d      	mov	r5, r3
 800b5a0:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 800b5a4:	e0a9      	b.n	800b6fa <_vfiprintf_r+0x45a>
 800b5a6:	f04a 0a10 	orr.w	sl, sl, #16
 800b5aa:	f01a 0f20 	tst.w	sl, #32
 800b5ae:	d011      	beq.n	800b5d4 <_vfiprintf_r+0x334>
 800b5b0:	3407      	adds	r4, #7
 800b5b2:	f024 0307 	bic.w	r3, r4, #7
 800b5b6:	4698      	mov	r8, r3
 800b5b8:	685d      	ldr	r5, [r3, #4]
 800b5ba:	f858 4b08 	ldr.w	r4, [r8], #8
 800b5be:	2d00      	cmp	r5, #0
 800b5c0:	da06      	bge.n	800b5d0 <_vfiprintf_r+0x330>
 800b5c2:	4264      	negs	r4, r4
 800b5c4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800b5c8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800b5cc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	e04a      	b.n	800b66a <_vfiprintf_r+0x3ca>
 800b5d4:	46a0      	mov	r8, r4
 800b5d6:	f01a 0f10 	tst.w	sl, #16
 800b5da:	f858 5b04 	ldr.w	r5, [r8], #4
 800b5de:	d002      	beq.n	800b5e6 <_vfiprintf_r+0x346>
 800b5e0:	462c      	mov	r4, r5
 800b5e2:	17ed      	asrs	r5, r5, #31
 800b5e4:	e7eb      	b.n	800b5be <_vfiprintf_r+0x31e>
 800b5e6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800b5ea:	d003      	beq.n	800b5f4 <_vfiprintf_r+0x354>
 800b5ec:	b22c      	sxth	r4, r5
 800b5ee:	f345 35c0 	sbfx	r5, r5, #15, #1
 800b5f2:	e7e4      	b.n	800b5be <_vfiprintf_r+0x31e>
 800b5f4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800b5f8:	d0f2      	beq.n	800b5e0 <_vfiprintf_r+0x340>
 800b5fa:	b26c      	sxtb	r4, r5
 800b5fc:	f345 15c0 	sbfx	r5, r5, #7, #1
 800b600:	e7dd      	b.n	800b5be <_vfiprintf_r+0x31e>
 800b602:	f01a 0f20 	tst.w	sl, #32
 800b606:	f104 0804 	add.w	r8, r4, #4
 800b60a:	d007      	beq.n	800b61c <_vfiprintf_r+0x37c>
 800b60c:	9a02      	ldr	r2, [sp, #8]
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	9902      	ldr	r1, [sp, #8]
 800b612:	17d2      	asrs	r2, r2, #31
 800b614:	e9c3 1200 	strd	r1, r2, [r3]
 800b618:	4644      	mov	r4, r8
 800b61a:	e6a8      	b.n	800b36e <_vfiprintf_r+0xce>
 800b61c:	f01a 0f10 	tst.w	sl, #16
 800b620:	d003      	beq.n	800b62a <_vfiprintf_r+0x38a>
 800b622:	6823      	ldr	r3, [r4, #0]
 800b624:	9a02      	ldr	r2, [sp, #8]
 800b626:	601a      	str	r2, [r3, #0]
 800b628:	e7f6      	b.n	800b618 <_vfiprintf_r+0x378>
 800b62a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800b62e:	d003      	beq.n	800b638 <_vfiprintf_r+0x398>
 800b630:	6823      	ldr	r3, [r4, #0]
 800b632:	9a02      	ldr	r2, [sp, #8]
 800b634:	801a      	strh	r2, [r3, #0]
 800b636:	e7ef      	b.n	800b618 <_vfiprintf_r+0x378>
 800b638:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800b63c:	d0f1      	beq.n	800b622 <_vfiprintf_r+0x382>
 800b63e:	6823      	ldr	r3, [r4, #0]
 800b640:	9a02      	ldr	r2, [sp, #8]
 800b642:	701a      	strb	r2, [r3, #0]
 800b644:	e7e8      	b.n	800b618 <_vfiprintf_r+0x378>
 800b646:	f04a 0a10 	orr.w	sl, sl, #16
 800b64a:	f01a 0320 	ands.w	r3, sl, #32
 800b64e:	d01f      	beq.n	800b690 <_vfiprintf_r+0x3f0>
 800b650:	3407      	adds	r4, #7
 800b652:	f024 0307 	bic.w	r3, r4, #7
 800b656:	4698      	mov	r8, r3
 800b658:	685d      	ldr	r5, [r3, #4]
 800b65a:	f858 4b08 	ldr.w	r4, [r8], #8
 800b65e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800b662:	2300      	movs	r3, #0
 800b664:	2200      	movs	r2, #0
 800b666:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800b66a:	9a00      	ldr	r2, [sp, #0]
 800b66c:	3201      	adds	r2, #1
 800b66e:	f000 8278 	beq.w	800bb62 <_vfiprintf_r+0x8c2>
 800b672:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800b676:	9204      	str	r2, [sp, #16]
 800b678:	ea54 0205 	orrs.w	r2, r4, r5
 800b67c:	f040 8277 	bne.w	800bb6e <_vfiprintf_r+0x8ce>
 800b680:	9a00      	ldr	r2, [sp, #0]
 800b682:	2a00      	cmp	r2, #0
 800b684:	f000 81b3 	beq.w	800b9ee <_vfiprintf_r+0x74e>
 800b688:	2b01      	cmp	r3, #1
 800b68a:	f040 8273 	bne.w	800bb74 <_vfiprintf_r+0x8d4>
 800b68e:	e151      	b.n	800b934 <_vfiprintf_r+0x694>
 800b690:	46a0      	mov	r8, r4
 800b692:	f01a 0510 	ands.w	r5, sl, #16
 800b696:	f858 4b04 	ldr.w	r4, [r8], #4
 800b69a:	d001      	beq.n	800b6a0 <_vfiprintf_r+0x400>
 800b69c:	461d      	mov	r5, r3
 800b69e:	e7de      	b.n	800b65e <_vfiprintf_r+0x3be>
 800b6a0:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800b6a4:	d001      	beq.n	800b6aa <_vfiprintf_r+0x40a>
 800b6a6:	b2a4      	uxth	r4, r4
 800b6a8:	e7d9      	b.n	800b65e <_vfiprintf_r+0x3be>
 800b6aa:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800b6ae:	d0d6      	beq.n	800b65e <_vfiprintf_r+0x3be>
 800b6b0:	b2e4      	uxtb	r4, r4
 800b6b2:	e7f3      	b.n	800b69c <_vfiprintf_r+0x3fc>
 800b6b4:	46a0      	mov	r8, r4
 800b6b6:	f647 0330 	movw	r3, #30768	; 0x7830
 800b6ba:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800b6be:	f858 4b04 	ldr.w	r4, [r8], #4
 800b6c2:	4b9f      	ldr	r3, [pc, #636]	; (800b940 <_vfiprintf_r+0x6a0>)
 800b6c4:	9305      	str	r3, [sp, #20]
 800b6c6:	2500      	movs	r5, #0
 800b6c8:	f04a 0a02 	orr.w	sl, sl, #2
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	e7c9      	b.n	800b664 <_vfiprintf_r+0x3c4>
 800b6d0:	9b00      	ldr	r3, [sp, #0]
 800b6d2:	46a0      	mov	r8, r4
 800b6d4:	2500      	movs	r5, #0
 800b6d6:	1c5c      	adds	r4, r3, #1
 800b6d8:	f858 bb04 	ldr.w	fp, [r8], #4
 800b6dc:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800b6e0:	f000 80cf 	beq.w	800b882 <_vfiprintf_r+0x5e2>
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	4658      	mov	r0, fp
 800b6ea:	f7f4 fd81 	bl	80001f0 <memchr>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	f000 8192 	beq.w	800ba18 <_vfiprintf_r+0x778>
 800b6f4:	eba0 030b 	sub.w	r3, r0, fp
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	9b00      	ldr	r3, [sp, #0]
 800b6fc:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800b700:	42ab      	cmp	r3, r5
 800b702:	bfb8      	it	lt
 800b704:	462b      	movlt	r3, r5
 800b706:	9304      	str	r3, [sp, #16]
 800b708:	b10a      	cbz	r2, 800b70e <_vfiprintf_r+0x46e>
 800b70a:	3301      	adds	r3, #1
 800b70c:	9304      	str	r3, [sp, #16]
 800b70e:	f01a 0302 	ands.w	r3, sl, #2
 800b712:	9308      	str	r3, [sp, #32]
 800b714:	bf1e      	ittt	ne
 800b716:	9b04      	ldrne	r3, [sp, #16]
 800b718:	3302      	addne	r3, #2
 800b71a:	9304      	strne	r3, [sp, #16]
 800b71c:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800b720:	9309      	str	r3, [sp, #36]	; 0x24
 800b722:	d11f      	bne.n	800b764 <_vfiprintf_r+0x4c4>
 800b724:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b728:	1a9c      	subs	r4, r3, r2
 800b72a:	2c00      	cmp	r4, #0
 800b72c:	dd1a      	ble.n	800b764 <_vfiprintf_r+0x4c4>
 800b72e:	4b85      	ldr	r3, [pc, #532]	; (800b944 <_vfiprintf_r+0x6a4>)
 800b730:	6033      	str	r3, [r6, #0]
 800b732:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800b736:	2c10      	cmp	r4, #16
 800b738:	f102 0201 	add.w	r2, r2, #1
 800b73c:	f106 0008 	add.w	r0, r6, #8
 800b740:	f300 816c 	bgt.w	800ba1c <_vfiprintf_r+0x77c>
 800b744:	6074      	str	r4, [r6, #4]
 800b746:	2a07      	cmp	r2, #7
 800b748:	4464      	add	r4, ip
 800b74a:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800b74e:	f340 8178 	ble.w	800ba42 <_vfiprintf_r+0x7a2>
 800b752:	aa0e      	add	r2, sp, #56	; 0x38
 800b754:	4639      	mov	r1, r7
 800b756:	4648      	mov	r0, r9
 800b758:	f7ff fd70 	bl	800b23c <__sprint_r>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	f040 81d2 	bne.w	800bb06 <_vfiprintf_r+0x866>
 800b762:	ae11      	add	r6, sp, #68	; 0x44
 800b764:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800b768:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800b76c:	b160      	cbz	r0, 800b788 <_vfiprintf_r+0x4e8>
 800b76e:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 800b772:	3201      	adds	r2, #1
 800b774:	6030      	str	r0, [r6, #0]
 800b776:	2001      	movs	r0, #1
 800b778:	4401      	add	r1, r0
 800b77a:	2a07      	cmp	r2, #7
 800b77c:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800b780:	6070      	str	r0, [r6, #4]
 800b782:	f300 8160 	bgt.w	800ba46 <_vfiprintf_r+0x7a6>
 800b786:	3608      	adds	r6, #8
 800b788:	9b08      	ldr	r3, [sp, #32]
 800b78a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800b78e:	b15b      	cbz	r3, 800b7a8 <_vfiprintf_r+0x508>
 800b790:	a80d      	add	r0, sp, #52	; 0x34
 800b792:	3201      	adds	r2, #1
 800b794:	6030      	str	r0, [r6, #0]
 800b796:	2002      	movs	r0, #2
 800b798:	4401      	add	r1, r0
 800b79a:	2a07      	cmp	r2, #7
 800b79c:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800b7a0:	6070      	str	r0, [r6, #4]
 800b7a2:	f300 8159 	bgt.w	800ba58 <_vfiprintf_r+0x7b8>
 800b7a6:	3608      	adds	r6, #8
 800b7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7aa:	2b80      	cmp	r3, #128	; 0x80
 800b7ac:	d11f      	bne.n	800b7ee <_vfiprintf_r+0x54e>
 800b7ae:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b7b2:	1a9c      	subs	r4, r3, r2
 800b7b4:	2c00      	cmp	r4, #0
 800b7b6:	dd1a      	ble.n	800b7ee <_vfiprintf_r+0x54e>
 800b7b8:	4b63      	ldr	r3, [pc, #396]	; (800b948 <_vfiprintf_r+0x6a8>)
 800b7ba:	6033      	str	r3, [r6, #0]
 800b7bc:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800b7c0:	2c10      	cmp	r4, #16
 800b7c2:	f102 0201 	add.w	r2, r2, #1
 800b7c6:	f106 0008 	add.w	r0, r6, #8
 800b7ca:	f300 814e 	bgt.w	800ba6a <_vfiprintf_r+0x7ca>
 800b7ce:	6074      	str	r4, [r6, #4]
 800b7d0:	2a07      	cmp	r2, #7
 800b7d2:	4464      	add	r4, ip
 800b7d4:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800b7d8:	f340 815a 	ble.w	800ba90 <_vfiprintf_r+0x7f0>
 800b7dc:	aa0e      	add	r2, sp, #56	; 0x38
 800b7de:	4639      	mov	r1, r7
 800b7e0:	4648      	mov	r0, r9
 800b7e2:	f7ff fd2b 	bl	800b23c <__sprint_r>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	f040 818d 	bne.w	800bb06 <_vfiprintf_r+0x866>
 800b7ec:	ae11      	add	r6, sp, #68	; 0x44
 800b7ee:	9b00      	ldr	r3, [sp, #0]
 800b7f0:	1aec      	subs	r4, r5, r3
 800b7f2:	2c00      	cmp	r4, #0
 800b7f4:	dd1b      	ble.n	800b82e <_vfiprintf_r+0x58e>
 800b7f6:	4d54      	ldr	r5, [pc, #336]	; (800b948 <_vfiprintf_r+0x6a8>)
 800b7f8:	2310      	movs	r3, #16
 800b7fa:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800b7fe:	2c10      	cmp	r4, #16
 800b800:	f102 0201 	add.w	r2, r2, #1
 800b804:	f106 0008 	add.w	r0, r6, #8
 800b808:	6035      	str	r5, [r6, #0]
 800b80a:	f300 8143 	bgt.w	800ba94 <_vfiprintf_r+0x7f4>
 800b80e:	6074      	str	r4, [r6, #4]
 800b810:	2a07      	cmp	r2, #7
 800b812:	440c      	add	r4, r1
 800b814:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800b818:	f340 814d 	ble.w	800bab6 <_vfiprintf_r+0x816>
 800b81c:	aa0e      	add	r2, sp, #56	; 0x38
 800b81e:	4639      	mov	r1, r7
 800b820:	4648      	mov	r0, r9
 800b822:	f7ff fd0b 	bl	800b23c <__sprint_r>
 800b826:	2800      	cmp	r0, #0
 800b828:	f040 816d 	bne.w	800bb06 <_vfiprintf_r+0x866>
 800b82c:	ae11      	add	r6, sp, #68	; 0x44
 800b82e:	9b00      	ldr	r3, [sp, #0]
 800b830:	9a00      	ldr	r2, [sp, #0]
 800b832:	6073      	str	r3, [r6, #4]
 800b834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b836:	f8c6 b000 	str.w	fp, [r6]
 800b83a:	4413      	add	r3, r2
 800b83c:	9310      	str	r3, [sp, #64]	; 0x40
 800b83e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b840:	3301      	adds	r3, #1
 800b842:	2b07      	cmp	r3, #7
 800b844:	930f      	str	r3, [sp, #60]	; 0x3c
 800b846:	f300 8138 	bgt.w	800baba <_vfiprintf_r+0x81a>
 800b84a:	f106 0308 	add.w	r3, r6, #8
 800b84e:	f01a 0f04 	tst.w	sl, #4
 800b852:	f040 813a 	bne.w	800baca <_vfiprintf_r+0x82a>
 800b856:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b85a:	9904      	ldr	r1, [sp, #16]
 800b85c:	428a      	cmp	r2, r1
 800b85e:	bfac      	ite	ge
 800b860:	189b      	addge	r3, r3, r2
 800b862:	185b      	addlt	r3, r3, r1
 800b864:	9302      	str	r3, [sp, #8]
 800b866:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b868:	b13b      	cbz	r3, 800b87a <_vfiprintf_r+0x5da>
 800b86a:	aa0e      	add	r2, sp, #56	; 0x38
 800b86c:	4639      	mov	r1, r7
 800b86e:	4648      	mov	r0, r9
 800b870:	f7ff fce4 	bl	800b23c <__sprint_r>
 800b874:	2800      	cmp	r0, #0
 800b876:	f040 8146 	bne.w	800bb06 <_vfiprintf_r+0x866>
 800b87a:	2300      	movs	r3, #0
 800b87c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b87e:	ae11      	add	r6, sp, #68	; 0x44
 800b880:	e6ca      	b.n	800b618 <_vfiprintf_r+0x378>
 800b882:	4658      	mov	r0, fp
 800b884:	f7f4 fcac 	bl	80001e0 <strlen>
 800b888:	9000      	str	r0, [sp, #0]
 800b88a:	e736      	b.n	800b6fa <_vfiprintf_r+0x45a>
 800b88c:	f04a 0a10 	orr.w	sl, sl, #16
 800b890:	f01a 0320 	ands.w	r3, sl, #32
 800b894:	d008      	beq.n	800b8a8 <_vfiprintf_r+0x608>
 800b896:	3407      	adds	r4, #7
 800b898:	f024 0307 	bic.w	r3, r4, #7
 800b89c:	4698      	mov	r8, r3
 800b89e:	685d      	ldr	r5, [r3, #4]
 800b8a0:	f858 4b08 	ldr.w	r4, [r8], #8
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	e6dd      	b.n	800b664 <_vfiprintf_r+0x3c4>
 800b8a8:	46a0      	mov	r8, r4
 800b8aa:	f01a 0510 	ands.w	r5, sl, #16
 800b8ae:	f858 4b04 	ldr.w	r4, [r8], #4
 800b8b2:	d001      	beq.n	800b8b8 <_vfiprintf_r+0x618>
 800b8b4:	461d      	mov	r5, r3
 800b8b6:	e7f5      	b.n	800b8a4 <_vfiprintf_r+0x604>
 800b8b8:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800b8bc:	d001      	beq.n	800b8c2 <_vfiprintf_r+0x622>
 800b8be:	b2a4      	uxth	r4, r4
 800b8c0:	e7f0      	b.n	800b8a4 <_vfiprintf_r+0x604>
 800b8c2:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800b8c6:	d0ed      	beq.n	800b8a4 <_vfiprintf_r+0x604>
 800b8c8:	b2e4      	uxtb	r4, r4
 800b8ca:	e7f3      	b.n	800b8b4 <_vfiprintf_r+0x614>
 800b8cc:	4a1f      	ldr	r2, [pc, #124]	; (800b94c <_vfiprintf_r+0x6ac>)
 800b8ce:	9205      	str	r2, [sp, #20]
 800b8d0:	f01a 0220 	ands.w	r2, sl, #32
 800b8d4:	d018      	beq.n	800b908 <_vfiprintf_r+0x668>
 800b8d6:	3407      	adds	r4, #7
 800b8d8:	f024 0207 	bic.w	r2, r4, #7
 800b8dc:	4690      	mov	r8, r2
 800b8de:	6855      	ldr	r5, [r2, #4]
 800b8e0:	f858 4b08 	ldr.w	r4, [r8], #8
 800b8e4:	f01a 0f01 	tst.w	sl, #1
 800b8e8:	d009      	beq.n	800b8fe <_vfiprintf_r+0x65e>
 800b8ea:	ea54 0205 	orrs.w	r2, r4, r5
 800b8ee:	bf1f      	itttt	ne
 800b8f0:	2230      	movne	r2, #48	; 0x30
 800b8f2:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800b8f6:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800b8fa:	f04a 0a02 	orrne.w	sl, sl, #2
 800b8fe:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800b902:	e6e3      	b.n	800b6cc <_vfiprintf_r+0x42c>
 800b904:	4a0e      	ldr	r2, [pc, #56]	; (800b940 <_vfiprintf_r+0x6a0>)
 800b906:	e7e2      	b.n	800b8ce <_vfiprintf_r+0x62e>
 800b908:	46a0      	mov	r8, r4
 800b90a:	f01a 0510 	ands.w	r5, sl, #16
 800b90e:	f858 4b04 	ldr.w	r4, [r8], #4
 800b912:	d001      	beq.n	800b918 <_vfiprintf_r+0x678>
 800b914:	4615      	mov	r5, r2
 800b916:	e7e5      	b.n	800b8e4 <_vfiprintf_r+0x644>
 800b918:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800b91c:	d001      	beq.n	800b922 <_vfiprintf_r+0x682>
 800b91e:	b2a4      	uxth	r4, r4
 800b920:	e7e0      	b.n	800b8e4 <_vfiprintf_r+0x644>
 800b922:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800b926:	d0dd      	beq.n	800b8e4 <_vfiprintf_r+0x644>
 800b928:	b2e4      	uxtb	r4, r4
 800b92a:	e7f3      	b.n	800b914 <_vfiprintf_r+0x674>
 800b92c:	2c0a      	cmp	r4, #10
 800b92e:	f175 0300 	sbcs.w	r3, r5, #0
 800b932:	d20d      	bcs.n	800b950 <_vfiprintf_r+0x6b0>
 800b934:	3430      	adds	r4, #48	; 0x30
 800b936:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800b93a:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 800b93e:	e135      	b.n	800bbac <_vfiprintf_r+0x90c>
 800b940:	0800d3d4 	.word	0x0800d3d4
 800b944:	0800d72b 	.word	0x0800d72b
 800b948:	0800d73b 	.word	0x0800d73b
 800b94c:	0800d3e5 	.word	0x0800d3e5
 800b950:	ab3a      	add	r3, sp, #232	; 0xe8
 800b952:	9308      	str	r3, [sp, #32]
 800b954:	9b04      	ldr	r3, [sp, #16]
 800b956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b95a:	f04f 0a00 	mov.w	sl, #0
 800b95e:	9309      	str	r3, [sp, #36]	; 0x24
 800b960:	220a      	movs	r2, #10
 800b962:	2300      	movs	r3, #0
 800b964:	4620      	mov	r0, r4
 800b966:	4629      	mov	r1, r5
 800b968:	f7f5 f976 	bl	8000c58 <__aeabi_uldivmod>
 800b96c:	9b08      	ldr	r3, [sp, #32]
 800b96e:	3230      	adds	r2, #48	; 0x30
 800b970:	f103 3bff 	add.w	fp, r3, #4294967295
 800b974:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b97a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b97e:	f10a 0a01 	add.w	sl, sl, #1
 800b982:	b1d3      	cbz	r3, 800b9ba <_vfiprintf_r+0x71a>
 800b984:	9b06      	ldr	r3, [sp, #24]
 800b986:	781a      	ldrb	r2, [r3, #0]
 800b988:	4552      	cmp	r2, sl
 800b98a:	d116      	bne.n	800b9ba <_vfiprintf_r+0x71a>
 800b98c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800b990:	d013      	beq.n	800b9ba <_vfiprintf_r+0x71a>
 800b992:	2c0a      	cmp	r4, #10
 800b994:	f175 0200 	sbcs.w	r2, r5, #0
 800b998:	d30f      	bcc.n	800b9ba <_vfiprintf_r+0x71a>
 800b99a:	9b07      	ldr	r3, [sp, #28]
 800b99c:	ebab 0b03 	sub.w	fp, fp, r3
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	ee18 1a10 	vmov	r1, s16
 800b9a6:	4658      	mov	r0, fp
 800b9a8:	f7fd ff23 	bl	80097f2 <strncpy>
 800b9ac:	9b06      	ldr	r3, [sp, #24]
 800b9ae:	785a      	ldrb	r2, [r3, #1]
 800b9b0:	b16a      	cbz	r2, 800b9ce <_vfiprintf_r+0x72e>
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	9306      	str	r3, [sp, #24]
 800b9b6:	f04f 0a00 	mov.w	sl, #0
 800b9ba:	2c0a      	cmp	r4, #10
 800b9bc:	f175 0500 	sbcs.w	r5, r5, #0
 800b9c0:	f0c0 80f4 	bcc.w	800bbac <_vfiprintf_r+0x90c>
 800b9c4:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800b9c8:	f8cd b020 	str.w	fp, [sp, #32]
 800b9cc:	e7c8      	b.n	800b960 <_vfiprintf_r+0x6c0>
 800b9ce:	4692      	mov	sl, r2
 800b9d0:	e7f3      	b.n	800b9ba <_vfiprintf_r+0x71a>
 800b9d2:	f004 020f 	and.w	r2, r4, #15
 800b9d6:	9b05      	ldr	r3, [sp, #20]
 800b9d8:	0924      	lsrs	r4, r4, #4
 800b9da:	5c9a      	ldrb	r2, [r3, r2]
 800b9dc:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800b9e0:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800b9e4:	092d      	lsrs	r5, r5, #4
 800b9e6:	ea54 0205 	orrs.w	r2, r4, r5
 800b9ea:	d1f2      	bne.n	800b9d2 <_vfiprintf_r+0x732>
 800b9ec:	e0de      	b.n	800bbac <_vfiprintf_r+0x90c>
 800b9ee:	b933      	cbnz	r3, 800b9fe <_vfiprintf_r+0x75e>
 800b9f0:	f01a 0f01 	tst.w	sl, #1
 800b9f4:	d003      	beq.n	800b9fe <_vfiprintf_r+0x75e>
 800b9f6:	2330      	movs	r3, #48	; 0x30
 800b9f8:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800b9fc:	e79d      	b.n	800b93a <_vfiprintf_r+0x69a>
 800b9fe:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800ba02:	e0d3      	b.n	800bbac <_vfiprintf_r+0x90c>
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	f000 809f 	beq.w	800bb48 <_vfiprintf_r+0x8a8>
 800ba0a:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800ba0e:	2300      	movs	r3, #0
 800ba10:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800ba14:	46a0      	mov	r8, r4
 800ba16:	e5c0      	b.n	800b59a <_vfiprintf_r+0x2fa>
 800ba18:	4605      	mov	r5, r0
 800ba1a:	e66e      	b.n	800b6fa <_vfiprintf_r+0x45a>
 800ba1c:	2110      	movs	r1, #16
 800ba1e:	6071      	str	r1, [r6, #4]
 800ba20:	2a07      	cmp	r2, #7
 800ba22:	4461      	add	r1, ip
 800ba24:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800ba28:	dd08      	ble.n	800ba3c <_vfiprintf_r+0x79c>
 800ba2a:	aa0e      	add	r2, sp, #56	; 0x38
 800ba2c:	4639      	mov	r1, r7
 800ba2e:	4648      	mov	r0, r9
 800ba30:	f7ff fc04 	bl	800b23c <__sprint_r>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	d166      	bne.n	800bb06 <_vfiprintf_r+0x866>
 800ba38:	4b60      	ldr	r3, [pc, #384]	; (800bbbc <_vfiprintf_r+0x91c>)
 800ba3a:	a811      	add	r0, sp, #68	; 0x44
 800ba3c:	3c10      	subs	r4, #16
 800ba3e:	4606      	mov	r6, r0
 800ba40:	e676      	b.n	800b730 <_vfiprintf_r+0x490>
 800ba42:	4606      	mov	r6, r0
 800ba44:	e68e      	b.n	800b764 <_vfiprintf_r+0x4c4>
 800ba46:	aa0e      	add	r2, sp, #56	; 0x38
 800ba48:	4639      	mov	r1, r7
 800ba4a:	4648      	mov	r0, r9
 800ba4c:	f7ff fbf6 	bl	800b23c <__sprint_r>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	d158      	bne.n	800bb06 <_vfiprintf_r+0x866>
 800ba54:	ae11      	add	r6, sp, #68	; 0x44
 800ba56:	e697      	b.n	800b788 <_vfiprintf_r+0x4e8>
 800ba58:	aa0e      	add	r2, sp, #56	; 0x38
 800ba5a:	4639      	mov	r1, r7
 800ba5c:	4648      	mov	r0, r9
 800ba5e:	f7ff fbed 	bl	800b23c <__sprint_r>
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d14f      	bne.n	800bb06 <_vfiprintf_r+0x866>
 800ba66:	ae11      	add	r6, sp, #68	; 0x44
 800ba68:	e69e      	b.n	800b7a8 <_vfiprintf_r+0x508>
 800ba6a:	2110      	movs	r1, #16
 800ba6c:	6071      	str	r1, [r6, #4]
 800ba6e:	2a07      	cmp	r2, #7
 800ba70:	4461      	add	r1, ip
 800ba72:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800ba76:	dd08      	ble.n	800ba8a <_vfiprintf_r+0x7ea>
 800ba78:	aa0e      	add	r2, sp, #56	; 0x38
 800ba7a:	4639      	mov	r1, r7
 800ba7c:	4648      	mov	r0, r9
 800ba7e:	f7ff fbdd 	bl	800b23c <__sprint_r>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d13f      	bne.n	800bb06 <_vfiprintf_r+0x866>
 800ba86:	4b4e      	ldr	r3, [pc, #312]	; (800bbc0 <_vfiprintf_r+0x920>)
 800ba88:	a811      	add	r0, sp, #68	; 0x44
 800ba8a:	3c10      	subs	r4, #16
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	e694      	b.n	800b7ba <_vfiprintf_r+0x51a>
 800ba90:	4606      	mov	r6, r0
 800ba92:	e6ac      	b.n	800b7ee <_vfiprintf_r+0x54e>
 800ba94:	3110      	adds	r1, #16
 800ba96:	2a07      	cmp	r2, #7
 800ba98:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800ba9c:	6073      	str	r3, [r6, #4]
 800ba9e:	dd07      	ble.n	800bab0 <_vfiprintf_r+0x810>
 800baa0:	aa0e      	add	r2, sp, #56	; 0x38
 800baa2:	4639      	mov	r1, r7
 800baa4:	4648      	mov	r0, r9
 800baa6:	f7ff fbc9 	bl	800b23c <__sprint_r>
 800baaa:	bb60      	cbnz	r0, 800bb06 <_vfiprintf_r+0x866>
 800baac:	a811      	add	r0, sp, #68	; 0x44
 800baae:	2310      	movs	r3, #16
 800bab0:	3c10      	subs	r4, #16
 800bab2:	4606      	mov	r6, r0
 800bab4:	e6a1      	b.n	800b7fa <_vfiprintf_r+0x55a>
 800bab6:	4606      	mov	r6, r0
 800bab8:	e6b9      	b.n	800b82e <_vfiprintf_r+0x58e>
 800baba:	aa0e      	add	r2, sp, #56	; 0x38
 800babc:	4639      	mov	r1, r7
 800babe:	4648      	mov	r0, r9
 800bac0:	f7ff fbbc 	bl	800b23c <__sprint_r>
 800bac4:	b9f8      	cbnz	r0, 800bb06 <_vfiprintf_r+0x866>
 800bac6:	ab11      	add	r3, sp, #68	; 0x44
 800bac8:	e6c1      	b.n	800b84e <_vfiprintf_r+0x5ae>
 800baca:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800bace:	1a54      	subs	r4, r2, r1
 800bad0:	2c00      	cmp	r4, #0
 800bad2:	f77f aec0 	ble.w	800b856 <_vfiprintf_r+0x5b6>
 800bad6:	4d39      	ldr	r5, [pc, #228]	; (800bbbc <_vfiprintf_r+0x91c>)
 800bad8:	2610      	movs	r6, #16
 800bada:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800bade:	2c10      	cmp	r4, #16
 800bae0:	f102 0201 	add.w	r2, r2, #1
 800bae4:	601d      	str	r5, [r3, #0]
 800bae6:	dc1d      	bgt.n	800bb24 <_vfiprintf_r+0x884>
 800bae8:	605c      	str	r4, [r3, #4]
 800baea:	2a07      	cmp	r2, #7
 800baec:	440c      	add	r4, r1
 800baee:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800baf2:	f77f aeb0 	ble.w	800b856 <_vfiprintf_r+0x5b6>
 800baf6:	aa0e      	add	r2, sp, #56	; 0x38
 800baf8:	4639      	mov	r1, r7
 800bafa:	4648      	mov	r0, r9
 800bafc:	f7ff fb9e 	bl	800b23c <__sprint_r>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	f43f aea8 	beq.w	800b856 <_vfiprintf_r+0x5b6>
 800bb06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb08:	07d9      	lsls	r1, r3, #31
 800bb0a:	d405      	bmi.n	800bb18 <_vfiprintf_r+0x878>
 800bb0c:	89bb      	ldrh	r3, [r7, #12]
 800bb0e:	059a      	lsls	r2, r3, #22
 800bb10:	d402      	bmi.n	800bb18 <_vfiprintf_r+0x878>
 800bb12:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bb14:	f7fc f807 	bl	8007b26 <__retarget_lock_release_recursive>
 800bb18:	89bb      	ldrh	r3, [r7, #12]
 800bb1a:	065b      	lsls	r3, r3, #25
 800bb1c:	f57f abf3 	bpl.w	800b306 <_vfiprintf_r+0x66>
 800bb20:	f7ff bbee 	b.w	800b300 <_vfiprintf_r+0x60>
 800bb24:	3110      	adds	r1, #16
 800bb26:	2a07      	cmp	r2, #7
 800bb28:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800bb2c:	605e      	str	r6, [r3, #4]
 800bb2e:	dc02      	bgt.n	800bb36 <_vfiprintf_r+0x896>
 800bb30:	3308      	adds	r3, #8
 800bb32:	3c10      	subs	r4, #16
 800bb34:	e7d1      	b.n	800bada <_vfiprintf_r+0x83a>
 800bb36:	aa0e      	add	r2, sp, #56	; 0x38
 800bb38:	4639      	mov	r1, r7
 800bb3a:	4648      	mov	r0, r9
 800bb3c:	f7ff fb7e 	bl	800b23c <__sprint_r>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	d1e0      	bne.n	800bb06 <_vfiprintf_r+0x866>
 800bb44:	ab11      	add	r3, sp, #68	; 0x44
 800bb46:	e7f4      	b.n	800bb32 <_vfiprintf_r+0x892>
 800bb48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb4a:	b913      	cbnz	r3, 800bb52 <_vfiprintf_r+0x8b2>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb50:	e7d9      	b.n	800bb06 <_vfiprintf_r+0x866>
 800bb52:	aa0e      	add	r2, sp, #56	; 0x38
 800bb54:	4639      	mov	r1, r7
 800bb56:	4648      	mov	r0, r9
 800bb58:	f7ff fb70 	bl	800b23c <__sprint_r>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d0f5      	beq.n	800bb4c <_vfiprintf_r+0x8ac>
 800bb60:	e7d1      	b.n	800bb06 <_vfiprintf_r+0x866>
 800bb62:	ea54 0205 	orrs.w	r2, r4, r5
 800bb66:	f8cd a010 	str.w	sl, [sp, #16]
 800bb6a:	f43f ad8d 	beq.w	800b688 <_vfiprintf_r+0x3e8>
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	f43f aedc 	beq.w	800b92c <_vfiprintf_r+0x68c>
 800bb74:	2b02      	cmp	r3, #2
 800bb76:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800bb7a:	f43f af2a 	beq.w	800b9d2 <_vfiprintf_r+0x732>
 800bb7e:	f004 0207 	and.w	r2, r4, #7
 800bb82:	08e4      	lsrs	r4, r4, #3
 800bb84:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800bb88:	08ed      	lsrs	r5, r5, #3
 800bb8a:	3230      	adds	r2, #48	; 0x30
 800bb8c:	ea54 0005 	orrs.w	r0, r4, r5
 800bb90:	4659      	mov	r1, fp
 800bb92:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800bb96:	d1f2      	bne.n	800bb7e <_vfiprintf_r+0x8de>
 800bb98:	9b04      	ldr	r3, [sp, #16]
 800bb9a:	07d8      	lsls	r0, r3, #31
 800bb9c:	d506      	bpl.n	800bbac <_vfiprintf_r+0x90c>
 800bb9e:	2a30      	cmp	r2, #48	; 0x30
 800bba0:	d004      	beq.n	800bbac <_vfiprintf_r+0x90c>
 800bba2:	2230      	movs	r2, #48	; 0x30
 800bba4:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800bba8:	f1a1 0b02 	sub.w	fp, r1, #2
 800bbac:	ab3a      	add	r3, sp, #232	; 0xe8
 800bbae:	eba3 030b 	sub.w	r3, r3, fp
 800bbb2:	9d00      	ldr	r5, [sp, #0]
 800bbb4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bbb8:	9300      	str	r3, [sp, #0]
 800bbba:	e59e      	b.n	800b6fa <_vfiprintf_r+0x45a>
 800bbbc:	0800d72b 	.word	0x0800d72b
 800bbc0:	0800d73b 	.word	0x0800d73b

0800bbc4 <__sbprintf>:
 800bbc4:	b570      	push	{r4, r5, r6, lr}
 800bbc6:	460c      	mov	r4, r1
 800bbc8:	8989      	ldrh	r1, [r1, #12]
 800bbca:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800bbce:	f021 0102 	bic.w	r1, r1, #2
 800bbd2:	f8ad 1014 	strh.w	r1, [sp, #20]
 800bbd6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800bbd8:	911b      	str	r1, [sp, #108]	; 0x6c
 800bbda:	89e1      	ldrh	r1, [r4, #14]
 800bbdc:	f8ad 1016 	strh.w	r1, [sp, #22]
 800bbe0:	69e1      	ldr	r1, [r4, #28]
 800bbe2:	9109      	str	r1, [sp, #36]	; 0x24
 800bbe4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bbe6:	910b      	str	r1, [sp, #44]	; 0x2c
 800bbe8:	a91c      	add	r1, sp, #112	; 0x70
 800bbea:	9102      	str	r1, [sp, #8]
 800bbec:	9106      	str	r1, [sp, #24]
 800bbee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bbf2:	4606      	mov	r6, r0
 800bbf4:	9104      	str	r1, [sp, #16]
 800bbf6:	9107      	str	r1, [sp, #28]
 800bbf8:	a818      	add	r0, sp, #96	; 0x60
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	e9cd 3200 	strd	r3, r2, [sp]
 800bc00:	9108      	str	r1, [sp, #32]
 800bc02:	f7fb ff8d 	bl	8007b20 <__retarget_lock_init_recursive>
 800bc06:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc0a:	a902      	add	r1, sp, #8
 800bc0c:	4630      	mov	r0, r6
 800bc0e:	f7ff fb47 	bl	800b2a0 <_vfiprintf_r>
 800bc12:	1e05      	subs	r5, r0, #0
 800bc14:	db07      	blt.n	800bc26 <__sbprintf+0x62>
 800bc16:	a902      	add	r1, sp, #8
 800bc18:	4630      	mov	r0, r6
 800bc1a:	f7fd fdc5 	bl	80097a8 <_fflush_r>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	bf18      	it	ne
 800bc22:	f04f 35ff 	movne.w	r5, #4294967295
 800bc26:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800bc2a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800bc2c:	065b      	lsls	r3, r3, #25
 800bc2e:	bf42      	ittt	mi
 800bc30:	89a3      	ldrhmi	r3, [r4, #12]
 800bc32:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800bc36:	81a3      	strhmi	r3, [r4, #12]
 800bc38:	f7fb ff73 	bl	8007b22 <__retarget_lock_close_recursive>
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800bc42:	bd70      	pop	{r4, r5, r6, pc}

0800bc44 <__sfvwrite_r>:
 800bc44:	6893      	ldr	r3, [r2, #8]
 800bc46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	460c      	mov	r4, r1
 800bc4e:	4691      	mov	r9, r2
 800bc50:	b91b      	cbnz	r3, 800bc5a <__sfvwrite_r+0x16>
 800bc52:	2000      	movs	r0, #0
 800bc54:	b003      	add	sp, #12
 800bc56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5a:	898b      	ldrh	r3, [r1, #12]
 800bc5c:	0718      	lsls	r0, r3, #28
 800bc5e:	d54f      	bpl.n	800bd00 <__sfvwrite_r+0xbc>
 800bc60:	690b      	ldr	r3, [r1, #16]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d04c      	beq.n	800bd00 <__sfvwrite_r+0xbc>
 800bc66:	89a3      	ldrh	r3, [r4, #12]
 800bc68:	f8d9 8000 	ldr.w	r8, [r9]
 800bc6c:	f013 0702 	ands.w	r7, r3, #2
 800bc70:	d16b      	bne.n	800bd4a <__sfvwrite_r+0x106>
 800bc72:	f013 0301 	ands.w	r3, r3, #1
 800bc76:	f000 809b 	beq.w	800bdb0 <__sfvwrite_r+0x16c>
 800bc7a:	4638      	mov	r0, r7
 800bc7c:	46ba      	mov	sl, r7
 800bc7e:	46bb      	mov	fp, r7
 800bc80:	f1bb 0f00 	cmp.w	fp, #0
 800bc84:	f000 8102 	beq.w	800be8c <__sfvwrite_r+0x248>
 800bc88:	b950      	cbnz	r0, 800bca0 <__sfvwrite_r+0x5c>
 800bc8a:	465a      	mov	r2, fp
 800bc8c:	210a      	movs	r1, #10
 800bc8e:	4650      	mov	r0, sl
 800bc90:	f7f4 faae 	bl	80001f0 <memchr>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	f000 80ff 	beq.w	800be98 <__sfvwrite_r+0x254>
 800bc9a:	3001      	adds	r0, #1
 800bc9c:	eba0 070a 	sub.w	r7, r0, sl
 800bca0:	6820      	ldr	r0, [r4, #0]
 800bca2:	6921      	ldr	r1, [r4, #16]
 800bca4:	68a5      	ldr	r5, [r4, #8]
 800bca6:	6963      	ldr	r3, [r4, #20]
 800bca8:	455f      	cmp	r7, fp
 800bcaa:	463a      	mov	r2, r7
 800bcac:	bf28      	it	cs
 800bcae:	465a      	movcs	r2, fp
 800bcb0:	4288      	cmp	r0, r1
 800bcb2:	f240 80f4 	bls.w	800be9e <__sfvwrite_r+0x25a>
 800bcb6:	441d      	add	r5, r3
 800bcb8:	42aa      	cmp	r2, r5
 800bcba:	f340 80f0 	ble.w	800be9e <__sfvwrite_r+0x25a>
 800bcbe:	4651      	mov	r1, sl
 800bcc0:	462a      	mov	r2, r5
 800bcc2:	f7ff f85e 	bl	800ad82 <memmove>
 800bcc6:	6823      	ldr	r3, [r4, #0]
 800bcc8:	442b      	add	r3, r5
 800bcca:	6023      	str	r3, [r4, #0]
 800bccc:	4621      	mov	r1, r4
 800bcce:	4630      	mov	r0, r6
 800bcd0:	f7fd fd6a 	bl	80097a8 <_fflush_r>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	d166      	bne.n	800bda6 <__sfvwrite_r+0x162>
 800bcd8:	1b7f      	subs	r7, r7, r5
 800bcda:	f040 80f8 	bne.w	800bece <__sfvwrite_r+0x28a>
 800bcde:	4621      	mov	r1, r4
 800bce0:	4630      	mov	r0, r6
 800bce2:	f7fd fd61 	bl	80097a8 <_fflush_r>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d15d      	bne.n	800bda6 <__sfvwrite_r+0x162>
 800bcea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bcee:	1b5b      	subs	r3, r3, r5
 800bcf0:	44aa      	add	sl, r5
 800bcf2:	ebab 0b05 	sub.w	fp, fp, r5
 800bcf6:	f8c9 3008 	str.w	r3, [r9, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1c0      	bne.n	800bc80 <__sfvwrite_r+0x3c>
 800bcfe:	e7a8      	b.n	800bc52 <__sfvwrite_r+0xe>
 800bd00:	4621      	mov	r1, r4
 800bd02:	4630      	mov	r0, r6
 800bd04:	f000 f8e8 	bl	800bed8 <__swsetup_r>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d0ac      	beq.n	800bc66 <__sfvwrite_r+0x22>
 800bd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd10:	e7a0      	b.n	800bc54 <__sfvwrite_r+0x10>
 800bd12:	e9d8 a500 	ldrd	sl, r5, [r8]
 800bd16:	f108 0808 	add.w	r8, r8, #8
 800bd1a:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800bd1e:	69e1      	ldr	r1, [r4, #28]
 800bd20:	2d00      	cmp	r5, #0
 800bd22:	d0f6      	beq.n	800bd12 <__sfvwrite_r+0xce>
 800bd24:	42bd      	cmp	r5, r7
 800bd26:	462b      	mov	r3, r5
 800bd28:	4652      	mov	r2, sl
 800bd2a:	bf28      	it	cs
 800bd2c:	463b      	movcs	r3, r7
 800bd2e:	4630      	mov	r0, r6
 800bd30:	47d8      	blx	fp
 800bd32:	2800      	cmp	r0, #0
 800bd34:	dd37      	ble.n	800bda6 <__sfvwrite_r+0x162>
 800bd36:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bd3a:	1a1b      	subs	r3, r3, r0
 800bd3c:	4482      	add	sl, r0
 800bd3e:	1a2d      	subs	r5, r5, r0
 800bd40:	f8c9 3008 	str.w	r3, [r9, #8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1e8      	bne.n	800bd1a <__sfvwrite_r+0xd6>
 800bd48:	e783      	b.n	800bc52 <__sfvwrite_r+0xe>
 800bd4a:	f04f 0a00 	mov.w	sl, #0
 800bd4e:	4f61      	ldr	r7, [pc, #388]	; (800bed4 <__sfvwrite_r+0x290>)
 800bd50:	4655      	mov	r5, sl
 800bd52:	e7e2      	b.n	800bd1a <__sfvwrite_r+0xd6>
 800bd54:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800bd58:	f108 0808 	add.w	r8, r8, #8
 800bd5c:	6820      	ldr	r0, [r4, #0]
 800bd5e:	68a2      	ldr	r2, [r4, #8]
 800bd60:	f1ba 0f00 	cmp.w	sl, #0
 800bd64:	d0f6      	beq.n	800bd54 <__sfvwrite_r+0x110>
 800bd66:	89a3      	ldrh	r3, [r4, #12]
 800bd68:	0599      	lsls	r1, r3, #22
 800bd6a:	d563      	bpl.n	800be34 <__sfvwrite_r+0x1f0>
 800bd6c:	4552      	cmp	r2, sl
 800bd6e:	d836      	bhi.n	800bdde <__sfvwrite_r+0x19a>
 800bd70:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800bd74:	d033      	beq.n	800bdde <__sfvwrite_r+0x19a>
 800bd76:	6921      	ldr	r1, [r4, #16]
 800bd78:	6965      	ldr	r5, [r4, #20]
 800bd7a:	eba0 0b01 	sub.w	fp, r0, r1
 800bd7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd86:	f10b 0201 	add.w	r2, fp, #1
 800bd8a:	106d      	asrs	r5, r5, #1
 800bd8c:	4452      	add	r2, sl
 800bd8e:	4295      	cmp	r5, r2
 800bd90:	bf38      	it	cc
 800bd92:	4615      	movcc	r5, r2
 800bd94:	055b      	lsls	r3, r3, #21
 800bd96:	d53d      	bpl.n	800be14 <__sfvwrite_r+0x1d0>
 800bd98:	4629      	mov	r1, r5
 800bd9a:	4630      	mov	r0, r6
 800bd9c:	f7fb ffe8 	bl	8007d70 <_malloc_r>
 800bda0:	b948      	cbnz	r0, 800bdb6 <__sfvwrite_r+0x172>
 800bda2:	230c      	movs	r3, #12
 800bda4:	6033      	str	r3, [r6, #0]
 800bda6:	89a3      	ldrh	r3, [r4, #12]
 800bda8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdac:	81a3      	strh	r3, [r4, #12]
 800bdae:	e7ad      	b.n	800bd0c <__sfvwrite_r+0xc8>
 800bdb0:	461f      	mov	r7, r3
 800bdb2:	469a      	mov	sl, r3
 800bdb4:	e7d2      	b.n	800bd5c <__sfvwrite_r+0x118>
 800bdb6:	465a      	mov	r2, fp
 800bdb8:	6921      	ldr	r1, [r4, #16]
 800bdba:	9001      	str	r0, [sp, #4]
 800bdbc:	f7ff f802 	bl	800adc4 <memcpy>
 800bdc0:	89a2      	ldrh	r2, [r4, #12]
 800bdc2:	9b01      	ldr	r3, [sp, #4]
 800bdc4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800bdc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bdcc:	81a2      	strh	r2, [r4, #12]
 800bdce:	6123      	str	r3, [r4, #16]
 800bdd0:	6165      	str	r5, [r4, #20]
 800bdd2:	445b      	add	r3, fp
 800bdd4:	eba5 050b 	sub.w	r5, r5, fp
 800bdd8:	6023      	str	r3, [r4, #0]
 800bdda:	4652      	mov	r2, sl
 800bddc:	60a5      	str	r5, [r4, #8]
 800bdde:	4552      	cmp	r2, sl
 800bde0:	bf28      	it	cs
 800bde2:	4652      	movcs	r2, sl
 800bde4:	6820      	ldr	r0, [r4, #0]
 800bde6:	9201      	str	r2, [sp, #4]
 800bde8:	4639      	mov	r1, r7
 800bdea:	f7fe ffca 	bl	800ad82 <memmove>
 800bdee:	68a3      	ldr	r3, [r4, #8]
 800bdf0:	9a01      	ldr	r2, [sp, #4]
 800bdf2:	1a9b      	subs	r3, r3, r2
 800bdf4:	60a3      	str	r3, [r4, #8]
 800bdf6:	6823      	ldr	r3, [r4, #0]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	4655      	mov	r5, sl
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800be02:	1b5b      	subs	r3, r3, r5
 800be04:	442f      	add	r7, r5
 800be06:	ebaa 0a05 	sub.w	sl, sl, r5
 800be0a:	f8c9 3008 	str.w	r3, [r9, #8]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d1a4      	bne.n	800bd5c <__sfvwrite_r+0x118>
 800be12:	e71e      	b.n	800bc52 <__sfvwrite_r+0xe>
 800be14:	462a      	mov	r2, r5
 800be16:	4630      	mov	r0, r6
 800be18:	f7ff f848 	bl	800aeac <_realloc_r>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2800      	cmp	r0, #0
 800be20:	d1d5      	bne.n	800bdce <__sfvwrite_r+0x18a>
 800be22:	6921      	ldr	r1, [r4, #16]
 800be24:	4630      	mov	r0, r6
 800be26:	f7fb fee3 	bl	8007bf0 <_free_r>
 800be2a:	89a3      	ldrh	r3, [r4, #12]
 800be2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be30:	81a3      	strh	r3, [r4, #12]
 800be32:	e7b6      	b.n	800bda2 <__sfvwrite_r+0x15e>
 800be34:	6923      	ldr	r3, [r4, #16]
 800be36:	4283      	cmp	r3, r0
 800be38:	d302      	bcc.n	800be40 <__sfvwrite_r+0x1fc>
 800be3a:	6961      	ldr	r1, [r4, #20]
 800be3c:	4551      	cmp	r1, sl
 800be3e:	d915      	bls.n	800be6c <__sfvwrite_r+0x228>
 800be40:	4552      	cmp	r2, sl
 800be42:	bf28      	it	cs
 800be44:	4652      	movcs	r2, sl
 800be46:	4639      	mov	r1, r7
 800be48:	4615      	mov	r5, r2
 800be4a:	f7fe ff9a 	bl	800ad82 <memmove>
 800be4e:	68a3      	ldr	r3, [r4, #8]
 800be50:	6822      	ldr	r2, [r4, #0]
 800be52:	1b5b      	subs	r3, r3, r5
 800be54:	442a      	add	r2, r5
 800be56:	60a3      	str	r3, [r4, #8]
 800be58:	6022      	str	r2, [r4, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1cf      	bne.n	800bdfe <__sfvwrite_r+0x1ba>
 800be5e:	4621      	mov	r1, r4
 800be60:	4630      	mov	r0, r6
 800be62:	f7fd fca1 	bl	80097a8 <_fflush_r>
 800be66:	2800      	cmp	r0, #0
 800be68:	d0c9      	beq.n	800bdfe <__sfvwrite_r+0x1ba>
 800be6a:	e79c      	b.n	800bda6 <__sfvwrite_r+0x162>
 800be6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800be70:	459a      	cmp	sl, r3
 800be72:	bf38      	it	cc
 800be74:	4653      	movcc	r3, sl
 800be76:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800be78:	fb93 f3f1 	sdiv	r3, r3, r1
 800be7c:	463a      	mov	r2, r7
 800be7e:	434b      	muls	r3, r1
 800be80:	4630      	mov	r0, r6
 800be82:	69e1      	ldr	r1, [r4, #28]
 800be84:	47a8      	blx	r5
 800be86:	1e05      	subs	r5, r0, #0
 800be88:	dcb9      	bgt.n	800bdfe <__sfvwrite_r+0x1ba>
 800be8a:	e78c      	b.n	800bda6 <__sfvwrite_r+0x162>
 800be8c:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800be90:	2000      	movs	r0, #0
 800be92:	f108 0808 	add.w	r8, r8, #8
 800be96:	e6f3      	b.n	800bc80 <__sfvwrite_r+0x3c>
 800be98:	f10b 0701 	add.w	r7, fp, #1
 800be9c:	e700      	b.n	800bca0 <__sfvwrite_r+0x5c>
 800be9e:	4293      	cmp	r3, r2
 800bea0:	dc08      	bgt.n	800beb4 <__sfvwrite_r+0x270>
 800bea2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bea4:	69e1      	ldr	r1, [r4, #28]
 800bea6:	4652      	mov	r2, sl
 800bea8:	4630      	mov	r0, r6
 800beaa:	47a8      	blx	r5
 800beac:	1e05      	subs	r5, r0, #0
 800beae:	f73f af13 	bgt.w	800bcd8 <__sfvwrite_r+0x94>
 800beb2:	e778      	b.n	800bda6 <__sfvwrite_r+0x162>
 800beb4:	4651      	mov	r1, sl
 800beb6:	9201      	str	r2, [sp, #4]
 800beb8:	f7fe ff63 	bl	800ad82 <memmove>
 800bebc:	9a01      	ldr	r2, [sp, #4]
 800bebe:	68a3      	ldr	r3, [r4, #8]
 800bec0:	1a9b      	subs	r3, r3, r2
 800bec2:	60a3      	str	r3, [r4, #8]
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	4413      	add	r3, r2
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	4615      	mov	r5, r2
 800becc:	e704      	b.n	800bcd8 <__sfvwrite_r+0x94>
 800bece:	2001      	movs	r0, #1
 800bed0:	e70b      	b.n	800bcea <__sfvwrite_r+0xa6>
 800bed2:	bf00      	nop
 800bed4:	7ffffc00 	.word	0x7ffffc00

0800bed8 <__swsetup_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4b2a      	ldr	r3, [pc, #168]	; (800bf84 <__swsetup_r+0xac>)
 800bedc:	4605      	mov	r5, r0
 800bede:	6818      	ldr	r0, [r3, #0]
 800bee0:	460c      	mov	r4, r1
 800bee2:	b118      	cbz	r0, 800beec <__swsetup_r+0x14>
 800bee4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bee6:	b90b      	cbnz	r3, 800beec <__swsetup_r+0x14>
 800bee8:	f7fb fd08 	bl	80078fc <__sinit>
 800beec:	89a3      	ldrh	r3, [r4, #12]
 800beee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bef2:	0718      	lsls	r0, r3, #28
 800bef4:	d422      	bmi.n	800bf3c <__swsetup_r+0x64>
 800bef6:	06d9      	lsls	r1, r3, #27
 800bef8:	d407      	bmi.n	800bf0a <__swsetup_r+0x32>
 800befa:	2309      	movs	r3, #9
 800befc:	602b      	str	r3, [r5, #0]
 800befe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf02:	81a3      	strh	r3, [r4, #12]
 800bf04:	f04f 30ff 	mov.w	r0, #4294967295
 800bf08:	e034      	b.n	800bf74 <__swsetup_r+0x9c>
 800bf0a:	0758      	lsls	r0, r3, #29
 800bf0c:	d512      	bpl.n	800bf34 <__swsetup_r+0x5c>
 800bf0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bf10:	b141      	cbz	r1, 800bf24 <__swsetup_r+0x4c>
 800bf12:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bf16:	4299      	cmp	r1, r3
 800bf18:	d002      	beq.n	800bf20 <__swsetup_r+0x48>
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	f7fb fe68 	bl	8007bf0 <_free_r>
 800bf20:	2300      	movs	r3, #0
 800bf22:	6323      	str	r3, [r4, #48]	; 0x30
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf2a:	81a3      	strh	r3, [r4, #12]
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	6063      	str	r3, [r4, #4]
 800bf30:	6923      	ldr	r3, [r4, #16]
 800bf32:	6023      	str	r3, [r4, #0]
 800bf34:	89a3      	ldrh	r3, [r4, #12]
 800bf36:	f043 0308 	orr.w	r3, r3, #8
 800bf3a:	81a3      	strh	r3, [r4, #12]
 800bf3c:	6923      	ldr	r3, [r4, #16]
 800bf3e:	b94b      	cbnz	r3, 800bf54 <__swsetup_r+0x7c>
 800bf40:	89a3      	ldrh	r3, [r4, #12]
 800bf42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf4a:	d003      	beq.n	800bf54 <__swsetup_r+0x7c>
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	4628      	mov	r0, r5
 800bf50:	f000 f8ca 	bl	800c0e8 <__smakebuf_r>
 800bf54:	89a0      	ldrh	r0, [r4, #12]
 800bf56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf5a:	f010 0301 	ands.w	r3, r0, #1
 800bf5e:	d00a      	beq.n	800bf76 <__swsetup_r+0x9e>
 800bf60:	2300      	movs	r3, #0
 800bf62:	60a3      	str	r3, [r4, #8]
 800bf64:	6963      	ldr	r3, [r4, #20]
 800bf66:	425b      	negs	r3, r3
 800bf68:	61a3      	str	r3, [r4, #24]
 800bf6a:	6923      	ldr	r3, [r4, #16]
 800bf6c:	b943      	cbnz	r3, 800bf80 <__swsetup_r+0xa8>
 800bf6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf72:	d1c4      	bne.n	800befe <__swsetup_r+0x26>
 800bf74:	bd38      	pop	{r3, r4, r5, pc}
 800bf76:	0781      	lsls	r1, r0, #30
 800bf78:	bf58      	it	pl
 800bf7a:	6963      	ldrpl	r3, [r4, #20]
 800bf7c:	60a3      	str	r3, [r4, #8]
 800bf7e:	e7f4      	b.n	800bf6a <__swsetup_r+0x92>
 800bf80:	2000      	movs	r0, #0
 800bf82:	e7f7      	b.n	800bf74 <__swsetup_r+0x9c>
 800bf84:	20000228 	.word	0x20000228

0800bf88 <__fputwc>:
 800bf88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf8c:	4680      	mov	r8, r0
 800bf8e:	460e      	mov	r6, r1
 800bf90:	4615      	mov	r5, r2
 800bf92:	f7fe ff11 	bl	800adb8 <__locale_mb_cur_max>
 800bf96:	2801      	cmp	r0, #1
 800bf98:	d11c      	bne.n	800bfd4 <__fputwc+0x4c>
 800bf9a:	1e73      	subs	r3, r6, #1
 800bf9c:	2bfe      	cmp	r3, #254	; 0xfe
 800bf9e:	d819      	bhi.n	800bfd4 <__fputwc+0x4c>
 800bfa0:	f88d 6004 	strb.w	r6, [sp, #4]
 800bfa4:	4604      	mov	r4, r0
 800bfa6:	2700      	movs	r7, #0
 800bfa8:	f10d 0904 	add.w	r9, sp, #4
 800bfac:	42a7      	cmp	r7, r4
 800bfae:	d020      	beq.n	800bff2 <__fputwc+0x6a>
 800bfb0:	68ab      	ldr	r3, [r5, #8]
 800bfb2:	f817 1009 	ldrb.w	r1, [r7, r9]
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	60ab      	str	r3, [r5, #8]
 800bfbc:	da04      	bge.n	800bfc8 <__fputwc+0x40>
 800bfbe:	69aa      	ldr	r2, [r5, #24]
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	db1a      	blt.n	800bffa <__fputwc+0x72>
 800bfc4:	290a      	cmp	r1, #10
 800bfc6:	d018      	beq.n	800bffa <__fputwc+0x72>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	602a      	str	r2, [r5, #0]
 800bfce:	7019      	strb	r1, [r3, #0]
 800bfd0:	3701      	adds	r7, #1
 800bfd2:	e7eb      	b.n	800bfac <__fputwc+0x24>
 800bfd4:	a901      	add	r1, sp, #4
 800bfd6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800bfda:	4632      	mov	r2, r6
 800bfdc:	4640      	mov	r0, r8
 800bfde:	f000 f845 	bl	800c06c <_wcrtomb_r>
 800bfe2:	1c41      	adds	r1, r0, #1
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	d1de      	bne.n	800bfa6 <__fputwc+0x1e>
 800bfe8:	89ab      	ldrh	r3, [r5, #12]
 800bfea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfee:	81ab      	strh	r3, [r5, #12]
 800bff0:	4606      	mov	r6, r0
 800bff2:	4630      	mov	r0, r6
 800bff4:	b003      	add	sp, #12
 800bff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bffa:	462a      	mov	r2, r5
 800bffc:	4640      	mov	r0, r8
 800bffe:	f000 f8af 	bl	800c160 <__swbuf_r>
 800c002:	1c42      	adds	r2, r0, #1
 800c004:	d1e4      	bne.n	800bfd0 <__fputwc+0x48>
 800c006:	4606      	mov	r6, r0
 800c008:	e7f3      	b.n	800bff2 <__fputwc+0x6a>

0800c00a <_fputwc_r>:
 800c00a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800c00c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c00e:	4614      	mov	r4, r2
 800c010:	07da      	lsls	r2, r3, #31
 800c012:	4605      	mov	r5, r0
 800c014:	d407      	bmi.n	800c026 <_fputwc_r+0x1c>
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	059b      	lsls	r3, r3, #22
 800c01a:	d404      	bmi.n	800c026 <_fputwc_r+0x1c>
 800c01c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c01e:	9101      	str	r1, [sp, #4]
 800c020:	f7fb fd80 	bl	8007b24 <__retarget_lock_acquire_recursive>
 800c024:	9901      	ldr	r1, [sp, #4]
 800c026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c02a:	0498      	lsls	r0, r3, #18
 800c02c:	d406      	bmi.n	800c03c <_fputwc_r+0x32>
 800c02e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c032:	81a3      	strh	r3, [r4, #12]
 800c034:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c036:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c03a:	6663      	str	r3, [r4, #100]	; 0x64
 800c03c:	4622      	mov	r2, r4
 800c03e:	4628      	mov	r0, r5
 800c040:	f7ff ffa2 	bl	800bf88 <__fputwc>
 800c044:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c046:	07da      	lsls	r2, r3, #31
 800c048:	4605      	mov	r5, r0
 800c04a:	d405      	bmi.n	800c058 <_fputwc_r+0x4e>
 800c04c:	89a3      	ldrh	r3, [r4, #12]
 800c04e:	059b      	lsls	r3, r3, #22
 800c050:	d402      	bmi.n	800c058 <_fputwc_r+0x4e>
 800c052:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c054:	f7fb fd67 	bl	8007b26 <__retarget_lock_release_recursive>
 800c058:	4628      	mov	r0, r5
 800c05a:	b003      	add	sp, #12
 800c05c:	bd30      	pop	{r4, r5, pc}

0800c05e <abort>:
 800c05e:	b508      	push	{r3, lr}
 800c060:	2006      	movs	r0, #6
 800c062:	f000 f8ef 	bl	800c244 <raise>
 800c066:	2001      	movs	r0, #1
 800c068:	f7f5 f90c 	bl	8001284 <_exit>

0800c06c <_wcrtomb_r>:
 800c06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c06e:	4c09      	ldr	r4, [pc, #36]	; (800c094 <_wcrtomb_r+0x28>)
 800c070:	b085      	sub	sp, #20
 800c072:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800c076:	4605      	mov	r5, r0
 800c078:	461e      	mov	r6, r3
 800c07a:	b909      	cbnz	r1, 800c080 <_wcrtomb_r+0x14>
 800c07c:	460a      	mov	r2, r1
 800c07e:	a901      	add	r1, sp, #4
 800c080:	47b8      	blx	r7
 800c082:	1c43      	adds	r3, r0, #1
 800c084:	bf01      	itttt	eq
 800c086:	2300      	moveq	r3, #0
 800c088:	6033      	streq	r3, [r6, #0]
 800c08a:	238a      	moveq	r3, #138	; 0x8a
 800c08c:	602b      	streq	r3, [r5, #0]
 800c08e:	b005      	add	sp, #20
 800c090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c092:	bf00      	nop
 800c094:	20000640 	.word	0x20000640

0800c098 <__swhatbuf_r>:
 800c098:	b570      	push	{r4, r5, r6, lr}
 800c09a:	460c      	mov	r4, r1
 800c09c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	b096      	sub	sp, #88	; 0x58
 800c0a4:	4615      	mov	r5, r2
 800c0a6:	461e      	mov	r6, r3
 800c0a8:	da07      	bge.n	800c0ba <__swhatbuf_r+0x22>
 800c0aa:	89a1      	ldrh	r1, [r4, #12]
 800c0ac:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800c0b0:	d017      	beq.n	800c0e2 <__swhatbuf_r+0x4a>
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	2340      	movs	r3, #64	; 0x40
 800c0b6:	4608      	mov	r0, r1
 800c0b8:	e00f      	b.n	800c0da <__swhatbuf_r+0x42>
 800c0ba:	466a      	mov	r2, sp
 800c0bc:	f000 f8ca 	bl	800c254 <_fstat_r>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	dbf2      	blt.n	800c0aa <__swhatbuf_r+0x12>
 800c0c4:	9901      	ldr	r1, [sp, #4]
 800c0c6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c0ca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c0ce:	4259      	negs	r1, r3
 800c0d0:	4159      	adcs	r1, r3
 800c0d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0da:	6031      	str	r1, [r6, #0]
 800c0dc:	602b      	str	r3, [r5, #0]
 800c0de:	b016      	add	sp, #88	; 0x58
 800c0e0:	bd70      	pop	{r4, r5, r6, pc}
 800c0e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0e6:	e7e6      	b.n	800c0b6 <__swhatbuf_r+0x1e>

0800c0e8 <__smakebuf_r>:
 800c0e8:	898b      	ldrh	r3, [r1, #12]
 800c0ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0ec:	079d      	lsls	r5, r3, #30
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	460c      	mov	r4, r1
 800c0f2:	d507      	bpl.n	800c104 <__smakebuf_r+0x1c>
 800c0f4:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800c0f8:	6023      	str	r3, [r4, #0]
 800c0fa:	6123      	str	r3, [r4, #16]
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	6163      	str	r3, [r4, #20]
 800c100:	b002      	add	sp, #8
 800c102:	bd70      	pop	{r4, r5, r6, pc}
 800c104:	ab01      	add	r3, sp, #4
 800c106:	466a      	mov	r2, sp
 800c108:	f7ff ffc6 	bl	800c098 <__swhatbuf_r>
 800c10c:	9900      	ldr	r1, [sp, #0]
 800c10e:	4605      	mov	r5, r0
 800c110:	4630      	mov	r0, r6
 800c112:	f7fb fe2d 	bl	8007d70 <_malloc_r>
 800c116:	b948      	cbnz	r0, 800c12c <__smakebuf_r+0x44>
 800c118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c11c:	059a      	lsls	r2, r3, #22
 800c11e:	d4ef      	bmi.n	800c100 <__smakebuf_r+0x18>
 800c120:	f023 0303 	bic.w	r3, r3, #3
 800c124:	f043 0302 	orr.w	r3, r3, #2
 800c128:	81a3      	strh	r3, [r4, #12]
 800c12a:	e7e3      	b.n	800c0f4 <__smakebuf_r+0xc>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	6020      	str	r0, [r4, #0]
 800c130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c134:	81a3      	strh	r3, [r4, #12]
 800c136:	9b00      	ldr	r3, [sp, #0]
 800c138:	6163      	str	r3, [r4, #20]
 800c13a:	9b01      	ldr	r3, [sp, #4]
 800c13c:	6120      	str	r0, [r4, #16]
 800c13e:	b15b      	cbz	r3, 800c158 <__smakebuf_r+0x70>
 800c140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c144:	4630      	mov	r0, r6
 800c146:	f000 f897 	bl	800c278 <_isatty_r>
 800c14a:	b128      	cbz	r0, 800c158 <__smakebuf_r+0x70>
 800c14c:	89a3      	ldrh	r3, [r4, #12]
 800c14e:	f023 0303 	bic.w	r3, r3, #3
 800c152:	f043 0301 	orr.w	r3, r3, #1
 800c156:	81a3      	strh	r3, [r4, #12]
 800c158:	89a3      	ldrh	r3, [r4, #12]
 800c15a:	431d      	orrs	r5, r3
 800c15c:	81a5      	strh	r5, [r4, #12]
 800c15e:	e7cf      	b.n	800c100 <__smakebuf_r+0x18>

0800c160 <__swbuf_r>:
 800c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c162:	460e      	mov	r6, r1
 800c164:	4614      	mov	r4, r2
 800c166:	4605      	mov	r5, r0
 800c168:	b118      	cbz	r0, 800c172 <__swbuf_r+0x12>
 800c16a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c16c:	b90b      	cbnz	r3, 800c172 <__swbuf_r+0x12>
 800c16e:	f7fb fbc5 	bl	80078fc <__sinit>
 800c172:	69a3      	ldr	r3, [r4, #24]
 800c174:	60a3      	str	r3, [r4, #8]
 800c176:	89a3      	ldrh	r3, [r4, #12]
 800c178:	0719      	lsls	r1, r3, #28
 800c17a:	d529      	bpl.n	800c1d0 <__swbuf_r+0x70>
 800c17c:	6923      	ldr	r3, [r4, #16]
 800c17e:	b33b      	cbz	r3, 800c1d0 <__swbuf_r+0x70>
 800c180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c184:	b2f6      	uxtb	r6, r6
 800c186:	049a      	lsls	r2, r3, #18
 800c188:	4637      	mov	r7, r6
 800c18a:	d52a      	bpl.n	800c1e2 <__swbuf_r+0x82>
 800c18c:	6823      	ldr	r3, [r4, #0]
 800c18e:	6922      	ldr	r2, [r4, #16]
 800c190:	1a98      	subs	r0, r3, r2
 800c192:	6963      	ldr	r3, [r4, #20]
 800c194:	4283      	cmp	r3, r0
 800c196:	dc04      	bgt.n	800c1a2 <__swbuf_r+0x42>
 800c198:	4621      	mov	r1, r4
 800c19a:	4628      	mov	r0, r5
 800c19c:	f7fd fb04 	bl	80097a8 <_fflush_r>
 800c1a0:	b9e0      	cbnz	r0, 800c1dc <__swbuf_r+0x7c>
 800c1a2:	68a3      	ldr	r3, [r4, #8]
 800c1a4:	3b01      	subs	r3, #1
 800c1a6:	60a3      	str	r3, [r4, #8]
 800c1a8:	6823      	ldr	r3, [r4, #0]
 800c1aa:	1c5a      	adds	r2, r3, #1
 800c1ac:	6022      	str	r2, [r4, #0]
 800c1ae:	701e      	strb	r6, [r3, #0]
 800c1b0:	6962      	ldr	r2, [r4, #20]
 800c1b2:	1c43      	adds	r3, r0, #1
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d004      	beq.n	800c1c2 <__swbuf_r+0x62>
 800c1b8:	89a3      	ldrh	r3, [r4, #12]
 800c1ba:	07db      	lsls	r3, r3, #31
 800c1bc:	d506      	bpl.n	800c1cc <__swbuf_r+0x6c>
 800c1be:	2e0a      	cmp	r6, #10
 800c1c0:	d104      	bne.n	800c1cc <__swbuf_r+0x6c>
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	f7fd faef 	bl	80097a8 <_fflush_r>
 800c1ca:	b938      	cbnz	r0, 800c1dc <__swbuf_r+0x7c>
 800c1cc:	4638      	mov	r0, r7
 800c1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1d0:	4621      	mov	r1, r4
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	f7ff fe80 	bl	800bed8 <__swsetup_r>
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d0d1      	beq.n	800c180 <__swbuf_r+0x20>
 800c1dc:	f04f 37ff 	mov.w	r7, #4294967295
 800c1e0:	e7f4      	b.n	800c1cc <__swbuf_r+0x6c>
 800c1e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c1e6:	81a3      	strh	r3, [r4, #12]
 800c1e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1ee:	6663      	str	r3, [r4, #100]	; 0x64
 800c1f0:	e7cc      	b.n	800c18c <__swbuf_r+0x2c>

0800c1f2 <_raise_r>:
 800c1f2:	291f      	cmp	r1, #31
 800c1f4:	b538      	push	{r3, r4, r5, lr}
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	460d      	mov	r5, r1
 800c1fa:	d904      	bls.n	800c206 <_raise_r+0x14>
 800c1fc:	2316      	movs	r3, #22
 800c1fe:	6003      	str	r3, [r0, #0]
 800c200:	f04f 30ff 	mov.w	r0, #4294967295
 800c204:	bd38      	pop	{r3, r4, r5, pc}
 800c206:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 800c20a:	b112      	cbz	r2, 800c212 <_raise_r+0x20>
 800c20c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c210:	b94b      	cbnz	r3, 800c226 <_raise_r+0x34>
 800c212:	4620      	mov	r0, r4
 800c214:	f000 f852 	bl	800c2bc <_getpid_r>
 800c218:	462a      	mov	r2, r5
 800c21a:	4601      	mov	r1, r0
 800c21c:	4620      	mov	r0, r4
 800c21e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c222:	f000 b839 	b.w	800c298 <_kill_r>
 800c226:	2b01      	cmp	r3, #1
 800c228:	d00a      	beq.n	800c240 <_raise_r+0x4e>
 800c22a:	1c59      	adds	r1, r3, #1
 800c22c:	d103      	bne.n	800c236 <_raise_r+0x44>
 800c22e:	2316      	movs	r3, #22
 800c230:	6003      	str	r3, [r0, #0]
 800c232:	2001      	movs	r0, #1
 800c234:	e7e6      	b.n	800c204 <_raise_r+0x12>
 800c236:	2400      	movs	r4, #0
 800c238:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c23c:	4628      	mov	r0, r5
 800c23e:	4798      	blx	r3
 800c240:	2000      	movs	r0, #0
 800c242:	e7df      	b.n	800c204 <_raise_r+0x12>

0800c244 <raise>:
 800c244:	4b02      	ldr	r3, [pc, #8]	; (800c250 <raise+0xc>)
 800c246:	4601      	mov	r1, r0
 800c248:	6818      	ldr	r0, [r3, #0]
 800c24a:	f7ff bfd2 	b.w	800c1f2 <_raise_r>
 800c24e:	bf00      	nop
 800c250:	20000228 	.word	0x20000228

0800c254 <_fstat_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4d07      	ldr	r5, [pc, #28]	; (800c274 <_fstat_r+0x20>)
 800c258:	2300      	movs	r3, #0
 800c25a:	4604      	mov	r4, r0
 800c25c:	4608      	mov	r0, r1
 800c25e:	4611      	mov	r1, r2
 800c260:	602b      	str	r3, [r5, #0]
 800c262:	f7f5 f85e 	bl	8001322 <_fstat>
 800c266:	1c43      	adds	r3, r0, #1
 800c268:	d102      	bne.n	800c270 <_fstat_r+0x1c>
 800c26a:	682b      	ldr	r3, [r5, #0]
 800c26c:	b103      	cbz	r3, 800c270 <_fstat_r+0x1c>
 800c26e:	6023      	str	r3, [r4, #0]
 800c270:	bd38      	pop	{r3, r4, r5, pc}
 800c272:	bf00      	nop
 800c274:	200024f0 	.word	0x200024f0

0800c278 <_isatty_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	4d06      	ldr	r5, [pc, #24]	; (800c294 <_isatty_r+0x1c>)
 800c27c:	2300      	movs	r3, #0
 800c27e:	4604      	mov	r4, r0
 800c280:	4608      	mov	r0, r1
 800c282:	602b      	str	r3, [r5, #0]
 800c284:	f7f5 f85d 	bl	8001342 <_isatty>
 800c288:	1c43      	adds	r3, r0, #1
 800c28a:	d102      	bne.n	800c292 <_isatty_r+0x1a>
 800c28c:	682b      	ldr	r3, [r5, #0]
 800c28e:	b103      	cbz	r3, 800c292 <_isatty_r+0x1a>
 800c290:	6023      	str	r3, [r4, #0]
 800c292:	bd38      	pop	{r3, r4, r5, pc}
 800c294:	200024f0 	.word	0x200024f0

0800c298 <_kill_r>:
 800c298:	b538      	push	{r3, r4, r5, lr}
 800c29a:	4d07      	ldr	r5, [pc, #28]	; (800c2b8 <_kill_r+0x20>)
 800c29c:	2300      	movs	r3, #0
 800c29e:	4604      	mov	r4, r0
 800c2a0:	4608      	mov	r0, r1
 800c2a2:	4611      	mov	r1, r2
 800c2a4:	602b      	str	r3, [r5, #0]
 800c2a6:	f7f4 ffdd 	bl	8001264 <_kill>
 800c2aa:	1c43      	adds	r3, r0, #1
 800c2ac:	d102      	bne.n	800c2b4 <_kill_r+0x1c>
 800c2ae:	682b      	ldr	r3, [r5, #0]
 800c2b0:	b103      	cbz	r3, 800c2b4 <_kill_r+0x1c>
 800c2b2:	6023      	str	r3, [r4, #0]
 800c2b4:	bd38      	pop	{r3, r4, r5, pc}
 800c2b6:	bf00      	nop
 800c2b8:	200024f0 	.word	0x200024f0

0800c2bc <_getpid_r>:
 800c2bc:	f7f4 bfca 	b.w	8001254 <_getpid>

0800c2c0 <sin>:
 800c2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2c2:	ec53 2b10 	vmov	r2, r3, d0
 800c2c6:	4828      	ldr	r0, [pc, #160]	; (800c368 <sin+0xa8>)
 800c2c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c2cc:	4281      	cmp	r1, r0
 800c2ce:	dc07      	bgt.n	800c2e0 <sin+0x20>
 800c2d0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c360 <sin+0xa0>
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	b005      	add	sp, #20
 800c2d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2dc:	f000 b910 	b.w	800c500 <__kernel_sin>
 800c2e0:	4822      	ldr	r0, [pc, #136]	; (800c36c <sin+0xac>)
 800c2e2:	4281      	cmp	r1, r0
 800c2e4:	dd09      	ble.n	800c2fa <sin+0x3a>
 800c2e6:	ee10 0a10 	vmov	r0, s0
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	f7f3 ffd4 	bl	8000298 <__aeabi_dsub>
 800c2f0:	ec41 0b10 	vmov	d0, r0, r1
 800c2f4:	b005      	add	sp, #20
 800c2f6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2fa:	4668      	mov	r0, sp
 800c2fc:	f000 f9c0 	bl	800c680 <__ieee754_rem_pio2>
 800c300:	f000 0003 	and.w	r0, r0, #3
 800c304:	2801      	cmp	r0, #1
 800c306:	d00c      	beq.n	800c322 <sin+0x62>
 800c308:	2802      	cmp	r0, #2
 800c30a:	d011      	beq.n	800c330 <sin+0x70>
 800c30c:	b9f0      	cbnz	r0, 800c34c <sin+0x8c>
 800c30e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c312:	ed9d 0b00 	vldr	d0, [sp]
 800c316:	2001      	movs	r0, #1
 800c318:	f000 f8f2 	bl	800c500 <__kernel_sin>
 800c31c:	ec51 0b10 	vmov	r0, r1, d0
 800c320:	e7e6      	b.n	800c2f0 <sin+0x30>
 800c322:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c326:	ed9d 0b00 	vldr	d0, [sp]
 800c32a:	f000 f821 	bl	800c370 <__kernel_cos>
 800c32e:	e7f5      	b.n	800c31c <sin+0x5c>
 800c330:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c334:	ed9d 0b00 	vldr	d0, [sp]
 800c338:	2001      	movs	r0, #1
 800c33a:	f000 f8e1 	bl	800c500 <__kernel_sin>
 800c33e:	ec53 2b10 	vmov	r2, r3, d0
 800c342:	ee10 0a10 	vmov	r0, s0
 800c346:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c34a:	e7d1      	b.n	800c2f0 <sin+0x30>
 800c34c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c350:	ed9d 0b00 	vldr	d0, [sp]
 800c354:	f000 f80c 	bl	800c370 <__kernel_cos>
 800c358:	e7f1      	b.n	800c33e <sin+0x7e>
 800c35a:	bf00      	nop
 800c35c:	f3af 8000 	nop.w
	...
 800c368:	3fe921fb 	.word	0x3fe921fb
 800c36c:	7fefffff 	.word	0x7fefffff

0800c370 <__kernel_cos>:
 800c370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c374:	ec57 6b10 	vmov	r6, r7, d0
 800c378:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c37c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c380:	ed8d 1b00 	vstr	d1, [sp]
 800c384:	da07      	bge.n	800c396 <__kernel_cos+0x26>
 800c386:	ee10 0a10 	vmov	r0, s0
 800c38a:	4639      	mov	r1, r7
 800c38c:	f7f4 fbec 	bl	8000b68 <__aeabi_d2iz>
 800c390:	2800      	cmp	r0, #0
 800c392:	f000 8088 	beq.w	800c4a6 <__kernel_cos+0x136>
 800c396:	4632      	mov	r2, r6
 800c398:	463b      	mov	r3, r7
 800c39a:	4630      	mov	r0, r6
 800c39c:	4639      	mov	r1, r7
 800c39e:	f7f4 f933 	bl	8000608 <__aeabi_dmul>
 800c3a2:	4b51      	ldr	r3, [pc, #324]	; (800c4e8 <__kernel_cos+0x178>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	4604      	mov	r4, r0
 800c3a8:	460d      	mov	r5, r1
 800c3aa:	f7f4 f92d 	bl	8000608 <__aeabi_dmul>
 800c3ae:	a340      	add	r3, pc, #256	; (adr r3, 800c4b0 <__kernel_cos+0x140>)
 800c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b4:	4682      	mov	sl, r0
 800c3b6:	468b      	mov	fp, r1
 800c3b8:	4620      	mov	r0, r4
 800c3ba:	4629      	mov	r1, r5
 800c3bc:	f7f4 f924 	bl	8000608 <__aeabi_dmul>
 800c3c0:	a33d      	add	r3, pc, #244	; (adr r3, 800c4b8 <__kernel_cos+0x148>)
 800c3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c6:	f7f3 ff69 	bl	800029c <__adddf3>
 800c3ca:	4622      	mov	r2, r4
 800c3cc:	462b      	mov	r3, r5
 800c3ce:	f7f4 f91b 	bl	8000608 <__aeabi_dmul>
 800c3d2:	a33b      	add	r3, pc, #236	; (adr r3, 800c4c0 <__kernel_cos+0x150>)
 800c3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d8:	f7f3 ff5e 	bl	8000298 <__aeabi_dsub>
 800c3dc:	4622      	mov	r2, r4
 800c3de:	462b      	mov	r3, r5
 800c3e0:	f7f4 f912 	bl	8000608 <__aeabi_dmul>
 800c3e4:	a338      	add	r3, pc, #224	; (adr r3, 800c4c8 <__kernel_cos+0x158>)
 800c3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ea:	f7f3 ff57 	bl	800029c <__adddf3>
 800c3ee:	4622      	mov	r2, r4
 800c3f0:	462b      	mov	r3, r5
 800c3f2:	f7f4 f909 	bl	8000608 <__aeabi_dmul>
 800c3f6:	a336      	add	r3, pc, #216	; (adr r3, 800c4d0 <__kernel_cos+0x160>)
 800c3f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fc:	f7f3 ff4c 	bl	8000298 <__aeabi_dsub>
 800c400:	4622      	mov	r2, r4
 800c402:	462b      	mov	r3, r5
 800c404:	f7f4 f900 	bl	8000608 <__aeabi_dmul>
 800c408:	a333      	add	r3, pc, #204	; (adr r3, 800c4d8 <__kernel_cos+0x168>)
 800c40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c40e:	f7f3 ff45 	bl	800029c <__adddf3>
 800c412:	4622      	mov	r2, r4
 800c414:	462b      	mov	r3, r5
 800c416:	f7f4 f8f7 	bl	8000608 <__aeabi_dmul>
 800c41a:	4622      	mov	r2, r4
 800c41c:	462b      	mov	r3, r5
 800c41e:	f7f4 f8f3 	bl	8000608 <__aeabi_dmul>
 800c422:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c426:	4604      	mov	r4, r0
 800c428:	460d      	mov	r5, r1
 800c42a:	4630      	mov	r0, r6
 800c42c:	4639      	mov	r1, r7
 800c42e:	f7f4 f8eb 	bl	8000608 <__aeabi_dmul>
 800c432:	460b      	mov	r3, r1
 800c434:	4602      	mov	r2, r0
 800c436:	4629      	mov	r1, r5
 800c438:	4620      	mov	r0, r4
 800c43a:	f7f3 ff2d 	bl	8000298 <__aeabi_dsub>
 800c43e:	4b2b      	ldr	r3, [pc, #172]	; (800c4ec <__kernel_cos+0x17c>)
 800c440:	4598      	cmp	r8, r3
 800c442:	4606      	mov	r6, r0
 800c444:	460f      	mov	r7, r1
 800c446:	dc10      	bgt.n	800c46a <__kernel_cos+0xfa>
 800c448:	4602      	mov	r2, r0
 800c44a:	460b      	mov	r3, r1
 800c44c:	4650      	mov	r0, sl
 800c44e:	4659      	mov	r1, fp
 800c450:	f7f3 ff22 	bl	8000298 <__aeabi_dsub>
 800c454:	460b      	mov	r3, r1
 800c456:	4926      	ldr	r1, [pc, #152]	; (800c4f0 <__kernel_cos+0x180>)
 800c458:	4602      	mov	r2, r0
 800c45a:	2000      	movs	r0, #0
 800c45c:	f7f3 ff1c 	bl	8000298 <__aeabi_dsub>
 800c460:	ec41 0b10 	vmov	d0, r0, r1
 800c464:	b003      	add	sp, #12
 800c466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c46a:	4b22      	ldr	r3, [pc, #136]	; (800c4f4 <__kernel_cos+0x184>)
 800c46c:	4920      	ldr	r1, [pc, #128]	; (800c4f0 <__kernel_cos+0x180>)
 800c46e:	4598      	cmp	r8, r3
 800c470:	bfcc      	ite	gt
 800c472:	4d21      	ldrgt	r5, [pc, #132]	; (800c4f8 <__kernel_cos+0x188>)
 800c474:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c478:	2400      	movs	r4, #0
 800c47a:	4622      	mov	r2, r4
 800c47c:	462b      	mov	r3, r5
 800c47e:	2000      	movs	r0, #0
 800c480:	f7f3 ff0a 	bl	8000298 <__aeabi_dsub>
 800c484:	4622      	mov	r2, r4
 800c486:	4680      	mov	r8, r0
 800c488:	4689      	mov	r9, r1
 800c48a:	462b      	mov	r3, r5
 800c48c:	4650      	mov	r0, sl
 800c48e:	4659      	mov	r1, fp
 800c490:	f7f3 ff02 	bl	8000298 <__aeabi_dsub>
 800c494:	4632      	mov	r2, r6
 800c496:	463b      	mov	r3, r7
 800c498:	f7f3 fefe 	bl	8000298 <__aeabi_dsub>
 800c49c:	4602      	mov	r2, r0
 800c49e:	460b      	mov	r3, r1
 800c4a0:	4640      	mov	r0, r8
 800c4a2:	4649      	mov	r1, r9
 800c4a4:	e7da      	b.n	800c45c <__kernel_cos+0xec>
 800c4a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c4e0 <__kernel_cos+0x170>
 800c4aa:	e7db      	b.n	800c464 <__kernel_cos+0xf4>
 800c4ac:	f3af 8000 	nop.w
 800c4b0:	be8838d4 	.word	0xbe8838d4
 800c4b4:	bda8fae9 	.word	0xbda8fae9
 800c4b8:	bdb4b1c4 	.word	0xbdb4b1c4
 800c4bc:	3e21ee9e 	.word	0x3e21ee9e
 800c4c0:	809c52ad 	.word	0x809c52ad
 800c4c4:	3e927e4f 	.word	0x3e927e4f
 800c4c8:	19cb1590 	.word	0x19cb1590
 800c4cc:	3efa01a0 	.word	0x3efa01a0
 800c4d0:	16c15177 	.word	0x16c15177
 800c4d4:	3f56c16c 	.word	0x3f56c16c
 800c4d8:	5555554c 	.word	0x5555554c
 800c4dc:	3fa55555 	.word	0x3fa55555
 800c4e0:	00000000 	.word	0x00000000
 800c4e4:	3ff00000 	.word	0x3ff00000
 800c4e8:	3fe00000 	.word	0x3fe00000
 800c4ec:	3fd33332 	.word	0x3fd33332
 800c4f0:	3ff00000 	.word	0x3ff00000
 800c4f4:	3fe90000 	.word	0x3fe90000
 800c4f8:	3fd20000 	.word	0x3fd20000
 800c4fc:	00000000 	.word	0x00000000

0800c500 <__kernel_sin>:
 800c500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c504:	ed2d 8b04 	vpush	{d8-d9}
 800c508:	eeb0 8a41 	vmov.f32	s16, s2
 800c50c:	eef0 8a61 	vmov.f32	s17, s3
 800c510:	ec55 4b10 	vmov	r4, r5, d0
 800c514:	b083      	sub	sp, #12
 800c516:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c51a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c51e:	9001      	str	r0, [sp, #4]
 800c520:	da06      	bge.n	800c530 <__kernel_sin+0x30>
 800c522:	ee10 0a10 	vmov	r0, s0
 800c526:	4629      	mov	r1, r5
 800c528:	f7f4 fb1e 	bl	8000b68 <__aeabi_d2iz>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	d051      	beq.n	800c5d4 <__kernel_sin+0xd4>
 800c530:	4622      	mov	r2, r4
 800c532:	462b      	mov	r3, r5
 800c534:	4620      	mov	r0, r4
 800c536:	4629      	mov	r1, r5
 800c538:	f7f4 f866 	bl	8000608 <__aeabi_dmul>
 800c53c:	4682      	mov	sl, r0
 800c53e:	468b      	mov	fp, r1
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	4620      	mov	r0, r4
 800c546:	4629      	mov	r1, r5
 800c548:	f7f4 f85e 	bl	8000608 <__aeabi_dmul>
 800c54c:	a341      	add	r3, pc, #260	; (adr r3, 800c654 <__kernel_sin+0x154>)
 800c54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c552:	4680      	mov	r8, r0
 800c554:	4689      	mov	r9, r1
 800c556:	4650      	mov	r0, sl
 800c558:	4659      	mov	r1, fp
 800c55a:	f7f4 f855 	bl	8000608 <__aeabi_dmul>
 800c55e:	a33f      	add	r3, pc, #252	; (adr r3, 800c65c <__kernel_sin+0x15c>)
 800c560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c564:	f7f3 fe98 	bl	8000298 <__aeabi_dsub>
 800c568:	4652      	mov	r2, sl
 800c56a:	465b      	mov	r3, fp
 800c56c:	f7f4 f84c 	bl	8000608 <__aeabi_dmul>
 800c570:	a33c      	add	r3, pc, #240	; (adr r3, 800c664 <__kernel_sin+0x164>)
 800c572:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c576:	f7f3 fe91 	bl	800029c <__adddf3>
 800c57a:	4652      	mov	r2, sl
 800c57c:	465b      	mov	r3, fp
 800c57e:	f7f4 f843 	bl	8000608 <__aeabi_dmul>
 800c582:	a33a      	add	r3, pc, #232	; (adr r3, 800c66c <__kernel_sin+0x16c>)
 800c584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c588:	f7f3 fe86 	bl	8000298 <__aeabi_dsub>
 800c58c:	4652      	mov	r2, sl
 800c58e:	465b      	mov	r3, fp
 800c590:	f7f4 f83a 	bl	8000608 <__aeabi_dmul>
 800c594:	a337      	add	r3, pc, #220	; (adr r3, 800c674 <__kernel_sin+0x174>)
 800c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59a:	f7f3 fe7f 	bl	800029c <__adddf3>
 800c59e:	9b01      	ldr	r3, [sp, #4]
 800c5a0:	4606      	mov	r6, r0
 800c5a2:	460f      	mov	r7, r1
 800c5a4:	b9eb      	cbnz	r3, 800c5e2 <__kernel_sin+0xe2>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	4650      	mov	r0, sl
 800c5ac:	4659      	mov	r1, fp
 800c5ae:	f7f4 f82b 	bl	8000608 <__aeabi_dmul>
 800c5b2:	a325      	add	r3, pc, #148	; (adr r3, 800c648 <__kernel_sin+0x148>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	f7f3 fe6e 	bl	8000298 <__aeabi_dsub>
 800c5bc:	4642      	mov	r2, r8
 800c5be:	464b      	mov	r3, r9
 800c5c0:	f7f4 f822 	bl	8000608 <__aeabi_dmul>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	4620      	mov	r0, r4
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	f7f3 fe66 	bl	800029c <__adddf3>
 800c5d0:	4604      	mov	r4, r0
 800c5d2:	460d      	mov	r5, r1
 800c5d4:	ec45 4b10 	vmov	d0, r4, r5
 800c5d8:	b003      	add	sp, #12
 800c5da:	ecbd 8b04 	vpop	{d8-d9}
 800c5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e2:	4b1b      	ldr	r3, [pc, #108]	; (800c650 <__kernel_sin+0x150>)
 800c5e4:	ec51 0b18 	vmov	r0, r1, d8
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f7f4 f80d 	bl	8000608 <__aeabi_dmul>
 800c5ee:	4632      	mov	r2, r6
 800c5f0:	ec41 0b19 	vmov	d9, r0, r1
 800c5f4:	463b      	mov	r3, r7
 800c5f6:	4640      	mov	r0, r8
 800c5f8:	4649      	mov	r1, r9
 800c5fa:	f7f4 f805 	bl	8000608 <__aeabi_dmul>
 800c5fe:	4602      	mov	r2, r0
 800c600:	460b      	mov	r3, r1
 800c602:	ec51 0b19 	vmov	r0, r1, d9
 800c606:	f7f3 fe47 	bl	8000298 <__aeabi_dsub>
 800c60a:	4652      	mov	r2, sl
 800c60c:	465b      	mov	r3, fp
 800c60e:	f7f3 fffb 	bl	8000608 <__aeabi_dmul>
 800c612:	ec53 2b18 	vmov	r2, r3, d8
 800c616:	f7f3 fe3f 	bl	8000298 <__aeabi_dsub>
 800c61a:	a30b      	add	r3, pc, #44	; (adr r3, 800c648 <__kernel_sin+0x148>)
 800c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c620:	4606      	mov	r6, r0
 800c622:	460f      	mov	r7, r1
 800c624:	4640      	mov	r0, r8
 800c626:	4649      	mov	r1, r9
 800c628:	f7f3 ffee 	bl	8000608 <__aeabi_dmul>
 800c62c:	4602      	mov	r2, r0
 800c62e:	460b      	mov	r3, r1
 800c630:	4630      	mov	r0, r6
 800c632:	4639      	mov	r1, r7
 800c634:	f7f3 fe32 	bl	800029c <__adddf3>
 800c638:	4602      	mov	r2, r0
 800c63a:	460b      	mov	r3, r1
 800c63c:	4620      	mov	r0, r4
 800c63e:	4629      	mov	r1, r5
 800c640:	f7f3 fe2a 	bl	8000298 <__aeabi_dsub>
 800c644:	e7c4      	b.n	800c5d0 <__kernel_sin+0xd0>
 800c646:	bf00      	nop
 800c648:	55555549 	.word	0x55555549
 800c64c:	3fc55555 	.word	0x3fc55555
 800c650:	3fe00000 	.word	0x3fe00000
 800c654:	5acfd57c 	.word	0x5acfd57c
 800c658:	3de5d93a 	.word	0x3de5d93a
 800c65c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c660:	3e5ae5e6 	.word	0x3e5ae5e6
 800c664:	57b1fe7d 	.word	0x57b1fe7d
 800c668:	3ec71de3 	.word	0x3ec71de3
 800c66c:	19c161d5 	.word	0x19c161d5
 800c670:	3f2a01a0 	.word	0x3f2a01a0
 800c674:	1110f8a6 	.word	0x1110f8a6
 800c678:	3f811111 	.word	0x3f811111
 800c67c:	00000000 	.word	0x00000000

0800c680 <__ieee754_rem_pio2>:
 800c680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c684:	ed2d 8b02 	vpush	{d8}
 800c688:	ec55 4b10 	vmov	r4, r5, d0
 800c68c:	4bca      	ldr	r3, [pc, #808]	; (800c9b8 <__ieee754_rem_pio2+0x338>)
 800c68e:	b08b      	sub	sp, #44	; 0x2c
 800c690:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c694:	4598      	cmp	r8, r3
 800c696:	4682      	mov	sl, r0
 800c698:	9502      	str	r5, [sp, #8]
 800c69a:	dc08      	bgt.n	800c6ae <__ieee754_rem_pio2+0x2e>
 800c69c:	2200      	movs	r2, #0
 800c69e:	2300      	movs	r3, #0
 800c6a0:	ed80 0b00 	vstr	d0, [r0]
 800c6a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c6a8:	f04f 0b00 	mov.w	fp, #0
 800c6ac:	e028      	b.n	800c700 <__ieee754_rem_pio2+0x80>
 800c6ae:	4bc3      	ldr	r3, [pc, #780]	; (800c9bc <__ieee754_rem_pio2+0x33c>)
 800c6b0:	4598      	cmp	r8, r3
 800c6b2:	dc78      	bgt.n	800c7a6 <__ieee754_rem_pio2+0x126>
 800c6b4:	9b02      	ldr	r3, [sp, #8]
 800c6b6:	4ec2      	ldr	r6, [pc, #776]	; (800c9c0 <__ieee754_rem_pio2+0x340>)
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	ee10 0a10 	vmov	r0, s0
 800c6be:	a3b0      	add	r3, pc, #704	; (adr r3, 800c980 <__ieee754_rem_pio2+0x300>)
 800c6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c4:	4629      	mov	r1, r5
 800c6c6:	dd39      	ble.n	800c73c <__ieee754_rem_pio2+0xbc>
 800c6c8:	f7f3 fde6 	bl	8000298 <__aeabi_dsub>
 800c6cc:	45b0      	cmp	r8, r6
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	460d      	mov	r5, r1
 800c6d2:	d01b      	beq.n	800c70c <__ieee754_rem_pio2+0x8c>
 800c6d4:	a3ac      	add	r3, pc, #688	; (adr r3, 800c988 <__ieee754_rem_pio2+0x308>)
 800c6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6da:	f7f3 fddd 	bl	8000298 <__aeabi_dsub>
 800c6de:	4602      	mov	r2, r0
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	e9ca 2300 	strd	r2, r3, [sl]
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	4629      	mov	r1, r5
 800c6ea:	f7f3 fdd5 	bl	8000298 <__aeabi_dsub>
 800c6ee:	a3a6      	add	r3, pc, #664	; (adr r3, 800c988 <__ieee754_rem_pio2+0x308>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	f7f3 fdd0 	bl	8000298 <__aeabi_dsub>
 800c6f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c6fc:	f04f 0b01 	mov.w	fp, #1
 800c700:	4658      	mov	r0, fp
 800c702:	b00b      	add	sp, #44	; 0x2c
 800c704:	ecbd 8b02 	vpop	{d8}
 800c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c70c:	a3a0      	add	r3, pc, #640	; (adr r3, 800c990 <__ieee754_rem_pio2+0x310>)
 800c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c712:	f7f3 fdc1 	bl	8000298 <__aeabi_dsub>
 800c716:	a3a0      	add	r3, pc, #640	; (adr r3, 800c998 <__ieee754_rem_pio2+0x318>)
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	4604      	mov	r4, r0
 800c71e:	460d      	mov	r5, r1
 800c720:	f7f3 fdba 	bl	8000298 <__aeabi_dsub>
 800c724:	4602      	mov	r2, r0
 800c726:	460b      	mov	r3, r1
 800c728:	e9ca 2300 	strd	r2, r3, [sl]
 800c72c:	4620      	mov	r0, r4
 800c72e:	4629      	mov	r1, r5
 800c730:	f7f3 fdb2 	bl	8000298 <__aeabi_dsub>
 800c734:	a398      	add	r3, pc, #608	; (adr r3, 800c998 <__ieee754_rem_pio2+0x318>)
 800c736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c73a:	e7db      	b.n	800c6f4 <__ieee754_rem_pio2+0x74>
 800c73c:	f7f3 fdae 	bl	800029c <__adddf3>
 800c740:	45b0      	cmp	r8, r6
 800c742:	4604      	mov	r4, r0
 800c744:	460d      	mov	r5, r1
 800c746:	d016      	beq.n	800c776 <__ieee754_rem_pio2+0xf6>
 800c748:	a38f      	add	r3, pc, #572	; (adr r3, 800c988 <__ieee754_rem_pio2+0x308>)
 800c74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74e:	f7f3 fda5 	bl	800029c <__adddf3>
 800c752:	4602      	mov	r2, r0
 800c754:	460b      	mov	r3, r1
 800c756:	e9ca 2300 	strd	r2, r3, [sl]
 800c75a:	4620      	mov	r0, r4
 800c75c:	4629      	mov	r1, r5
 800c75e:	f7f3 fd9b 	bl	8000298 <__aeabi_dsub>
 800c762:	a389      	add	r3, pc, #548	; (adr r3, 800c988 <__ieee754_rem_pio2+0x308>)
 800c764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c768:	f7f3 fd98 	bl	800029c <__adddf3>
 800c76c:	f04f 3bff 	mov.w	fp, #4294967295
 800c770:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c774:	e7c4      	b.n	800c700 <__ieee754_rem_pio2+0x80>
 800c776:	a386      	add	r3, pc, #536	; (adr r3, 800c990 <__ieee754_rem_pio2+0x310>)
 800c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77c:	f7f3 fd8e 	bl	800029c <__adddf3>
 800c780:	a385      	add	r3, pc, #532	; (adr r3, 800c998 <__ieee754_rem_pio2+0x318>)
 800c782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c786:	4604      	mov	r4, r0
 800c788:	460d      	mov	r5, r1
 800c78a:	f7f3 fd87 	bl	800029c <__adddf3>
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	e9ca 2300 	strd	r2, r3, [sl]
 800c796:	4620      	mov	r0, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	f7f3 fd7d 	bl	8000298 <__aeabi_dsub>
 800c79e:	a37e      	add	r3, pc, #504	; (adr r3, 800c998 <__ieee754_rem_pio2+0x318>)
 800c7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a4:	e7e0      	b.n	800c768 <__ieee754_rem_pio2+0xe8>
 800c7a6:	4b87      	ldr	r3, [pc, #540]	; (800c9c4 <__ieee754_rem_pio2+0x344>)
 800c7a8:	4598      	cmp	r8, r3
 800c7aa:	f300 80d8 	bgt.w	800c95e <__ieee754_rem_pio2+0x2de>
 800c7ae:	f000 f96d 	bl	800ca8c <fabs>
 800c7b2:	ec55 4b10 	vmov	r4, r5, d0
 800c7b6:	ee10 0a10 	vmov	r0, s0
 800c7ba:	a379      	add	r3, pc, #484	; (adr r3, 800c9a0 <__ieee754_rem_pio2+0x320>)
 800c7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	f7f3 ff21 	bl	8000608 <__aeabi_dmul>
 800c7c6:	4b80      	ldr	r3, [pc, #512]	; (800c9c8 <__ieee754_rem_pio2+0x348>)
 800c7c8:	2200      	movs	r2, #0
 800c7ca:	f7f3 fd67 	bl	800029c <__adddf3>
 800c7ce:	f7f4 f9cb 	bl	8000b68 <__aeabi_d2iz>
 800c7d2:	4683      	mov	fp, r0
 800c7d4:	f7f3 feae 	bl	8000534 <__aeabi_i2d>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	460b      	mov	r3, r1
 800c7dc:	ec43 2b18 	vmov	d8, r2, r3
 800c7e0:	a367      	add	r3, pc, #412	; (adr r3, 800c980 <__ieee754_rem_pio2+0x300>)
 800c7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e6:	f7f3 ff0f 	bl	8000608 <__aeabi_dmul>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	460b      	mov	r3, r1
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	4629      	mov	r1, r5
 800c7f2:	f7f3 fd51 	bl	8000298 <__aeabi_dsub>
 800c7f6:	a364      	add	r3, pc, #400	; (adr r3, 800c988 <__ieee754_rem_pio2+0x308>)
 800c7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	460f      	mov	r7, r1
 800c800:	ec51 0b18 	vmov	r0, r1, d8
 800c804:	f7f3 ff00 	bl	8000608 <__aeabi_dmul>
 800c808:	f1bb 0f1f 	cmp.w	fp, #31
 800c80c:	4604      	mov	r4, r0
 800c80e:	460d      	mov	r5, r1
 800c810:	dc0d      	bgt.n	800c82e <__ieee754_rem_pio2+0x1ae>
 800c812:	4b6e      	ldr	r3, [pc, #440]	; (800c9cc <__ieee754_rem_pio2+0x34c>)
 800c814:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c81c:	4543      	cmp	r3, r8
 800c81e:	d006      	beq.n	800c82e <__ieee754_rem_pio2+0x1ae>
 800c820:	4622      	mov	r2, r4
 800c822:	462b      	mov	r3, r5
 800c824:	4630      	mov	r0, r6
 800c826:	4639      	mov	r1, r7
 800c828:	f7f3 fd36 	bl	8000298 <__aeabi_dsub>
 800c82c:	e00e      	b.n	800c84c <__ieee754_rem_pio2+0x1cc>
 800c82e:	462b      	mov	r3, r5
 800c830:	4622      	mov	r2, r4
 800c832:	4630      	mov	r0, r6
 800c834:	4639      	mov	r1, r7
 800c836:	f7f3 fd2f 	bl	8000298 <__aeabi_dsub>
 800c83a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c83e:	9303      	str	r3, [sp, #12]
 800c840:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c844:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c848:	2b10      	cmp	r3, #16
 800c84a:	dc02      	bgt.n	800c852 <__ieee754_rem_pio2+0x1d2>
 800c84c:	e9ca 0100 	strd	r0, r1, [sl]
 800c850:	e039      	b.n	800c8c6 <__ieee754_rem_pio2+0x246>
 800c852:	a34f      	add	r3, pc, #316	; (adr r3, 800c990 <__ieee754_rem_pio2+0x310>)
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	ec51 0b18 	vmov	r0, r1, d8
 800c85c:	f7f3 fed4 	bl	8000608 <__aeabi_dmul>
 800c860:	4604      	mov	r4, r0
 800c862:	460d      	mov	r5, r1
 800c864:	4602      	mov	r2, r0
 800c866:	460b      	mov	r3, r1
 800c868:	4630      	mov	r0, r6
 800c86a:	4639      	mov	r1, r7
 800c86c:	f7f3 fd14 	bl	8000298 <__aeabi_dsub>
 800c870:	4602      	mov	r2, r0
 800c872:	460b      	mov	r3, r1
 800c874:	4680      	mov	r8, r0
 800c876:	4689      	mov	r9, r1
 800c878:	4630      	mov	r0, r6
 800c87a:	4639      	mov	r1, r7
 800c87c:	f7f3 fd0c 	bl	8000298 <__aeabi_dsub>
 800c880:	4622      	mov	r2, r4
 800c882:	462b      	mov	r3, r5
 800c884:	f7f3 fd08 	bl	8000298 <__aeabi_dsub>
 800c888:	a343      	add	r3, pc, #268	; (adr r3, 800c998 <__ieee754_rem_pio2+0x318>)
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	4604      	mov	r4, r0
 800c890:	460d      	mov	r5, r1
 800c892:	ec51 0b18 	vmov	r0, r1, d8
 800c896:	f7f3 feb7 	bl	8000608 <__aeabi_dmul>
 800c89a:	4622      	mov	r2, r4
 800c89c:	462b      	mov	r3, r5
 800c89e:	f7f3 fcfb 	bl	8000298 <__aeabi_dsub>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4604      	mov	r4, r0
 800c8a8:	460d      	mov	r5, r1
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	4649      	mov	r1, r9
 800c8ae:	f7f3 fcf3 	bl	8000298 <__aeabi_dsub>
 800c8b2:	9a03      	ldr	r2, [sp, #12]
 800c8b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c8b8:	1ad3      	subs	r3, r2, r3
 800c8ba:	2b31      	cmp	r3, #49	; 0x31
 800c8bc:	dc24      	bgt.n	800c908 <__ieee754_rem_pio2+0x288>
 800c8be:	e9ca 0100 	strd	r0, r1, [sl]
 800c8c2:	4646      	mov	r6, r8
 800c8c4:	464f      	mov	r7, r9
 800c8c6:	e9da 8900 	ldrd	r8, r9, [sl]
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	4642      	mov	r2, r8
 800c8ce:	464b      	mov	r3, r9
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	f7f3 fce1 	bl	8000298 <__aeabi_dsub>
 800c8d6:	462b      	mov	r3, r5
 800c8d8:	4622      	mov	r2, r4
 800c8da:	f7f3 fcdd 	bl	8000298 <__aeabi_dsub>
 800c8de:	9b02      	ldr	r3, [sp, #8]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c8e6:	f6bf af0b 	bge.w	800c700 <__ieee754_rem_pio2+0x80>
 800c8ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c8ee:	f8ca 3004 	str.w	r3, [sl, #4]
 800c8f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8f6:	f8ca 8000 	str.w	r8, [sl]
 800c8fa:	f8ca 0008 	str.w	r0, [sl, #8]
 800c8fe:	f8ca 300c 	str.w	r3, [sl, #12]
 800c902:	f1cb 0b00 	rsb	fp, fp, #0
 800c906:	e6fb      	b.n	800c700 <__ieee754_rem_pio2+0x80>
 800c908:	a327      	add	r3, pc, #156	; (adr r3, 800c9a8 <__ieee754_rem_pio2+0x328>)
 800c90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90e:	ec51 0b18 	vmov	r0, r1, d8
 800c912:	f7f3 fe79 	bl	8000608 <__aeabi_dmul>
 800c916:	4604      	mov	r4, r0
 800c918:	460d      	mov	r5, r1
 800c91a:	4602      	mov	r2, r0
 800c91c:	460b      	mov	r3, r1
 800c91e:	4640      	mov	r0, r8
 800c920:	4649      	mov	r1, r9
 800c922:	f7f3 fcb9 	bl	8000298 <__aeabi_dsub>
 800c926:	4602      	mov	r2, r0
 800c928:	460b      	mov	r3, r1
 800c92a:	4606      	mov	r6, r0
 800c92c:	460f      	mov	r7, r1
 800c92e:	4640      	mov	r0, r8
 800c930:	4649      	mov	r1, r9
 800c932:	f7f3 fcb1 	bl	8000298 <__aeabi_dsub>
 800c936:	4622      	mov	r2, r4
 800c938:	462b      	mov	r3, r5
 800c93a:	f7f3 fcad 	bl	8000298 <__aeabi_dsub>
 800c93e:	a31c      	add	r3, pc, #112	; (adr r3, 800c9b0 <__ieee754_rem_pio2+0x330>)
 800c940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c944:	4604      	mov	r4, r0
 800c946:	460d      	mov	r5, r1
 800c948:	ec51 0b18 	vmov	r0, r1, d8
 800c94c:	f7f3 fe5c 	bl	8000608 <__aeabi_dmul>
 800c950:	4622      	mov	r2, r4
 800c952:	462b      	mov	r3, r5
 800c954:	f7f3 fca0 	bl	8000298 <__aeabi_dsub>
 800c958:	4604      	mov	r4, r0
 800c95a:	460d      	mov	r5, r1
 800c95c:	e760      	b.n	800c820 <__ieee754_rem_pio2+0x1a0>
 800c95e:	4b1c      	ldr	r3, [pc, #112]	; (800c9d0 <__ieee754_rem_pio2+0x350>)
 800c960:	4598      	cmp	r8, r3
 800c962:	dd37      	ble.n	800c9d4 <__ieee754_rem_pio2+0x354>
 800c964:	ee10 2a10 	vmov	r2, s0
 800c968:	462b      	mov	r3, r5
 800c96a:	4620      	mov	r0, r4
 800c96c:	4629      	mov	r1, r5
 800c96e:	f7f3 fc93 	bl	8000298 <__aeabi_dsub>
 800c972:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c976:	e9ca 0100 	strd	r0, r1, [sl]
 800c97a:	e695      	b.n	800c6a8 <__ieee754_rem_pio2+0x28>
 800c97c:	f3af 8000 	nop.w
 800c980:	54400000 	.word	0x54400000
 800c984:	3ff921fb 	.word	0x3ff921fb
 800c988:	1a626331 	.word	0x1a626331
 800c98c:	3dd0b461 	.word	0x3dd0b461
 800c990:	1a600000 	.word	0x1a600000
 800c994:	3dd0b461 	.word	0x3dd0b461
 800c998:	2e037073 	.word	0x2e037073
 800c99c:	3ba3198a 	.word	0x3ba3198a
 800c9a0:	6dc9c883 	.word	0x6dc9c883
 800c9a4:	3fe45f30 	.word	0x3fe45f30
 800c9a8:	2e000000 	.word	0x2e000000
 800c9ac:	3ba3198a 	.word	0x3ba3198a
 800c9b0:	252049c1 	.word	0x252049c1
 800c9b4:	397b839a 	.word	0x397b839a
 800c9b8:	3fe921fb 	.word	0x3fe921fb
 800c9bc:	4002d97b 	.word	0x4002d97b
 800c9c0:	3ff921fb 	.word	0x3ff921fb
 800c9c4:	413921fb 	.word	0x413921fb
 800c9c8:	3fe00000 	.word	0x3fe00000
 800c9cc:	0800d74c 	.word	0x0800d74c
 800c9d0:	7fefffff 	.word	0x7fefffff
 800c9d4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800c9d8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800c9dc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	460d      	mov	r5, r1
 800c9e4:	f7f4 f8c0 	bl	8000b68 <__aeabi_d2iz>
 800c9e8:	f7f3 fda4 	bl	8000534 <__aeabi_i2d>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	4629      	mov	r1, r5
 800c9f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c9f8:	f7f3 fc4e 	bl	8000298 <__aeabi_dsub>
 800c9fc:	4b21      	ldr	r3, [pc, #132]	; (800ca84 <__ieee754_rem_pio2+0x404>)
 800c9fe:	2200      	movs	r2, #0
 800ca00:	f7f3 fe02 	bl	8000608 <__aeabi_dmul>
 800ca04:	460d      	mov	r5, r1
 800ca06:	4604      	mov	r4, r0
 800ca08:	f7f4 f8ae 	bl	8000b68 <__aeabi_d2iz>
 800ca0c:	f7f3 fd92 	bl	8000534 <__aeabi_i2d>
 800ca10:	4602      	mov	r2, r0
 800ca12:	460b      	mov	r3, r1
 800ca14:	4620      	mov	r0, r4
 800ca16:	4629      	mov	r1, r5
 800ca18:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ca1c:	f7f3 fc3c 	bl	8000298 <__aeabi_dsub>
 800ca20:	4b18      	ldr	r3, [pc, #96]	; (800ca84 <__ieee754_rem_pio2+0x404>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	f7f3 fdf0 	bl	8000608 <__aeabi_dmul>
 800ca28:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca2c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800ca30:	2703      	movs	r7, #3
 800ca32:	2400      	movs	r4, #0
 800ca34:	2500      	movs	r5, #0
 800ca36:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800ca3a:	4622      	mov	r2, r4
 800ca3c:	462b      	mov	r3, r5
 800ca3e:	46b9      	mov	r9, r7
 800ca40:	3f01      	subs	r7, #1
 800ca42:	f7f4 f849 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca46:	2800      	cmp	r0, #0
 800ca48:	d1f5      	bne.n	800ca36 <__ieee754_rem_pio2+0x3b6>
 800ca4a:	4b0f      	ldr	r3, [pc, #60]	; (800ca88 <__ieee754_rem_pio2+0x408>)
 800ca4c:	9301      	str	r3, [sp, #4]
 800ca4e:	2302      	movs	r3, #2
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	4632      	mov	r2, r6
 800ca54:	464b      	mov	r3, r9
 800ca56:	4651      	mov	r1, sl
 800ca58:	a804      	add	r0, sp, #16
 800ca5a:	f000 f821 	bl	800caa0 <__kernel_rem_pio2>
 800ca5e:	9b02      	ldr	r3, [sp, #8]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	4683      	mov	fp, r0
 800ca64:	f6bf ae4c 	bge.w	800c700 <__ieee754_rem_pio2+0x80>
 800ca68:	e9da 2100 	ldrd	r2, r1, [sl]
 800ca6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca70:	e9ca 2300 	strd	r2, r3, [sl]
 800ca74:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ca78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca7c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ca80:	e73f      	b.n	800c902 <__ieee754_rem_pio2+0x282>
 800ca82:	bf00      	nop
 800ca84:	41700000 	.word	0x41700000
 800ca88:	0800d7cc 	.word	0x0800d7cc

0800ca8c <fabs>:
 800ca8c:	ec51 0b10 	vmov	r0, r1, d0
 800ca90:	ee10 2a10 	vmov	r2, s0
 800ca94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca98:	ec43 2b10 	vmov	d0, r2, r3
 800ca9c:	4770      	bx	lr
	...

0800caa0 <__kernel_rem_pio2>:
 800caa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa4:	ed2d 8b02 	vpush	{d8}
 800caa8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800caac:	f112 0f14 	cmn.w	r2, #20
 800cab0:	9306      	str	r3, [sp, #24]
 800cab2:	9104      	str	r1, [sp, #16]
 800cab4:	4bc2      	ldr	r3, [pc, #776]	; (800cdc0 <__kernel_rem_pio2+0x320>)
 800cab6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800cab8:	9009      	str	r0, [sp, #36]	; 0x24
 800caba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	9b06      	ldr	r3, [sp, #24]
 800cac2:	f103 33ff 	add.w	r3, r3, #4294967295
 800cac6:	bfa8      	it	ge
 800cac8:	1ed4      	subge	r4, r2, #3
 800caca:	9305      	str	r3, [sp, #20]
 800cacc:	bfb2      	itee	lt
 800cace:	2400      	movlt	r4, #0
 800cad0:	2318      	movge	r3, #24
 800cad2:	fb94 f4f3 	sdivge	r4, r4, r3
 800cad6:	f06f 0317 	mvn.w	r3, #23
 800cada:	fb04 3303 	mla	r3, r4, r3, r3
 800cade:	eb03 0a02 	add.w	sl, r3, r2
 800cae2:	9b00      	ldr	r3, [sp, #0]
 800cae4:	9a05      	ldr	r2, [sp, #20]
 800cae6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800cdb0 <__kernel_rem_pio2+0x310>
 800caea:	eb03 0802 	add.w	r8, r3, r2
 800caee:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800caf0:	1aa7      	subs	r7, r4, r2
 800caf2:	ae20      	add	r6, sp, #128	; 0x80
 800caf4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800caf8:	2500      	movs	r5, #0
 800cafa:	4545      	cmp	r5, r8
 800cafc:	dd13      	ble.n	800cb26 <__kernel_rem_pio2+0x86>
 800cafe:	9b06      	ldr	r3, [sp, #24]
 800cb00:	aa20      	add	r2, sp, #128	; 0x80
 800cb02:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cb06:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800cb0a:	f04f 0800 	mov.w	r8, #0
 800cb0e:	9b00      	ldr	r3, [sp, #0]
 800cb10:	4598      	cmp	r8, r3
 800cb12:	dc31      	bgt.n	800cb78 <__kernel_rem_pio2+0xd8>
 800cb14:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800cdb0 <__kernel_rem_pio2+0x310>
 800cb18:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cb1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb20:	462f      	mov	r7, r5
 800cb22:	2600      	movs	r6, #0
 800cb24:	e01b      	b.n	800cb5e <__kernel_rem_pio2+0xbe>
 800cb26:	42ef      	cmn	r7, r5
 800cb28:	d407      	bmi.n	800cb3a <__kernel_rem_pio2+0x9a>
 800cb2a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cb2e:	f7f3 fd01 	bl	8000534 <__aeabi_i2d>
 800cb32:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cb36:	3501      	adds	r5, #1
 800cb38:	e7df      	b.n	800cafa <__kernel_rem_pio2+0x5a>
 800cb3a:	ec51 0b18 	vmov	r0, r1, d8
 800cb3e:	e7f8      	b.n	800cb32 <__kernel_rem_pio2+0x92>
 800cb40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb44:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cb48:	f7f3 fd5e 	bl	8000608 <__aeabi_dmul>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	460b      	mov	r3, r1
 800cb50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb54:	f7f3 fba2 	bl	800029c <__adddf3>
 800cb58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb5c:	3601      	adds	r6, #1
 800cb5e:	9b05      	ldr	r3, [sp, #20]
 800cb60:	429e      	cmp	r6, r3
 800cb62:	f1a7 0708 	sub.w	r7, r7, #8
 800cb66:	ddeb      	ble.n	800cb40 <__kernel_rem_pio2+0xa0>
 800cb68:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb6c:	f108 0801 	add.w	r8, r8, #1
 800cb70:	ecab 7b02 	vstmia	fp!, {d7}
 800cb74:	3508      	adds	r5, #8
 800cb76:	e7ca      	b.n	800cb0e <__kernel_rem_pio2+0x6e>
 800cb78:	9b00      	ldr	r3, [sp, #0]
 800cb7a:	aa0c      	add	r2, sp, #48	; 0x30
 800cb7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb80:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb82:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cb84:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cb88:	9c00      	ldr	r4, [sp, #0]
 800cb8a:	930a      	str	r3, [sp, #40]	; 0x28
 800cb8c:	00e3      	lsls	r3, r4, #3
 800cb8e:	9308      	str	r3, [sp, #32]
 800cb90:	ab98      	add	r3, sp, #608	; 0x260
 800cb92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb96:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800cb9a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800cb9e:	ab70      	add	r3, sp, #448	; 0x1c0
 800cba0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800cba4:	46c3      	mov	fp, r8
 800cba6:	46a1      	mov	r9, r4
 800cba8:	f1b9 0f00 	cmp.w	r9, #0
 800cbac:	f1a5 0508 	sub.w	r5, r5, #8
 800cbb0:	dc77      	bgt.n	800cca2 <__kernel_rem_pio2+0x202>
 800cbb2:	ec47 6b10 	vmov	d0, r6, r7
 800cbb6:	4650      	mov	r0, sl
 800cbb8:	f000 fac2 	bl	800d140 <scalbn>
 800cbbc:	ec57 6b10 	vmov	r6, r7, d0
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cbc6:	ee10 0a10 	vmov	r0, s0
 800cbca:	4639      	mov	r1, r7
 800cbcc:	f7f3 fd1c 	bl	8000608 <__aeabi_dmul>
 800cbd0:	ec41 0b10 	vmov	d0, r0, r1
 800cbd4:	f000 fb34 	bl	800d240 <floor>
 800cbd8:	4b7a      	ldr	r3, [pc, #488]	; (800cdc4 <__kernel_rem_pio2+0x324>)
 800cbda:	ec51 0b10 	vmov	r0, r1, d0
 800cbde:	2200      	movs	r2, #0
 800cbe0:	f7f3 fd12 	bl	8000608 <__aeabi_dmul>
 800cbe4:	4602      	mov	r2, r0
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	4630      	mov	r0, r6
 800cbea:	4639      	mov	r1, r7
 800cbec:	f7f3 fb54 	bl	8000298 <__aeabi_dsub>
 800cbf0:	460f      	mov	r7, r1
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	f7f3 ffb8 	bl	8000b68 <__aeabi_d2iz>
 800cbf8:	9002      	str	r0, [sp, #8]
 800cbfa:	f7f3 fc9b 	bl	8000534 <__aeabi_i2d>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	4630      	mov	r0, r6
 800cc04:	4639      	mov	r1, r7
 800cc06:	f7f3 fb47 	bl	8000298 <__aeabi_dsub>
 800cc0a:	f1ba 0f00 	cmp.w	sl, #0
 800cc0e:	4606      	mov	r6, r0
 800cc10:	460f      	mov	r7, r1
 800cc12:	dd6d      	ble.n	800ccf0 <__kernel_rem_pio2+0x250>
 800cc14:	1e61      	subs	r1, r4, #1
 800cc16:	ab0c      	add	r3, sp, #48	; 0x30
 800cc18:	9d02      	ldr	r5, [sp, #8]
 800cc1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc1e:	f1ca 0018 	rsb	r0, sl, #24
 800cc22:	fa43 f200 	asr.w	r2, r3, r0
 800cc26:	4415      	add	r5, r2
 800cc28:	4082      	lsls	r2, r0
 800cc2a:	1a9b      	subs	r3, r3, r2
 800cc2c:	aa0c      	add	r2, sp, #48	; 0x30
 800cc2e:	9502      	str	r5, [sp, #8]
 800cc30:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cc34:	f1ca 0217 	rsb	r2, sl, #23
 800cc38:	fa43 fb02 	asr.w	fp, r3, r2
 800cc3c:	f1bb 0f00 	cmp.w	fp, #0
 800cc40:	dd65      	ble.n	800cd0e <__kernel_rem_pio2+0x26e>
 800cc42:	9b02      	ldr	r3, [sp, #8]
 800cc44:	2200      	movs	r2, #0
 800cc46:	3301      	adds	r3, #1
 800cc48:	9302      	str	r3, [sp, #8]
 800cc4a:	4615      	mov	r5, r2
 800cc4c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cc50:	4294      	cmp	r4, r2
 800cc52:	f300 809f 	bgt.w	800cd94 <__kernel_rem_pio2+0x2f4>
 800cc56:	f1ba 0f00 	cmp.w	sl, #0
 800cc5a:	dd07      	ble.n	800cc6c <__kernel_rem_pio2+0x1cc>
 800cc5c:	f1ba 0f01 	cmp.w	sl, #1
 800cc60:	f000 80c1 	beq.w	800cde6 <__kernel_rem_pio2+0x346>
 800cc64:	f1ba 0f02 	cmp.w	sl, #2
 800cc68:	f000 80c7 	beq.w	800cdfa <__kernel_rem_pio2+0x35a>
 800cc6c:	f1bb 0f02 	cmp.w	fp, #2
 800cc70:	d14d      	bne.n	800cd0e <__kernel_rem_pio2+0x26e>
 800cc72:	4632      	mov	r2, r6
 800cc74:	463b      	mov	r3, r7
 800cc76:	4954      	ldr	r1, [pc, #336]	; (800cdc8 <__kernel_rem_pio2+0x328>)
 800cc78:	2000      	movs	r0, #0
 800cc7a:	f7f3 fb0d 	bl	8000298 <__aeabi_dsub>
 800cc7e:	4606      	mov	r6, r0
 800cc80:	460f      	mov	r7, r1
 800cc82:	2d00      	cmp	r5, #0
 800cc84:	d043      	beq.n	800cd0e <__kernel_rem_pio2+0x26e>
 800cc86:	4650      	mov	r0, sl
 800cc88:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800cdb8 <__kernel_rem_pio2+0x318>
 800cc8c:	f000 fa58 	bl	800d140 <scalbn>
 800cc90:	4630      	mov	r0, r6
 800cc92:	4639      	mov	r1, r7
 800cc94:	ec53 2b10 	vmov	r2, r3, d0
 800cc98:	f7f3 fafe 	bl	8000298 <__aeabi_dsub>
 800cc9c:	4606      	mov	r6, r0
 800cc9e:	460f      	mov	r7, r1
 800cca0:	e035      	b.n	800cd0e <__kernel_rem_pio2+0x26e>
 800cca2:	4b4a      	ldr	r3, [pc, #296]	; (800cdcc <__kernel_rem_pio2+0x32c>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	4630      	mov	r0, r6
 800cca8:	4639      	mov	r1, r7
 800ccaa:	f7f3 fcad 	bl	8000608 <__aeabi_dmul>
 800ccae:	f7f3 ff5b 	bl	8000b68 <__aeabi_d2iz>
 800ccb2:	f7f3 fc3f 	bl	8000534 <__aeabi_i2d>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	460b      	mov	r3, r1
 800ccba:	ec43 2b18 	vmov	d8, r2, r3
 800ccbe:	4b44      	ldr	r3, [pc, #272]	; (800cdd0 <__kernel_rem_pio2+0x330>)
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f7f3 fca1 	bl	8000608 <__aeabi_dmul>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	4630      	mov	r0, r6
 800cccc:	4639      	mov	r1, r7
 800ccce:	f7f3 fae3 	bl	8000298 <__aeabi_dsub>
 800ccd2:	f7f3 ff49 	bl	8000b68 <__aeabi_d2iz>
 800ccd6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ccda:	f84b 0b04 	str.w	r0, [fp], #4
 800ccde:	ec51 0b18 	vmov	r0, r1, d8
 800cce2:	f7f3 fadb 	bl	800029c <__adddf3>
 800cce6:	f109 39ff 	add.w	r9, r9, #4294967295
 800ccea:	4606      	mov	r6, r0
 800ccec:	460f      	mov	r7, r1
 800ccee:	e75b      	b.n	800cba8 <__kernel_rem_pio2+0x108>
 800ccf0:	d106      	bne.n	800cd00 <__kernel_rem_pio2+0x260>
 800ccf2:	1e63      	subs	r3, r4, #1
 800ccf4:	aa0c      	add	r2, sp, #48	; 0x30
 800ccf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccfa:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800ccfe:	e79d      	b.n	800cc3c <__kernel_rem_pio2+0x19c>
 800cd00:	4b34      	ldr	r3, [pc, #208]	; (800cdd4 <__kernel_rem_pio2+0x334>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	f7f3 ff06 	bl	8000b14 <__aeabi_dcmpge>
 800cd08:	2800      	cmp	r0, #0
 800cd0a:	d140      	bne.n	800cd8e <__kernel_rem_pio2+0x2ee>
 800cd0c:	4683      	mov	fp, r0
 800cd0e:	2200      	movs	r2, #0
 800cd10:	2300      	movs	r3, #0
 800cd12:	4630      	mov	r0, r6
 800cd14:	4639      	mov	r1, r7
 800cd16:	f7f3 fedf 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	f000 80c1 	beq.w	800cea2 <__kernel_rem_pio2+0x402>
 800cd20:	1e65      	subs	r5, r4, #1
 800cd22:	462b      	mov	r3, r5
 800cd24:	2200      	movs	r2, #0
 800cd26:	9900      	ldr	r1, [sp, #0]
 800cd28:	428b      	cmp	r3, r1
 800cd2a:	da6d      	bge.n	800ce08 <__kernel_rem_pio2+0x368>
 800cd2c:	2a00      	cmp	r2, #0
 800cd2e:	f000 808a 	beq.w	800ce46 <__kernel_rem_pio2+0x3a6>
 800cd32:	ab0c      	add	r3, sp, #48	; 0x30
 800cd34:	f1aa 0a18 	sub.w	sl, sl, #24
 800cd38:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	f000 80ae 	beq.w	800ce9e <__kernel_rem_pio2+0x3fe>
 800cd42:	4650      	mov	r0, sl
 800cd44:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800cdb8 <__kernel_rem_pio2+0x318>
 800cd48:	f000 f9fa 	bl	800d140 <scalbn>
 800cd4c:	1c6b      	adds	r3, r5, #1
 800cd4e:	00da      	lsls	r2, r3, #3
 800cd50:	9205      	str	r2, [sp, #20]
 800cd52:	ec57 6b10 	vmov	r6, r7, d0
 800cd56:	aa70      	add	r2, sp, #448	; 0x1c0
 800cd58:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800cdcc <__kernel_rem_pio2+0x32c>
 800cd5c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800cd60:	462c      	mov	r4, r5
 800cd62:	f04f 0800 	mov.w	r8, #0
 800cd66:	2c00      	cmp	r4, #0
 800cd68:	f280 80d4 	bge.w	800cf14 <__kernel_rem_pio2+0x474>
 800cd6c:	462c      	mov	r4, r5
 800cd6e:	2c00      	cmp	r4, #0
 800cd70:	f2c0 8102 	blt.w	800cf78 <__kernel_rem_pio2+0x4d8>
 800cd74:	4b18      	ldr	r3, [pc, #96]	; (800cdd8 <__kernel_rem_pio2+0x338>)
 800cd76:	461e      	mov	r6, r3
 800cd78:	ab70      	add	r3, sp, #448	; 0x1c0
 800cd7a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800cd7e:	1b2b      	subs	r3, r5, r4
 800cd80:	f04f 0900 	mov.w	r9, #0
 800cd84:	f04f 0a00 	mov.w	sl, #0
 800cd88:	2700      	movs	r7, #0
 800cd8a:	9306      	str	r3, [sp, #24]
 800cd8c:	e0e6      	b.n	800cf5c <__kernel_rem_pio2+0x4bc>
 800cd8e:	f04f 0b02 	mov.w	fp, #2
 800cd92:	e756      	b.n	800cc42 <__kernel_rem_pio2+0x1a2>
 800cd94:	f8d8 3000 	ldr.w	r3, [r8]
 800cd98:	bb05      	cbnz	r5, 800cddc <__kernel_rem_pio2+0x33c>
 800cd9a:	b123      	cbz	r3, 800cda6 <__kernel_rem_pio2+0x306>
 800cd9c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cda0:	f8c8 3000 	str.w	r3, [r8]
 800cda4:	2301      	movs	r3, #1
 800cda6:	3201      	adds	r2, #1
 800cda8:	f108 0804 	add.w	r8, r8, #4
 800cdac:	461d      	mov	r5, r3
 800cdae:	e74f      	b.n	800cc50 <__kernel_rem_pio2+0x1b0>
	...
 800cdbc:	3ff00000 	.word	0x3ff00000
 800cdc0:	0800d918 	.word	0x0800d918
 800cdc4:	40200000 	.word	0x40200000
 800cdc8:	3ff00000 	.word	0x3ff00000
 800cdcc:	3e700000 	.word	0x3e700000
 800cdd0:	41700000 	.word	0x41700000
 800cdd4:	3fe00000 	.word	0x3fe00000
 800cdd8:	0800d8d8 	.word	0x0800d8d8
 800cddc:	1acb      	subs	r3, r1, r3
 800cdde:	f8c8 3000 	str.w	r3, [r8]
 800cde2:	462b      	mov	r3, r5
 800cde4:	e7df      	b.n	800cda6 <__kernel_rem_pio2+0x306>
 800cde6:	1e62      	subs	r2, r4, #1
 800cde8:	ab0c      	add	r3, sp, #48	; 0x30
 800cdea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cdf2:	a90c      	add	r1, sp, #48	; 0x30
 800cdf4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cdf8:	e738      	b.n	800cc6c <__kernel_rem_pio2+0x1cc>
 800cdfa:	1e62      	subs	r2, r4, #1
 800cdfc:	ab0c      	add	r3, sp, #48	; 0x30
 800cdfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce02:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ce06:	e7f4      	b.n	800cdf2 <__kernel_rem_pio2+0x352>
 800ce08:	a90c      	add	r1, sp, #48	; 0x30
 800ce0a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ce0e:	3b01      	subs	r3, #1
 800ce10:	430a      	orrs	r2, r1
 800ce12:	e788      	b.n	800cd26 <__kernel_rem_pio2+0x286>
 800ce14:	3301      	adds	r3, #1
 800ce16:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ce1a:	2900      	cmp	r1, #0
 800ce1c:	d0fa      	beq.n	800ce14 <__kernel_rem_pio2+0x374>
 800ce1e:	9a08      	ldr	r2, [sp, #32]
 800ce20:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ce24:	446a      	add	r2, sp
 800ce26:	3a98      	subs	r2, #152	; 0x98
 800ce28:	9208      	str	r2, [sp, #32]
 800ce2a:	9a06      	ldr	r2, [sp, #24]
 800ce2c:	a920      	add	r1, sp, #128	; 0x80
 800ce2e:	18a2      	adds	r2, r4, r2
 800ce30:	18e3      	adds	r3, r4, r3
 800ce32:	f104 0801 	add.w	r8, r4, #1
 800ce36:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ce3a:	9302      	str	r3, [sp, #8]
 800ce3c:	9b02      	ldr	r3, [sp, #8]
 800ce3e:	4543      	cmp	r3, r8
 800ce40:	da04      	bge.n	800ce4c <__kernel_rem_pio2+0x3ac>
 800ce42:	461c      	mov	r4, r3
 800ce44:	e6a2      	b.n	800cb8c <__kernel_rem_pio2+0xec>
 800ce46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e7e4      	b.n	800ce16 <__kernel_rem_pio2+0x376>
 800ce4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce4e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ce52:	f7f3 fb6f 	bl	8000534 <__aeabi_i2d>
 800ce56:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ce5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce5c:	46ab      	mov	fp, r5
 800ce5e:	461c      	mov	r4, r3
 800ce60:	f04f 0900 	mov.w	r9, #0
 800ce64:	2600      	movs	r6, #0
 800ce66:	2700      	movs	r7, #0
 800ce68:	9b05      	ldr	r3, [sp, #20]
 800ce6a:	4599      	cmp	r9, r3
 800ce6c:	dd06      	ble.n	800ce7c <__kernel_rem_pio2+0x3dc>
 800ce6e:	9b08      	ldr	r3, [sp, #32]
 800ce70:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ce74:	f108 0801 	add.w	r8, r8, #1
 800ce78:	9308      	str	r3, [sp, #32]
 800ce7a:	e7df      	b.n	800ce3c <__kernel_rem_pio2+0x39c>
 800ce7c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ce80:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ce84:	f7f3 fbc0 	bl	8000608 <__aeabi_dmul>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	4630      	mov	r0, r6
 800ce8e:	4639      	mov	r1, r7
 800ce90:	f7f3 fa04 	bl	800029c <__adddf3>
 800ce94:	f109 0901 	add.w	r9, r9, #1
 800ce98:	4606      	mov	r6, r0
 800ce9a:	460f      	mov	r7, r1
 800ce9c:	e7e4      	b.n	800ce68 <__kernel_rem_pio2+0x3c8>
 800ce9e:	3d01      	subs	r5, #1
 800cea0:	e747      	b.n	800cd32 <__kernel_rem_pio2+0x292>
 800cea2:	ec47 6b10 	vmov	d0, r6, r7
 800cea6:	f1ca 0000 	rsb	r0, sl, #0
 800ceaa:	f000 f949 	bl	800d140 <scalbn>
 800ceae:	ec57 6b10 	vmov	r6, r7, d0
 800ceb2:	4ba0      	ldr	r3, [pc, #640]	; (800d134 <__kernel_rem_pio2+0x694>)
 800ceb4:	ee10 0a10 	vmov	r0, s0
 800ceb8:	2200      	movs	r2, #0
 800ceba:	4639      	mov	r1, r7
 800cebc:	f7f3 fe2a 	bl	8000b14 <__aeabi_dcmpge>
 800cec0:	b1f8      	cbz	r0, 800cf02 <__kernel_rem_pio2+0x462>
 800cec2:	4b9d      	ldr	r3, [pc, #628]	; (800d138 <__kernel_rem_pio2+0x698>)
 800cec4:	2200      	movs	r2, #0
 800cec6:	4630      	mov	r0, r6
 800cec8:	4639      	mov	r1, r7
 800ceca:	f7f3 fb9d 	bl	8000608 <__aeabi_dmul>
 800cece:	f7f3 fe4b 	bl	8000b68 <__aeabi_d2iz>
 800ced2:	4680      	mov	r8, r0
 800ced4:	f7f3 fb2e 	bl	8000534 <__aeabi_i2d>
 800ced8:	4b96      	ldr	r3, [pc, #600]	; (800d134 <__kernel_rem_pio2+0x694>)
 800ceda:	2200      	movs	r2, #0
 800cedc:	f7f3 fb94 	bl	8000608 <__aeabi_dmul>
 800cee0:	460b      	mov	r3, r1
 800cee2:	4602      	mov	r2, r0
 800cee4:	4639      	mov	r1, r7
 800cee6:	4630      	mov	r0, r6
 800cee8:	f7f3 f9d6 	bl	8000298 <__aeabi_dsub>
 800ceec:	f7f3 fe3c 	bl	8000b68 <__aeabi_d2iz>
 800cef0:	1c65      	adds	r5, r4, #1
 800cef2:	ab0c      	add	r3, sp, #48	; 0x30
 800cef4:	f10a 0a18 	add.w	sl, sl, #24
 800cef8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cefc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800cf00:	e71f      	b.n	800cd42 <__kernel_rem_pio2+0x2a2>
 800cf02:	4630      	mov	r0, r6
 800cf04:	4639      	mov	r1, r7
 800cf06:	f7f3 fe2f 	bl	8000b68 <__aeabi_d2iz>
 800cf0a:	ab0c      	add	r3, sp, #48	; 0x30
 800cf0c:	4625      	mov	r5, r4
 800cf0e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cf12:	e716      	b.n	800cd42 <__kernel_rem_pio2+0x2a2>
 800cf14:	ab0c      	add	r3, sp, #48	; 0x30
 800cf16:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cf1a:	f7f3 fb0b 	bl	8000534 <__aeabi_i2d>
 800cf1e:	4632      	mov	r2, r6
 800cf20:	463b      	mov	r3, r7
 800cf22:	f7f3 fb71 	bl	8000608 <__aeabi_dmul>
 800cf26:	4642      	mov	r2, r8
 800cf28:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800cf2c:	464b      	mov	r3, r9
 800cf2e:	4630      	mov	r0, r6
 800cf30:	4639      	mov	r1, r7
 800cf32:	f7f3 fb69 	bl	8000608 <__aeabi_dmul>
 800cf36:	3c01      	subs	r4, #1
 800cf38:	4606      	mov	r6, r0
 800cf3a:	460f      	mov	r7, r1
 800cf3c:	e713      	b.n	800cd66 <__kernel_rem_pio2+0x2c6>
 800cf3e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800cf42:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800cf46:	f7f3 fb5f 	bl	8000608 <__aeabi_dmul>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	4648      	mov	r0, r9
 800cf50:	4651      	mov	r1, sl
 800cf52:	f7f3 f9a3 	bl	800029c <__adddf3>
 800cf56:	3701      	adds	r7, #1
 800cf58:	4681      	mov	r9, r0
 800cf5a:	468a      	mov	sl, r1
 800cf5c:	9b00      	ldr	r3, [sp, #0]
 800cf5e:	429f      	cmp	r7, r3
 800cf60:	dc02      	bgt.n	800cf68 <__kernel_rem_pio2+0x4c8>
 800cf62:	9b06      	ldr	r3, [sp, #24]
 800cf64:	429f      	cmp	r7, r3
 800cf66:	ddea      	ble.n	800cf3e <__kernel_rem_pio2+0x49e>
 800cf68:	9a06      	ldr	r2, [sp, #24]
 800cf6a:	ab48      	add	r3, sp, #288	; 0x120
 800cf6c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800cf70:	e9c6 9a00 	strd	r9, sl, [r6]
 800cf74:	3c01      	subs	r4, #1
 800cf76:	e6fa      	b.n	800cd6e <__kernel_rem_pio2+0x2ce>
 800cf78:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	dc0b      	bgt.n	800cf96 <__kernel_rem_pio2+0x4f6>
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	dc39      	bgt.n	800cff6 <__kernel_rem_pio2+0x556>
 800cf82:	d05d      	beq.n	800d040 <__kernel_rem_pio2+0x5a0>
 800cf84:	9b02      	ldr	r3, [sp, #8]
 800cf86:	f003 0007 	and.w	r0, r3, #7
 800cf8a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cf8e:	ecbd 8b02 	vpop	{d8}
 800cf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf96:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cf98:	2b03      	cmp	r3, #3
 800cf9a:	d1f3      	bne.n	800cf84 <__kernel_rem_pio2+0x4e4>
 800cf9c:	9b05      	ldr	r3, [sp, #20]
 800cf9e:	9500      	str	r5, [sp, #0]
 800cfa0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800cfa4:	eb0d 0403 	add.w	r4, sp, r3
 800cfa8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800cfac:	46a2      	mov	sl, r4
 800cfae:	9b00      	ldr	r3, [sp, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f1aa 0a08 	sub.w	sl, sl, #8
 800cfb6:	dc69      	bgt.n	800d08c <__kernel_rem_pio2+0x5ec>
 800cfb8:	46aa      	mov	sl, r5
 800cfba:	f1ba 0f01 	cmp.w	sl, #1
 800cfbe:	f1a4 0408 	sub.w	r4, r4, #8
 800cfc2:	f300 8083 	bgt.w	800d0cc <__kernel_rem_pio2+0x62c>
 800cfc6:	9c05      	ldr	r4, [sp, #20]
 800cfc8:	ab48      	add	r3, sp, #288	; 0x120
 800cfca:	441c      	add	r4, r3
 800cfcc:	2000      	movs	r0, #0
 800cfce:	2100      	movs	r1, #0
 800cfd0:	2d01      	cmp	r5, #1
 800cfd2:	f300 809a 	bgt.w	800d10a <__kernel_rem_pio2+0x66a>
 800cfd6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800cfda:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800cfde:	f1bb 0f00 	cmp.w	fp, #0
 800cfe2:	f040 8098 	bne.w	800d116 <__kernel_rem_pio2+0x676>
 800cfe6:	9b04      	ldr	r3, [sp, #16]
 800cfe8:	e9c3 7800 	strd	r7, r8, [r3]
 800cfec:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800cff0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cff4:	e7c6      	b.n	800cf84 <__kernel_rem_pio2+0x4e4>
 800cff6:	9e05      	ldr	r6, [sp, #20]
 800cff8:	ab48      	add	r3, sp, #288	; 0x120
 800cffa:	441e      	add	r6, r3
 800cffc:	462c      	mov	r4, r5
 800cffe:	2000      	movs	r0, #0
 800d000:	2100      	movs	r1, #0
 800d002:	2c00      	cmp	r4, #0
 800d004:	da33      	bge.n	800d06e <__kernel_rem_pio2+0x5ce>
 800d006:	f1bb 0f00 	cmp.w	fp, #0
 800d00a:	d036      	beq.n	800d07a <__kernel_rem_pio2+0x5da>
 800d00c:	4602      	mov	r2, r0
 800d00e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d012:	9c04      	ldr	r4, [sp, #16]
 800d014:	e9c4 2300 	strd	r2, r3, [r4]
 800d018:	4602      	mov	r2, r0
 800d01a:	460b      	mov	r3, r1
 800d01c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d020:	f7f3 f93a 	bl	8000298 <__aeabi_dsub>
 800d024:	ae4a      	add	r6, sp, #296	; 0x128
 800d026:	2401      	movs	r4, #1
 800d028:	42a5      	cmp	r5, r4
 800d02a:	da29      	bge.n	800d080 <__kernel_rem_pio2+0x5e0>
 800d02c:	f1bb 0f00 	cmp.w	fp, #0
 800d030:	d002      	beq.n	800d038 <__kernel_rem_pio2+0x598>
 800d032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d036:	4619      	mov	r1, r3
 800d038:	9b04      	ldr	r3, [sp, #16]
 800d03a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d03e:	e7a1      	b.n	800cf84 <__kernel_rem_pio2+0x4e4>
 800d040:	9c05      	ldr	r4, [sp, #20]
 800d042:	ab48      	add	r3, sp, #288	; 0x120
 800d044:	441c      	add	r4, r3
 800d046:	2000      	movs	r0, #0
 800d048:	2100      	movs	r1, #0
 800d04a:	2d00      	cmp	r5, #0
 800d04c:	da09      	bge.n	800d062 <__kernel_rem_pio2+0x5c2>
 800d04e:	f1bb 0f00 	cmp.w	fp, #0
 800d052:	d002      	beq.n	800d05a <__kernel_rem_pio2+0x5ba>
 800d054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d058:	4619      	mov	r1, r3
 800d05a:	9b04      	ldr	r3, [sp, #16]
 800d05c:	e9c3 0100 	strd	r0, r1, [r3]
 800d060:	e790      	b.n	800cf84 <__kernel_rem_pio2+0x4e4>
 800d062:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d066:	f7f3 f919 	bl	800029c <__adddf3>
 800d06a:	3d01      	subs	r5, #1
 800d06c:	e7ed      	b.n	800d04a <__kernel_rem_pio2+0x5aa>
 800d06e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d072:	f7f3 f913 	bl	800029c <__adddf3>
 800d076:	3c01      	subs	r4, #1
 800d078:	e7c3      	b.n	800d002 <__kernel_rem_pio2+0x562>
 800d07a:	4602      	mov	r2, r0
 800d07c:	460b      	mov	r3, r1
 800d07e:	e7c8      	b.n	800d012 <__kernel_rem_pio2+0x572>
 800d080:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d084:	f7f3 f90a 	bl	800029c <__adddf3>
 800d088:	3401      	adds	r4, #1
 800d08a:	e7cd      	b.n	800d028 <__kernel_rem_pio2+0x588>
 800d08c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d090:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d094:	9b00      	ldr	r3, [sp, #0]
 800d096:	3b01      	subs	r3, #1
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	4632      	mov	r2, r6
 800d09c:	463b      	mov	r3, r7
 800d09e:	4640      	mov	r0, r8
 800d0a0:	4649      	mov	r1, r9
 800d0a2:	f7f3 f8fb 	bl	800029c <__adddf3>
 800d0a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d0aa:	4602      	mov	r2, r0
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	4640      	mov	r0, r8
 800d0b0:	4649      	mov	r1, r9
 800d0b2:	f7f3 f8f1 	bl	8000298 <__aeabi_dsub>
 800d0b6:	4632      	mov	r2, r6
 800d0b8:	463b      	mov	r3, r7
 800d0ba:	f7f3 f8ef 	bl	800029c <__adddf3>
 800d0be:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d0c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d0c6:	ed8a 7b00 	vstr	d7, [sl]
 800d0ca:	e770      	b.n	800cfae <__kernel_rem_pio2+0x50e>
 800d0cc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d0d0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d0d4:	4640      	mov	r0, r8
 800d0d6:	4632      	mov	r2, r6
 800d0d8:	463b      	mov	r3, r7
 800d0da:	4649      	mov	r1, r9
 800d0dc:	f7f3 f8de 	bl	800029c <__adddf3>
 800d0e0:	e9cd 0100 	strd	r0, r1, [sp]
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	4640      	mov	r0, r8
 800d0ea:	4649      	mov	r1, r9
 800d0ec:	f7f3 f8d4 	bl	8000298 <__aeabi_dsub>
 800d0f0:	4632      	mov	r2, r6
 800d0f2:	463b      	mov	r3, r7
 800d0f4:	f7f3 f8d2 	bl	800029c <__adddf3>
 800d0f8:	ed9d 7b00 	vldr	d7, [sp]
 800d0fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d100:	ed84 7b00 	vstr	d7, [r4]
 800d104:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d108:	e757      	b.n	800cfba <__kernel_rem_pio2+0x51a>
 800d10a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d10e:	f7f3 f8c5 	bl	800029c <__adddf3>
 800d112:	3d01      	subs	r5, #1
 800d114:	e75c      	b.n	800cfd0 <__kernel_rem_pio2+0x530>
 800d116:	9b04      	ldr	r3, [sp, #16]
 800d118:	9a04      	ldr	r2, [sp, #16]
 800d11a:	601f      	str	r7, [r3, #0]
 800d11c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d120:	605c      	str	r4, [r3, #4]
 800d122:	609d      	str	r5, [r3, #8]
 800d124:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d128:	60d3      	str	r3, [r2, #12]
 800d12a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d12e:	6110      	str	r0, [r2, #16]
 800d130:	6153      	str	r3, [r2, #20]
 800d132:	e727      	b.n	800cf84 <__kernel_rem_pio2+0x4e4>
 800d134:	41700000 	.word	0x41700000
 800d138:	3e700000 	.word	0x3e700000
 800d13c:	00000000 	.word	0x00000000

0800d140 <scalbn>:
 800d140:	b570      	push	{r4, r5, r6, lr}
 800d142:	ec55 4b10 	vmov	r4, r5, d0
 800d146:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d14a:	4606      	mov	r6, r0
 800d14c:	462b      	mov	r3, r5
 800d14e:	b999      	cbnz	r1, 800d178 <scalbn+0x38>
 800d150:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d154:	4323      	orrs	r3, r4
 800d156:	d03f      	beq.n	800d1d8 <scalbn+0x98>
 800d158:	4b35      	ldr	r3, [pc, #212]	; (800d230 <scalbn+0xf0>)
 800d15a:	4629      	mov	r1, r5
 800d15c:	ee10 0a10 	vmov	r0, s0
 800d160:	2200      	movs	r2, #0
 800d162:	f7f3 fa51 	bl	8000608 <__aeabi_dmul>
 800d166:	4b33      	ldr	r3, [pc, #204]	; (800d234 <scalbn+0xf4>)
 800d168:	429e      	cmp	r6, r3
 800d16a:	4604      	mov	r4, r0
 800d16c:	460d      	mov	r5, r1
 800d16e:	da10      	bge.n	800d192 <scalbn+0x52>
 800d170:	a327      	add	r3, pc, #156	; (adr r3, 800d210 <scalbn+0xd0>)
 800d172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d176:	e01f      	b.n	800d1b8 <scalbn+0x78>
 800d178:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d17c:	4291      	cmp	r1, r2
 800d17e:	d10c      	bne.n	800d19a <scalbn+0x5a>
 800d180:	ee10 2a10 	vmov	r2, s0
 800d184:	4620      	mov	r0, r4
 800d186:	4629      	mov	r1, r5
 800d188:	f7f3 f888 	bl	800029c <__adddf3>
 800d18c:	4604      	mov	r4, r0
 800d18e:	460d      	mov	r5, r1
 800d190:	e022      	b.n	800d1d8 <scalbn+0x98>
 800d192:	460b      	mov	r3, r1
 800d194:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d198:	3936      	subs	r1, #54	; 0x36
 800d19a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d19e:	4296      	cmp	r6, r2
 800d1a0:	dd0d      	ble.n	800d1be <scalbn+0x7e>
 800d1a2:	2d00      	cmp	r5, #0
 800d1a4:	a11c      	add	r1, pc, #112	; (adr r1, 800d218 <scalbn+0xd8>)
 800d1a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1aa:	da02      	bge.n	800d1b2 <scalbn+0x72>
 800d1ac:	a11c      	add	r1, pc, #112	; (adr r1, 800d220 <scalbn+0xe0>)
 800d1ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1b2:	a319      	add	r3, pc, #100	; (adr r3, 800d218 <scalbn+0xd8>)
 800d1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b8:	f7f3 fa26 	bl	8000608 <__aeabi_dmul>
 800d1bc:	e7e6      	b.n	800d18c <scalbn+0x4c>
 800d1be:	1872      	adds	r2, r6, r1
 800d1c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d1c4:	428a      	cmp	r2, r1
 800d1c6:	dcec      	bgt.n	800d1a2 <scalbn+0x62>
 800d1c8:	2a00      	cmp	r2, #0
 800d1ca:	dd08      	ble.n	800d1de <scalbn+0x9e>
 800d1cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d1d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d1d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d1d8:	ec45 4b10 	vmov	d0, r4, r5
 800d1dc:	bd70      	pop	{r4, r5, r6, pc}
 800d1de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d1e2:	da08      	bge.n	800d1f6 <scalbn+0xb6>
 800d1e4:	2d00      	cmp	r5, #0
 800d1e6:	a10a      	add	r1, pc, #40	; (adr r1, 800d210 <scalbn+0xd0>)
 800d1e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1ec:	dac0      	bge.n	800d170 <scalbn+0x30>
 800d1ee:	a10e      	add	r1, pc, #56	; (adr r1, 800d228 <scalbn+0xe8>)
 800d1f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1f4:	e7bc      	b.n	800d170 <scalbn+0x30>
 800d1f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d1fa:	3236      	adds	r2, #54	; 0x36
 800d1fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d200:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d204:	4620      	mov	r0, r4
 800d206:	4b0c      	ldr	r3, [pc, #48]	; (800d238 <scalbn+0xf8>)
 800d208:	2200      	movs	r2, #0
 800d20a:	e7d5      	b.n	800d1b8 <scalbn+0x78>
 800d20c:	f3af 8000 	nop.w
 800d210:	c2f8f359 	.word	0xc2f8f359
 800d214:	01a56e1f 	.word	0x01a56e1f
 800d218:	8800759c 	.word	0x8800759c
 800d21c:	7e37e43c 	.word	0x7e37e43c
 800d220:	8800759c 	.word	0x8800759c
 800d224:	fe37e43c 	.word	0xfe37e43c
 800d228:	c2f8f359 	.word	0xc2f8f359
 800d22c:	81a56e1f 	.word	0x81a56e1f
 800d230:	43500000 	.word	0x43500000
 800d234:	ffff3cb0 	.word	0xffff3cb0
 800d238:	3c900000 	.word	0x3c900000
 800d23c:	00000000 	.word	0x00000000

0800d240 <floor>:
 800d240:	ec51 0b10 	vmov	r0, r1, d0
 800d244:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800d250:	2e13      	cmp	r6, #19
 800d252:	ee10 5a10 	vmov	r5, s0
 800d256:	ee10 8a10 	vmov	r8, s0
 800d25a:	460c      	mov	r4, r1
 800d25c:	dc31      	bgt.n	800d2c2 <floor+0x82>
 800d25e:	2e00      	cmp	r6, #0
 800d260:	da14      	bge.n	800d28c <floor+0x4c>
 800d262:	a333      	add	r3, pc, #204	; (adr r3, 800d330 <floor+0xf0>)
 800d264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d268:	f7f3 f818 	bl	800029c <__adddf3>
 800d26c:	2200      	movs	r2, #0
 800d26e:	2300      	movs	r3, #0
 800d270:	f7f3 fc5a 	bl	8000b28 <__aeabi_dcmpgt>
 800d274:	b138      	cbz	r0, 800d286 <floor+0x46>
 800d276:	2c00      	cmp	r4, #0
 800d278:	da53      	bge.n	800d322 <floor+0xe2>
 800d27a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d27e:	4325      	orrs	r5, r4
 800d280:	d052      	beq.n	800d328 <floor+0xe8>
 800d282:	4c2d      	ldr	r4, [pc, #180]	; (800d338 <floor+0xf8>)
 800d284:	2500      	movs	r5, #0
 800d286:	4621      	mov	r1, r4
 800d288:	4628      	mov	r0, r5
 800d28a:	e024      	b.n	800d2d6 <floor+0x96>
 800d28c:	4f2b      	ldr	r7, [pc, #172]	; (800d33c <floor+0xfc>)
 800d28e:	4137      	asrs	r7, r6
 800d290:	ea01 0307 	and.w	r3, r1, r7
 800d294:	4303      	orrs	r3, r0
 800d296:	d01e      	beq.n	800d2d6 <floor+0x96>
 800d298:	a325      	add	r3, pc, #148	; (adr r3, 800d330 <floor+0xf0>)
 800d29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29e:	f7f2 fffd 	bl	800029c <__adddf3>
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	f7f3 fc3f 	bl	8000b28 <__aeabi_dcmpgt>
 800d2aa:	2800      	cmp	r0, #0
 800d2ac:	d0eb      	beq.n	800d286 <floor+0x46>
 800d2ae:	2c00      	cmp	r4, #0
 800d2b0:	bfbe      	ittt	lt
 800d2b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d2b6:	4133      	asrlt	r3, r6
 800d2b8:	18e4      	addlt	r4, r4, r3
 800d2ba:	ea24 0407 	bic.w	r4, r4, r7
 800d2be:	2500      	movs	r5, #0
 800d2c0:	e7e1      	b.n	800d286 <floor+0x46>
 800d2c2:	2e33      	cmp	r6, #51	; 0x33
 800d2c4:	dd0b      	ble.n	800d2de <floor+0x9e>
 800d2c6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d2ca:	d104      	bne.n	800d2d6 <floor+0x96>
 800d2cc:	ee10 2a10 	vmov	r2, s0
 800d2d0:	460b      	mov	r3, r1
 800d2d2:	f7f2 ffe3 	bl	800029c <__adddf3>
 800d2d6:	ec41 0b10 	vmov	d0, r0, r1
 800d2da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2de:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800d2e2:	f04f 37ff 	mov.w	r7, #4294967295
 800d2e6:	40df      	lsrs	r7, r3
 800d2e8:	4238      	tst	r0, r7
 800d2ea:	d0f4      	beq.n	800d2d6 <floor+0x96>
 800d2ec:	a310      	add	r3, pc, #64	; (adr r3, 800d330 <floor+0xf0>)
 800d2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f2:	f7f2 ffd3 	bl	800029c <__adddf3>
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	f7f3 fc15 	bl	8000b28 <__aeabi_dcmpgt>
 800d2fe:	2800      	cmp	r0, #0
 800d300:	d0c1      	beq.n	800d286 <floor+0x46>
 800d302:	2c00      	cmp	r4, #0
 800d304:	da0a      	bge.n	800d31c <floor+0xdc>
 800d306:	2e14      	cmp	r6, #20
 800d308:	d101      	bne.n	800d30e <floor+0xce>
 800d30a:	3401      	adds	r4, #1
 800d30c:	e006      	b.n	800d31c <floor+0xdc>
 800d30e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d312:	2301      	movs	r3, #1
 800d314:	40b3      	lsls	r3, r6
 800d316:	441d      	add	r5, r3
 800d318:	45a8      	cmp	r8, r5
 800d31a:	d8f6      	bhi.n	800d30a <floor+0xca>
 800d31c:	ea25 0507 	bic.w	r5, r5, r7
 800d320:	e7b1      	b.n	800d286 <floor+0x46>
 800d322:	2500      	movs	r5, #0
 800d324:	462c      	mov	r4, r5
 800d326:	e7ae      	b.n	800d286 <floor+0x46>
 800d328:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d32c:	e7ab      	b.n	800d286 <floor+0x46>
 800d32e:	bf00      	nop
 800d330:	8800759c 	.word	0x8800759c
 800d334:	7e37e43c 	.word	0x7e37e43c
 800d338:	bff00000 	.word	0xbff00000
 800d33c:	000fffff 	.word	0x000fffff

0800d340 <_init>:
 800d340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d342:	bf00      	nop
 800d344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d346:	bc08      	pop	{r3}
 800d348:	469e      	mov	lr, r3
 800d34a:	4770      	bx	lr

0800d34c <_fini>:
 800d34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d34e:	bf00      	nop
 800d350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d352:	bc08      	pop	{r3}
 800d354:	469e      	mov	lr, r3
 800d356:	4770      	bx	lr
