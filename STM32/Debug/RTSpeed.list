
RTSpeed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d198  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800d338  0800d338  0001d338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d900  0800d900  000207ac  2**0
                  CONTENTS
  4 .ARM          00000008  0800d900  0800d900  0001d900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d908  0800d908  000207ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d908  0800d908  0001d908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d910  0800d910  0001d910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007ac  20000000  0800d914  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f14  200007ac  0800e0c0  000207ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200026c0  0800e0c0  000226c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000207ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000207dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dab2  00000000  00000000  0002081f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c4d  00000000  00000000  0002e2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  00030f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d4  00000000  00000000  00031b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018c23  00000000  00000000  000323fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f7b2  00000000  00000000  0004b01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089147  00000000  00000000  0005a7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044d0  00000000  00000000  000e3918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000e7de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200007ac 	.word	0x200007ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d320 	.word	0x0800d320

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200007b0 	.word	0x200007b0
 80001dc:	0800d320 	.word	0x0800d320

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5e:	f000 fa57 	bl	8001410 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f62:	f000 f861 	bl	8001028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f66:	f000 f8c7 	bl	80010f8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000f6a:	f005 ff07 	bl	8006d7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  float temp = 0;
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	temp = sin(HAL_GetTick()*1e-3 * 2*3.14159*50);
 8000f74:	f000 fab2 	bl	80014dc <HAL_GetTick>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff faca 	bl	8000514 <__aeabi_ui2d>
 8000f80:	a325      	add	r3, pc, #148	; (adr r3, 8001018 <main+0xc0>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f7ff fb3f 	bl	8000608 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	f7ff f981 	bl	800029c <__adddf3>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	a31f      	add	r3, pc, #124	; (adr r3, 8001020 <main+0xc8>)
 8000fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa8:	f7ff fb2e 	bl	8000608 <__aeabi_dmul>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	4b15      	ldr	r3, [pc, #84]	; (8001010 <main+0xb8>)
 8000fba:	f7ff fb25 	bl	8000608 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	ec43 2b17 	vmov	d7, r2, r3
 8000fc6:	eeb0 0a47 	vmov.f32	s0, s14
 8000fca:	eef0 0a67 	vmov.f32	s1, s15
 8000fce:	f00b f967 	bl	800c2a0 <sin>
 8000fd2:	ec53 2b10 	vmov	r2, r3, d0
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f7ff fded 	bl	8000bb8 <__aeabi_d2f>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60fb      	str	r3, [r7, #12]

	strcpy(msg, "");
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	713b      	strb	r3, [r7, #4]
	snprintf(msg, 6, "%.3f", temp);
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f7ff fab6 	bl	8000558 <__aeabi_f2d>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	1d38      	adds	r0, r7, #4
 8000ff2:	e9cd 2300 	strd	r2, r3, [sp]
 8000ff6:	4a07      	ldr	r2, [pc, #28]	; (8001014 <main+0xbc>)
 8000ff8:	2106      	movs	r1, #6
 8000ffa:	f006 fc91 	bl	8007920 <snprintf>
	CDC_Transmit_FS(msg, sizeof(msg));
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2108      	movs	r1, #8
 8001002:	4618      	mov	r0, r3
 8001004:	f005 ff78 	bl	8006ef8 <CDC_Transmit_FS>
  {
 8001008:	e7b4      	b.n	8000f74 <main+0x1c>
 800100a:	bf00      	nop
 800100c:	f3af 8000 	nop.w
 8001010:	40490000 	.word	0x40490000
 8001014:	0800d338 	.word	0x0800d338
 8001018:	d2f1a9fc 	.word	0xd2f1a9fc
 800101c:	3f50624d 	.word	0x3f50624d
 8001020:	f01b866e 	.word	0xf01b866e
 8001024:	400921f9 	.word	0x400921f9

08001028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b094      	sub	sp, #80	; 0x50
 800102c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102e:	f107 0320 	add.w	r3, r7, #32
 8001032:	2230      	movs	r2, #48	; 0x30
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f006 fce9 	bl	8007a0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <SystemClock_Config+0xc8>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	4a26      	ldr	r2, [pc, #152]	; (80010f0 <SystemClock_Config+0xc8>)
 8001056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105a:	6413      	str	r3, [r2, #64]	; 0x40
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <SystemClock_Config+0xc8>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <SystemClock_Config+0xcc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <SystemClock_Config+0xcc>)
 8001072:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001076:	6013      	str	r3, [r2, #0]
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <SystemClock_Config+0xcc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001084:	2301      	movs	r3, #1
 8001086:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108e:	2302      	movs	r3, #2
 8001090:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001092:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001096:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001098:	2310      	movs	r3, #16
 800109a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 123;
 800109c:	237b      	movs	r3, #123	; 0x7b
 800109e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010a4:	2304      	movs	r3, #4
 80010a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010a8:	f107 0320 	add.w	r3, r7, #32
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 ff2b 	bl	8002f08 <HAL_RCC_OscConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010b8:	f000 f846 	bl	8001148 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010bc:	230f      	movs	r3, #15
 80010be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d0:	f107 030c 	add.w	r3, r7, #12
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f002 f98e 	bl	80033f8 <HAL_RCC_ClockConfig>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80010e2:	f000 f831 	bl	8001148 <Error_Handler>
  }
}
 80010e6:	bf00      	nop
 80010e8:	3750      	adds	r7, #80	; 0x50
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_GPIO_Init+0x4c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <MX_GPIO_Init+0x4c>)
 8001108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <MX_GPIO_Init+0x4c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <MX_GPIO_Init+0x4c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a08      	ldr	r2, [pc, #32]	; (8001144 <MX_GPIO_Init+0x4c>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b06      	ldr	r3, [pc, #24]	; (8001144 <MX_GPIO_Init+0x4c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
}
 800114e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001150:	e7fe      	b.n	8001150 <Error_Handler+0x8>
	...

08001154 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001162:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <HAL_MspInit+0x4c>)
 8001164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001168:	6453      	str	r3, [r2, #68]	; 0x44
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <HAL_MspInit+0x4c>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	603b      	str	r3, [r7, #0]
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_MspInit+0x4c>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_MspInit+0x4c>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800

080011a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011a8:	e7fe      	b.n	80011a8 <NMI_Handler+0x4>

080011aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <HardFault_Handler+0x4>

080011b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <MemManage_Handler+0x4>

080011b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f0:	f000 f960 	bl	80014b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011fc:	4802      	ldr	r0, [pc, #8]	; (8001208 <OTG_FS_IRQHandler+0x10>)
 80011fe:	f000 fd77 	bl	8001cf0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20001cb0 	.word	0x20001cb0

0800120c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return 1;
 8001210:	2301      	movs	r3, #1
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_kill>:

int _kill(int pid, int sig)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001226:	f006 fc41 	bl	8007aac <__errno>
 800122a:	4603      	mov	r3, r0
 800122c:	2216      	movs	r2, #22
 800122e:	601a      	str	r2, [r3, #0]
  return -1;
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_exit>:

void _exit (int status)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff ffe7 	bl	800121c <_kill>
  while (1) {}    /* Make sure we hang here */
 800124e:	e7fe      	b.n	800124e <_exit+0x12>

08001250 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	e00a      	b.n	8001278 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001262:	f3af 8000 	nop.w
 8001266:	4601      	mov	r1, r0
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	60ba      	str	r2, [r7, #8]
 800126e:	b2ca      	uxtb	r2, r1
 8001270:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	429a      	cmp	r2, r3
 800127e:	dbf0      	blt.n	8001262 <_read+0x12>
  }

  return len;
 8001280:	687b      	ldr	r3, [r7, #4]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e009      	b.n	80012b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	60ba      	str	r2, [r7, #8]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbf1      	blt.n	800129c <_write+0x12>
  }
  return len;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_close>:

int _close(int file)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b083      	sub	sp, #12
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr

080012da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012da:	b480      	push	{r7}
 80012dc:	b083      	sub	sp, #12
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ea:	605a      	str	r2, [r3, #4]
  return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr

080012fa <_isatty>:

int _isatty(int file)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001302:	2301      	movs	r3, #1
}
 8001304:	4618      	mov	r0, r3
 8001306:	370c      	adds	r7, #12
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
	...

0800132c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001334:	4a14      	ldr	r2, [pc, #80]	; (8001388 <_sbrk+0x5c>)
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <_sbrk+0x60>)
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <_sbrk+0x64>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <_sbrk+0x68>)
 800134c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <_sbrk+0x64>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	429a      	cmp	r2, r3
 800135a:	d207      	bcs.n	800136c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800135c:	f006 fba6 	bl	8007aac <__errno>
 8001360:	4603      	mov	r3, r0
 8001362:	220c      	movs	r2, #12
 8001364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001366:	f04f 33ff 	mov.w	r3, #4294967295
 800136a:	e009      	b.n	8001380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_sbrk+0x64>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	4a05      	ldr	r2, [pc, #20]	; (8001390 <_sbrk+0x64>)
 800137c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800137e:	68fb      	ldr	r3, [r7, #12]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3718      	adds	r7, #24
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20020000 	.word	0x20020000
 800138c:	00000400 	.word	0x00000400
 8001390:	200007c8 	.word	0x200007c8
 8001394:	200026c0 	.word	0x200026c0

08001398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <SystemInit+0x20>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <SystemInit+0x20>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013c0:	f7ff ffea 	bl	8001398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c6:	490d      	ldr	r1, [pc, #52]	; (80013fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c8:	4a0d      	ldr	r2, [pc, #52]	; (8001400 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013dc:	4c0a      	ldr	r4, [pc, #40]	; (8001408 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013ea:	f006 fb65 	bl	8007ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ee:	f7ff fdb3 	bl	8000f58 <main>
  bx  lr    
 80013f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013fc:	200007ac 	.word	0x200007ac
  ldr r2, =_sidata
 8001400:	0800d914 	.word	0x0800d914
  ldr r2, =_sbss
 8001404:	200007ac 	.word	0x200007ac
  ldr r4, =_ebss
 8001408:	200026c0 	.word	0x200026c0

0800140c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800140c:	e7fe      	b.n	800140c <ADC_IRQHandler>
	...

08001410 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001414:	4b0e      	ldr	r3, [pc, #56]	; (8001450 <HAL_Init+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	; (8001450 <HAL_Init+0x40>)
 800141a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800141e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001420:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_Init+0x40>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_Init+0x40>)
 8001426:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_Init+0x40>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_Init+0x40>)
 8001432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001436:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001438:	2003      	movs	r0, #3
 800143a:	f000 f94f 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143e:	200f      	movs	r0, #15
 8001440:	f000 f808 	bl	8001454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001444:	f7ff fe86 	bl	8001154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023c00 	.word	0x40023c00

08001454 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_InitTick+0x54>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x58>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146a:	fbb3 f3f1 	udiv	r3, r3, r1
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	4618      	mov	r0, r3
 8001474:	f000 f967 	bl	8001746 <HAL_SYSTICK_Config>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e00e      	b.n	80014a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d80a      	bhi.n	800149e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 f92f 	bl	80016f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001494:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <HAL_InitTick+0x5c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149a:	2300      	movs	r3, #0
 800149c:	e000      	b.n	80014a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000008 	.word	0x20000008
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x20>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x24>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_IncTick+0x24>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008
 80014d8:	200007cc 	.word	0x200007cc

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_GetTick+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200007cc 	.word	0x200007cc

080014f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff ffee 	bl	80014dc <HAL_GetTick>
 8001500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150c:	d005      	beq.n	800151a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_Delay+0x44>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	4413      	add	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800151a:	bf00      	nop
 800151c:	f7ff ffde 	bl	80014dc <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d8f7      	bhi.n	800151c <HAL_Delay+0x28>
  {
  }
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000008 	.word	0x20000008

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	; (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4907      	ldr	r1, [pc, #28]	; (80015d8 <__NVIC_EnableIRQ+0x38>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	; (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	; (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	; 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	; 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a8:	d301      	bcc.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00f      	b.n	80016ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <SysTick_Config+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	210f      	movs	r1, #15
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f7ff ff8e 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <SysTick_Config+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SysTick_Config+0x40>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff29 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff3e 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ff8e 	bl	8001630 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff31 	bl	80015a0 <__NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffa2 	bl	8001698 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b089      	sub	sp, #36	; 0x24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e159      	b.n	8001a30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8148 	bne.w	8001a2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 0303 	and.w	r3, r3, #3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d005      	beq.n	80017b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d130      	bne.n	8001814 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4013      	ands	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e8:	2201      	movs	r2, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4013      	ands	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 0201 	and.w	r2, r3, #1
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b03      	cmp	r3, #3
 800181e:	d017      	beq.n	8001850 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0303 	and.w	r3, r3, #3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d123      	bne.n	80018a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001868:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	691a      	ldr	r2, [r3, #16]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	08da      	lsrs	r2, r3, #3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3208      	adds	r2, #8
 800189e:	69b9      	ldr	r1, [r7, #24]
 80018a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	2203      	movs	r2, #3
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0203 	and.w	r2, r3, #3
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80a2 	beq.w	8001a2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b57      	ldr	r3, [pc, #348]	; (8001a48 <HAL_GPIO_Init+0x2e8>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	4a56      	ldr	r2, [pc, #344]	; (8001a48 <HAL_GPIO_Init+0x2e8>)
 80018f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f4:	6453      	str	r3, [r2, #68]	; 0x44
 80018f6:	4b54      	ldr	r3, [pc, #336]	; (8001a48 <HAL_GPIO_Init+0x2e8>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001902:	4a52      	ldr	r2, [pc, #328]	; (8001a4c <HAL_GPIO_Init+0x2ec>)
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	3302      	adds	r3, #2
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	220f      	movs	r2, #15
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43db      	mvns	r3, r3
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4013      	ands	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a49      	ldr	r2, [pc, #292]	; (8001a50 <HAL_GPIO_Init+0x2f0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d019      	beq.n	8001962 <HAL_GPIO_Init+0x202>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a48      	ldr	r2, [pc, #288]	; (8001a54 <HAL_GPIO_Init+0x2f4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d013      	beq.n	800195e <HAL_GPIO_Init+0x1fe>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a47      	ldr	r2, [pc, #284]	; (8001a58 <HAL_GPIO_Init+0x2f8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d00d      	beq.n	800195a <HAL_GPIO_Init+0x1fa>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a46      	ldr	r2, [pc, #280]	; (8001a5c <HAL_GPIO_Init+0x2fc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d007      	beq.n	8001956 <HAL_GPIO_Init+0x1f6>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a45      	ldr	r2, [pc, #276]	; (8001a60 <HAL_GPIO_Init+0x300>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_GPIO_Init+0x1f2>
 800194e:	2304      	movs	r3, #4
 8001950:	e008      	b.n	8001964 <HAL_GPIO_Init+0x204>
 8001952:	2307      	movs	r3, #7
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x204>
 8001956:	2303      	movs	r3, #3
 8001958:	e004      	b.n	8001964 <HAL_GPIO_Init+0x204>
 800195a:	2302      	movs	r3, #2
 800195c:	e002      	b.n	8001964 <HAL_GPIO_Init+0x204>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x204>
 8001962:	2300      	movs	r3, #0
 8001964:	69fa      	ldr	r2, [r7, #28]
 8001966:	f002 0203 	and.w	r2, r2, #3
 800196a:	0092      	lsls	r2, r2, #2
 800196c:	4093      	lsls	r3, r2
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001974:	4935      	ldr	r1, [pc, #212]	; (8001a4c <HAL_GPIO_Init+0x2ec>)
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3302      	adds	r3, #2
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001982:	4b38      	ldr	r3, [pc, #224]	; (8001a64 <HAL_GPIO_Init+0x304>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019a6:	4a2f      	ldr	r2, [pc, #188]	; (8001a64 <HAL_GPIO_Init+0x304>)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019ac:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <HAL_GPIO_Init+0x304>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019d0:	4a24      	ldr	r2, [pc, #144]	; (8001a64 <HAL_GPIO_Init+0x304>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019d6:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <HAL_GPIO_Init+0x304>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019fa:	4a1a      	ldr	r2, [pc, #104]	; (8001a64 <HAL_GPIO_Init+0x304>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <HAL_GPIO_Init+0x304>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a24:	4a0f      	ldr	r2, [pc, #60]	; (8001a64 <HAL_GPIO_Init+0x304>)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	2b0f      	cmp	r3, #15
 8001a34:	f67f aea2 	bls.w	800177c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40013800 	.word	0x40013800
 8001a50:	40020000 	.word	0x40020000
 8001a54:	40020400 	.word	0x40020400
 8001a58:	40020800 	.word	0x40020800
 8001a5c:	40020c00 	.word	0x40020c00
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40013c00 	.word	0x40013c00

08001a68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e101      	b.n	8001c7e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d106      	bne.n	8001a9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f005 fb77 	bl	8007188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001aa8:	d102      	bne.n	8001ab0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 ff6e 	bl	8003996 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7c1a      	ldrb	r2, [r3, #16]
 8001ac2:	f88d 2000 	strb.w	r2, [sp]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aca:	f001 fe4d 	bl	8003768 <USB_CoreInit>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0ce      	b.n	8001c7e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 ff66 	bl	80039b8 <USB_SetCurrentMode>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2202      	movs	r2, #2
 8001af6:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0bf      	b.n	8001c7e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	73fb      	strb	r3, [r7, #15]
 8001b02:	e04a      	b.n	8001b9a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b04:	7bfa      	ldrb	r2, [r7, #15]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	3315      	adds	r3, #21
 8001b14:	2201      	movs	r2, #1
 8001b16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b18:	7bfa      	ldrb	r2, [r7, #15]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4413      	add	r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	3314      	adds	r3, #20
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b2c:	7bfa      	ldrb	r2, [r7, #15]
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	b298      	uxth	r0, r3
 8001b32:	6879      	ldr	r1, [r7, #4]
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4413      	add	r3, r2
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	332e      	adds	r3, #46	; 0x2e
 8001b40:	4602      	mov	r2, r0
 8001b42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b44:	7bfa      	ldrb	r2, [r7, #15]
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	440b      	add	r3, r1
 8001b52:	3318      	adds	r3, #24
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	440b      	add	r3, r1
 8001b66:	331c      	adds	r3, #28
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	3320      	adds	r3, #32
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4413      	add	r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3324      	adds	r3, #36	; 0x24
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	3301      	adds	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	791b      	ldrb	r3, [r3, #4]
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d3af      	bcc.n	8001b04 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	73fb      	strb	r3, [r7, #15]
 8001ba8:	e044      	b.n	8001c34 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	6879      	ldr	r1, [r7, #4]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f203 2355 	addw	r3, r3, #597	; 0x255
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bc0:	7bfa      	ldrb	r2, [r7, #15]
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bd6:	7bfa      	ldrb	r2, [r7, #15]
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4413      	add	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	440b      	add	r3, r1
 8001be4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	4613      	mov	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	4413      	add	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	3301      	adds	r3, #1
 8001c32:	73fb      	strb	r3, [r7, #15]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	791b      	ldrb	r3, [r3, #4]
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d3b5      	bcc.n	8001baa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6818      	ldr	r0, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7c1a      	ldrb	r2, [r3, #16]
 8001c46:	f88d 2000 	strb.w	r2, [sp]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c4e:	f001 feff 	bl	8003a50 <USB_DevInit>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e00c      	b.n	8001c7e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2200      	movs	r2, #0
 8001c68:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f002 ff43 	bl	8004b02 <USB_DevDisconnect>

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b084      	sub	sp, #16
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_PCD_Start+0x1c>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e022      	b.n	8001ce8 <HAL_PCD_Start+0x62>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d105      	bne.n	8001cca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f001 fe50 	bl	8003974 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f002 fef1 	bl	8004ac0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b08d      	sub	sp, #52	; 0x34
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 ffaf 	bl	8004c6a <USB_GetMode>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f040 848c 	bne.w	800262c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 ff13 	bl	8004b44 <USB_ReadInterrupts>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8482 	beq.w	800262a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 ff00 	bl	8004b44 <USB_ReadInterrupts>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d107      	bne.n	8001d5e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695a      	ldr	r2, [r3, #20]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f002 0202 	and.w	r2, r2, #2
 8001d5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 feee 	bl	8004b44 <USB_ReadInterrupts>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d161      	bne.n	8001e36 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699a      	ldr	r2, [r3, #24]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0210 	bic.w	r2, r2, #16
 8001d80:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	f003 020f 	and.w	r2, r3, #15
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	4413      	add	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3304      	adds	r3, #4
 8001da0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	0c5b      	lsrs	r3, r3, #17
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d124      	bne.n	8001df8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d035      	beq.n	8001e26 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	091b      	lsrs	r3, r3, #4
 8001dc2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6a38      	ldr	r0, [r7, #32]
 8001dce:	f002 fd25 	bl	800481c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dde:	441a      	add	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	695a      	ldr	r2, [r3, #20]
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001df0:	441a      	add	r2, r3
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	615a      	str	r2, [r3, #20]
 8001df6:	e016      	b.n	8001e26 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	0c5b      	lsrs	r3, r3, #17
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	2b06      	cmp	r3, #6
 8001e02:	d110      	bne.n	8001e26 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	6a38      	ldr	r0, [r7, #32]
 8001e10:	f002 fd04 	bl	800481c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	091b      	lsrs	r3, r3, #4
 8001e1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e20:	441a      	add	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699a      	ldr	r2, [r3, #24]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f042 0210 	orr.w	r2, r2, #16
 8001e34:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f002 fe82 	bl	8004b44 <USB_ReadInterrupts>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e4a:	f040 80a7 	bne.w	8001f9c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 fe87 	bl	8004b6a <USB_ReadDevAllOutEpInterrupt>
 8001e5c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e5e:	e099      	b.n	8001f94 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 808e 	beq.w	8001f88 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f002 feab 	bl	8004bd2 <USB_ReadDevOutEPInterrupt>
 8001e7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00c      	beq.n	8001ea2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e94:	461a      	mov	r2, r3
 8001e96:	2301      	movs	r3, #1
 8001e98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001e9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fea1 	bl	8002be4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00c      	beq.n	8001ec6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2308      	movs	r3, #8
 8001ebc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ebe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 ff77 	bl	8002db4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d008      	beq.n	8001ee2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	015a      	lsls	r2, r3, #5
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001edc:	461a      	mov	r2, r3
 8001ede:	2310      	movs	r3, #16
 8001ee0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d030      	beq.n	8001f4e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef4:	2b80      	cmp	r3, #128	; 0x80
 8001ef6:	d109      	bne.n	8001f0c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	69fa      	ldr	r2, [r7, #28]
 8001f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f0a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f0e:	4613      	mov	r3, r2
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	4413      	add	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3304      	adds	r3, #4
 8001f20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	78db      	ldrb	r3, [r3, #3]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d108      	bne.n	8001f3c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	4619      	mov	r1, r3
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f005 fa22 	bl	8007380 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	015a      	lsls	r2, r3, #5
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	4413      	add	r3, r2
 8001f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	f003 0320 	and.w	r3, r3, #32
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d008      	beq.n	8001f6a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f64:	461a      	mov	r2, r3
 8001f66:	2320      	movs	r3, #32
 8001f68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d009      	beq.n	8001f88 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f80:	461a      	mov	r2, r3
 8001f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f86:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f90:	085b      	lsrs	r3, r3, #1
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f47f af62 	bne.w	8001e60 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 fdcf 	bl	8004b44 <USB_ReadInterrupts>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fb0:	f040 80db 	bne.w	800216a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f002 fdf0 	bl	8004b9e <USB_ReadDevAllInEpInterrupt>
 8001fbe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001fc4:	e0cd      	b.n	8002162 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 80c2 	beq.w	8002156 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 fe16 	bl	8004c0e <USB_ReadDevInEPInterrupt>
 8001fe2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d057      	beq.n	800209e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43db      	mvns	r3, r3
 8002008:	69f9      	ldr	r1, [r7, #28]
 800200a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800200e:	4013      	ands	r3, r2
 8002010:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800201e:	461a      	mov	r2, r3
 8002020:	2301      	movs	r3, #1
 8002022:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	799b      	ldrb	r3, [r3, #6]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d132      	bne.n	8002092 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	3320      	adds	r3, #32
 800203c:	6819      	ldr	r1, [r3, #0]
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4403      	add	r3, r0
 800204c:	331c      	adds	r3, #28
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4419      	add	r1, r3
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4403      	add	r3, r0
 8002060:	3320      	adds	r3, #32
 8002062:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	2b00      	cmp	r3, #0
 8002068:	d113      	bne.n	8002092 <HAL_PCD_IRQHandler+0x3a2>
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	3324      	adds	r3, #36	; 0x24
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d108      	bne.n	8002092 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6818      	ldr	r0, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800208a:	461a      	mov	r2, r3
 800208c:	2101      	movs	r1, #1
 800208e:	f002 fe1d 	bl	8004ccc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	b2db      	uxtb	r3, r3
 8002096:	4619      	mov	r1, r3
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f005 f8f6 	bl	800728a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	f003 0308 	and.w	r3, r3, #8
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020aa:	015a      	lsls	r2, r3, #5
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020b4:	461a      	mov	r2, r3
 80020b6:	2308      	movs	r3, #8
 80020b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d0:	461a      	mov	r2, r3
 80020d2:	2310      	movs	r3, #16
 80020d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ec:	461a      	mov	r2, r3
 80020ee:	2340      	movs	r3, #64	; 0x40
 80020f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d023      	beq.n	8002144 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80020fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020fe:	6a38      	ldr	r0, [r7, #32]
 8002100:	f001 fe0a 	bl	8003d18 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	3310      	adds	r3, #16
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	4413      	add	r3, r2
 8002114:	3304      	adds	r3, #4
 8002116:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	78db      	ldrb	r3, [r3, #3]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d108      	bne.n	8002132 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	2200      	movs	r2, #0
 8002124:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002128:	b2db      	uxtb	r3, r3
 800212a:	4619      	mov	r1, r3
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f005 f939 	bl	80073a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	4413      	add	r3, r2
 800213a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800213e:	461a      	mov	r2, r3
 8002140:	2302      	movs	r3, #2
 8002142:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800214e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fcbb 	bl	8002acc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	3301      	adds	r3, #1
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800215e:	085b      	lsrs	r3, r3, #1
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002164:	2b00      	cmp	r3, #0
 8002166:	f47f af2e 	bne.w	8001fc6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f002 fce8 	bl	8004b44 <USB_ReadInterrupts>
 8002174:	4603      	mov	r3, r0
 8002176:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800217a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800217e:	d122      	bne.n	80021c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800218e:	f023 0301 	bic.w	r3, r3, #1
 8002192:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 800219a:	2b01      	cmp	r3, #1
 800219c:	d108      	bne.n	80021b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021a6:	2100      	movs	r1, #0
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fea1 	bl	8002ef0 <HAL_PCDEx_LPM_Callback>
 80021ae:	e002      	b.n	80021b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f005 f8d7 	bl	8007364 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f002 fcba 	bl	8004b44 <USB_ReadInterrupts>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021da:	d112      	bne.n	8002202 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d102      	bne.n	80021f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f005 f893 	bl	8007318 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695a      	ldr	r2, [r3, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002200:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f002 fc9c 	bl	8004b44 <USB_ReadInterrupts>
 800220c:	4603      	mov	r3, r0
 800220e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002216:	f040 80b7 	bne.w	8002388 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2110      	movs	r1, #16
 8002234:	4618      	mov	r0, r3
 8002236:	f001 fd6f 	bl	8003d18 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223a:	2300      	movs	r3, #0
 800223c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800223e:	e046      	b.n	80022ce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	4413      	add	r3, r2
 8002248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800224c:	461a      	mov	r2, r3
 800224e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002252:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002264:	0151      	lsls	r1, r2, #5
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	440a      	add	r2, r1
 800226a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800226e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002272:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	015a      	lsls	r2, r3, #5
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	4413      	add	r3, r2
 800227c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002280:	461a      	mov	r2, r3
 8002282:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002286:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002298:	0151      	lsls	r1, r2, #5
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	440a      	add	r2, r1
 800229e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b8:	0151      	lsls	r1, r2, #5
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	440a      	add	r2, r1
 80022be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	3301      	adds	r3, #1
 80022cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	791b      	ldrb	r3, [r3, #4]
 80022d2:	461a      	mov	r2, r3
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d3b2      	bcc.n	8002240 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80022ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7bdb      	ldrb	r3, [r3, #15]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d016      	beq.n	8002324 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002300:	69fa      	ldr	r2, [r7, #28]
 8002302:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002306:	f043 030b 	orr.w	r3, r3, #11
 800230a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	69fa      	ldr	r2, [r7, #28]
 8002318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800231c:	f043 030b 	orr.w	r3, r3, #11
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	e015      	b.n	8002350 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002332:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002336:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800233a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800234a:	f043 030b 	orr.w	r3, r3, #11
 800234e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800235e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002362:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002372:	461a      	mov	r2, r3
 8002374:	f002 fcaa 	bl	8004ccc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f002 fbd9 	bl	8004b44 <USB_ReadInterrupts>
 8002392:	4603      	mov	r3, r0
 8002394:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239c:	d123      	bne.n	80023e6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f002 fc6f 	bl	8004c86 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f001 fd2c 	bl	8003e0a <USB_GetDevSpeed>
 80023b2:	4603      	mov	r3, r0
 80023b4:	461a      	mov	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681c      	ldr	r4, [r3, #0]
 80023be:	f001 f9c7 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 80023c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023c8:	461a      	mov	r2, r3
 80023ca:	4620      	mov	r0, r4
 80023cc:	f001 fa30 	bl	8003830 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f004 ff82 	bl	80072da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695a      	ldr	r2, [r3, #20]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80023e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f002 fbaa 	bl	8004b44 <USB_ReadInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d10a      	bne.n	8002410 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f004 ff5f 	bl	80072be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f002 0208 	and.w	r2, r2, #8
 800240e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f002 fb95 	bl	8004b44 <USB_ReadInterrupts>
 800241a:	4603      	mov	r3, r0
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b80      	cmp	r3, #128	; 0x80
 8002422:	d123      	bne.n	800246c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002430:	2301      	movs	r3, #1
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
 8002434:	e014      	b.n	8002460 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	f203 2357 	addw	r3, r3, #599	; 0x257
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	b2db      	uxtb	r3, r3
 8002452:	4619      	mov	r1, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 fb08 	bl	8002a6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	3301      	adds	r3, #1
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	791b      	ldrb	r3, [r3, #4]
 8002464:	461a      	mov	r2, r3
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	4293      	cmp	r3, r2
 800246a:	d3e4      	bcc.n	8002436 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f002 fb67 	bl	8004b44 <USB_ReadInterrupts>
 8002476:	4603      	mov	r3, r0
 8002478:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800247c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002480:	d13c      	bne.n	80024fc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002482:	2301      	movs	r3, #1
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
 8002486:	e02b      	b.n	80024e0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	015a      	lsls	r2, r3, #5
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	4413      	add	r3, r2
 8002490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249c:	4613      	mov	r3, r2
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	3318      	adds	r3, #24
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d115      	bne.n	80024da <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80024ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	da12      	bge.n	80024da <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3317      	adds	r3, #23
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	4619      	mov	r1, r3
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f000 fac8 	bl	8002a6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	791b      	ldrb	r3, [r3, #4]
 80024e4:	461a      	mov	r2, r3
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d3cd      	bcc.n	8002488 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80024fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f002 fb1f 	bl	8004b44 <USB_ReadInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002510:	d156      	bne.n	80025c0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002512:	2301      	movs	r3, #1
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
 8002516:	e045      	b.n	80025a4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	4413      	add	r3, r2
 8002520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d12e      	bne.n	800259e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002540:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002542:	2b00      	cmp	r3, #0
 8002544:	da2b      	bge.n	800259e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8002552:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002556:	429a      	cmp	r2, r3
 8002558:	d121      	bne.n	800259e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	4613      	mov	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4413      	add	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	f203 2357 	addw	r3, r3, #599	; 0x257
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002584:	2b00      	cmp	r3, #0
 8002586:	d10a      	bne.n	800259e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259a:	6053      	str	r3, [r2, #4]
            break;
 800259c:	e008      	b.n	80025b0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	3301      	adds	r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	791b      	ldrb	r3, [r3, #4]
 80025a8:	461a      	mov	r2, r3
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d3b3      	bcc.n	8002518 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695a      	ldr	r2, [r3, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f002 fabd 	bl	8004b44 <USB_ReadInterrupts>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025d4:	d10a      	bne.n	80025ec <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f004 fef6 	bl	80073c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80025ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f002 faa7 	bl	8004b44 <USB_ReadInterrupts>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d115      	bne.n	800262c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f004 fee6 	bl	80073e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6859      	ldr	r1, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	430a      	orrs	r2, r1
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	e000      	b.n	800262c <HAL_PCD_IRQHandler+0x93c>
      return;
 800262a:	bf00      	nop
    }
  }
}
 800262c:	3734      	adds	r7, #52	; 0x34
 800262e:	46bd      	mov	sp, r7
 8002630:	bd90      	pop	{r4, r7, pc}

08002632 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	460b      	mov	r3, r1
 800263c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <HAL_PCD_SetAddress+0x1a>
 8002648:	2302      	movs	r3, #2
 800264a:	e012      	b.n	8002672 <HAL_PCD_SetAddress+0x40>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	78fa      	ldrb	r2, [r7, #3]
 8002658:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f002 fa06 	bl	8004a74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
 8002682:	4608      	mov	r0, r1
 8002684:	4611      	mov	r1, r2
 8002686:	461a      	mov	r2, r3
 8002688:	4603      	mov	r3, r0
 800268a:	70fb      	strb	r3, [r7, #3]
 800268c:	460b      	mov	r3, r1
 800268e:	803b      	strh	r3, [r7, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002698:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800269c:	2b00      	cmp	r3, #0
 800269e:	da0f      	bge.n	80026c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	f003 020f 	and.w	r2, r3, #15
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	3310      	adds	r3, #16
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	4413      	add	r3, r2
 80026b4:	3304      	adds	r3, #4
 80026b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	705a      	strb	r2, [r3, #1]
 80026be:	e00f      	b.n	80026e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026c0:	78fb      	ldrb	r3, [r7, #3]
 80026c2:	f003 020f 	and.w	r2, r3, #15
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	3304      	adds	r3, #4
 80026d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026ec:	883a      	ldrh	r2, [r7, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	78ba      	ldrb	r2, [r7, #2]
 80026f6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	785b      	ldrb	r3, [r3, #1]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800270a:	78bb      	ldrb	r3, [r7, #2]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d102      	bne.n	8002716 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_PCD_EP_Open+0xaa>
 8002720:	2302      	movs	r3, #2
 8002722:	e00e      	b.n	8002742 <HAL_PCD_EP_Open+0xc8>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68f9      	ldr	r1, [r7, #12]
 8002732:	4618      	mov	r0, r3
 8002734:	f001 fb8e 	bl	8003e54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8002740:	7afb      	ldrb	r3, [r7, #11]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	460b      	mov	r3, r1
 8002754:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002756:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800275a:	2b00      	cmp	r3, #0
 800275c:	da0f      	bge.n	800277e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	f003 020f 	and.w	r2, r3, #15
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4413      	add	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	3310      	adds	r3, #16
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	3304      	adds	r3, #4
 8002774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	705a      	strb	r2, [r3, #1]
 800277c:	e00f      	b.n	800279e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	f003 020f 	and.w	r2, r3, #15
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4413      	add	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	3304      	adds	r3, #4
 8002796:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800279e:	78fb      	ldrb	r3, [r7, #3]
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_PCD_EP_Close+0x6e>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e00e      	b.n	80027d6 <HAL_PCD_EP_Close+0x8c>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68f9      	ldr	r1, [r7, #12]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f001 fbcc 	bl	8003f64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3710      	adds	r7, #16
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	607a      	str	r2, [r7, #4]
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	460b      	mov	r3, r1
 80027ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027ee:	7afb      	ldrb	r3, [r7, #11]
 80027f0:	f003 020f 	and.w	r2, r3, #15
 80027f4:	4613      	mov	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4413      	add	r3, r2
 8002804:	3304      	adds	r3, #4
 8002806:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	2200      	movs	r2, #0
 8002818:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2200      	movs	r2, #0
 800281e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002820:	7afb      	ldrb	r3, [r7, #11]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	b2da      	uxtb	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	799b      	ldrb	r3, [r3, #6]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d102      	bne.n	800283a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	799b      	ldrb	r3, [r3, #6]
 8002842:	461a      	mov	r2, r3
 8002844:	6979      	ldr	r1, [r7, #20]
 8002846:	f001 fc69 	bl	800411c <USB_EPStartXfer>

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	f003 020f 	and.w	r2, r3, #15
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	460b      	mov	r3, r1
 8002892:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002894:	7afb      	ldrb	r3, [r7, #11]
 8002896:	f003 020f 	and.w	r2, r3, #15
 800289a:	4613      	mov	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	3310      	adds	r3, #16
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4413      	add	r3, r2
 80028a8:	3304      	adds	r3, #4
 80028aa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2200      	movs	r2, #0
 80028bc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2201      	movs	r2, #1
 80028c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028c4:	7afb      	ldrb	r3, [r7, #11]
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	799b      	ldrb	r3, [r3, #6]
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d102      	bne.n	80028de <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6818      	ldr	r0, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	799b      	ldrb	r3, [r3, #6]
 80028e6:	461a      	mov	r2, r3
 80028e8:	6979      	ldr	r1, [r7, #20]
 80028ea:	f001 fc17 	bl	800411c <USB_EPStartXfer>

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	7912      	ldrb	r2, [r2, #4]
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e04f      	b.n	80029b6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800291a:	2b00      	cmp	r3, #0
 800291c:	da0f      	bge.n	800293e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800291e:	78fb      	ldrb	r3, [r7, #3]
 8002920:	f003 020f 	and.w	r2, r3, #15
 8002924:	4613      	mov	r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	3310      	adds	r3, #16
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	3304      	adds	r3, #4
 8002934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	705a      	strb	r2, [r3, #1]
 800293c:	e00d      	b.n	800295a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	4413      	add	r3, r2
 8002950:	3304      	adds	r3, #4
 8002952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	b2da      	uxtb	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_PCD_EP_SetStall+0x82>
 8002976:	2302      	movs	r3, #2
 8002978:	e01d      	b.n	80029b6 <HAL_PCD_EP_SetStall+0xbe>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68f9      	ldr	r1, [r7, #12]
 8002988:	4618      	mov	r0, r3
 800298a:	f001 ff9f 	bl	80048cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	f003 030f 	and.w	r3, r3, #15
 8002994:	2b00      	cmp	r3, #0
 8002996:	d109      	bne.n	80029ac <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	7999      	ldrb	r1, [r3, #6]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80029a6:	461a      	mov	r2, r3
 80029a8:	f002 f990 	bl	8004ccc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
 80029c6:	460b      	mov	r3, r1
 80029c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	7912      	ldrb	r2, [r2, #4]
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e042      	b.n	8002a62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	da0f      	bge.n	8002a04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	f003 020f 	and.w	r2, r3, #15
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	3310      	adds	r3, #16
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4413      	add	r3, r2
 80029f8:	3304      	adds	r3, #4
 80029fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	705a      	strb	r2, [r3, #1]
 8002a02:	e00f      	b.n	8002a24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 020f 	and.w	r2, r3, #15
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_PCD_EP_ClrStall+0x86>
 8002a40:	2302      	movs	r3, #2
 8002a42:	e00e      	b.n	8002a62 <HAL_PCD_EP_ClrStall+0xa4>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68f9      	ldr	r1, [r7, #12]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f001 ffa8 	bl	80049a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	da0c      	bge.n	8002a98 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	f003 020f 	and.w	r2, r3, #15
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	3310      	adds	r3, #16
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	3304      	adds	r3, #4
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	e00c      	b.n	8002ab2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	f003 020f 	and.w	r2, r3, #15
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	3304      	adds	r3, #4
 8002ab0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68f9      	ldr	r1, [r7, #12]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f001 fdc7 	bl	800464c <USB_EPStopXfer>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ac2:	7afb      	ldrb	r3, [r7, #11]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af02      	add	r7, sp, #8
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	3310      	adds	r3, #16
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	3304      	adds	r3, #4
 8002af2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d901      	bls.n	8002b04 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e06b      	b.n	8002bdc <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d902      	bls.n	8002b20 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	3303      	adds	r3, #3
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b28:	e02a      	b.n	8002b80 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d902      	bls.n	8002b46 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3303      	adds	r3, #3
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	68d9      	ldr	r1, [r3, #12]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	4603      	mov	r3, r0
 8002b62:	6978      	ldr	r0, [r7, #20]
 8002b64:	f001 fe1c 	bl	80047a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	441a      	add	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	441a      	add	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d809      	bhi.n	8002baa <PCD_WriteEmptyTxFifo+0xde>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d203      	bcs.n	8002baa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1bf      	bne.n	8002b2a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	691a      	ldr	r2, [r3, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d811      	bhi.n	8002bda <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	6939      	ldr	r1, [r7, #16]
 8002bd2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	333c      	adds	r3, #60	; 0x3c
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	799b      	ldrb	r3, [r3, #6]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d17b      	bne.n	8002d12 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d015      	beq.n	8002c50 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	4a61      	ldr	r2, [pc, #388]	; (8002dac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	f240 80b9 	bls.w	8002da0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80b3 	beq.w	8002da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c46:	461a      	mov	r2, r3
 8002c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4c:	6093      	str	r3, [r2, #8]
 8002c4e:	e0a7      	b.n	8002da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d009      	beq.n	8002c6e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c66:	461a      	mov	r2, r3
 8002c68:	2320      	movs	r3, #32
 8002c6a:	6093      	str	r3, [r2, #8]
 8002c6c:	e098      	b.n	8002da0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f040 8093 	bne.w	8002da0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	4a4b      	ldr	r2, [pc, #300]	; (8002dac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d90f      	bls.n	8002ca2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	015a      	lsls	r2, r3, #5
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	4413      	add	r3, r2
 8002c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c9e:	6093      	str	r3, [r2, #8]
 8002ca0:	e07e      	b.n	8002da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a1a      	ldr	r2, [r3, #32]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	0159      	lsls	r1, r3, #5
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	440b      	add	r3, r1
 8002cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cce:	1ad2      	subs	r2, r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d114      	bne.n	8002d04 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002cec:	461a      	mov	r2, r3
 8002cee:	2101      	movs	r1, #1
 8002cf0:	f001 ffec 	bl	8004ccc <USB_EP0_OutStart>
 8002cf4:	e006      	b.n	8002d04 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	441a      	add	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	4619      	mov	r1, r3
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f004 faa2 	bl	8007254 <HAL_PCD_DataOutStageCallback>
 8002d10:	e046      	b.n	8002da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	4a26      	ldr	r2, [pc, #152]	; (8002db0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d124      	bne.n	8002d64 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00a      	beq.n	8002d3a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d30:	461a      	mov	r2, r3
 8002d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d36:	6093      	str	r3, [r2, #8]
 8002d38:	e032      	b.n	8002da0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d008      	beq.n	8002d56 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d50:	461a      	mov	r2, r3
 8002d52:	2320      	movs	r3, #32
 8002d54:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f004 fa79 	bl	8007254 <HAL_PCD_DataOutStageCallback>
 8002d62:	e01d      	b.n	8002da0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d114      	bne.n	8002d94 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	440b      	add	r3, r1
 8002d78:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d108      	bne.n	8002d94 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	2100      	movs	r1, #0
 8002d90:	f001 ff9c 	bl	8004ccc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	4619      	mov	r1, r3
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f004 fa5a 	bl	8007254 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3720      	adds	r7, #32
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	4f54300a 	.word	0x4f54300a
 8002db0:	4f54310a 	.word	0x4f54310a

08002db4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	333c      	adds	r3, #60	; 0x3c
 8002dcc:	3304      	adds	r3, #4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <PCD_EP_OutSetupPacket_int+0x88>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d90e      	bls.n	8002e08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d009      	beq.n	8002e08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e00:	461a      	mov	r2, r3
 8002e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f004 fa11 	bl	8007230 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <PCD_EP_OutSetupPacket_int+0x88>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d90c      	bls.n	8002e30 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	799b      	ldrb	r3, [r3, #6]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d108      	bne.n	8002e30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	f001 ff4e 	bl	8004ccc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	4f54300a 	.word	0x4f54300a

08002e40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	70fb      	strb	r3, [r7, #3]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d107      	bne.n	8002e6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e5e:	883b      	ldrh	r3, [r7, #0]
 8002e60:	0419      	lsls	r1, r3, #16
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e6c:	e028      	b.n	8002ec0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e74:	0c1b      	lsrs	r3, r3, #16
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	4413      	add	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	e00d      	b.n	8002e9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	3340      	adds	r3, #64	; 0x40
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	0c1b      	lsrs	r3, r3, #16
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	4413      	add	r3, r2
 8002e96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d3ec      	bcc.n	8002e82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ea8:	883b      	ldrh	r3, [r7, #0]
 8002eaa:	0418      	lsls	r0, r3, #16
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6819      	ldr	r1, [r3, #0]
 8002eb0:	78fb      	ldrb	r3, [r7, #3]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	4302      	orrs	r2, r0
 8002eb8:	3340      	adds	r3, #64	; 0x40
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e267      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d075      	beq.n	8003012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f26:	4b88      	ldr	r3, [pc, #544]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d00c      	beq.n	8002f4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f32:	4b85      	ldr	r3, [pc, #532]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d112      	bne.n	8002f64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3e:	4b82      	ldr	r3, [pc, #520]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f4a:	d10b      	bne.n	8002f64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4c:	4b7e      	ldr	r3, [pc, #504]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d05b      	beq.n	8003010 <HAL_RCC_OscConfig+0x108>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d157      	bne.n	8003010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e242      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6c:	d106      	bne.n	8002f7c <HAL_RCC_OscConfig+0x74>
 8002f6e:	4b76      	ldr	r3, [pc, #472]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a75      	ldr	r2, [pc, #468]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e01d      	b.n	8002fb8 <HAL_RCC_OscConfig+0xb0>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x98>
 8002f86:	4b70      	ldr	r3, [pc, #448]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a6f      	ldr	r2, [pc, #444]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b6d      	ldr	r3, [pc, #436]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a6c      	ldr	r2, [pc, #432]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCC_OscConfig+0xb0>
 8002fa0:	4b69      	ldr	r3, [pc, #420]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a68      	ldr	r2, [pc, #416]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b66      	ldr	r3, [pc, #408]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a65      	ldr	r2, [pc, #404]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fa8c 	bl	80014dc <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fa88 	bl	80014dc <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e207      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fda:	4b5b      	ldr	r3, [pc, #364]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xc0>
 8002fe6:	e014      	b.n	8003012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fa78 	bl	80014dc <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fa74 	bl	80014dc <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e1f3      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003002:	4b51      	ldr	r3, [pc, #324]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0xe8>
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d063      	beq.n	80030e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800301e:	4b4a      	ldr	r3, [pc, #296]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00b      	beq.n	8003042 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302a:	4b47      	ldr	r3, [pc, #284]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003032:	2b08      	cmp	r3, #8
 8003034:	d11c      	bne.n	8003070 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003036:	4b44      	ldr	r3, [pc, #272]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d116      	bne.n	8003070 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003042:	4b41      	ldr	r3, [pc, #260]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_RCC_OscConfig+0x152>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d001      	beq.n	800305a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e1c7      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305a:	4b3b      	ldr	r3, [pc, #236]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4937      	ldr	r1, [pc, #220]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306e:	e03a      	b.n	80030e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d020      	beq.n	80030ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003078:	4b34      	ldr	r3, [pc, #208]	; (800314c <HAL_RCC_OscConfig+0x244>)
 800307a:	2201      	movs	r2, #1
 800307c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307e:	f7fe fa2d 	bl	80014dc <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003086:	f7fe fa29 	bl	80014dc <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e1a8      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a4:	4b28      	ldr	r3, [pc, #160]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4925      	ldr	r1, [pc, #148]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	600b      	str	r3, [r1, #0]
 80030b8:	e015      	b.n	80030e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ba:	4b24      	ldr	r3, [pc, #144]	; (800314c <HAL_RCC_OscConfig+0x244>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c0:	f7fe fa0c 	bl	80014dc <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030c8:	f7fe fa08 	bl	80014dc <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e187      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030da:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d036      	beq.n	8003160 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fa:	4b15      	ldr	r3, [pc, #84]	; (8003150 <HAL_RCC_OscConfig+0x248>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003100:	f7fe f9ec 	bl	80014dc <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003108:	f7fe f9e8 	bl	80014dc <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e167      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311a:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_RCC_OscConfig+0x240>)
 800311c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x200>
 8003126:	e01b      	b.n	8003160 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003128:	4b09      	ldr	r3, [pc, #36]	; (8003150 <HAL_RCC_OscConfig+0x248>)
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312e:	f7fe f9d5 	bl	80014dc <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003134:	e00e      	b.n	8003154 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003136:	f7fe f9d1 	bl	80014dc <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d907      	bls.n	8003154 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e150      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
 8003148:	40023800 	.word	0x40023800
 800314c:	42470000 	.word	0x42470000
 8003150:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003154:	4b88      	ldr	r3, [pc, #544]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ea      	bne.n	8003136 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8097 	beq.w	800329c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003172:	4b81      	ldr	r3, [pc, #516]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10f      	bne.n	800319e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	4b7d      	ldr	r3, [pc, #500]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	4a7c      	ldr	r2, [pc, #496]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318c:	6413      	str	r3, [r2, #64]	; 0x40
 800318e:	4b7a      	ldr	r3, [pc, #488]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319a:	2301      	movs	r3, #1
 800319c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319e:	4b77      	ldr	r3, [pc, #476]	; (800337c <HAL_RCC_OscConfig+0x474>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d118      	bne.n	80031dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031aa:	4b74      	ldr	r3, [pc, #464]	; (800337c <HAL_RCC_OscConfig+0x474>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a73      	ldr	r2, [pc, #460]	; (800337c <HAL_RCC_OscConfig+0x474>)
 80031b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b6:	f7fe f991 	bl	80014dc <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031be:	f7fe f98d 	bl	80014dc <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e10c      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d0:	4b6a      	ldr	r3, [pc, #424]	; (800337c <HAL_RCC_OscConfig+0x474>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x2ea>
 80031e4:	4b64      	ldr	r3, [pc, #400]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	4a63      	ldr	r2, [pc, #396]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6713      	str	r3, [r2, #112]	; 0x70
 80031f0:	e01c      	b.n	800322c <HAL_RCC_OscConfig+0x324>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2b05      	cmp	r3, #5
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x30c>
 80031fa:	4b5f      	ldr	r3, [pc, #380]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	4a5e      	ldr	r2, [pc, #376]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003200:	f043 0304 	orr.w	r3, r3, #4
 8003204:	6713      	str	r3, [r2, #112]	; 0x70
 8003206:	4b5c      	ldr	r3, [pc, #368]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320a:	4a5b      	ldr	r2, [pc, #364]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6713      	str	r3, [r2, #112]	; 0x70
 8003212:	e00b      	b.n	800322c <HAL_RCC_OscConfig+0x324>
 8003214:	4b58      	ldr	r3, [pc, #352]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a57      	ldr	r2, [pc, #348]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
 8003220:	4b55      	ldr	r3, [pc, #340]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003224:	4a54      	ldr	r2, [pc, #336]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003226:	f023 0304 	bic.w	r3, r3, #4
 800322a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d015      	beq.n	8003260 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003234:	f7fe f952 	bl	80014dc <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323a:	e00a      	b.n	8003252 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800323c:	f7fe f94e 	bl	80014dc <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e0cb      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003252:	4b49      	ldr	r3, [pc, #292]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0ee      	beq.n	800323c <HAL_RCC_OscConfig+0x334>
 800325e:	e014      	b.n	800328a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003260:	f7fe f93c 	bl	80014dc <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003266:	e00a      	b.n	800327e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003268:	f7fe f938 	bl	80014dc <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e0b5      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800327e:	4b3e      	ldr	r3, [pc, #248]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1ee      	bne.n	8003268 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328a:	7dfb      	ldrb	r3, [r7, #23]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d105      	bne.n	800329c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003290:	4b39      	ldr	r3, [pc, #228]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	4a38      	ldr	r2, [pc, #224]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80a1 	beq.w	80033e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032a6:	4b34      	ldr	r3, [pc, #208]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 030c 	and.w	r3, r3, #12
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d05c      	beq.n	800336c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d141      	bne.n	800333e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ba:	4b31      	ldr	r3, [pc, #196]	; (8003380 <HAL_RCC_OscConfig+0x478>)
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7fe f90c 	bl	80014dc <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c8:	f7fe f908 	bl	80014dc <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e087      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032da:	4b27      	ldr	r3, [pc, #156]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69da      	ldr	r2, [r3, #28]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	019b      	lsls	r3, r3, #6
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	3b01      	subs	r3, #1
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	061b      	lsls	r3, r3, #24
 800330a:	491b      	ldr	r1, [pc, #108]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_RCC_OscConfig+0x478>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7fe f8e1 	bl	80014dc <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800331e:	f7fe f8dd 	bl	80014dc <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e05c      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x416>
 800333c:	e054      	b.n	80033e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_RCC_OscConfig+0x478>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe f8ca 	bl	80014dc <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334c:	f7fe f8c6 	bl	80014dc <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e045      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_RCC_OscConfig+0x470>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x444>
 800336a:	e03d      	b.n	80033e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d107      	bne.n	8003384 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e038      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
 8003378:	40023800 	.word	0x40023800
 800337c:	40007000 	.word	0x40007000
 8003380:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003384:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <HAL_RCC_OscConfig+0x4ec>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d028      	beq.n	80033e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339c:	429a      	cmp	r2, r3
 800339e:	d121      	bne.n	80033e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d11a      	bne.n	80033e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033b4:	4013      	ands	r3, r2
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033bc:	4293      	cmp	r3, r2
 80033be:	d111      	bne.n	80033e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	085b      	lsrs	r3, r3, #1
 80033cc:	3b01      	subs	r3, #1
 80033ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d107      	bne.n	80033e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d001      	beq.n	80033e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800

080033f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e0cc      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800340c:	4b68      	ldr	r3, [pc, #416]	; (80035b0 <HAL_RCC_ClockConfig+0x1b8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d90c      	bls.n	8003434 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b65      	ldr	r3, [pc, #404]	; (80035b0 <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	4b63      	ldr	r3, [pc, #396]	; (80035b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0b8      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d020      	beq.n	8003482 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800344c:	4b59      	ldr	r3, [pc, #356]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4a58      	ldr	r2, [pc, #352]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003456:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003464:	4b53      	ldr	r3, [pc, #332]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	4a52      	ldr	r2, [pc, #328]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800346e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003470:	4b50      	ldr	r3, [pc, #320]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	494d      	ldr	r1, [pc, #308]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800347e:	4313      	orrs	r3, r2
 8003480:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d044      	beq.n	8003518 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d119      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e07f      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d003      	beq.n	80034b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b6:	4b3f      	ldr	r3, [pc, #252]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e06f      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c6:	4b3b      	ldr	r3, [pc, #236]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e067      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034d6:	4b37      	ldr	r3, [pc, #220]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f023 0203 	bic.w	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4934      	ldr	r1, [pc, #208]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e8:	f7fd fff8 	bl	80014dc <HAL_GetTick>
 80034ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f0:	f7fd fff4 	bl	80014dc <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e04f      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003506:	4b2b      	ldr	r3, [pc, #172]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 020c 	and.w	r2, r3, #12
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	429a      	cmp	r2, r3
 8003516:	d1eb      	bne.n	80034f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003518:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <HAL_RCC_ClockConfig+0x1b8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d20c      	bcs.n	8003540 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b20      	ldr	r3, [pc, #128]	; (80035b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e032      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800354c:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4916      	ldr	r1, [pc, #88]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	490e      	ldr	r1, [pc, #56]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	4313      	orrs	r3, r2
 800357c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800357e:	f000 f821 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 8003582:	4602      	mov	r2, r0
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	490a      	ldr	r1, [pc, #40]	; (80035b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003590:	5ccb      	ldrb	r3, [r1, r3]
 8003592:	fa22 f303 	lsr.w	r3, r2, r3
 8003596:	4a09      	ldr	r2, [pc, #36]	; (80035bc <HAL_RCC_ClockConfig+0x1c4>)
 8003598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_ClockConfig+0x1c8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd ff58 	bl	8001454 <HAL_InitTick>

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40023c00 	.word	0x40023c00
 80035b4:	40023800 	.word	0x40023800
 80035b8:	0800d388 	.word	0x0800d388
 80035bc:	20000000 	.word	0x20000000
 80035c0:	20000004 	.word	0x20000004

080035c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c8:	b090      	sub	sp, #64	; 0x40
 80035ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	637b      	str	r3, [r7, #52]	; 0x34
 80035d0:	2300      	movs	r3, #0
 80035d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d4:	2300      	movs	r3, #0
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035dc:	4b59      	ldr	r3, [pc, #356]	; (8003744 <HAL_RCC_GetSysClockFreq+0x180>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 030c 	and.w	r3, r3, #12
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d00d      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x40>
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	f200 80a1 	bhi.w	8003730 <HAL_RCC_GetSysClockFreq+0x16c>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d002      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x34>
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x3a>
 80035f6:	e09b      	b.n	8003730 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_RCC_GetSysClockFreq+0x184>)
 80035fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80035fc:	e09b      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035fe:	4b53      	ldr	r3, [pc, #332]	; (800374c <HAL_RCC_GetSysClockFreq+0x188>)
 8003600:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003602:	e098      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003604:	4b4f      	ldr	r3, [pc, #316]	; (8003744 <HAL_RCC_GetSysClockFreq+0x180>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800360c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800360e:	4b4d      	ldr	r3, [pc, #308]	; (8003744 <HAL_RCC_GetSysClockFreq+0x180>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d028      	beq.n	800366c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361a:	4b4a      	ldr	r3, [pc, #296]	; (8003744 <HAL_RCC_GetSysClockFreq+0x180>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	099b      	lsrs	r3, r3, #6
 8003620:	2200      	movs	r2, #0
 8003622:	623b      	str	r3, [r7, #32]
 8003624:	627a      	str	r2, [r7, #36]	; 0x24
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800362c:	2100      	movs	r1, #0
 800362e:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCC_GetSysClockFreq+0x188>)
 8003630:	fb03 f201 	mul.w	r2, r3, r1
 8003634:	2300      	movs	r3, #0
 8003636:	fb00 f303 	mul.w	r3, r0, r3
 800363a:	4413      	add	r3, r2
 800363c:	4a43      	ldr	r2, [pc, #268]	; (800374c <HAL_RCC_GetSysClockFreq+0x188>)
 800363e:	fba0 1202 	umull	r1, r2, r0, r2
 8003642:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003644:	460a      	mov	r2, r1
 8003646:	62ba      	str	r2, [r7, #40]	; 0x28
 8003648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364a:	4413      	add	r3, r2
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800364e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003650:	2200      	movs	r2, #0
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	61fa      	str	r2, [r7, #28]
 8003656:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800365a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800365e:	f7fd fafb 	bl	8000c58 <__aeabi_uldivmod>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4613      	mov	r3, r2
 8003668:	63fb      	str	r3, [r7, #60]	; 0x3c
 800366a:	e053      	b.n	8003714 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800366c:	4b35      	ldr	r3, [pc, #212]	; (8003744 <HAL_RCC_GetSysClockFreq+0x180>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	099b      	lsrs	r3, r3, #6
 8003672:	2200      	movs	r2, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	617a      	str	r2, [r7, #20]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800367e:	f04f 0b00 	mov.w	fp, #0
 8003682:	4652      	mov	r2, sl
 8003684:	465b      	mov	r3, fp
 8003686:	f04f 0000 	mov.w	r0, #0
 800368a:	f04f 0100 	mov.w	r1, #0
 800368e:	0159      	lsls	r1, r3, #5
 8003690:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003694:	0150      	lsls	r0, r2, #5
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	ebb2 080a 	subs.w	r8, r2, sl
 800369e:	eb63 090b 	sbc.w	r9, r3, fp
 80036a2:	f04f 0200 	mov.w	r2, #0
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036b6:	ebb2 0408 	subs.w	r4, r2, r8
 80036ba:	eb63 0509 	sbc.w	r5, r3, r9
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	00eb      	lsls	r3, r5, #3
 80036c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036cc:	00e2      	lsls	r2, r4, #3
 80036ce:	4614      	mov	r4, r2
 80036d0:	461d      	mov	r5, r3
 80036d2:	eb14 030a 	adds.w	r3, r4, sl
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	eb45 030b 	adc.w	r3, r5, fp
 80036dc:	607b      	str	r3, [r7, #4]
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036ea:	4629      	mov	r1, r5
 80036ec:	028b      	lsls	r3, r1, #10
 80036ee:	4621      	mov	r1, r4
 80036f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036f4:	4621      	mov	r1, r4
 80036f6:	028a      	lsls	r2, r1, #10
 80036f8:	4610      	mov	r0, r2
 80036fa:	4619      	mov	r1, r3
 80036fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036fe:	2200      	movs	r2, #0
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	60fa      	str	r2, [r7, #12]
 8003704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003708:	f7fd faa6 	bl	8000c58 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <HAL_RCC_GetSysClockFreq+0x180>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	3301      	adds	r3, #1
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003724:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800372e:	e002      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCC_GetSysClockFreq+0x184>)
 8003732:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003738:	4618      	mov	r0, r3
 800373a:	3740      	adds	r7, #64	; 0x40
 800373c:	46bd      	mov	sp, r7
 800373e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	00f42400 	.word	0x00f42400
 800374c:	017d7840 	.word	0x017d7840

08003750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003754:	4b03      	ldr	r3, [pc, #12]	; (8003764 <HAL_RCC_GetHCLKFreq+0x14>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20000000 	.word	0x20000000

08003768 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003768:	b084      	sub	sp, #16
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	f107 001c 	add.w	r0, r7, #28
 8003776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800377a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800377e:	2b01      	cmp	r3, #1
 8003780:	d123      	bne.n	80037ca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003786:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d105      	bne.n	80037be <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f001 fae2 	bl	8004d88 <USB_CoreReset>
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]
 80037c8:	e01b      	b.n	8003802 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f001 fad6 	bl	8004d88 <USB_CoreReset>
 80037dc:	4603      	mov	r3, r0
 80037de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38
 80037f4:	e005      	b.n	8003802 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003802:	7fbb      	ldrb	r3, [r7, #30]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d10b      	bne.n	8003820 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f043 0206 	orr.w	r2, r3, #6
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f043 0220 	orr.w	r2, r3, #32
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003820:	7bfb      	ldrb	r3, [r7, #15]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800382c:	b004      	add	sp, #16
 800382e:	4770      	bx	lr

08003830 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	4613      	mov	r3, r2
 800383c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800383e:	79fb      	ldrb	r3, [r7, #7]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d165      	bne.n	8003910 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4a41      	ldr	r2, [pc, #260]	; (800394c <USB_SetTurnaroundTime+0x11c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d906      	bls.n	800385a <USB_SetTurnaroundTime+0x2a>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4a40      	ldr	r2, [pc, #256]	; (8003950 <USB_SetTurnaroundTime+0x120>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d202      	bcs.n	800385a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003854:	230f      	movs	r3, #15
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	e062      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <USB_SetTurnaroundTime+0x120>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d306      	bcc.n	8003870 <USB_SetTurnaroundTime+0x40>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	4a3b      	ldr	r2, [pc, #236]	; (8003954 <USB_SetTurnaroundTime+0x124>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d202      	bcs.n	8003870 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800386a:	230e      	movs	r3, #14
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e057      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4a38      	ldr	r2, [pc, #224]	; (8003954 <USB_SetTurnaroundTime+0x124>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d306      	bcc.n	8003886 <USB_SetTurnaroundTime+0x56>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	4a37      	ldr	r2, [pc, #220]	; (8003958 <USB_SetTurnaroundTime+0x128>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d202      	bcs.n	8003886 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003880:	230d      	movs	r3, #13
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e04c      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	4a33      	ldr	r2, [pc, #204]	; (8003958 <USB_SetTurnaroundTime+0x128>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d306      	bcc.n	800389c <USB_SetTurnaroundTime+0x6c>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	4a32      	ldr	r2, [pc, #200]	; (800395c <USB_SetTurnaroundTime+0x12c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d802      	bhi.n	800389c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003896:	230c      	movs	r3, #12
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	e041      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4a2f      	ldr	r2, [pc, #188]	; (800395c <USB_SetTurnaroundTime+0x12c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d906      	bls.n	80038b2 <USB_SetTurnaroundTime+0x82>
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4a2e      	ldr	r2, [pc, #184]	; (8003960 <USB_SetTurnaroundTime+0x130>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d802      	bhi.n	80038b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038ac:	230b      	movs	r3, #11
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	e036      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4a2a      	ldr	r2, [pc, #168]	; (8003960 <USB_SetTurnaroundTime+0x130>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d906      	bls.n	80038c8 <USB_SetTurnaroundTime+0x98>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4a29      	ldr	r2, [pc, #164]	; (8003964 <USB_SetTurnaroundTime+0x134>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d802      	bhi.n	80038c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80038c2:	230a      	movs	r3, #10
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	e02b      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4a26      	ldr	r2, [pc, #152]	; (8003964 <USB_SetTurnaroundTime+0x134>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d906      	bls.n	80038de <USB_SetTurnaroundTime+0xae>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4a25      	ldr	r2, [pc, #148]	; (8003968 <USB_SetTurnaroundTime+0x138>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d202      	bcs.n	80038de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038d8:	2309      	movs	r3, #9
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e020      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4a21      	ldr	r2, [pc, #132]	; (8003968 <USB_SetTurnaroundTime+0x138>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d306      	bcc.n	80038f4 <USB_SetTurnaroundTime+0xc4>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4a20      	ldr	r2, [pc, #128]	; (800396c <USB_SetTurnaroundTime+0x13c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d802      	bhi.n	80038f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038ee:	2308      	movs	r3, #8
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	e015      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4a1d      	ldr	r2, [pc, #116]	; (800396c <USB_SetTurnaroundTime+0x13c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d906      	bls.n	800390a <USB_SetTurnaroundTime+0xda>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	4a1c      	ldr	r2, [pc, #112]	; (8003970 <USB_SetTurnaroundTime+0x140>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d202      	bcs.n	800390a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003904:	2307      	movs	r3, #7
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	e00a      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800390a:	2306      	movs	r3, #6
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e007      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003910:	79fb      	ldrb	r3, [r7, #7]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d102      	bne.n	800391c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003916:	2309      	movs	r3, #9
 8003918:	617b      	str	r3, [r7, #20]
 800391a:	e001      	b.n	8003920 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800391c:	2309      	movs	r3, #9
 800391e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	029b      	lsls	r3, r3, #10
 8003934:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003938:	431a      	orrs	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	00d8acbf 	.word	0x00d8acbf
 8003950:	00e4e1c0 	.word	0x00e4e1c0
 8003954:	00f42400 	.word	0x00f42400
 8003958:	01067380 	.word	0x01067380
 800395c:	011a499f 	.word	0x011a499f
 8003960:	01312cff 	.word	0x01312cff
 8003964:	014ca43f 	.word	0x014ca43f
 8003968:	016e3600 	.word	0x016e3600
 800396c:	01a6ab1f 	.word	0x01a6ab1f
 8003970:	01e84800 	.word	0x01e84800

08003974 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f043 0201 	orr.w	r2, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 0201 	bic.w	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d115      	bne.n	8003a06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80039e6:	200a      	movs	r0, #10
 80039e8:	f7fd fd84 	bl	80014f4 <HAL_Delay>
      ms += 10U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	330a      	adds	r3, #10
 80039f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f001 f939 	bl	8004c6a <USB_GetMode>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d01e      	beq.n	8003a3c <USB_SetCurrentMode+0x84>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2bc7      	cmp	r3, #199	; 0xc7
 8003a02:	d9f0      	bls.n	80039e6 <USB_SetCurrentMode+0x2e>
 8003a04:	e01a      	b.n	8003a3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a06:	78fb      	ldrb	r3, [r7, #3]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d115      	bne.n	8003a38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a18:	200a      	movs	r0, #10
 8003a1a:	f7fd fd6b 	bl	80014f4 <HAL_Delay>
      ms += 10U;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	330a      	adds	r3, #10
 8003a22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f001 f920 	bl	8004c6a <USB_GetMode>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <USB_SetCurrentMode+0x84>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2bc7      	cmp	r3, #199	; 0xc7
 8003a34:	d9f0      	bls.n	8003a18 <USB_SetCurrentMode+0x60>
 8003a36:	e001      	b.n	8003a3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e005      	b.n	8003a48 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2bc8      	cmp	r3, #200	; 0xc8
 8003a40:	d101      	bne.n	8003a46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a50:	b084      	sub	sp, #16
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b086      	sub	sp, #24
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
 8003a6e:	e009      	b.n	8003a84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	3340      	adds	r3, #64	; 0x40
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	3301      	adds	r3, #1
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	2b0e      	cmp	r3, #14
 8003a88:	d9f2      	bls.n	8003a70 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a8a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d11c      	bne.n	8003acc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa0:	f043 0302 	orr.w	r3, r3, #2
 8003aa4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aaa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	639a      	str	r2, [r3, #56]	; 0x38
 8003aca:	e00b      	b.n	8003ae4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003aea:	461a      	mov	r2, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003af0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d10d      	bne.n	8003b14 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003af8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b00:	2100      	movs	r1, #0
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f968 	bl	8003dd8 <USB_SetDevSpeed>
 8003b08:	e008      	b.n	8003b1c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f963 	bl	8003dd8 <USB_SetDevSpeed>
 8003b12:	e003      	b.n	8003b1c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b14:	2103      	movs	r1, #3
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f95e 	bl	8003dd8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b1c:	2110      	movs	r1, #16
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f8fa 	bl	8003d18 <USB_FlushTxFifo>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 f924 	bl	8003d7c <USB_FlushRxFifo>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b44:	461a      	mov	r2, r3
 8003b46:	2300      	movs	r3, #0
 8003b48:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b50:	461a      	mov	r2, r3
 8003b52:	2300      	movs	r3, #0
 8003b54:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e043      	b.n	8003bf0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b7e:	d118      	bne.n	8003bb2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b92:	461a      	mov	r2, r3
 8003b94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	e013      	b.n	8003bc4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	e008      	b.n	8003bc4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be2:	461a      	mov	r2, r3
 8003be4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003be8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	3301      	adds	r3, #1
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d3b5      	bcc.n	8003b68 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	e043      	b.n	8003c8a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c18:	d118      	bne.n	8003c4c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	e013      	b.n	8003c5e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c42:	461a      	mov	r2, r3
 8003c44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e008      	b.n	8003c5e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c58:	461a      	mov	r2, r3
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	3301      	adds	r3, #1
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003c8e:	461a      	mov	r2, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d3b5      	bcc.n	8003c02 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ca4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003cb6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	f043 0210 	orr.w	r2, r3, #16
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <USB_DevInit+0x2c4>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cd8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f043 0208 	orr.w	r2, r3, #8
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003cec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d107      	bne.n	8003d04 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003cfc:	f043 0304 	orr.w	r3, r3, #4
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d10:	b004      	add	sp, #16
 8003d12:	4770      	bx	lr
 8003d14:	803c3800 	.word	0x803c3800

08003d18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003d32:	d901      	bls.n	8003d38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e01b      	b.n	8003d70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	daf2      	bge.n	8003d26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	019b      	lsls	r3, r3, #6
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3301      	adds	r3, #1
 8003d54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003d5c:	d901      	bls.n	8003d62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e006      	b.n	8003d70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d0f0      	beq.n	8003d50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003d94:	d901      	bls.n	8003d9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e018      	b.n	8003dcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	daf2      	bge.n	8003d88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2210      	movs	r2, #16
 8003daa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3301      	adds	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003db8:	d901      	bls.n	8003dbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e006      	b.n	8003dcc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0310 	and.w	r3, r3, #16
 8003dc6:	2b10      	cmp	r3, #16
 8003dc8:	d0f0      	beq.n	8003dac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	68f9      	ldr	r1, [r7, #12]
 8003df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3714      	adds	r7, #20
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b087      	sub	sp, #28
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 0306 	and.w	r3, r3, #6
 8003e22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	75fb      	strb	r3, [r7, #23]
 8003e2e:	e00a      	b.n	8003e46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d002      	beq.n	8003e3c <USB_GetDevSpeed+0x32>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b06      	cmp	r3, #6
 8003e3a:	d102      	bne.n	8003e42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	75fb      	strb	r3, [r7, #23]
 8003e40:	e001      	b.n	8003e46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e42:	230f      	movs	r3, #15
 8003e44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	371c      	adds	r7, #28
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d13a      	bne.n	8003ee6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	f003 030f 	and.w	r3, r3, #15
 8003e80:	2101      	movs	r1, #1
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	68f9      	ldr	r1, [r7, #12]
 8003e8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d155      	bne.n	8003f54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	791b      	ldrb	r3, [r3, #4]
 8003ec2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ec4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	059b      	lsls	r3, r3, #22
 8003eca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	0151      	lsls	r1, r2, #5
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	440a      	add	r2, r1
 8003ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	e036      	b.n	8003f54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8003efc:	041b      	lsls	r3, r3, #16
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11a      	bne.n	8003f54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	791b      	ldrb	r3, [r3, #4]
 8003f38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
	...

08003f64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	785b      	ldrb	r3, [r3, #1]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d161      	bne.n	8004044 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f96:	d11f      	bne.n	8003fd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	0151      	lsls	r1, r2, #5
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	440a      	add	r2, r1
 8003fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	015a      	lsls	r2, r3, #5
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	0151      	lsls	r1, r2, #5
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	440a      	add	r2, r1
 8003fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	2101      	movs	r1, #1
 8003fea:	fa01 f303 	lsl.w	r3, r1, r3
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	68f9      	ldr	r1, [r7, #12]
 8003ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004002:	69da      	ldr	r2, [r3, #28]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	2101      	movs	r1, #1
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	b29b      	uxth	r3, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	68f9      	ldr	r1, [r7, #12]
 8004018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800401c:	4013      	ands	r3, r2
 800401e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	0159      	lsls	r1, r3, #5
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	440b      	add	r3, r1
 8004036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403a:	4619      	mov	r1, r3
 800403c:	4b35      	ldr	r3, [pc, #212]	; (8004114 <USB_DeactivateEndpoint+0x1b0>)
 800403e:	4013      	ands	r3, r2
 8004040:	600b      	str	r3, [r1, #0]
 8004042:	e060      	b.n	8004106 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004056:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800405a:	d11f      	bne.n	800409c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	440a      	add	r2, r1
 8004072:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004076:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800407a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	0151      	lsls	r1, r2, #5
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	440a      	add	r2, r1
 8004092:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004096:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800409a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	f003 030f 	and.w	r3, r3, #15
 80040ac:	2101      	movs	r1, #1
 80040ae:	fa01 f303 	lsl.w	r3, r1, r3
 80040b2:	041b      	lsls	r3, r3, #16
 80040b4:	43db      	mvns	r3, r3
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040bc:	4013      	ands	r3, r2
 80040be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	2101      	movs	r1, #1
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	43db      	mvns	r3, r3
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040e0:	4013      	ands	r3, r2
 80040e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	0159      	lsls	r1, r3, #5
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	440b      	add	r3, r1
 80040fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040fe:	4619      	mov	r1, r3
 8004100:	4b05      	ldr	r3, [pc, #20]	; (8004118 <USB_DeactivateEndpoint+0x1b4>)
 8004102:	4013      	ands	r3, r2
 8004104:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	ec337800 	.word	0xec337800
 8004118:	eff37800 	.word	0xeff37800

0800411c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	; 0x28
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	2b01      	cmp	r3, #1
 800413a:	f040 817a 	bne.w	8004432 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d132      	bne.n	80041ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	440a      	add	r2, r1
 800415c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004160:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004164:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004168:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	440a      	add	r2, r1
 8004180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004184:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004188:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	69fa      	ldr	r2, [r7, #28]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a4:	0cdb      	lsrs	r3, r3, #19
 80041a6:	04db      	lsls	r3, r3, #19
 80041a8:	6113      	str	r3, [r2, #16]
 80041aa:	e092      	b.n	80042d2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	0151      	lsls	r1, r2, #5
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	440a      	add	r2, r1
 80041c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c6:	0cdb      	lsrs	r3, r3, #19
 80041c8:	04db      	lsls	r3, r3, #19
 80041ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	0151      	lsls	r1, r2, #5
 80041de:	69fa      	ldr	r2, [r7, #28]
 80041e0:	440a      	add	r2, r1
 80041e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041ee:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d11a      	bne.n	800422c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d903      	bls.n	800420a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	0151      	lsls	r1, r2, #5
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	440a      	add	r2, r1
 8004220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004224:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004228:	6113      	str	r3, [r2, #16]
 800422a:	e01b      	b.n	8004264 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004238:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6919      	ldr	r1, [r3, #16]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	440b      	add	r3, r1
 8004244:	1e59      	subs	r1, r3, #1
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	fbb1 f3f3 	udiv	r3, r1, r3
 800424e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004250:	4ba2      	ldr	r3, [pc, #648]	; (80044dc <USB_EPStartXfer+0x3c0>)
 8004252:	400b      	ands	r3, r1
 8004254:	69b9      	ldr	r1, [r7, #24]
 8004256:	0148      	lsls	r0, r1, #5
 8004258:	69f9      	ldr	r1, [r7, #28]
 800425a:	4401      	add	r1, r0
 800425c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004260:	4313      	orrs	r3, r2
 8004262:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	015a      	lsls	r2, r3, #5
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800427a:	69b9      	ldr	r1, [r7, #24]
 800427c:	0148      	lsls	r0, r1, #5
 800427e:	69f9      	ldr	r1, [r7, #28]
 8004280:	4401      	add	r1, r0
 8004282:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004286:	4313      	orrs	r3, r2
 8004288:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	791b      	ldrb	r3, [r3, #4]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d11f      	bne.n	80042d2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80042b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	0151      	lsls	r1, r2, #5
 80042c4:	69fa      	ldr	r2, [r7, #28]
 80042c6:	440a      	add	r2, r1
 80042c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80042d2:	79fb      	ldrb	r3, [r7, #7]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d14b      	bne.n	8004370 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	461a      	mov	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	791b      	ldrb	r3, [r3, #4]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d128      	bne.n	800434e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d110      	bne.n	800432e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	4413      	add	r3, r2
 8004314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	0151      	lsls	r1, r2, #5
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	440a      	add	r2, r1
 8004322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004326:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	e00f      	b.n	800434e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	0151      	lsls	r1, r2, #5
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	440a      	add	r2, r1
 8004344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800434c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	4413      	add	r3, r2
 8004356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	0151      	lsls	r1, r2, #5
 8004360:	69fa      	ldr	r2, [r7, #28]
 8004362:	440a      	add	r2, r1
 8004364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004368:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e165      	b.n	800463c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	0151      	lsls	r1, r2, #5
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	440a      	add	r2, r1
 8004386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800438a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800438e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	791b      	ldrb	r3, [r3, #4]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d015      	beq.n	80043c4 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 814d 	beq.w	800463c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	2101      	movs	r1, #1
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	69f9      	ldr	r1, [r7, #28]
 80043ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043be:	4313      	orrs	r3, r2
 80043c0:	634b      	str	r3, [r1, #52]	; 0x34
 80043c2:	e13b      	b.n	800463c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d110      	bne.n	80043f6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	0151      	lsls	r1, r2, #5
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	440a      	add	r2, r1
 80043ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	e00f      	b.n	8004416 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	0151      	lsls	r1, r2, #5
 8004408:	69fa      	ldr	r2, [r7, #28]
 800440a:	440a      	add	r2, r1
 800440c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004414:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	68d9      	ldr	r1, [r3, #12]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	781a      	ldrb	r2, [r3, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	b298      	uxth	r0, r3
 8004424:	79fb      	ldrb	r3, [r7, #7]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	4603      	mov	r3, r0
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f9b8 	bl	80047a0 <USB_WritePacket>
 8004430:	e104      	b.n	800463c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	0151      	lsls	r1, r2, #5
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	440a      	add	r2, r1
 8004448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800444c:	0cdb      	lsrs	r3, r3, #19
 800444e:	04db      	lsls	r3, r3, #19
 8004450:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	015a      	lsls	r2, r3, #5
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	4413      	add	r3, r2
 800445a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	0151      	lsls	r1, r2, #5
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	440a      	add	r2, r1
 8004468:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800446c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004470:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004474:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d131      	bne.n	80044e0 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044aa:	69b9      	ldr	r1, [r7, #24]
 80044ac:	0148      	lsls	r0, r1, #5
 80044ae:	69f9      	ldr	r1, [r7, #28]
 80044b0:	4401      	add	r1, r0
 80044b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044b6:	4313      	orrs	r3, r2
 80044b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	0151      	lsls	r1, r2, #5
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	440a      	add	r2, r1
 80044d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044d8:	6113      	str	r3, [r2, #16]
 80044da:	e061      	b.n	80045a0 <USB_EPStartXfer+0x484>
 80044dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d123      	bne.n	8004530 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fe:	69b9      	ldr	r1, [r7, #24]
 8004500:	0148      	lsls	r0, r1, #5
 8004502:	69f9      	ldr	r1, [r7, #28]
 8004504:	4401      	add	r1, r0
 8004506:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800450a:	4313      	orrs	r3, r2
 800450c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	69fa      	ldr	r2, [r7, #28]
 8004522:	440a      	add	r2, r1
 8004524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004528:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800452c:	6113      	str	r3, [r2, #16]
 800452e:	e037      	b.n	80045a0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	4413      	add	r3, r2
 800453a:	1e5a      	subs	r2, r3, #1
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	8afa      	ldrh	r2, [r7, #22]
 800454c:	fb03 f202 	mul.w	r2, r3, r2
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004560:	691a      	ldr	r2, [r3, #16]
 8004562:	8afb      	ldrh	r3, [r7, #22]
 8004564:	04d9      	lsls	r1, r3, #19
 8004566:	4b38      	ldr	r3, [pc, #224]	; (8004648 <USB_EPStartXfer+0x52c>)
 8004568:	400b      	ands	r3, r1
 800456a:	69b9      	ldr	r1, [r7, #24]
 800456c:	0148      	lsls	r0, r1, #5
 800456e:	69f9      	ldr	r1, [r7, #28]
 8004570:	4401      	add	r1, r0
 8004572:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004576:	4313      	orrs	r3, r2
 8004578:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004590:	69b9      	ldr	r1, [r7, #24]
 8004592:	0148      	lsls	r0, r1, #5
 8004594:	69f9      	ldr	r1, [r7, #28]
 8004596:	4401      	add	r1, r0
 8004598:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800459c:	4313      	orrs	r3, r2
 800459e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d10d      	bne.n	80045c2 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	68d9      	ldr	r1, [r3, #12]
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045be:	460a      	mov	r2, r1
 80045c0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	791b      	ldrb	r3, [r3, #4]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d128      	bne.n	800461c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d110      	bne.n	80045fc <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	015a      	lsls	r2, r3, #5
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	4413      	add	r3, r2
 80045e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	0151      	lsls	r1, r2, #5
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	440a      	add	r2, r1
 80045f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	e00f      	b.n	800461c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	0151      	lsls	r1, r2, #5
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	440a      	add	r2, r1
 8004612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800461a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004636:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800463a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3720      	adds	r7, #32
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	1ff80000 	.word	0x1ff80000

0800464c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800464c:	b480      	push	{r7}
 800464e:	b087      	sub	sp, #28
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004656:	2300      	movs	r3, #0
 8004658:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d14a      	bne.n	8004700 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	015a      	lsls	r2, r3, #5
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4413      	add	r3, r2
 8004674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800467e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004682:	f040 8086 	bne.w	8004792 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	7812      	ldrb	r2, [r2, #0]
 800469a:	0151      	lsls	r1, r2, #5
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	440a      	add	r2, r1
 80046a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046a8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	0151      	lsls	r1, r2, #5
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	440a      	add	r2, r1
 80046c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046cc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3301      	adds	r3, #1
 80046d2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80046da:	4293      	cmp	r3, r2
 80046dc:	d902      	bls.n	80046e4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	75fb      	strb	r3, [r7, #23]
          break;
 80046e2:	e056      	b.n	8004792 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046fc:	d0e7      	beq.n	80046ce <USB_EPStopXfer+0x82>
 80046fe:	e048      	b.n	8004792 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004718:	d13b      	bne.n	8004792 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	0151      	lsls	r1, r2, #5
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	440a      	add	r2, r1
 8004734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004738:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800473c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	7812      	ldrb	r2, [r2, #0]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	693a      	ldr	r2, [r7, #16]
 8004756:	440a      	add	r2, r1
 8004758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800475c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004760:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3301      	adds	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f242 7210 	movw	r2, #10000	; 0x2710
 800476e:	4293      	cmp	r3, r2
 8004770:	d902      	bls.n	8004778 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
          break;
 8004776:	e00c      	b.n	8004792 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800478c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004790:	d0e7      	beq.n	8004762 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004792:	7dfb      	ldrb	r3, [r7, #23]
}
 8004794:	4618      	mov	r0, r3
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b089      	sub	sp, #36	; 0x24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	4611      	mov	r1, r2
 80047ac:	461a      	mov	r2, r3
 80047ae:	460b      	mov	r3, r1
 80047b0:	71fb      	strb	r3, [r7, #7]
 80047b2:	4613      	mov	r3, r2
 80047b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80047be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d123      	bne.n	800480e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047c6:	88bb      	ldrh	r3, [r7, #4]
 80047c8:	3303      	adds	r3, #3
 80047ca:	089b      	lsrs	r3, r3, #2
 80047cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047ce:	2300      	movs	r3, #0
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	e018      	b.n	8004806 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047d4:	79fb      	ldrb	r3, [r7, #7]
 80047d6:	031a      	lsls	r2, r3, #12
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e0:	461a      	mov	r2, r3
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	3301      	adds	r3, #1
 80047ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	3301      	adds	r3, #1
 80047f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	3301      	adds	r3, #1
 80047f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	3301      	adds	r3, #1
 80047fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	3301      	adds	r3, #1
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	429a      	cmp	r2, r3
 800480c:	d3e2      	bcc.n	80047d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3724      	adds	r7, #36	; 0x24
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800481c:	b480      	push	{r7}
 800481e:	b08b      	sub	sp, #44	; 0x2c
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	4613      	mov	r3, r2
 8004828:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004832:	88fb      	ldrh	r3, [r7, #6]
 8004834:	089b      	lsrs	r3, r3, #2
 8004836:	b29b      	uxth	r3, r3
 8004838:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004842:	2300      	movs	r3, #0
 8004844:	623b      	str	r3, [r7, #32]
 8004846:	e014      	b.n	8004872 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004852:	601a      	str	r2, [r3, #0]
    pDest++;
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	3301      	adds	r3, #1
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	3301      	adds	r3, #1
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	3301      	adds	r3, #1
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	3301      	adds	r3, #1
 800486a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	3301      	adds	r3, #1
 8004870:	623b      	str	r3, [r7, #32]
 8004872:	6a3a      	ldr	r2, [r7, #32]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	429a      	cmp	r2, r3
 8004878:	d3e6      	bcc.n	8004848 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800487a:	8bfb      	ldrh	r3, [r7, #30]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01e      	beq.n	80048be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004880:	2300      	movs	r3, #0
 8004882:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800488a:	461a      	mov	r2, r3
 800488c:	f107 0310 	add.w	r3, r7, #16
 8004890:	6812      	ldr	r2, [r2, #0]
 8004892:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	701a      	strb	r2, [r3, #0]
      i++;
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	3301      	adds	r3, #1
 80048aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	3301      	adds	r3, #1
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048b2:	8bfb      	ldrh	r3, [r7, #30]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048b8:	8bfb      	ldrh	r3, [r7, #30]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1ea      	bne.n	8004894 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	372c      	adds	r7, #44	; 0x2c
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	785b      	ldrb	r3, [r3, #1]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d12c      	bne.n	8004942 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	db12      	blt.n	8004920 <USB_EPSetStall+0x54>
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00f      	beq.n	8004920 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	440a      	add	r2, r1
 8004916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800491a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800491e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	e02b      	b.n	800499a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	db12      	blt.n	800497a <USB_EPSetStall+0xae>
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00f      	beq.n	800497a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	0151      	lsls	r1, r2, #5
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	440a      	add	r2, r1
 8004970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004974:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004978:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	440a      	add	r2, r1
 8004990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004998:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	785b      	ldrb	r3, [r3, #1]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d128      	bne.n	8004a16 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	0151      	lsls	r1, r2, #5
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	440a      	add	r2, r1
 80049da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	791b      	ldrb	r3, [r3, #4]
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d003      	beq.n	80049f4 <USB_EPClearStall+0x4c>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	791b      	ldrb	r3, [r3, #4]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d138      	bne.n	8004a66 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	0151      	lsls	r1, r2, #5
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	440a      	add	r2, r1
 8004a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	e027      	b.n	8004a66 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	015a      	lsls	r2, r3, #5
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	0151      	lsls	r1, r2, #5
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	440a      	add	r2, r1
 8004a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	791b      	ldrb	r3, [r3, #4]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d003      	beq.n	8004a46 <USB_EPClearStall+0x9e>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	791b      	ldrb	r3, [r3, #4]
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d10f      	bne.n	8004a66 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	0151      	lsls	r1, r2, #5
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	440a      	add	r2, r1
 8004a5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a64:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a96:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ada:	f023 0303 	bic.w	r3, r3, #3
 8004ade:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aee:	f023 0302 	bic.w	r3, r3, #2
 8004af2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004b1c:	f023 0303 	bic.w	r3, r3, #3
 8004b20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b30:	f043 0302 	orr.w	r3, r3, #2
 8004b34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b085      	sub	sp, #20
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	0c1b      	lsrs	r3, r3, #16
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	b29b      	uxth	r3, r3
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3714      	adds	r7, #20
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	b085      	sub	sp, #20
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004be2:	78fb      	ldrb	r3, [r7, #3]
 8004be4:	015a      	lsls	r2, r3, #5
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	4413      	add	r3, r2
 8004bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c00:	68bb      	ldr	r3, [r7, #8]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b087      	sub	sp, #28
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c30:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3e:	01db      	lsls	r3, r3, #7
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004c5c:	68bb      	ldr	r3, [r7, #8]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f003 0301 	and.w	r3, r3, #1
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b085      	sub	sp, #20
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ca4:	f023 0307 	bic.w	r3, r3, #7
 8004ca8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3714      	adds	r7, #20
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b087      	sub	sp, #28
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	607a      	str	r2, [r7, #4]
 8004cd8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	333c      	adds	r3, #60	; 0x3c
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4a26      	ldr	r2, [pc, #152]	; (8004d84 <USB_EP0_OutStart+0xb8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d90a      	bls.n	8004d06 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d00:	d101      	bne.n	8004d06 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	e037      	b.n	8004d76 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	2300      	movs	r3, #0
 8004d10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d34:	f043 0318 	orr.w	r3, r3, #24
 8004d38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d48:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004d4c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004d4e:	7afb      	ldrb	r3, [r7, #11]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10f      	bne.n	8004d74 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d6e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004d72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	4f54300a 	.word	0x4f54300a

08004d88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004da0:	d901      	bls.n	8004da6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e01b      	b.n	8004dde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	daf2      	bge.n	8004d94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f043 0201 	orr.w	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004dca:	d901      	bls.n	8004dd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e006      	b.n	8004dde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d0f0      	beq.n	8004dbe <USB_CoreReset+0x36>

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004df8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004dfc:	f002 fc8a 	bl	8007714 <USBD_static_malloc>
 8004e00:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	32b0      	adds	r2, #176	; 0xb0
 8004e12:	2100      	movs	r1, #0
 8004e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004e18:	2302      	movs	r3, #2
 8004e1a:	e0d4      	b.n	8004fc6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004e1c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004e20:	2100      	movs	r1, #0
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f002 fdf3 	bl	8007a0e <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	32b0      	adds	r2, #176	; 0xb0
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	32b0      	adds	r2, #176	; 0xb0
 8004e42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	7c1b      	ldrb	r3, [r3, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d138      	bne.n	8004ec6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004e54:	4b5e      	ldr	r3, [pc, #376]	; (8004fd0 <USBD_CDC_Init+0x1e4>)
 8004e56:	7819      	ldrb	r1, [r3, #0]
 8004e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f002 fb35 	bl	80074ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004e64:	4b5a      	ldr	r3, [pc, #360]	; (8004fd0 <USBD_CDC_Init+0x1e4>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f003 020f 	and.w	r2, r3, #15
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	3324      	adds	r3, #36	; 0x24
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004e7e:	4b55      	ldr	r3, [pc, #340]	; (8004fd4 <USBD_CDC_Init+0x1e8>)
 8004e80:	7819      	ldrb	r1, [r3, #0]
 8004e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e86:	2202      	movs	r2, #2
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f002 fb20 	bl	80074ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004e8e:	4b51      	ldr	r3, [pc, #324]	; (8004fd4 <USBD_CDC_Init+0x1e8>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	f003 020f 	and.w	r2, r3, #15
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004eaa:	4b4b      	ldr	r3, [pc, #300]	; (8004fd8 <USBD_CDC_Init+0x1ec>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	f003 020f 	and.w	r2, r3, #15
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	440b      	add	r3, r1
 8004ebe:	3326      	adds	r3, #38	; 0x26
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	e035      	b.n	8004f32 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ec6:	4b42      	ldr	r3, [pc, #264]	; (8004fd0 <USBD_CDC_Init+0x1e4>)
 8004ec8:	7819      	ldrb	r1, [r3, #0]
 8004eca:	2340      	movs	r3, #64	; 0x40
 8004ecc:	2202      	movs	r2, #2
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f002 fafd 	bl	80074ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004ed4:	4b3e      	ldr	r3, [pc, #248]	; (8004fd0 <USBD_CDC_Init+0x1e4>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	f003 020f 	and.w	r2, r3, #15
 8004edc:	6879      	ldr	r1, [r7, #4]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	3324      	adds	r3, #36	; 0x24
 8004eea:	2201      	movs	r2, #1
 8004eec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004eee:	4b39      	ldr	r3, [pc, #228]	; (8004fd4 <USBD_CDC_Init+0x1e8>)
 8004ef0:	7819      	ldrb	r1, [r3, #0]
 8004ef2:	2340      	movs	r3, #64	; 0x40
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f002 fae9 	bl	80074ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004efc:	4b35      	ldr	r3, [pc, #212]	; (8004fd4 <USBD_CDC_Init+0x1e8>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	f003 020f 	and.w	r2, r3, #15
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004f14:	2201      	movs	r2, #1
 8004f16:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f18:	4b2f      	ldr	r3, [pc, #188]	; (8004fd8 <USBD_CDC_Init+0x1ec>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	f003 020f 	and.w	r2, r3, #15
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3326      	adds	r3, #38	; 0x26
 8004f2e:	2210      	movs	r2, #16
 8004f30:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f32:	4b29      	ldr	r3, [pc, #164]	; (8004fd8 <USBD_CDC_Init+0x1ec>)
 8004f34:	7819      	ldrb	r1, [r3, #0]
 8004f36:	2308      	movs	r3, #8
 8004f38:	2203      	movs	r2, #3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f002 fac7 	bl	80074ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004f40:	4b25      	ldr	r3, [pc, #148]	; (8004fd8 <USBD_CDC_Init+0x1ec>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	f003 020f 	and.w	r2, r3, #15
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	3324      	adds	r3, #36	; 0x24
 8004f56:	2201      	movs	r2, #1
 8004f58:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	33b0      	adds	r3, #176	; 0xb0
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d101      	bne.n	8004f94 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004f90:	2302      	movs	r3, #2
 8004f92:	e018      	b.n	8004fc6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	7c1b      	ldrb	r3, [r3, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f9c:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <USBD_CDC_Init+0x1e8>)
 8004f9e:	7819      	ldrb	r1, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f002 fb7e 	bl	80076ac <USBD_LL_PrepareReceive>
 8004fb0:	e008      	b.n	8004fc4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004fb2:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <USBD_CDC_Init+0x1e8>)
 8004fb4:	7819      	ldrb	r1, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fbc:	2340      	movs	r3, #64	; 0x40
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f002 fb74 	bl	80076ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000093 	.word	0x20000093
 8004fd4:	20000094 	.word	0x20000094
 8004fd8:	20000095 	.word	0x20000095

08004fdc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004fe8:	4b3a      	ldr	r3, [pc, #232]	; (80050d4 <USBD_CDC_DeInit+0xf8>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f002 fa93 	bl	800751a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004ff4:	4b37      	ldr	r3, [pc, #220]	; (80050d4 <USBD_CDC_DeInit+0xf8>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	f003 020f 	and.w	r2, r3, #15
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	3324      	adds	r3, #36	; 0x24
 800500a:	2200      	movs	r2, #0
 800500c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800500e:	4b32      	ldr	r3, [pc, #200]	; (80050d8 <USBD_CDC_DeInit+0xfc>)
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	4619      	mov	r1, r3
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f002 fa80 	bl	800751a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800501a:	4b2f      	ldr	r3, [pc, #188]	; (80050d8 <USBD_CDC_DeInit+0xfc>)
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	f003 020f 	and.w	r2, r3, #15
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005032:	2200      	movs	r2, #0
 8005034:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005036:	4b29      	ldr	r3, [pc, #164]	; (80050dc <USBD_CDC_DeInit+0x100>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	4619      	mov	r1, r3
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f002 fa6c 	bl	800751a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005042:	4b26      	ldr	r3, [pc, #152]	; (80050dc <USBD_CDC_DeInit+0x100>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	f003 020f 	and.w	r2, r3, #15
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	440b      	add	r3, r1
 8005056:	3324      	adds	r3, #36	; 0x24
 8005058:	2200      	movs	r2, #0
 800505a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800505c:	4b1f      	ldr	r3, [pc, #124]	; (80050dc <USBD_CDC_DeInit+0x100>)
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f003 020f 	and.w	r2, r3, #15
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	3326      	adds	r3, #38	; 0x26
 8005072:	2200      	movs	r2, #0
 8005074:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	32b0      	adds	r2, #176	; 0xb0
 8005080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01f      	beq.n	80050c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	33b0      	adds	r3, #176	; 0xb0
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	32b0      	adds	r2, #176	; 0xb0
 80050a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f002 fb40 	bl	8007730 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	32b0      	adds	r2, #176	; 0xb0
 80050ba:	2100      	movs	r1, #0
 80050bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000093 	.word	0x20000093
 80050d8:	20000094 	.word	0x20000094
 80050dc:	20000095 	.word	0x20000095

080050e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	32b0      	adds	r2, #176	; 0xb0
 80050f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80050fe:	2300      	movs	r3, #0
 8005100:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800510c:	2303      	movs	r3, #3
 800510e:	e0bf      	b.n	8005290 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005118:	2b00      	cmp	r3, #0
 800511a:	d050      	beq.n	80051be <USBD_CDC_Setup+0xde>
 800511c:	2b20      	cmp	r3, #32
 800511e:	f040 80af 	bne.w	8005280 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	88db      	ldrh	r3, [r3, #6]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d03a      	beq.n	80051a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	b25b      	sxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	da1b      	bge.n	800516c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	33b0      	adds	r3, #176	; 0xb0
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	683a      	ldr	r2, [r7, #0]
 8005148:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800514a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	88d2      	ldrh	r2, [r2, #6]
 8005150:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	88db      	ldrh	r3, [r3, #6]
 8005156:	2b07      	cmp	r3, #7
 8005158:	bf28      	it	cs
 800515a:	2307      	movcs	r3, #7
 800515c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	89fa      	ldrh	r2, [r7, #14]
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 fd89 	bl	8006c7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800516a:	e090      	b.n	800528e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	785a      	ldrb	r2, [r3, #1]
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	88db      	ldrh	r3, [r3, #6]
 800517a:	2b3f      	cmp	r3, #63	; 0x3f
 800517c:	d803      	bhi.n	8005186 <USBD_CDC_Setup+0xa6>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	88db      	ldrh	r3, [r3, #6]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	e000      	b.n	8005188 <USBD_CDC_Setup+0xa8>
 8005186:	2240      	movs	r2, #64	; 0x40
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800518e:	6939      	ldr	r1, [r7, #16]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005196:	461a      	mov	r2, r3
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 fd9b 	bl	8006cd4 <USBD_CtlPrepareRx>
      break;
 800519e:	e076      	b.n	800528e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	33b0      	adds	r3, #176	; 0xb0
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	7850      	ldrb	r0, [r2, #1]
 80051b6:	2200      	movs	r2, #0
 80051b8:	6839      	ldr	r1, [r7, #0]
 80051ba:	4798      	blx	r3
      break;
 80051bc:	e067      	b.n	800528e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	785b      	ldrb	r3, [r3, #1]
 80051c2:	2b0b      	cmp	r3, #11
 80051c4:	d851      	bhi.n	800526a <USBD_CDC_Setup+0x18a>
 80051c6:	a201      	add	r2, pc, #4	; (adr r2, 80051cc <USBD_CDC_Setup+0xec>)
 80051c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051cc:	080051fd 	.word	0x080051fd
 80051d0:	08005279 	.word	0x08005279
 80051d4:	0800526b 	.word	0x0800526b
 80051d8:	0800526b 	.word	0x0800526b
 80051dc:	0800526b 	.word	0x0800526b
 80051e0:	0800526b 	.word	0x0800526b
 80051e4:	0800526b 	.word	0x0800526b
 80051e8:	0800526b 	.word	0x0800526b
 80051ec:	0800526b 	.word	0x0800526b
 80051f0:	0800526b 	.word	0x0800526b
 80051f4:	08005227 	.word	0x08005227
 80051f8:	08005251 	.word	0x08005251
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b03      	cmp	r3, #3
 8005206:	d107      	bne.n	8005218 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005208:	f107 030a 	add.w	r3, r7, #10
 800520c:	2202      	movs	r2, #2
 800520e:	4619      	mov	r1, r3
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f001 fd33 	bl	8006c7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005216:	e032      	b.n	800527e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005218:	6839      	ldr	r1, [r7, #0]
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f001 fcbd 	bl	8006b9a <USBD_CtlError>
            ret = USBD_FAIL;
 8005220:	2303      	movs	r3, #3
 8005222:	75fb      	strb	r3, [r7, #23]
          break;
 8005224:	e02b      	b.n	800527e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b03      	cmp	r3, #3
 8005230:	d107      	bne.n	8005242 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005232:	f107 030d 	add.w	r3, r7, #13
 8005236:	2201      	movs	r2, #1
 8005238:	4619      	mov	r1, r3
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f001 fd1e 	bl	8006c7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005240:	e01d      	b.n	800527e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005242:	6839      	ldr	r1, [r7, #0]
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f001 fca8 	bl	8006b9a <USBD_CtlError>
            ret = USBD_FAIL;
 800524a:	2303      	movs	r3, #3
 800524c:	75fb      	strb	r3, [r7, #23]
          break;
 800524e:	e016      	b.n	800527e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b03      	cmp	r3, #3
 800525a:	d00f      	beq.n	800527c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800525c:	6839      	ldr	r1, [r7, #0]
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f001 fc9b 	bl	8006b9a <USBD_CtlError>
            ret = USBD_FAIL;
 8005264:	2303      	movs	r3, #3
 8005266:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005268:	e008      	b.n	800527c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800526a:	6839      	ldr	r1, [r7, #0]
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f001 fc94 	bl	8006b9a <USBD_CtlError>
          ret = USBD_FAIL;
 8005272:	2303      	movs	r3, #3
 8005274:	75fb      	strb	r3, [r7, #23]
          break;
 8005276:	e002      	b.n	800527e <USBD_CDC_Setup+0x19e>
          break;
 8005278:	bf00      	nop
 800527a:	e008      	b.n	800528e <USBD_CDC_Setup+0x1ae>
          break;
 800527c:	bf00      	nop
      }
      break;
 800527e:	e006      	b.n	800528e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005280:	6839      	ldr	r1, [r7, #0]
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f001 fc89 	bl	8006b9a <USBD_CtlError>
      ret = USBD_FAIL;
 8005288:	2303      	movs	r3, #3
 800528a:	75fb      	strb	r3, [r7, #23]
      break;
 800528c:	bf00      	nop
  }

  return (uint8_t)ret;
 800528e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80052aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	32b0      	adds	r2, #176	; 0xb0
 80052b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80052be:	2303      	movs	r3, #3
 80052c0:	e065      	b.n	800538e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	32b0      	adds	r2, #176	; 0xb0
 80052cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	f003 020f 	and.w	r2, r3, #15
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	4613      	mov	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	4413      	add	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	440b      	add	r3, r1
 80052e4:	3318      	adds	r3, #24
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d02f      	beq.n	800534c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80052ec:	78fb      	ldrb	r3, [r7, #3]
 80052ee:	f003 020f 	and.w	r2, r3, #15
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	3318      	adds	r3, #24
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	78fb      	ldrb	r3, [r7, #3]
 8005304:	f003 010f 	and.w	r1, r3, #15
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	460b      	mov	r3, r1
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	440b      	add	r3, r1
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4403      	add	r3, r0
 8005314:	331c      	adds	r3, #28
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	fbb2 f1f3 	udiv	r1, r2, r3
 800531c:	fb01 f303 	mul.w	r3, r1, r3
 8005320:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005322:	2b00      	cmp	r3, #0
 8005324:	d112      	bne.n	800534c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005326:	78fb      	ldrb	r3, [r7, #3]
 8005328:	f003 020f 	and.w	r2, r3, #15
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	440b      	add	r3, r1
 8005338:	3318      	adds	r3, #24
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800533e:	78f9      	ldrb	r1, [r7, #3]
 8005340:	2300      	movs	r3, #0
 8005342:	2200      	movs	r2, #0
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f002 f990 	bl	800766a <USBD_LL_Transmit>
 800534a:	e01f      	b.n	800538c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2200      	movs	r2, #0
 8005350:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	33b0      	adds	r3, #176	; 0xb0
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d010      	beq.n	800538c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	33b0      	adds	r3, #176	; 0xb0
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005382:	68ba      	ldr	r2, [r7, #8]
 8005384:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005396:	b580      	push	{r7, lr}
 8005398:	b084      	sub	sp, #16
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	460b      	mov	r3, r1
 80053a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	32b0      	adds	r2, #176	; 0xb0
 80053ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	32b0      	adds	r2, #176	; 0xb0
 80053bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e01a      	b.n	80053fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80053c8:	78fb      	ldrb	r3, [r7, #3]
 80053ca:	4619      	mov	r1, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f002 f98e 	bl	80076ee <USBD_LL_GetRxDataSize>
 80053d2:	4602      	mov	r2, r0
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	33b0      	adds	r3, #176	; 0xb0
 80053e4:	009b      	lsls	r3, r3, #2
 80053e6:	4413      	add	r3, r2
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80053f8:	4611      	mov	r1, r2
 80053fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	32b0      	adds	r2, #176	; 0xb0
 8005418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800541c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005424:	2303      	movs	r3, #3
 8005426:	e025      	b.n	8005474 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	33b0      	adds	r3, #176	; 0xb0
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01a      	beq.n	8005472 <USBD_CDC_EP0_RxReady+0x6c>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005442:	2bff      	cmp	r3, #255	; 0xff
 8005444:	d015      	beq.n	8005472 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	33b0      	adds	r3, #176	; 0xb0
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800545e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005466:	b292      	uxth	r2, r2
 8005468:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	22ff      	movs	r2, #255	; 0xff
 800546e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005484:	2182      	movs	r1, #130	; 0x82
 8005486:	4818      	ldr	r0, [pc, #96]	; (80054e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005488:	f000 fd4f 	bl	8005f2a <USBD_GetEpDesc>
 800548c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800548e:	2101      	movs	r1, #1
 8005490:	4815      	ldr	r0, [pc, #84]	; (80054e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005492:	f000 fd4a 	bl	8005f2a <USBD_GetEpDesc>
 8005496:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005498:	2181      	movs	r1, #129	; 0x81
 800549a:	4813      	ldr	r0, [pc, #76]	; (80054e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800549c:	f000 fd45 	bl	8005f2a <USBD_GetEpDesc>
 80054a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d002      	beq.n	80054ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2210      	movs	r2, #16
 80054ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d006      	beq.n	80054c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054bc:	711a      	strb	r2, [r3, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d006      	beq.n	80054d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054d0:	711a      	strb	r2, [r3, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2243      	movs	r2, #67	; 0x43
 80054da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80054dc:	4b02      	ldr	r3, [pc, #8]	; (80054e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000050 	.word	0x20000050

080054ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80054f4:	2182      	movs	r1, #130	; 0x82
 80054f6:	4818      	ldr	r0, [pc, #96]	; (8005558 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80054f8:	f000 fd17 	bl	8005f2a <USBD_GetEpDesc>
 80054fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80054fe:	2101      	movs	r1, #1
 8005500:	4815      	ldr	r0, [pc, #84]	; (8005558 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005502:	f000 fd12 	bl	8005f2a <USBD_GetEpDesc>
 8005506:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005508:	2181      	movs	r1, #129	; 0x81
 800550a:	4813      	ldr	r0, [pc, #76]	; (8005558 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800550c:	f000 fd0d 	bl	8005f2a <USBD_GetEpDesc>
 8005510:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2210      	movs	r2, #16
 800551c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2200      	movs	r2, #0
 8005528:	711a      	strb	r2, [r3, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	f042 0202 	orr.w	r2, r2, #2
 8005530:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d006      	beq.n	8005546 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	711a      	strb	r2, [r3, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f042 0202 	orr.w	r2, r2, #2
 8005544:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2243      	movs	r2, #67	; 0x43
 800554a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800554c:	4b02      	ldr	r3, [pc, #8]	; (8005558 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000050 	.word	0x20000050

0800555c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005564:	2182      	movs	r1, #130	; 0x82
 8005566:	4818      	ldr	r0, [pc, #96]	; (80055c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005568:	f000 fcdf 	bl	8005f2a <USBD_GetEpDesc>
 800556c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800556e:	2101      	movs	r1, #1
 8005570:	4815      	ldr	r0, [pc, #84]	; (80055c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005572:	f000 fcda 	bl	8005f2a <USBD_GetEpDesc>
 8005576:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005578:	2181      	movs	r1, #129	; 0x81
 800557a:	4813      	ldr	r0, [pc, #76]	; (80055c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800557c:	f000 fcd5 	bl	8005f2a <USBD_GetEpDesc>
 8005580:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2210      	movs	r2, #16
 800558c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d006      	beq.n	80055a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	2200      	movs	r2, #0
 8005598:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800559c:	711a      	strb	r2, [r3, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d006      	beq.n	80055b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055b0:	711a      	strb	r2, [r3, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2243      	movs	r2, #67	; 0x43
 80055ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80055bc:	4b02      	ldr	r3, [pc, #8]	; (80055c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	20000050 	.word	0x20000050

080055cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	220a      	movs	r2, #10
 80055d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80055da:	4b03      	ldr	r3, [pc, #12]	; (80055e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	2000000c 	.word	0x2000000c

080055ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e009      	b.n	8005614 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	33b0      	adds	r3, #176	; 0xb0
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	683a      	ldr	r2, [r7, #0]
 8005610:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	32b0      	adds	r2, #176	; 0xb0
 8005636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800563a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005642:	2303      	movs	r3, #3
 8005644:	e008      	b.n	8005658 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	32b0      	adds	r2, #176	; 0xb0
 8005678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800567c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005684:	2303      	movs	r3, #3
 8005686:	e004      	b.n	8005692 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	32b0      	adds	r2, #176	; 0xb0
 80056b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056b6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80056b8:	2301      	movs	r3, #1
 80056ba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e025      	b.n	8005712 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d11f      	bne.n	8005710 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80056d8:	4b10      	ldr	r3, [pc, #64]	; (800571c <USBD_CDC_TransmitPacket+0x7c>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	f003 020f 	and.w	r2, r3, #15
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	4413      	add	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4403      	add	r3, r0
 80056f2:	3318      	adds	r3, #24
 80056f4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80056f6:	4b09      	ldr	r3, [pc, #36]	; (800571c <USBD_CDC_TransmitPacket+0x7c>)
 80056f8:	7819      	ldrb	r1, [r3, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f001 ffaf 	bl	800766a <USBD_LL_Transmit>

    ret = USBD_OK;
 800570c:	2300      	movs	r3, #0
 800570e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000093 	.word	0x20000093

08005720 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	32b0      	adds	r2, #176	; 0xb0
 8005732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005736:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	32b0      	adds	r2, #176	; 0xb0
 8005742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800574a:	2303      	movs	r3, #3
 800574c:	e018      	b.n	8005780 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	7c1b      	ldrb	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d10a      	bne.n	800576c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005756:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <USBD_CDC_ReceivePacket+0x68>)
 8005758:	7819      	ldrb	r1, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f001 ffa1 	bl	80076ac <USBD_LL_PrepareReceive>
 800576a:	e008      	b.n	800577e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <USBD_CDC_ReceivePacket+0x68>)
 800576e:	7819      	ldrb	r1, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005776:	2340      	movs	r3, #64	; 0x40
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f001 ff97 	bl	80076ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20000094 	.word	0x20000094

0800578c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	4613      	mov	r3, r2
 8005798:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e01f      	b.n	80057e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	79fa      	ldrb	r2, [r7, #7]
 80057d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f001 fe11 	bl	8007400 <USBD_LL_Init>
 80057de:	4603      	mov	r3, r0
 80057e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80057e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005800:	2303      	movs	r3, #3
 8005802:	e025      	b.n	8005850 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	683a      	ldr	r2, [r7, #0]
 8005808:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	32ae      	adds	r2, #174	; 0xae
 8005816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00f      	beq.n	8005840 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	32ae      	adds	r2, #174	; 0xae
 800582a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	f107 020e 	add.w	r2, r7, #14
 8005834:	4610      	mov	r0, r2
 8005836:	4798      	blx	r3
 8005838:	4602      	mov	r2, r0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f001 fe19 	bl	8007498 <USBD_LL_Start>
 8005866:	4603      	mov	r3, r0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005878:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b084      	sub	sp, #16
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	460b      	mov	r3, r1
 8005890:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589c:	2b00      	cmp	r3, #0
 800589e:	d009      	beq.n	80058b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	78fa      	ldrb	r2, [r7, #3]
 80058aa:	4611      	mov	r1, r2
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3
 80058b0:	4603      	mov	r3, r0
 80058b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	460b      	mov	r3, r1
 80058c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058ca:	2300      	movs	r3, #0
 80058cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	78fa      	ldrb	r2, [r7, #3]
 80058d8:	4611      	mov	r1, r2
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	4798      	blx	r3
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80058e4:	2303      	movs	r3, #3
 80058e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f001 f90e 	bl	8006b26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005918:	461a      	mov	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	2b02      	cmp	r3, #2
 800592c:	d01a      	beq.n	8005964 <USBD_LL_SetupStage+0x72>
 800592e:	2b02      	cmp	r3, #2
 8005930:	d822      	bhi.n	8005978 <USBD_LL_SetupStage+0x86>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <USBD_LL_SetupStage+0x4a>
 8005936:	2b01      	cmp	r3, #1
 8005938:	d00a      	beq.n	8005950 <USBD_LL_SetupStage+0x5e>
 800593a:	e01d      	b.n	8005978 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fb65 	bl	8006014 <USBD_StdDevReq>
 800594a:	4603      	mov	r3, r0
 800594c:	73fb      	strb	r3, [r7, #15]
      break;
 800594e:	e020      	b.n	8005992 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005956:	4619      	mov	r1, r3
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 fbcd 	bl	80060f8 <USBD_StdItfReq>
 800595e:	4603      	mov	r3, r0
 8005960:	73fb      	strb	r3, [r7, #15]
      break;
 8005962:	e016      	b.n	8005992 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800596a:	4619      	mov	r1, r3
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fc2f 	bl	80061d0 <USBD_StdEPReq>
 8005972:	4603      	mov	r3, r0
 8005974:	73fb      	strb	r3, [r7, #15]
      break;
 8005976:	e00c      	b.n	8005992 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800597e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005982:	b2db      	uxtb	r3, r3
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f001 fde6 	bl	8007558 <USBD_LL_StallEP>
 800598c:	4603      	mov	r3, r0
 800598e:	73fb      	strb	r3, [r7, #15]
      break;
 8005990:	bf00      	nop
  }

  return ret;
 8005992:	7bfb      	ldrb	r3, [r7, #15]
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	460b      	mov	r3, r1
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80059ae:	7afb      	ldrb	r3, [r7, #11]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d16e      	bne.n	8005a92 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80059ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	f040 8098 	bne.w	8005af8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d913      	bls.n	80059fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	1ad2      	subs	r2, r2, r3
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	4293      	cmp	r3, r2
 80059ec:	bf28      	it	cs
 80059ee:	4613      	movcs	r3, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	6879      	ldr	r1, [r7, #4]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f001 f98a 	bl	8006d0e <USBD_CtlContinueRx>
 80059fa:	e07d      	b.n	8005af8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d014      	beq.n	8005a34 <USBD_LL_DataOutStage+0x98>
 8005a0a:	2b02      	cmp	r3, #2
 8005a0c:	d81d      	bhi.n	8005a4a <USBD_LL_DataOutStage+0xae>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <USBD_LL_DataOutStage+0x7c>
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d003      	beq.n	8005a1e <USBD_LL_DataOutStage+0x82>
 8005a16:	e018      	b.n	8005a4a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	75bb      	strb	r3, [r7, #22]
            break;
 8005a1c:	e018      	b.n	8005a50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	4619      	mov	r1, r3
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 fa64 	bl	8005ef6 <USBD_CoreFindIF>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	75bb      	strb	r3, [r7, #22]
            break;
 8005a32:	e00d      	b.n	8005a50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 fa66 	bl	8005f10 <USBD_CoreFindEP>
 8005a44:	4603      	mov	r3, r0
 8005a46:	75bb      	strb	r3, [r7, #22]
            break;
 8005a48:	e002      	b.n	8005a50 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	75bb      	strb	r3, [r7, #22]
            break;
 8005a4e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a50:	7dbb      	ldrb	r3, [r7, #22]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d119      	bne.n	8005a8a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d113      	bne.n	8005a8a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005a62:	7dba      	ldrb	r2, [r7, #22]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	32ae      	adds	r2, #174	; 0xae
 8005a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00b      	beq.n	8005a8a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005a72:	7dba      	ldrb	r2, [r7, #22]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005a7a:	7dba      	ldrb	r2, [r7, #22]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	32ae      	adds	r2, #174	; 0xae
 8005a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005a8a:	68f8      	ldr	r0, [r7, #12]
 8005a8c:	f001 f950 	bl	8006d30 <USBD_CtlSendStatus>
 8005a90:	e032      	b.n	8005af8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005a92:	7afb      	ldrb	r3, [r7, #11]
 8005a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fa37 	bl	8005f10 <USBD_CoreFindEP>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005aa6:	7dbb      	ldrb	r3, [r7, #22]
 8005aa8:	2bff      	cmp	r3, #255	; 0xff
 8005aaa:	d025      	beq.n	8005af8 <USBD_LL_DataOutStage+0x15c>
 8005aac:	7dbb      	ldrb	r3, [r7, #22]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d122      	bne.n	8005af8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d117      	bne.n	8005aee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005abe:	7dba      	ldrb	r2, [r7, #22]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	32ae      	adds	r2, #174	; 0xae
 8005ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00f      	beq.n	8005aee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005ace:	7dba      	ldrb	r2, [r7, #22]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005ad6:	7dba      	ldrb	r2, [r7, #22]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	32ae      	adds	r2, #174	; 0xae
 8005adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	7afa      	ldrb	r2, [r7, #11]
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	4798      	blx	r3
 8005aea:	4603      	mov	r3, r0
 8005aec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005aee:	7dfb      	ldrb	r3, [r7, #23]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	e000      	b.n	8005afa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b086      	sub	sp, #24
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	607a      	str	r2, [r7, #4]
 8005b0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005b10:	7afb      	ldrb	r3, [r7, #11]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d16f      	bne.n	8005bf6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	3314      	adds	r3, #20
 8005b1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d15a      	bne.n	8005bdc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	689a      	ldr	r2, [r3, #8]
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d914      	bls.n	8005b5c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	689a      	ldr	r2, [r3, #8]
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	1ad2      	subs	r2, r2, r3
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	461a      	mov	r2, r3
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f001 f8b2 	bl	8006cb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2200      	movs	r2, #0
 8005b52:	2100      	movs	r1, #0
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f001 fda9 	bl	80076ac <USBD_LL_PrepareReceive>
 8005b5a:	e03f      	b.n	8005bdc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d11c      	bne.n	8005ba2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d316      	bcc.n	8005ba2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	685a      	ldr	r2, [r3, #4]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d20f      	bcs.n	8005ba2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b82:	2200      	movs	r2, #0
 8005b84:	2100      	movs	r1, #0
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f001 f893 	bl	8006cb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b94:	2300      	movs	r3, #0
 8005b96:	2200      	movs	r2, #0
 8005b98:	2100      	movs	r1, #0
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f001 fd86 	bl	80076ac <USBD_LL_PrepareReceive>
 8005ba0:	e01c      	b.n	8005bdc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d10f      	bne.n	8005bce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bce:	2180      	movs	r1, #128	; 0x80
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f001 fcc1 	bl	8007558 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f001 f8bd 	bl	8006d56 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d03a      	beq.n	8005c5c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f7ff fe42 	bl	8005870 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005bf4:	e032      	b.n	8005c5c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005bf6:	7afb      	ldrb	r3, [r7, #11]
 8005bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	4619      	mov	r1, r3
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f985 	bl	8005f10 <USBD_CoreFindEP>
 8005c06:	4603      	mov	r3, r0
 8005c08:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
 8005c0c:	2bff      	cmp	r3, #255	; 0xff
 8005c0e:	d025      	beq.n	8005c5c <USBD_LL_DataInStage+0x15a>
 8005c10:	7dfb      	ldrb	r3, [r7, #23]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d122      	bne.n	8005c5c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d11c      	bne.n	8005c5c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c22:	7dfa      	ldrb	r2, [r7, #23]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	32ae      	adds	r2, #174	; 0xae
 8005c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d014      	beq.n	8005c5c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005c32:	7dfa      	ldrb	r2, [r7, #23]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c3a:	7dfa      	ldrb	r2, [r7, #23]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	32ae      	adds	r2, #174	; 0xae
 8005c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	7afa      	ldrb	r2, [r7, #11]
 8005c48:	4611      	mov	r1, r2
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	4798      	blx	r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005c52:	7dbb      	ldrb	r3, [r7, #22]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005c58:	7dbb      	ldrb	r3, [r7, #22]
 8005c5a:	e000      	b.n	8005c5e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2201      	movs	r2, #1
 8005c76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d014      	beq.n	8005ccc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00e      	beq.n	8005ccc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	6852      	ldr	r2, [r2, #4]
 8005cba:	b2d2      	uxtb	r2, r2
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	4798      	blx	r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d001      	beq.n	8005ccc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ccc:	2340      	movs	r3, #64	; 0x40
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 fbfb 	bl	80074ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2240      	movs	r2, #64	; 0x40
 8005ce4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ce8:	2340      	movs	r3, #64	; 0x40
 8005cea:	2200      	movs	r2, #0
 8005cec:	2180      	movs	r1, #128	; 0x80
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f001 fbed 	bl	80074ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2240      	movs	r2, #64	; 0x40
 8005cfe:	621a      	str	r2, [r3, #32]

  return ret;
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d0a:	b480      	push	{r7}
 8005d0c:	b083      	sub	sp, #12
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	78fa      	ldrb	r2, [r7, #3]
 8005d1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d006      	beq.n	8005d4c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2204      	movs	r2, #4
 8005d50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d106      	bne.n	8005d84 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d110      	bne.n	8005dc8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00b      	beq.n	8005dc8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	32ae      	adds	r2, #174	; 0xae
 8005de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d101      	bne.n	8005df4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e01c      	b.n	8005e2e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d115      	bne.n	8005e2c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	32ae      	adds	r2, #174	; 0xae
 8005e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00b      	beq.n	8005e2c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	32ae      	adds	r2, #174	; 0xae
 8005e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	78fa      	ldrb	r2, [r7, #3]
 8005e26:	4611      	mov	r1, r2
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	460b      	mov	r3, r1
 8005e40:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	32ae      	adds	r2, #174	; 0xae
 8005e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e01c      	b.n	8005e92 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d115      	bne.n	8005e90 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	32ae      	adds	r2, #174	; 0xae
 8005e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00b      	beq.n	8005e90 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	32ae      	adds	r2, #174	; 0xae
 8005e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	78fa      	ldrb	r2, [r7, #3]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b083      	sub	sp, #12
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6852      	ldr	r2, [r2, #4]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	4611      	mov	r1, r2
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	4798      	blx	r3
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	460b      	mov	r3, r1
 8005f00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b086      	sub	sp, #24
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	885b      	ldrh	r3, [r3, #2]
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d920      	bls.n	8005f94 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005f5a:	e013      	b.n	8005f84 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005f5c:	f107 030a 	add.w	r3, r7, #10
 8005f60:	4619      	mov	r1, r3
 8005f62:	6978      	ldr	r0, [r7, #20]
 8005f64:	f000 f81b 	bl	8005f9e <USBD_GetNextDesc>
 8005f68:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	785b      	ldrb	r3, [r3, #1]
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d108      	bne.n	8005f84 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	789b      	ldrb	r3, [r3, #2]
 8005f7a:	78fa      	ldrb	r2, [r7, #3]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d008      	beq.n	8005f92 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	885b      	ldrh	r3, [r3, #2]
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	897b      	ldrh	r3, [r7, #10]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d8e5      	bhi.n	8005f5c <USBD_GetEpDesc+0x32>
 8005f90:	e000      	b.n	8005f94 <USBD_GetEpDesc+0x6a>
          break;
 8005f92:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005f94:	693b      	ldr	r3, [r7, #16]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	881a      	ldrh	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	4413      	add	r3, r2
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005fca:	68fb      	ldr	r3, [r7, #12]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b087      	sub	sp, #28
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	3301      	adds	r3, #1
 8005fee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005ff6:	8a3b      	ldrh	r3, [r7, #16]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	b21a      	sxth	r2, r3
 8005ffc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006000:	4313      	orrs	r3, r2
 8006002:	b21b      	sxth	r3, r3
 8006004:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006006:	89fb      	ldrh	r3, [r7, #14]
}
 8006008:	4618      	mov	r0, r3
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800602a:	2b40      	cmp	r3, #64	; 0x40
 800602c:	d005      	beq.n	800603a <USBD_StdDevReq+0x26>
 800602e:	2b40      	cmp	r3, #64	; 0x40
 8006030:	d857      	bhi.n	80060e2 <USBD_StdDevReq+0xce>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00f      	beq.n	8006056 <USBD_StdDevReq+0x42>
 8006036:	2b20      	cmp	r3, #32
 8006038:	d153      	bne.n	80060e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	32ae      	adds	r2, #174	; 0xae
 8006044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	6839      	ldr	r1, [r7, #0]
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	4798      	blx	r3
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]
      break;
 8006054:	e04a      	b.n	80060ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	785b      	ldrb	r3, [r3, #1]
 800605a:	2b09      	cmp	r3, #9
 800605c:	d83b      	bhi.n	80060d6 <USBD_StdDevReq+0xc2>
 800605e:	a201      	add	r2, pc, #4	; (adr r2, 8006064 <USBD_StdDevReq+0x50>)
 8006060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006064:	080060b9 	.word	0x080060b9
 8006068:	080060cd 	.word	0x080060cd
 800606c:	080060d7 	.word	0x080060d7
 8006070:	080060c3 	.word	0x080060c3
 8006074:	080060d7 	.word	0x080060d7
 8006078:	08006097 	.word	0x08006097
 800607c:	0800608d 	.word	0x0800608d
 8006080:	080060d7 	.word	0x080060d7
 8006084:	080060af 	.word	0x080060af
 8006088:	080060a1 	.word	0x080060a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800608c:	6839      	ldr	r1, [r7, #0]
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fa3c 	bl	800650c <USBD_GetDescriptor>
          break;
 8006094:	e024      	b.n	80060e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fba1 	bl	80067e0 <USBD_SetAddress>
          break;
 800609e:	e01f      	b.n	80060e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fbe0 	bl	8006868 <USBD_SetConfig>
 80060a8:	4603      	mov	r3, r0
 80060aa:	73fb      	strb	r3, [r7, #15]
          break;
 80060ac:	e018      	b.n	80060e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fc83 	bl	80069bc <USBD_GetConfig>
          break;
 80060b6:	e013      	b.n	80060e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fcb4 	bl	8006a28 <USBD_GetStatus>
          break;
 80060c0:	e00e      	b.n	80060e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fce3 	bl	8006a90 <USBD_SetFeature>
          break;
 80060ca:	e009      	b.n	80060e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fd07 	bl	8006ae2 <USBD_ClrFeature>
          break;
 80060d4:	e004      	b.n	80060e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fd5e 	bl	8006b9a <USBD_CtlError>
          break;
 80060de:	bf00      	nop
      }
      break;
 80060e0:	e004      	b.n	80060ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fd58 	bl	8006b9a <USBD_CtlError>
      break;
 80060ea:	bf00      	nop
  }

  return ret;
 80060ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop

080060f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800610e:	2b40      	cmp	r3, #64	; 0x40
 8006110:	d005      	beq.n	800611e <USBD_StdItfReq+0x26>
 8006112:	2b40      	cmp	r3, #64	; 0x40
 8006114:	d852      	bhi.n	80061bc <USBD_StdItfReq+0xc4>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <USBD_StdItfReq+0x26>
 800611a:	2b20      	cmp	r3, #32
 800611c:	d14e      	bne.n	80061bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006124:	b2db      	uxtb	r3, r3
 8006126:	3b01      	subs	r3, #1
 8006128:	2b02      	cmp	r3, #2
 800612a:	d840      	bhi.n	80061ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	889b      	ldrh	r3, [r3, #4]
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b01      	cmp	r3, #1
 8006134:	d836      	bhi.n	80061a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	889b      	ldrh	r3, [r3, #4]
 800613a:	b2db      	uxtb	r3, r3
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7ff fed9 	bl	8005ef6 <USBD_CoreFindIF>
 8006144:	4603      	mov	r3, r0
 8006146:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006148:	7bbb      	ldrb	r3, [r7, #14]
 800614a:	2bff      	cmp	r3, #255	; 0xff
 800614c:	d01d      	beq.n	800618a <USBD_StdItfReq+0x92>
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d11a      	bne.n	800618a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006154:	7bba      	ldrb	r2, [r7, #14]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	32ae      	adds	r2, #174	; 0xae
 800615a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00f      	beq.n	8006184 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006164:	7bba      	ldrb	r2, [r7, #14]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800616c:	7bba      	ldrb	r2, [r7, #14]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	32ae      	adds	r2, #174	; 0xae
 8006172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	4798      	blx	r3
 800617e:	4603      	mov	r3, r0
 8006180:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006182:	e004      	b.n	800618e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006184:	2303      	movs	r3, #3
 8006186:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006188:	e001      	b.n	800618e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800618a:	2303      	movs	r3, #3
 800618c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	88db      	ldrh	r3, [r3, #6]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d110      	bne.n	80061b8 <USBD_StdItfReq+0xc0>
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10d      	bne.n	80061b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fdc7 	bl	8006d30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061a2:	e009      	b.n	80061b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80061a4:	6839      	ldr	r1, [r7, #0]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 fcf7 	bl	8006b9a <USBD_CtlError>
          break;
 80061ac:	e004      	b.n	80061b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80061ae:	6839      	ldr	r1, [r7, #0]
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fcf2 	bl	8006b9a <USBD_CtlError>
          break;
 80061b6:	e000      	b.n	80061ba <USBD_StdItfReq+0xc2>
          break;
 80061b8:	bf00      	nop
      }
      break;
 80061ba:	e004      	b.n	80061c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fceb 	bl	8006b9a <USBD_CtlError>
      break;
 80061c4:	bf00      	nop
  }

  return ret;
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	889b      	ldrh	r3, [r3, #4]
 80061e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061ec:	2b40      	cmp	r3, #64	; 0x40
 80061ee:	d007      	beq.n	8006200 <USBD_StdEPReq+0x30>
 80061f0:	2b40      	cmp	r3, #64	; 0x40
 80061f2:	f200 817f 	bhi.w	80064f4 <USBD_StdEPReq+0x324>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d02a      	beq.n	8006250 <USBD_StdEPReq+0x80>
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	f040 817a 	bne.w	80064f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff fe83 	bl	8005f10 <USBD_CoreFindEP>
 800620a:	4603      	mov	r3, r0
 800620c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800620e:	7b7b      	ldrb	r3, [r7, #13]
 8006210:	2bff      	cmp	r3, #255	; 0xff
 8006212:	f000 8174 	beq.w	80064fe <USBD_StdEPReq+0x32e>
 8006216:	7b7b      	ldrb	r3, [r7, #13]
 8006218:	2b00      	cmp	r3, #0
 800621a:	f040 8170 	bne.w	80064fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800621e:	7b7a      	ldrb	r2, [r7, #13]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006226:	7b7a      	ldrb	r2, [r7, #13]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	32ae      	adds	r2, #174	; 0xae
 800622c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 8163 	beq.w	80064fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006238:	7b7a      	ldrb	r2, [r7, #13]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	32ae      	adds	r2, #174	; 0xae
 800623e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	4798      	blx	r3
 800624a:	4603      	mov	r3, r0
 800624c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800624e:	e156      	b.n	80064fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	2b03      	cmp	r3, #3
 8006256:	d008      	beq.n	800626a <USBD_StdEPReq+0x9a>
 8006258:	2b03      	cmp	r3, #3
 800625a:	f300 8145 	bgt.w	80064e8 <USBD_StdEPReq+0x318>
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 809b 	beq.w	800639a <USBD_StdEPReq+0x1ca>
 8006264:	2b01      	cmp	r3, #1
 8006266:	d03c      	beq.n	80062e2 <USBD_StdEPReq+0x112>
 8006268:	e13e      	b.n	80064e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006270:	b2db      	uxtb	r3, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d002      	beq.n	800627c <USBD_StdEPReq+0xac>
 8006276:	2b03      	cmp	r3, #3
 8006278:	d016      	beq.n	80062a8 <USBD_StdEPReq+0xd8>
 800627a:	e02c      	b.n	80062d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00d      	beq.n	800629e <USBD_StdEPReq+0xce>
 8006282:	7bbb      	ldrb	r3, [r7, #14]
 8006284:	2b80      	cmp	r3, #128	; 0x80
 8006286:	d00a      	beq.n	800629e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006288:	7bbb      	ldrb	r3, [r7, #14]
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f001 f963 	bl	8007558 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006292:	2180      	movs	r1, #128	; 0x80
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f001 f95f 	bl	8007558 <USBD_LL_StallEP>
 800629a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800629c:	e020      	b.n	80062e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fc7a 	bl	8006b9a <USBD_CtlError>
              break;
 80062a6:	e01b      	b.n	80062e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	885b      	ldrh	r3, [r3, #2]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10e      	bne.n	80062ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062b0:	7bbb      	ldrb	r3, [r7, #14]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00b      	beq.n	80062ce <USBD_StdEPReq+0xfe>
 80062b6:	7bbb      	ldrb	r3, [r7, #14]
 80062b8:	2b80      	cmp	r3, #128	; 0x80
 80062ba:	d008      	beq.n	80062ce <USBD_StdEPReq+0xfe>
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	88db      	ldrh	r3, [r3, #6]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80062c4:	7bbb      	ldrb	r3, [r7, #14]
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 f945 	bl	8007558 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fd2e 	bl	8006d30 <USBD_CtlSendStatus>

              break;
 80062d4:	e004      	b.n	80062e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80062d6:	6839      	ldr	r1, [r7, #0]
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 fc5e 	bl	8006b9a <USBD_CtlError>
              break;
 80062de:	bf00      	nop
          }
          break;
 80062e0:	e107      	b.n	80064f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	d002      	beq.n	80062f4 <USBD_StdEPReq+0x124>
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d016      	beq.n	8006320 <USBD_StdEPReq+0x150>
 80062f2:	e04b      	b.n	800638c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80062f4:	7bbb      	ldrb	r3, [r7, #14]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00d      	beq.n	8006316 <USBD_StdEPReq+0x146>
 80062fa:	7bbb      	ldrb	r3, [r7, #14]
 80062fc:	2b80      	cmp	r3, #128	; 0x80
 80062fe:	d00a      	beq.n	8006316 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006300:	7bbb      	ldrb	r3, [r7, #14]
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f001 f927 	bl	8007558 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800630a:	2180      	movs	r1, #128	; 0x80
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f001 f923 	bl	8007558 <USBD_LL_StallEP>
 8006312:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006314:	e040      	b.n	8006398 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006316:	6839      	ldr	r1, [r7, #0]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fc3e 	bl	8006b9a <USBD_CtlError>
              break;
 800631e:	e03b      	b.n	8006398 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	885b      	ldrh	r3, [r3, #2]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d136      	bne.n	8006396 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006328:	7bbb      	ldrb	r3, [r7, #14]
 800632a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800632e:	2b00      	cmp	r3, #0
 8006330:	d004      	beq.n	800633c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006332:	7bbb      	ldrb	r3, [r7, #14]
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 f92d 	bl	8007596 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fcf7 	bl	8006d30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7ff fde2 	bl	8005f10 <USBD_CoreFindEP>
 800634c:	4603      	mov	r3, r0
 800634e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006350:	7b7b      	ldrb	r3, [r7, #13]
 8006352:	2bff      	cmp	r3, #255	; 0xff
 8006354:	d01f      	beq.n	8006396 <USBD_StdEPReq+0x1c6>
 8006356:	7b7b      	ldrb	r3, [r7, #13]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d11c      	bne.n	8006396 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800635c:	7b7a      	ldrb	r2, [r7, #13]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006364:	7b7a      	ldrb	r2, [r7, #13]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	32ae      	adds	r2, #174	; 0xae
 800636a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d010      	beq.n	8006396 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006374:	7b7a      	ldrb	r2, [r7, #13]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	32ae      	adds	r2, #174	; 0xae
 800637a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	6839      	ldr	r1, [r7, #0]
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
 8006386:	4603      	mov	r3, r0
 8006388:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800638a:	e004      	b.n	8006396 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800638c:	6839      	ldr	r1, [r7, #0]
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 fc03 	bl	8006b9a <USBD_CtlError>
              break;
 8006394:	e000      	b.n	8006398 <USBD_StdEPReq+0x1c8>
              break;
 8006396:	bf00      	nop
          }
          break;
 8006398:	e0ab      	b.n	80064f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d002      	beq.n	80063ac <USBD_StdEPReq+0x1dc>
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d032      	beq.n	8006410 <USBD_StdEPReq+0x240>
 80063aa:	e097      	b.n	80064dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063ac:	7bbb      	ldrb	r3, [r7, #14]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <USBD_StdEPReq+0x1f2>
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	2b80      	cmp	r3, #128	; 0x80
 80063b6:	d004      	beq.n	80063c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fbed 	bl	8006b9a <USBD_CtlError>
                break;
 80063c0:	e091      	b.n	80064e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	da0b      	bge.n	80063e2 <USBD_StdEPReq+0x212>
 80063ca:	7bbb      	ldrb	r3, [r7, #14]
 80063cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	3310      	adds	r3, #16
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	4413      	add	r3, r2
 80063de:	3304      	adds	r3, #4
 80063e0:	e00b      	b.n	80063fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	4413      	add	r3, r2
 80063f8:	3304      	adds	r3, #4
 80063fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2202      	movs	r2, #2
 8006406:	4619      	mov	r1, r3
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fc37 	bl	8006c7c <USBD_CtlSendData>
              break;
 800640e:	e06a      	b.n	80064e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006414:	2b00      	cmp	r3, #0
 8006416:	da11      	bge.n	800643c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006418:	7bbb      	ldrb	r3, [r7, #14]
 800641a:	f003 020f 	and.w	r2, r3, #15
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	440b      	add	r3, r1
 800642a:	3324      	adds	r3, #36	; 0x24
 800642c:	881b      	ldrh	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d117      	bne.n	8006462 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fbb0 	bl	8006b9a <USBD_CtlError>
                  break;
 800643a:	e054      	b.n	80064e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800643c:	7bbb      	ldrb	r3, [r7, #14]
 800643e:	f003 020f 	and.w	r2, r3, #15
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	4613      	mov	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	440b      	add	r3, r1
 800644e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d104      	bne.n	8006462 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fb9d 	bl	8006b9a <USBD_CtlError>
                  break;
 8006460:	e041      	b.n	80064e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006462:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006466:	2b00      	cmp	r3, #0
 8006468:	da0b      	bge.n	8006482 <USBD_StdEPReq+0x2b2>
 800646a:	7bbb      	ldrb	r3, [r7, #14]
 800646c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006470:	4613      	mov	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	3310      	adds	r3, #16
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	4413      	add	r3, r2
 800647e:	3304      	adds	r3, #4
 8006480:	e00b      	b.n	800649a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006488:	4613      	mov	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	4413      	add	r3, r2
 8006498:	3304      	adds	r3, #4
 800649a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <USBD_StdEPReq+0x2d8>
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	2b80      	cmp	r3, #128	; 0x80
 80064a6:	d103      	bne.n	80064b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
 80064ae:	e00e      	b.n	80064ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f001 f88d 	bl	80075d4 <USBD_LL_IsStallEP>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2201      	movs	r2, #1
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	e002      	b.n	80064ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2202      	movs	r2, #2
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fbd1 	bl	8006c7c <USBD_CtlSendData>
              break;
 80064da:	e004      	b.n	80064e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80064dc:	6839      	ldr	r1, [r7, #0]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fb5b 	bl	8006b9a <USBD_CtlError>
              break;
 80064e4:	bf00      	nop
          }
          break;
 80064e6:	e004      	b.n	80064f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fb55 	bl	8006b9a <USBD_CtlError>
          break;
 80064f0:	bf00      	nop
      }
      break;
 80064f2:	e005      	b.n	8006500 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80064f4:	6839      	ldr	r1, [r7, #0]
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fb4f 	bl	8006b9a <USBD_CtlError>
      break;
 80064fc:	e000      	b.n	8006500 <USBD_StdEPReq+0x330>
      break;
 80064fe:	bf00      	nop
  }

  return ret;
 8006500:	7bfb      	ldrb	r3, [r7, #15]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
	...

0800650c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006516:	2300      	movs	r3, #0
 8006518:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	885b      	ldrh	r3, [r3, #2]
 8006526:	0a1b      	lsrs	r3, r3, #8
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	2b06      	cmp	r3, #6
 800652e:	f200 8128 	bhi.w	8006782 <USBD_GetDescriptor+0x276>
 8006532:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <USBD_GetDescriptor+0x2c>)
 8006534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006538:	08006555 	.word	0x08006555
 800653c:	0800656d 	.word	0x0800656d
 8006540:	080065ad 	.word	0x080065ad
 8006544:	08006783 	.word	0x08006783
 8006548:	08006783 	.word	0x08006783
 800654c:	08006723 	.word	0x08006723
 8006550:	0800674f 	.word	0x0800674f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	7c12      	ldrb	r2, [r2, #16]
 8006560:	f107 0108 	add.w	r1, r7, #8
 8006564:	4610      	mov	r0, r2
 8006566:	4798      	blx	r3
 8006568:	60f8      	str	r0, [r7, #12]
      break;
 800656a:	e112      	b.n	8006792 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	7c1b      	ldrb	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10d      	bne.n	8006590 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657c:	f107 0208 	add.w	r2, r7, #8
 8006580:	4610      	mov	r0, r2
 8006582:	4798      	blx	r3
 8006584:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3301      	adds	r3, #1
 800658a:	2202      	movs	r2, #2
 800658c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800658e:	e100      	b.n	8006792 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	f107 0208 	add.w	r2, r7, #8
 800659c:	4610      	mov	r0, r2
 800659e:	4798      	blx	r3
 80065a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3301      	adds	r3, #1
 80065a6:	2202      	movs	r2, #2
 80065a8:	701a      	strb	r2, [r3, #0]
      break;
 80065aa:	e0f2      	b.n	8006792 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	885b      	ldrh	r3, [r3, #2]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b05      	cmp	r3, #5
 80065b4:	f200 80ac 	bhi.w	8006710 <USBD_GetDescriptor+0x204>
 80065b8:	a201      	add	r2, pc, #4	; (adr r2, 80065c0 <USBD_GetDescriptor+0xb4>)
 80065ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065be:	bf00      	nop
 80065c0:	080065d9 	.word	0x080065d9
 80065c4:	0800660d 	.word	0x0800660d
 80065c8:	08006641 	.word	0x08006641
 80065cc:	08006675 	.word	0x08006675
 80065d0:	080066a9 	.word	0x080066a9
 80065d4:	080066dd 	.word	0x080066dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00b      	beq.n	80065fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	7c12      	ldrb	r2, [r2, #16]
 80065f0:	f107 0108 	add.w	r1, r7, #8
 80065f4:	4610      	mov	r0, r2
 80065f6:	4798      	blx	r3
 80065f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80065fa:	e091      	b.n	8006720 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 facb 	bl	8006b9a <USBD_CtlError>
            err++;
 8006604:	7afb      	ldrb	r3, [r7, #11]
 8006606:	3301      	adds	r3, #1
 8006608:	72fb      	strb	r3, [r7, #11]
          break;
 800660a:	e089      	b.n	8006720 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00b      	beq.n	8006630 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	7c12      	ldrb	r2, [r2, #16]
 8006624:	f107 0108 	add.w	r1, r7, #8
 8006628:	4610      	mov	r0, r2
 800662a:	4798      	blx	r3
 800662c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800662e:	e077      	b.n	8006720 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fab1 	bl	8006b9a <USBD_CtlError>
            err++;
 8006638:	7afb      	ldrb	r3, [r7, #11]
 800663a:	3301      	adds	r3, #1
 800663c:	72fb      	strb	r3, [r7, #11]
          break;
 800663e:	e06f      	b.n	8006720 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00b      	beq.n	8006664 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	7c12      	ldrb	r2, [r2, #16]
 8006658:	f107 0108 	add.w	r1, r7, #8
 800665c:	4610      	mov	r0, r2
 800665e:	4798      	blx	r3
 8006660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006662:	e05d      	b.n	8006720 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fa97 	bl	8006b9a <USBD_CtlError>
            err++;
 800666c:	7afb      	ldrb	r3, [r7, #11]
 800666e:	3301      	adds	r3, #1
 8006670:	72fb      	strb	r3, [r7, #11]
          break;
 8006672:	e055      	b.n	8006720 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00b      	beq.n	8006698 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	687a      	ldr	r2, [r7, #4]
 800668a:	7c12      	ldrb	r2, [r2, #16]
 800668c:	f107 0108 	add.w	r1, r7, #8
 8006690:	4610      	mov	r0, r2
 8006692:	4798      	blx	r3
 8006694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006696:	e043      	b.n	8006720 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006698:	6839      	ldr	r1, [r7, #0]
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa7d 	bl	8006b9a <USBD_CtlError>
            err++;
 80066a0:	7afb      	ldrb	r3, [r7, #11]
 80066a2:	3301      	adds	r3, #1
 80066a4:	72fb      	strb	r3, [r7, #11]
          break;
 80066a6:	e03b      	b.n	8006720 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d00b      	beq.n	80066cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	7c12      	ldrb	r2, [r2, #16]
 80066c0:	f107 0108 	add.w	r1, r7, #8
 80066c4:	4610      	mov	r0, r2
 80066c6:	4798      	blx	r3
 80066c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ca:	e029      	b.n	8006720 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066cc:	6839      	ldr	r1, [r7, #0]
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fa63 	bl	8006b9a <USBD_CtlError>
            err++;
 80066d4:	7afb      	ldrb	r3, [r7, #11]
 80066d6:	3301      	adds	r3, #1
 80066d8:	72fb      	strb	r3, [r7, #11]
          break;
 80066da:	e021      	b.n	8006720 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00b      	beq.n	8006700 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	7c12      	ldrb	r2, [r2, #16]
 80066f4:	f107 0108 	add.w	r1, r7, #8
 80066f8:	4610      	mov	r0, r2
 80066fa:	4798      	blx	r3
 80066fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066fe:	e00f      	b.n	8006720 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa49 	bl	8006b9a <USBD_CtlError>
            err++;
 8006708:	7afb      	ldrb	r3, [r7, #11]
 800670a:	3301      	adds	r3, #1
 800670c:	72fb      	strb	r3, [r7, #11]
          break;
 800670e:	e007      	b.n	8006720 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fa41 	bl	8006b9a <USBD_CtlError>
          err++;
 8006718:	7afb      	ldrb	r3, [r7, #11]
 800671a:	3301      	adds	r3, #1
 800671c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800671e:	bf00      	nop
      }
      break;
 8006720:	e037      	b.n	8006792 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	7c1b      	ldrb	r3, [r3, #16]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d109      	bne.n	800673e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006732:	f107 0208 	add.w	r2, r7, #8
 8006736:	4610      	mov	r0, r2
 8006738:	4798      	blx	r3
 800673a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800673c:	e029      	b.n	8006792 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800673e:	6839      	ldr	r1, [r7, #0]
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fa2a 	bl	8006b9a <USBD_CtlError>
        err++;
 8006746:	7afb      	ldrb	r3, [r7, #11]
 8006748:	3301      	adds	r3, #1
 800674a:	72fb      	strb	r3, [r7, #11]
      break;
 800674c:	e021      	b.n	8006792 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	7c1b      	ldrb	r3, [r3, #16]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10d      	bne.n	8006772 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	f107 0208 	add.w	r2, r7, #8
 8006762:	4610      	mov	r0, r2
 8006764:	4798      	blx	r3
 8006766:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3301      	adds	r3, #1
 800676c:	2207      	movs	r2, #7
 800676e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006770:	e00f      	b.n	8006792 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006772:	6839      	ldr	r1, [r7, #0]
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f000 fa10 	bl	8006b9a <USBD_CtlError>
        err++;
 800677a:	7afb      	ldrb	r3, [r7, #11]
 800677c:	3301      	adds	r3, #1
 800677e:	72fb      	strb	r3, [r7, #11]
      break;
 8006780:	e007      	b.n	8006792 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006782:	6839      	ldr	r1, [r7, #0]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fa08 	bl	8006b9a <USBD_CtlError>
      err++;
 800678a:	7afb      	ldrb	r3, [r7, #11]
 800678c:	3301      	adds	r3, #1
 800678e:	72fb      	strb	r3, [r7, #11]
      break;
 8006790:	bf00      	nop
  }

  if (err != 0U)
 8006792:	7afb      	ldrb	r3, [r7, #11]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d11e      	bne.n	80067d6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	88db      	ldrh	r3, [r3, #6]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d016      	beq.n	80067ce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80067a0:	893b      	ldrh	r3, [r7, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00e      	beq.n	80067c4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	88da      	ldrh	r2, [r3, #6]
 80067aa:	893b      	ldrh	r3, [r7, #8]
 80067ac:	4293      	cmp	r3, r2
 80067ae:	bf28      	it	cs
 80067b0:	4613      	movcs	r3, r2
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067b6:	893b      	ldrh	r3, [r7, #8]
 80067b8:	461a      	mov	r2, r3
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fa5d 	bl	8006c7c <USBD_CtlSendData>
 80067c2:	e009      	b.n	80067d8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f9e7 	bl	8006b9a <USBD_CtlError>
 80067cc:	e004      	b.n	80067d8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 faae 	bl	8006d30 <USBD_CtlSendStatus>
 80067d4:	e000      	b.n	80067d8 <USBD_GetDescriptor+0x2cc>
    return;
 80067d6:	bf00      	nop
  }
}
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop

080067e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	889b      	ldrh	r3, [r3, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d131      	bne.n	8006856 <USBD_SetAddress+0x76>
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	88db      	ldrh	r3, [r3, #6]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d12d      	bne.n	8006856 <USBD_SetAddress+0x76>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	885b      	ldrh	r3, [r3, #2]
 80067fe:	2b7f      	cmp	r3, #127	; 0x7f
 8006800:	d829      	bhi.n	8006856 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	885b      	ldrh	r3, [r3, #2]
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800680c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b03      	cmp	r3, #3
 8006818:	d104      	bne.n	8006824 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 f9bc 	bl	8006b9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006822:	e01d      	b.n	8006860 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	7bfa      	ldrb	r2, [r7, #15]
 8006828:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fefb 	bl	800762c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa7a 	bl	8006d30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d004      	beq.n	800684c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2202      	movs	r2, #2
 8006846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800684a:	e009      	b.n	8006860 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006854:	e004      	b.n	8006860 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006856:	6839      	ldr	r1, [r7, #0]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 f99e 	bl	8006b9a <USBD_CtlError>
  }
}
 800685e:	bf00      	nop
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	885b      	ldrh	r3, [r3, #2]
 800687a:	b2da      	uxtb	r2, r3
 800687c:	4b4e      	ldr	r3, [pc, #312]	; (80069b8 <USBD_SetConfig+0x150>)
 800687e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006880:	4b4d      	ldr	r3, [pc, #308]	; (80069b8 <USBD_SetConfig+0x150>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d905      	bls.n	8006894 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006888:	6839      	ldr	r1, [r7, #0]
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f985 	bl	8006b9a <USBD_CtlError>
    return USBD_FAIL;
 8006890:	2303      	movs	r3, #3
 8006892:	e08c      	b.n	80069ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800689a:	b2db      	uxtb	r3, r3
 800689c:	2b02      	cmp	r3, #2
 800689e:	d002      	beq.n	80068a6 <USBD_SetConfig+0x3e>
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d029      	beq.n	80068f8 <USBD_SetConfig+0x90>
 80068a4:	e075      	b.n	8006992 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80068a6:	4b44      	ldr	r3, [pc, #272]	; (80069b8 <USBD_SetConfig+0x150>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d020      	beq.n	80068f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80068ae:	4b42      	ldr	r3, [pc, #264]	; (80069b8 <USBD_SetConfig+0x150>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068b8:	4b3f      	ldr	r3, [pc, #252]	; (80069b8 <USBD_SetConfig+0x150>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fe ffe1 	bl	8005886 <USBD_SetClassConfig>
 80068c4:	4603      	mov	r3, r0
 80068c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80068c8:	7bfb      	ldrb	r3, [r7, #15]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d008      	beq.n	80068e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80068ce:	6839      	ldr	r1, [r7, #0]
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f962 	bl	8006b9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2202      	movs	r2, #2
 80068da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068de:	e065      	b.n	80069ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fa25 	bl	8006d30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2203      	movs	r2, #3
 80068ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80068ee:	e05d      	b.n	80069ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fa1d 	bl	8006d30 <USBD_CtlSendStatus>
      break;
 80068f6:	e059      	b.n	80069ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80068f8:	4b2f      	ldr	r3, [pc, #188]	; (80069b8 <USBD_SetConfig+0x150>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d112      	bne.n	8006926 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2202      	movs	r2, #2
 8006904:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006908:	4b2b      	ldr	r3, [pc, #172]	; (80069b8 <USBD_SetConfig+0x150>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	461a      	mov	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006912:	4b29      	ldr	r3, [pc, #164]	; (80069b8 <USBD_SetConfig+0x150>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7fe ffd0 	bl	80058be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fa06 	bl	8006d30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006924:	e042      	b.n	80069ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006926:	4b24      	ldr	r3, [pc, #144]	; (80069b8 <USBD_SetConfig+0x150>)
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	461a      	mov	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	429a      	cmp	r2, r3
 8006932:	d02a      	beq.n	800698a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7fe ffbe 	bl	80058be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006942:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <USBD_SetConfig+0x150>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800694c:	4b1a      	ldr	r3, [pc, #104]	; (80069b8 <USBD_SetConfig+0x150>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	4619      	mov	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f7fe ff97 	bl	8005886 <USBD_SetClassConfig>
 8006958:	4603      	mov	r3, r0
 800695a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800695c:	7bfb      	ldrb	r3, [r7, #15]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00f      	beq.n	8006982 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006962:	6839      	ldr	r1, [r7, #0]
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 f918 	bl	8006b9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fe ffa3 	bl	80058be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006980:	e014      	b.n	80069ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f9d4 	bl	8006d30 <USBD_CtlSendStatus>
      break;
 8006988:	e010      	b.n	80069ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 f9d0 	bl	8006d30 <USBD_CtlSendStatus>
      break;
 8006990:	e00c      	b.n	80069ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f900 	bl	8006b9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800699a:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <USBD_SetConfig+0x150>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	4619      	mov	r1, r3
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7fe ff8c 	bl	80058be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80069a6:	2303      	movs	r3, #3
 80069a8:	73fb      	strb	r3, [r7, #15]
      break;
 80069aa:	bf00      	nop
  }

  return ret;
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	200007d0 	.word	0x200007d0

080069bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	88db      	ldrh	r3, [r3, #6]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d004      	beq.n	80069d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f8e2 	bl	8006b9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80069d6:	e023      	b.n	8006a20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b02      	cmp	r3, #2
 80069e2:	dc02      	bgt.n	80069ea <USBD_GetConfig+0x2e>
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	dc03      	bgt.n	80069f0 <USBD_GetConfig+0x34>
 80069e8:	e015      	b.n	8006a16 <USBD_GetConfig+0x5a>
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d00b      	beq.n	8006a06 <USBD_GetConfig+0x4a>
 80069ee:	e012      	b.n	8006a16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3308      	adds	r3, #8
 80069fa:	2201      	movs	r2, #1
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f93c 	bl	8006c7c <USBD_CtlSendData>
        break;
 8006a04:	e00c      	b.n	8006a20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f934 	bl	8006c7c <USBD_CtlSendData>
        break;
 8006a14:	e004      	b.n	8006a20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f8be 	bl	8006b9a <USBD_CtlError>
        break;
 8006a1e:	bf00      	nop
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
 8006a30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d81e      	bhi.n	8006a7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	88db      	ldrh	r3, [r3, #6]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d004      	beq.n	8006a52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a48:	6839      	ldr	r1, [r7, #0]
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f8a5 	bl	8006b9a <USBD_CtlError>
        break;
 8006a50:	e01a      	b.n	8006a88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d005      	beq.n	8006a6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f043 0202 	orr.w	r2, r3, #2
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	330c      	adds	r3, #12
 8006a72:	2202      	movs	r2, #2
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f900 	bl	8006c7c <USBD_CtlSendData>
      break;
 8006a7c:	e004      	b.n	8006a88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f88a 	bl	8006b9a <USBD_CtlError>
      break;
 8006a86:	bf00      	nop
  }
}
 8006a88:	bf00      	nop
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	885b      	ldrh	r3, [r3, #2]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d107      	bne.n	8006ab2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f940 	bl	8006d30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006ab0:	e013      	b.n	8006ada <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	885b      	ldrh	r3, [r3, #2]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d10b      	bne.n	8006ad2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	889b      	ldrh	r3, [r3, #4]
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f930 	bl	8006d30 <USBD_CtlSendStatus>
}
 8006ad0:	e003      	b.n	8006ada <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006ad2:	6839      	ldr	r1, [r7, #0]
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 f860 	bl	8006b9a <USBD_CtlError>
}
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b082      	sub	sp, #8
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d80b      	bhi.n	8006b12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	885b      	ldrh	r3, [r3, #2]
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d10c      	bne.n	8006b1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f910 	bl	8006d30 <USBD_CtlSendStatus>
      }
      break;
 8006b10:	e004      	b.n	8006b1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f840 	bl	8006b9a <USBD_CtlError>
      break;
 8006b1a:	e000      	b.n	8006b1e <USBD_ClrFeature+0x3c>
      break;
 8006b1c:	bf00      	nop
  }
}
 8006b1e:	bf00      	nop
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b084      	sub	sp, #16
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	781a      	ldrb	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b50:	68f8      	ldr	r0, [r7, #12]
 8006b52:	f7ff fa41 	bl	8005fd8 <SWAPBYTE>
 8006b56:	4603      	mov	r3, r0
 8006b58:	461a      	mov	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3301      	adds	r3, #1
 8006b62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3301      	adds	r3, #1
 8006b68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b6a:	68f8      	ldr	r0, [r7, #12]
 8006b6c:	f7ff fa34 	bl	8005fd8 <SWAPBYTE>
 8006b70:	4603      	mov	r3, r0
 8006b72:	461a      	mov	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3301      	adds	r3, #1
 8006b82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7ff fa27 	bl	8005fd8 <SWAPBYTE>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	80da      	strh	r2, [r3, #6]
}
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b082      	sub	sp, #8
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ba4:	2180      	movs	r1, #128	; 0x80
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 fcd6 	bl	8007558 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006bac:	2100      	movs	r1, #0
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fcd2 	bl	8007558 <USBD_LL_StallEP>
}
 8006bb4:	bf00      	nop
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b086      	sub	sp, #24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d036      	beq.n	8006c40 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006bd6:	6938      	ldr	r0, [r7, #16]
 8006bd8:	f000 f836 	bl	8006c48 <USBD_GetLen>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	3301      	adds	r3, #1
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	68ba      	ldr	r2, [r7, #8]
 8006bee:	4413      	add	r3, r2
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	7812      	ldrb	r2, [r2, #0]
 8006bf4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006bfc:	7dfb      	ldrb	r3, [r7, #23]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	4413      	add	r3, r2
 8006c02:	2203      	movs	r2, #3
 8006c04:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c0c:	e013      	b.n	8006c36 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006c0e:	7dfb      	ldrb	r3, [r7, #23]
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	4413      	add	r3, r2
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	7812      	ldrb	r2, [r2, #0]
 8006c18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	613b      	str	r3, [r7, #16]
    idx++;
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
 8006c22:	3301      	adds	r3, #1
 8006c24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c26:	7dfb      	ldrb	r3, [r7, #23]
 8006c28:	68ba      	ldr	r2, [r7, #8]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	3301      	adds	r3, #1
 8006c34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	781b      	ldrb	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e7      	bne.n	8006c0e <USBD_GetString+0x52>
 8006c3e:	e000      	b.n	8006c42 <USBD_GetString+0x86>
    return;
 8006c40:	bf00      	nop
  }
}
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c58:	e005      	b.n	8006c66 <USBD_GetLen+0x1e>
  {
    len++;
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	3301      	adds	r3, #1
 8006c64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d1f5      	bne.n	8006c5a <USBD_GetLen+0x12>
  }

  return len;
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2202      	movs	r2, #2
 8006c8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fce1 	bl	800766a <USBD_LL_Transmit>

  return USBD_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b084      	sub	sp, #16
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	68ba      	ldr	r2, [r7, #8]
 8006cc2:	2100      	movs	r1, #0
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 fcd0 	bl	800766a <USBD_LL_Transmit>

  return USBD_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fcd4 	bl	80076ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	2100      	movs	r1, #0
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 fcc3 	bl	80076ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2204      	movs	r2, #4
 8006d3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d40:	2300      	movs	r3, #0
 8006d42:	2200      	movs	r2, #0
 8006d44:	2100      	movs	r1, #0
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fc8f 	bl	800766a <USBD_LL_Transmit>

  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2205      	movs	r2, #5
 8006d62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d66:	2300      	movs	r3, #0
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fc9d 	bl	80076ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d80:	2200      	movs	r2, #0
 8006d82:	4912      	ldr	r1, [pc, #72]	; (8006dcc <MX_USB_DEVICE_Init+0x50>)
 8006d84:	4812      	ldr	r0, [pc, #72]	; (8006dd0 <MX_USB_DEVICE_Init+0x54>)
 8006d86:	f7fe fd01 	bl	800578c <USBD_Init>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d90:	f7fa f9da 	bl	8001148 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d94:	490f      	ldr	r1, [pc, #60]	; (8006dd4 <MX_USB_DEVICE_Init+0x58>)
 8006d96:	480e      	ldr	r0, [pc, #56]	; (8006dd0 <MX_USB_DEVICE_Init+0x54>)
 8006d98:	f7fe fd28 	bl	80057ec <USBD_RegisterClass>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006da2:	f7fa f9d1 	bl	8001148 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006da6:	490c      	ldr	r1, [pc, #48]	; (8006dd8 <MX_USB_DEVICE_Init+0x5c>)
 8006da8:	4809      	ldr	r0, [pc, #36]	; (8006dd0 <MX_USB_DEVICE_Init+0x54>)
 8006daa:	f7fe fc1f 	bl	80055ec <USBD_CDC_RegisterInterface>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006db4:	f7fa f9c8 	bl	8001148 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006db8:	4805      	ldr	r0, [pc, #20]	; (8006dd0 <MX_USB_DEVICE_Init+0x54>)
 8006dba:	f7fe fd4d 	bl	8005858 <USBD_Start>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006dc4:	f7fa f9c0 	bl	8001148 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006dc8:	bf00      	nop
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	200000ac 	.word	0x200000ac
 8006dd0:	200007d4 	.word	0x200007d4
 8006dd4:	20000018 	.word	0x20000018
 8006dd8:	20000098 	.word	0x20000098

08006ddc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006de0:	2200      	movs	r2, #0
 8006de2:	4905      	ldr	r1, [pc, #20]	; (8006df8 <CDC_Init_FS+0x1c>)
 8006de4:	4805      	ldr	r0, [pc, #20]	; (8006dfc <CDC_Init_FS+0x20>)
 8006de6:	f7fe fc1b 	bl	8005620 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006dea:	4905      	ldr	r1, [pc, #20]	; (8006e00 <CDC_Init_FS+0x24>)
 8006dec:	4803      	ldr	r0, [pc, #12]	; (8006dfc <CDC_Init_FS+0x20>)
 8006dee:	f7fe fc39 	bl	8005664 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006df2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	200012b0 	.word	0x200012b0
 8006dfc:	200007d4 	.word	0x200007d4
 8006e00:	20000ab0 	.word	0x20000ab0

08006e04 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006e08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	6039      	str	r1, [r7, #0]
 8006e1e:	71fb      	strb	r3, [r7, #7]
 8006e20:	4613      	mov	r3, r2
 8006e22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006e24:	79fb      	ldrb	r3, [r7, #7]
 8006e26:	2b23      	cmp	r3, #35	; 0x23
 8006e28:	d84a      	bhi.n	8006ec0 <CDC_Control_FS+0xac>
 8006e2a:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <CDC_Control_FS+0x1c>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006ec1 	.word	0x08006ec1
 8006e34:	08006ec1 	.word	0x08006ec1
 8006e38:	08006ec1 	.word	0x08006ec1
 8006e3c:	08006ec1 	.word	0x08006ec1
 8006e40:	08006ec1 	.word	0x08006ec1
 8006e44:	08006ec1 	.word	0x08006ec1
 8006e48:	08006ec1 	.word	0x08006ec1
 8006e4c:	08006ec1 	.word	0x08006ec1
 8006e50:	08006ec1 	.word	0x08006ec1
 8006e54:	08006ec1 	.word	0x08006ec1
 8006e58:	08006ec1 	.word	0x08006ec1
 8006e5c:	08006ec1 	.word	0x08006ec1
 8006e60:	08006ec1 	.word	0x08006ec1
 8006e64:	08006ec1 	.word	0x08006ec1
 8006e68:	08006ec1 	.word	0x08006ec1
 8006e6c:	08006ec1 	.word	0x08006ec1
 8006e70:	08006ec1 	.word	0x08006ec1
 8006e74:	08006ec1 	.word	0x08006ec1
 8006e78:	08006ec1 	.word	0x08006ec1
 8006e7c:	08006ec1 	.word	0x08006ec1
 8006e80:	08006ec1 	.word	0x08006ec1
 8006e84:	08006ec1 	.word	0x08006ec1
 8006e88:	08006ec1 	.word	0x08006ec1
 8006e8c:	08006ec1 	.word	0x08006ec1
 8006e90:	08006ec1 	.word	0x08006ec1
 8006e94:	08006ec1 	.word	0x08006ec1
 8006e98:	08006ec1 	.word	0x08006ec1
 8006e9c:	08006ec1 	.word	0x08006ec1
 8006ea0:	08006ec1 	.word	0x08006ec1
 8006ea4:	08006ec1 	.word	0x08006ec1
 8006ea8:	08006ec1 	.word	0x08006ec1
 8006eac:	08006ec1 	.word	0x08006ec1
 8006eb0:	08006ec1 	.word	0x08006ec1
 8006eb4:	08006ec1 	.word	0x08006ec1
 8006eb8:	08006ec1 	.word	0x08006ec1
 8006ebc:	08006ec1 	.word	0x08006ec1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006ec0:	bf00      	nop
  }

  return (USBD_OK);
 8006ec2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006eda:	6879      	ldr	r1, [r7, #4]
 8006edc:	4805      	ldr	r0, [pc, #20]	; (8006ef4 <CDC_Receive_FS+0x24>)
 8006ede:	f7fe fbc1 	bl	8005664 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006ee2:	4804      	ldr	r0, [pc, #16]	; (8006ef4 <CDC_Receive_FS+0x24>)
 8006ee4:	f7fe fc1c 	bl	8005720 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006ee8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	200007d4 	.word	0x200007d4

08006ef8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006f08:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <CDC_Transmit_FS+0x48>)
 8006f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f0e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e00b      	b.n	8006f36 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006f1e:	887b      	ldrh	r3, [r7, #2]
 8006f20:	461a      	mov	r2, r3
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4806      	ldr	r0, [pc, #24]	; (8006f40 <CDC_Transmit_FS+0x48>)
 8006f26:	f7fe fb7b 	bl	8005620 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006f2a:	4805      	ldr	r0, [pc, #20]	; (8006f40 <CDC_Transmit_FS+0x48>)
 8006f2c:	f7fe fbb8 	bl	80056a0 <USBD_CDC_TransmitPacket>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	200007d4 	.word	0x200007d4

08006f44 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	2212      	movs	r2, #18
 8006f78:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f7a:	4b03      	ldr	r3, [pc, #12]	; (8006f88 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	200000c8 	.word	0x200000c8

08006f8c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	6039      	str	r1, [r7, #0]
 8006f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	2204      	movs	r2, #4
 8006f9c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f9e:	4b03      	ldr	r3, [pc, #12]	; (8006fac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr
 8006fac:	200000dc 	.word	0x200000dc

08006fb0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	6039      	str	r1, [r7, #0]
 8006fba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d105      	bne.n	8006fce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	4907      	ldr	r1, [pc, #28]	; (8006fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fc6:	4808      	ldr	r0, [pc, #32]	; (8006fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fc8:	f7ff fdf8 	bl	8006bbc <USBD_GetString>
 8006fcc:	e004      	b.n	8006fd8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006fce:	683a      	ldr	r2, [r7, #0]
 8006fd0:	4904      	ldr	r1, [pc, #16]	; (8006fe4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fd2:	4805      	ldr	r0, [pc, #20]	; (8006fe8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fd4:	f7ff fdf2 	bl	8006bbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fd8:	4b02      	ldr	r3, [pc, #8]	; (8006fe4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3708      	adds	r7, #8
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
 8006fe2:	bf00      	nop
 8006fe4:	20001ab0 	.word	0x20001ab0
 8006fe8:	0800d340 	.word	0x0800d340

08006fec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	4904      	ldr	r1, [pc, #16]	; (800700c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006ffc:	4804      	ldr	r0, [pc, #16]	; (8007010 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ffe:	f7ff fddd 	bl	8006bbc <USBD_GetString>
  return USBD_StrDesc;
 8007002:	4b02      	ldr	r3, [pc, #8]	; (800700c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007004:	4618      	mov	r0, r3
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20001ab0 	.word	0x20001ab0
 8007010:	0800d358 	.word	0x0800d358

08007014 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b082      	sub	sp, #8
 8007018:	af00      	add	r7, sp, #0
 800701a:	4603      	mov	r3, r0
 800701c:	6039      	str	r1, [r7, #0]
 800701e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	221a      	movs	r2, #26
 8007024:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007026:	f000 f843 	bl	80070b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800702a:	4b02      	ldr	r3, [pc, #8]	; (8007034 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	200000e0 	.word	0x200000e0

08007038 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	6039      	str	r1, [r7, #0]
 8007042:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d105      	bne.n	8007056 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800704a:	683a      	ldr	r2, [r7, #0]
 800704c:	4907      	ldr	r1, [pc, #28]	; (800706c <USBD_FS_ConfigStrDescriptor+0x34>)
 800704e:	4808      	ldr	r0, [pc, #32]	; (8007070 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007050:	f7ff fdb4 	bl	8006bbc <USBD_GetString>
 8007054:	e004      	b.n	8007060 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	4904      	ldr	r1, [pc, #16]	; (800706c <USBD_FS_ConfigStrDescriptor+0x34>)
 800705a:	4805      	ldr	r0, [pc, #20]	; (8007070 <USBD_FS_ConfigStrDescriptor+0x38>)
 800705c:	f7ff fdae 	bl	8006bbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007060:	4b02      	ldr	r3, [pc, #8]	; (800706c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007062:	4618      	mov	r0, r3
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20001ab0 	.word	0x20001ab0
 8007070:	0800d36c 	.word	0x0800d36c

08007074 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	4603      	mov	r3, r0
 800707c:	6039      	str	r1, [r7, #0]
 800707e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d105      	bne.n	8007092 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	4907      	ldr	r1, [pc, #28]	; (80070a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800708a:	4808      	ldr	r0, [pc, #32]	; (80070ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800708c:	f7ff fd96 	bl	8006bbc <USBD_GetString>
 8007090:	e004      	b.n	800709c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	4904      	ldr	r1, [pc, #16]	; (80070a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007096:	4805      	ldr	r0, [pc, #20]	; (80070ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007098:	f7ff fd90 	bl	8006bbc <USBD_GetString>
  }
  return USBD_StrDesc;
 800709c:	4b02      	ldr	r3, [pc, #8]	; (80070a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20001ab0 	.word	0x20001ab0
 80070ac:	0800d378 	.word	0x0800d378

080070b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80070b6:	4b0f      	ldr	r3, [pc, #60]	; (80070f4 <Get_SerialNum+0x44>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80070bc:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <Get_SerialNum+0x48>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80070c2:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <Get_SerialNum+0x4c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d009      	beq.n	80070ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070d6:	2208      	movs	r2, #8
 80070d8:	4909      	ldr	r1, [pc, #36]	; (8007100 <Get_SerialNum+0x50>)
 80070da:	68f8      	ldr	r0, [r7, #12]
 80070dc:	f000 f814 	bl	8007108 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070e0:	2204      	movs	r2, #4
 80070e2:	4908      	ldr	r1, [pc, #32]	; (8007104 <Get_SerialNum+0x54>)
 80070e4:	68b8      	ldr	r0, [r7, #8]
 80070e6:	f000 f80f 	bl	8007108 <IntToUnicode>
  }
}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	1fff7a10 	.word	0x1fff7a10
 80070f8:	1fff7a14 	.word	0x1fff7a14
 80070fc:	1fff7a18 	.word	0x1fff7a18
 8007100:	200000e2 	.word	0x200000e2
 8007104:	200000f2 	.word	0x200000f2

08007108 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	4613      	mov	r3, r2
 8007114:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800711a:	2300      	movs	r3, #0
 800711c:	75fb      	strb	r3, [r7, #23]
 800711e:	e027      	b.n	8007170 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	0f1b      	lsrs	r3, r3, #28
 8007124:	2b09      	cmp	r3, #9
 8007126:	d80b      	bhi.n	8007140 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	0f1b      	lsrs	r3, r3, #28
 800712c:	b2da      	uxtb	r2, r3
 800712e:	7dfb      	ldrb	r3, [r7, #23]
 8007130:	005b      	lsls	r3, r3, #1
 8007132:	4619      	mov	r1, r3
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	440b      	add	r3, r1
 8007138:	3230      	adds	r2, #48	; 0x30
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	701a      	strb	r2, [r3, #0]
 800713e:	e00a      	b.n	8007156 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	0f1b      	lsrs	r3, r3, #28
 8007144:	b2da      	uxtb	r2, r3
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	4619      	mov	r1, r3
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	440b      	add	r3, r1
 8007150:	3237      	adds	r2, #55	; 0x37
 8007152:	b2d2      	uxtb	r2, r2
 8007154:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	3301      	adds	r3, #1
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	4413      	add	r3, r2
 8007166:	2200      	movs	r2, #0
 8007168:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	3301      	adds	r3, #1
 800716e:	75fb      	strb	r3, [r7, #23]
 8007170:	7dfa      	ldrb	r2, [r7, #23]
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	429a      	cmp	r2, r3
 8007176:	d3d3      	bcc.n	8007120 <IntToUnicode+0x18>
  }
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	371c      	adds	r7, #28
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
	...

08007188 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08a      	sub	sp, #40	; 0x28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007190:	f107 0314 	add.w	r3, r7, #20
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	605a      	str	r2, [r3, #4]
 800719a:	609a      	str	r2, [r3, #8]
 800719c:	60da      	str	r2, [r3, #12]
 800719e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071a8:	d13a      	bne.n	8007220 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	613b      	str	r3, [r7, #16]
 80071ae:	4b1e      	ldr	r3, [pc, #120]	; (8007228 <HAL_PCD_MspInit+0xa0>)
 80071b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b2:	4a1d      	ldr	r2, [pc, #116]	; (8007228 <HAL_PCD_MspInit+0xa0>)
 80071b4:	f043 0301 	orr.w	r3, r3, #1
 80071b8:	6313      	str	r3, [r2, #48]	; 0x30
 80071ba:	4b1b      	ldr	r3, [pc, #108]	; (8007228 <HAL_PCD_MspInit+0xa0>)
 80071bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	613b      	str	r3, [r7, #16]
 80071c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80071c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80071ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071cc:	2302      	movs	r3, #2
 80071ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071d4:	2303      	movs	r3, #3
 80071d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071d8:	230a      	movs	r3, #10
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071dc:	f107 0314 	add.w	r3, r7, #20
 80071e0:	4619      	mov	r1, r3
 80071e2:	4812      	ldr	r0, [pc, #72]	; (800722c <HAL_PCD_MspInit+0xa4>)
 80071e4:	f7fa fabc 	bl	8001760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80071e8:	4b0f      	ldr	r3, [pc, #60]	; (8007228 <HAL_PCD_MspInit+0xa0>)
 80071ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ec:	4a0e      	ldr	r2, [pc, #56]	; (8007228 <HAL_PCD_MspInit+0xa0>)
 80071ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f2:	6353      	str	r3, [r2, #52]	; 0x34
 80071f4:	2300      	movs	r3, #0
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <HAL_PCD_MspInit+0xa0>)
 80071fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fc:	4a0a      	ldr	r2, [pc, #40]	; (8007228 <HAL_PCD_MspInit+0xa0>)
 80071fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007202:	6453      	str	r3, [r2, #68]	; 0x44
 8007204:	4b08      	ldr	r3, [pc, #32]	; (8007228 <HAL_PCD_MspInit+0xa0>)
 8007206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007210:	2200      	movs	r2, #0
 8007212:	2100      	movs	r1, #0
 8007214:	2043      	movs	r0, #67	; 0x43
 8007216:	f7fa fa6c 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800721a:	2043      	movs	r0, #67	; 0x43
 800721c:	f7fa fa85 	bl	800172a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007220:	bf00      	nop
 8007222:	3728      	adds	r7, #40	; 0x28
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	40023800 	.word	0x40023800
 800722c:	40020000 	.word	0x40020000

08007230 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007244:	4619      	mov	r1, r3
 8007246:	4610      	mov	r0, r2
 8007248:	f7fe fb53 	bl	80058f2 <USBD_LL_SetupStage>
}
 800724c:	bf00      	nop
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8007266:	78fa      	ldrb	r2, [r7, #3]
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	00db      	lsls	r3, r3, #3
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	440b      	add	r3, r1
 8007274:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	4619      	mov	r1, r3
 800727e:	f7fe fb8d 	bl	800599c <USBD_LL_DataOutStage>
}
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800729c:	78fa      	ldrb	r2, [r7, #3]
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	4613      	mov	r3, r2
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	4413      	add	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	440b      	add	r3, r1
 80072aa:	3320      	adds	r3, #32
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	4619      	mov	r1, r3
 80072b2:	f7fe fc26 	bl	8005b02 <USBD_LL_DataInStage>
}
 80072b6:	bf00      	nop
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b082      	sub	sp, #8
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fe fd60 	bl	8005d92 <USBD_LL_SOF>
}
 80072d2:	bf00      	nop
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80072e2:	2301      	movs	r3, #1
 80072e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	79db      	ldrb	r3, [r3, #7]
 80072ea:	2b02      	cmp	r3, #2
 80072ec:	d001      	beq.n	80072f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80072ee:	f7f9 ff2b 	bl	8001148 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80072f8:	7bfa      	ldrb	r2, [r7, #15]
 80072fa:	4611      	mov	r1, r2
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fe fd04 	bl	8005d0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007308:	4618      	mov	r0, r3
 800730a:	f7fe fcac 	bl	8005c66 <USBD_LL_Reset>
}
 800730e:	bf00      	nop
 8007310:	3710      	adds	r7, #16
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe fcff 	bl	8005d2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	6812      	ldr	r2, [r2, #0]
 800733a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800733e:	f043 0301 	orr.w	r3, r3, #1
 8007342:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7adb      	ldrb	r3, [r3, #11]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d005      	beq.n	8007358 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800734c:	4b04      	ldr	r3, [pc, #16]	; (8007360 <HAL_PCD_SuspendCallback+0x48>)
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	4a03      	ldr	r2, [pc, #12]	; (8007360 <HAL_PCD_SuspendCallback+0x48>)
 8007352:	f043 0306 	orr.w	r3, r3, #6
 8007356:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	e000ed00 	.word	0xe000ed00

08007364 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fcf5 	bl	8005d62 <USBD_LL_Resume>
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8007392:	78fa      	ldrb	r2, [r7, #3]
 8007394:	4611      	mov	r1, r2
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe fd4d 	bl	8005e36 <USBD_LL_IsoOUTIncomplete>
}
 800739c:	bf00      	nop
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80073b6:	78fa      	ldrb	r2, [r7, #3]
 80073b8:	4611      	mov	r1, r2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fe fd09 	bl	8005dd2 <USBD_LL_IsoINIncomplete>
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fe fd5f 	bl	8005e9a <USBD_LL_DevConnected>
}
 80073dc:	bf00      	nop
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fe fd5c 	bl	8005eb0 <USBD_LL_DevDisconnected>
}
 80073f8:	bf00      	nop
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d13c      	bne.n	800748a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007410:	4a20      	ldr	r2, [pc, #128]	; (8007494 <USBD_LL_Init+0x94>)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a1e      	ldr	r2, [pc, #120]	; (8007494 <USBD_LL_Init+0x94>)
 800741c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007420:	4b1c      	ldr	r3, [pc, #112]	; (8007494 <USBD_LL_Init+0x94>)
 8007422:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007426:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007428:	4b1a      	ldr	r3, [pc, #104]	; (8007494 <USBD_LL_Init+0x94>)
 800742a:	2204      	movs	r2, #4
 800742c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800742e:	4b19      	ldr	r3, [pc, #100]	; (8007494 <USBD_LL_Init+0x94>)
 8007430:	2202      	movs	r2, #2
 8007432:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007434:	4b17      	ldr	r3, [pc, #92]	; (8007494 <USBD_LL_Init+0x94>)
 8007436:	2200      	movs	r2, #0
 8007438:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800743a:	4b16      	ldr	r3, [pc, #88]	; (8007494 <USBD_LL_Init+0x94>)
 800743c:	2202      	movs	r2, #2
 800743e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007440:	4b14      	ldr	r3, [pc, #80]	; (8007494 <USBD_LL_Init+0x94>)
 8007442:	2200      	movs	r2, #0
 8007444:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007446:	4b13      	ldr	r3, [pc, #76]	; (8007494 <USBD_LL_Init+0x94>)
 8007448:	2200      	movs	r2, #0
 800744a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800744c:	4b11      	ldr	r3, [pc, #68]	; (8007494 <USBD_LL_Init+0x94>)
 800744e:	2200      	movs	r2, #0
 8007450:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007452:	4b10      	ldr	r3, [pc, #64]	; (8007494 <USBD_LL_Init+0x94>)
 8007454:	2200      	movs	r2, #0
 8007456:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007458:	4b0e      	ldr	r3, [pc, #56]	; (8007494 <USBD_LL_Init+0x94>)
 800745a:	2200      	movs	r2, #0
 800745c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800745e:	480d      	ldr	r0, [pc, #52]	; (8007494 <USBD_LL_Init+0x94>)
 8007460:	f7fa fb02 	bl	8001a68 <HAL_PCD_Init>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800746a:	f7f9 fe6d 	bl	8001148 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800746e:	2180      	movs	r1, #128	; 0x80
 8007470:	4808      	ldr	r0, [pc, #32]	; (8007494 <USBD_LL_Init+0x94>)
 8007472:	f7fb fd2c 	bl	8002ece <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007476:	2240      	movs	r2, #64	; 0x40
 8007478:	2100      	movs	r1, #0
 800747a:	4806      	ldr	r0, [pc, #24]	; (8007494 <USBD_LL_Init+0x94>)
 800747c:	f7fb fce0 	bl	8002e40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007480:	2280      	movs	r2, #128	; 0x80
 8007482:	2101      	movs	r1, #1
 8007484:	4803      	ldr	r0, [pc, #12]	; (8007494 <USBD_LL_Init+0x94>)
 8007486:	f7fb fcdb 	bl	8002e40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20001cb0 	.word	0x20001cb0

08007498 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7fa fbe9 	bl	8001c86 <HAL_PCD_Start>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 f942 	bl	8007744 <USBD_Get_USB_Status>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	4608      	mov	r0, r1
 80074d8:	4611      	mov	r1, r2
 80074da:	461a      	mov	r2, r3
 80074dc:	4603      	mov	r3, r0
 80074de:	70fb      	strb	r3, [r7, #3]
 80074e0:	460b      	mov	r3, r1
 80074e2:	70bb      	strb	r3, [r7, #2]
 80074e4:	4613      	mov	r3, r2
 80074e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074e8:	2300      	movs	r3, #0
 80074ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80074f6:	78bb      	ldrb	r3, [r7, #2]
 80074f8:	883a      	ldrh	r2, [r7, #0]
 80074fa:	78f9      	ldrb	r1, [r7, #3]
 80074fc:	f7fb f8bd 	bl	800267a <HAL_PCD_EP_Open>
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	4618      	mov	r0, r3
 8007508:	f000 f91c 	bl	8007744 <USBD_Get_USB_Status>
 800750c:	4603      	mov	r3, r0
 800750e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007510:	7bbb      	ldrb	r3, [r7, #14]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}

0800751a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b084      	sub	sp, #16
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800752a:	2300      	movs	r3, #0
 800752c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007534:	78fa      	ldrb	r2, [r7, #3]
 8007536:	4611      	mov	r1, r2
 8007538:	4618      	mov	r0, r3
 800753a:	f7fb f906 	bl	800274a <HAL_PCD_EP_Close>
 800753e:	4603      	mov	r3, r0
 8007540:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	4618      	mov	r0, r3
 8007546:	f000 f8fd 	bl	8007744 <USBD_Get_USB_Status>
 800754a:	4603      	mov	r3, r0
 800754c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800754e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007572:	78fa      	ldrb	r2, [r7, #3]
 8007574:	4611      	mov	r1, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f7fb f9be 	bl	80028f8 <HAL_PCD_EP_SetStall>
 800757c:	4603      	mov	r3, r0
 800757e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007580:	7bfb      	ldrb	r3, [r7, #15]
 8007582:	4618      	mov	r0, r3
 8007584:	f000 f8de 	bl	8007744 <USBD_Get_USB_Status>
 8007588:	4603      	mov	r3, r0
 800758a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800758c:	7bbb      	ldrb	r3, [r7, #14]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}

08007596 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007596:	b580      	push	{r7, lr}
 8007598:	b084      	sub	sp, #16
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
 800759e:	460b      	mov	r3, r1
 80075a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075b0:	78fa      	ldrb	r2, [r7, #3]
 80075b2:	4611      	mov	r1, r2
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fb fa02 	bl	80029be <HAL_PCD_EP_ClrStall>
 80075ba:	4603      	mov	r3, r0
 80075bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075be:	7bfb      	ldrb	r3, [r7, #15]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f000 f8bf 	bl	8007744 <USBD_Get_USB_Status>
 80075c6:	4603      	mov	r3, r0
 80075c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80075e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	da0b      	bge.n	8007608 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075f6:	68f9      	ldr	r1, [r7, #12]
 80075f8:	4613      	mov	r3, r2
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	440b      	add	r3, r1
 8007602:	3316      	adds	r3, #22
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	e00b      	b.n	8007620 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007608:	78fb      	ldrb	r3, [r7, #3]
 800760a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800760e:	68f9      	ldr	r1, [r7, #12]
 8007610:	4613      	mov	r3, r2
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	f203 2356 	addw	r3, r3, #598	; 0x256
 800761e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007646:	78fa      	ldrb	r2, [r7, #3]
 8007648:	4611      	mov	r1, r2
 800764a:	4618      	mov	r0, r3
 800764c:	f7fa fff1 	bl	8002632 <HAL_PCD_SetAddress>
 8007650:	4603      	mov	r3, r0
 8007652:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f874 	bl	8007744 <USBD_Get_USB_Status>
 800765c:	4603      	mov	r3, r0
 800765e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007660:	7bbb      	ldrb	r3, [r7, #14]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b086      	sub	sp, #24
 800766e:	af00      	add	r7, sp, #0
 8007670:	60f8      	str	r0, [r7, #12]
 8007672:	607a      	str	r2, [r7, #4]
 8007674:	603b      	str	r3, [r7, #0]
 8007676:	460b      	mov	r3, r1
 8007678:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007688:	7af9      	ldrb	r1, [r7, #11]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	f7fb f8f9 	bl	8002884 <HAL_PCD_EP_Transmit>
 8007692:	4603      	mov	r3, r0
 8007694:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	4618      	mov	r0, r3
 800769a:	f000 f853 	bl	8007744 <USBD_Get_USB_Status>
 800769e:	4603      	mov	r3, r0
 80076a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	607a      	str	r2, [r7, #4]
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	460b      	mov	r3, r1
 80076ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076bc:	2300      	movs	r3, #0
 80076be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80076ca:	7af9      	ldrb	r1, [r7, #11]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	f7fb f885 	bl	80027de <HAL_PCD_EP_Receive>
 80076d4:	4603      	mov	r3, r0
 80076d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 f832 	bl	8007744 <USBD_Get_USB_Status>
 80076e0:	4603      	mov	r3, r0
 80076e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80076e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b082      	sub	sp, #8
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	460b      	mov	r3, r1
 80076f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007700:	78fa      	ldrb	r2, [r7, #3]
 8007702:	4611      	mov	r1, r2
 8007704:	4618      	mov	r0, r3
 8007706:	f7fb f8a5 	bl	8002854 <HAL_PCD_EP_GetRxCount>
 800770a:	4603      	mov	r3, r0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800771c:	4b03      	ldr	r3, [pc, #12]	; (800772c <USBD_static_malloc+0x18>)
}
 800771e:	4618      	mov	r0, r3
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20002194 	.word	0x20002194

08007730 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]

}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	4603      	mov	r3, r0
 800774c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800774e:	2300      	movs	r3, #0
 8007750:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	2b03      	cmp	r3, #3
 8007756:	d817      	bhi.n	8007788 <USBD_Get_USB_Status+0x44>
 8007758:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <USBD_Get_USB_Status+0x1c>)
 800775a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775e:	bf00      	nop
 8007760:	08007771 	.word	0x08007771
 8007764:	08007777 	.word	0x08007777
 8007768:	0800777d 	.word	0x0800777d
 800776c:	08007783 	.word	0x08007783
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
    break;
 8007774:	e00b      	b.n	800778e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007776:	2303      	movs	r3, #3
 8007778:	73fb      	strb	r3, [r7, #15]
    break;
 800777a:	e008      	b.n	800778e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800777c:	2301      	movs	r3, #1
 800777e:	73fb      	strb	r3, [r7, #15]
    break;
 8007780:	e005      	b.n	800778e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007782:	2303      	movs	r3, #3
 8007784:	73fb      	strb	r3, [r7, #15]
    break;
 8007786:	e002      	b.n	800778e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007788:	2303      	movs	r3, #3
 800778a:	73fb      	strb	r3, [r7, #15]
    break;
 800778c:	bf00      	nop
  }
  return usb_status;
 800778e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <std>:
 800779c:	2300      	movs	r3, #0
 800779e:	b510      	push	{r4, lr}
 80077a0:	4604      	mov	r4, r0
 80077a2:	e9c0 3300 	strd	r3, r3, [r0]
 80077a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077aa:	6083      	str	r3, [r0, #8]
 80077ac:	8181      	strh	r1, [r0, #12]
 80077ae:	6643      	str	r3, [r0, #100]	; 0x64
 80077b0:	81c2      	strh	r2, [r0, #14]
 80077b2:	6183      	str	r3, [r0, #24]
 80077b4:	4619      	mov	r1, r3
 80077b6:	2208      	movs	r2, #8
 80077b8:	305c      	adds	r0, #92	; 0x5c
 80077ba:	f000 f928 	bl	8007a0e <memset>
 80077be:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <std+0x58>)
 80077c0:	6223      	str	r3, [r4, #32]
 80077c2:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <std+0x5c>)
 80077c4:	6263      	str	r3, [r4, #36]	; 0x24
 80077c6:	4b0d      	ldr	r3, [pc, #52]	; (80077fc <std+0x60>)
 80077c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80077ca:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <std+0x64>)
 80077cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077ce:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <std+0x68>)
 80077d0:	61e4      	str	r4, [r4, #28]
 80077d2:	429c      	cmp	r4, r3
 80077d4:	d006      	beq.n	80077e4 <std+0x48>
 80077d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80077da:	4294      	cmp	r4, r2
 80077dc:	d002      	beq.n	80077e4 <std+0x48>
 80077de:	33d0      	adds	r3, #208	; 0xd0
 80077e0:	429c      	cmp	r4, r3
 80077e2:	d105      	bne.n	80077f0 <std+0x54>
 80077e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ec:	f000 b988 	b.w	8007b00 <__retarget_lock_init_recursive>
 80077f0:	bd10      	pop	{r4, pc}
 80077f2:	bf00      	nop
 80077f4:	08007989 	.word	0x08007989
 80077f8:	080079ab 	.word	0x080079ab
 80077fc:	080079e3 	.word	0x080079e3
 8007800:	08007a07 	.word	0x08007a07
 8007804:	200023b4 	.word	0x200023b4

08007808 <stdio_exit_handler>:
 8007808:	4a02      	ldr	r2, [pc, #8]	; (8007814 <stdio_exit_handler+0xc>)
 800780a:	4903      	ldr	r1, [pc, #12]	; (8007818 <stdio_exit_handler+0x10>)
 800780c:	4803      	ldr	r0, [pc, #12]	; (800781c <stdio_exit_handler+0x14>)
 800780e:	f000 b869 	b.w	80078e4 <_fwalk_sglue>
 8007812:	bf00      	nop
 8007814:	200000fc 	.word	0x200000fc
 8007818:	080095bd 	.word	0x080095bd
 800781c:	20000108 	.word	0x20000108

08007820 <cleanup_stdio>:
 8007820:	6841      	ldr	r1, [r0, #4]
 8007822:	4b0c      	ldr	r3, [pc, #48]	; (8007854 <cleanup_stdio+0x34>)
 8007824:	4299      	cmp	r1, r3
 8007826:	b510      	push	{r4, lr}
 8007828:	4604      	mov	r4, r0
 800782a:	d001      	beq.n	8007830 <cleanup_stdio+0x10>
 800782c:	f001 fec6 	bl	80095bc <_fclose_r>
 8007830:	68a1      	ldr	r1, [r4, #8]
 8007832:	4b09      	ldr	r3, [pc, #36]	; (8007858 <cleanup_stdio+0x38>)
 8007834:	4299      	cmp	r1, r3
 8007836:	d002      	beq.n	800783e <cleanup_stdio+0x1e>
 8007838:	4620      	mov	r0, r4
 800783a:	f001 febf 	bl	80095bc <_fclose_r>
 800783e:	68e1      	ldr	r1, [r4, #12]
 8007840:	4b06      	ldr	r3, [pc, #24]	; (800785c <cleanup_stdio+0x3c>)
 8007842:	4299      	cmp	r1, r3
 8007844:	d004      	beq.n	8007850 <cleanup_stdio+0x30>
 8007846:	4620      	mov	r0, r4
 8007848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800784c:	f001 beb6 	b.w	80095bc <_fclose_r>
 8007850:	bd10      	pop	{r4, pc}
 8007852:	bf00      	nop
 8007854:	200023b4 	.word	0x200023b4
 8007858:	2000241c 	.word	0x2000241c
 800785c:	20002484 	.word	0x20002484

08007860 <global_stdio_init.part.0>:
 8007860:	b510      	push	{r4, lr}
 8007862:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <global_stdio_init.part.0+0x30>)
 8007864:	4c0b      	ldr	r4, [pc, #44]	; (8007894 <global_stdio_init.part.0+0x34>)
 8007866:	4a0c      	ldr	r2, [pc, #48]	; (8007898 <global_stdio_init.part.0+0x38>)
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	4620      	mov	r0, r4
 800786c:	2200      	movs	r2, #0
 800786e:	2104      	movs	r1, #4
 8007870:	f7ff ff94 	bl	800779c <std>
 8007874:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007878:	2201      	movs	r2, #1
 800787a:	2109      	movs	r1, #9
 800787c:	f7ff ff8e 	bl	800779c <std>
 8007880:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007884:	2202      	movs	r2, #2
 8007886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800788a:	2112      	movs	r1, #18
 800788c:	f7ff bf86 	b.w	800779c <std>
 8007890:	200024ec 	.word	0x200024ec
 8007894:	200023b4 	.word	0x200023b4
 8007898:	08007809 	.word	0x08007809

0800789c <__sfp_lock_acquire>:
 800789c:	4801      	ldr	r0, [pc, #4]	; (80078a4 <__sfp_lock_acquire+0x8>)
 800789e:	f000 b931 	b.w	8007b04 <__retarget_lock_acquire_recursive>
 80078a2:	bf00      	nop
 80078a4:	200024f6 	.word	0x200024f6

080078a8 <__sfp_lock_release>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__sfp_lock_release+0x8>)
 80078aa:	f000 b92c 	b.w	8007b06 <__retarget_lock_release_recursive>
 80078ae:	bf00      	nop
 80078b0:	200024f6 	.word	0x200024f6

080078b4 <__sinit>:
 80078b4:	b510      	push	{r4, lr}
 80078b6:	4604      	mov	r4, r0
 80078b8:	f7ff fff0 	bl	800789c <__sfp_lock_acquire>
 80078bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078be:	b11b      	cbz	r3, 80078c8 <__sinit+0x14>
 80078c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c4:	f7ff bff0 	b.w	80078a8 <__sfp_lock_release>
 80078c8:	4b04      	ldr	r3, [pc, #16]	; (80078dc <__sinit+0x28>)
 80078ca:	6363      	str	r3, [r4, #52]	; 0x34
 80078cc:	4b04      	ldr	r3, [pc, #16]	; (80078e0 <__sinit+0x2c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1f5      	bne.n	80078c0 <__sinit+0xc>
 80078d4:	f7ff ffc4 	bl	8007860 <global_stdio_init.part.0>
 80078d8:	e7f2      	b.n	80078c0 <__sinit+0xc>
 80078da:	bf00      	nop
 80078dc:	08007821 	.word	0x08007821
 80078e0:	200024ec 	.word	0x200024ec

080078e4 <_fwalk_sglue>:
 80078e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078e8:	4607      	mov	r7, r0
 80078ea:	4688      	mov	r8, r1
 80078ec:	4614      	mov	r4, r2
 80078ee:	2600      	movs	r6, #0
 80078f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078f4:	f1b9 0901 	subs.w	r9, r9, #1
 80078f8:	d505      	bpl.n	8007906 <_fwalk_sglue+0x22>
 80078fa:	6824      	ldr	r4, [r4, #0]
 80078fc:	2c00      	cmp	r4, #0
 80078fe:	d1f7      	bne.n	80078f0 <_fwalk_sglue+0xc>
 8007900:	4630      	mov	r0, r6
 8007902:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007906:	89ab      	ldrh	r3, [r5, #12]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d907      	bls.n	800791c <_fwalk_sglue+0x38>
 800790c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007910:	3301      	adds	r3, #1
 8007912:	d003      	beq.n	800791c <_fwalk_sglue+0x38>
 8007914:	4629      	mov	r1, r5
 8007916:	4638      	mov	r0, r7
 8007918:	47c0      	blx	r8
 800791a:	4306      	orrs	r6, r0
 800791c:	3568      	adds	r5, #104	; 0x68
 800791e:	e7e9      	b.n	80078f4 <_fwalk_sglue+0x10>

08007920 <snprintf>:
 8007920:	b40c      	push	{r2, r3}
 8007922:	b530      	push	{r4, r5, lr}
 8007924:	4b17      	ldr	r3, [pc, #92]	; (8007984 <snprintf+0x64>)
 8007926:	1e0c      	subs	r4, r1, #0
 8007928:	681d      	ldr	r5, [r3, #0]
 800792a:	b09d      	sub	sp, #116	; 0x74
 800792c:	da08      	bge.n	8007940 <snprintf+0x20>
 800792e:	238b      	movs	r3, #139	; 0x8b
 8007930:	602b      	str	r3, [r5, #0]
 8007932:	f04f 30ff 	mov.w	r0, #4294967295
 8007936:	b01d      	add	sp, #116	; 0x74
 8007938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800793c:	b002      	add	sp, #8
 800793e:	4770      	bx	lr
 8007940:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007944:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007948:	bf14      	ite	ne
 800794a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800794e:	4623      	moveq	r3, r4
 8007950:	9304      	str	r3, [sp, #16]
 8007952:	9307      	str	r3, [sp, #28]
 8007954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007958:	9002      	str	r0, [sp, #8]
 800795a:	9006      	str	r0, [sp, #24]
 800795c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007960:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007962:	ab21      	add	r3, sp, #132	; 0x84
 8007964:	a902      	add	r1, sp, #8
 8007966:	4628      	mov	r0, r5
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	f000 fc39 	bl	80081e0 <_svfprintf_r>
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	bfbc      	itt	lt
 8007972:	238b      	movlt	r3, #139	; 0x8b
 8007974:	602b      	strlt	r3, [r5, #0]
 8007976:	2c00      	cmp	r4, #0
 8007978:	d0dd      	beq.n	8007936 <snprintf+0x16>
 800797a:	9b02      	ldr	r3, [sp, #8]
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
 8007980:	e7d9      	b.n	8007936 <snprintf+0x16>
 8007982:	bf00      	nop
 8007984:	20000228 	.word	0x20000228

08007988 <__sread>:
 8007988:	b510      	push	{r4, lr}
 800798a:	460c      	mov	r4, r1
 800798c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007990:	f000 f868 	bl	8007a64 <_read_r>
 8007994:	2800      	cmp	r0, #0
 8007996:	bfab      	itete	ge
 8007998:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800799a:	89a3      	ldrhlt	r3, [r4, #12]
 800799c:	181b      	addge	r3, r3, r0
 800799e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079a2:	bfac      	ite	ge
 80079a4:	6523      	strge	r3, [r4, #80]	; 0x50
 80079a6:	81a3      	strhlt	r3, [r4, #12]
 80079a8:	bd10      	pop	{r4, pc}

080079aa <__swrite>:
 80079aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ae:	461f      	mov	r7, r3
 80079b0:	898b      	ldrh	r3, [r1, #12]
 80079b2:	05db      	lsls	r3, r3, #23
 80079b4:	4605      	mov	r5, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	4616      	mov	r6, r2
 80079ba:	d505      	bpl.n	80079c8 <__swrite+0x1e>
 80079bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c0:	2302      	movs	r3, #2
 80079c2:	2200      	movs	r2, #0
 80079c4:	f000 f83c 	bl	8007a40 <_lseek_r>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079d2:	81a3      	strh	r3, [r4, #12]
 80079d4:	4632      	mov	r2, r6
 80079d6:	463b      	mov	r3, r7
 80079d8:	4628      	mov	r0, r5
 80079da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079de:	f000 b853 	b.w	8007a88 <_write_r>

080079e2 <__sseek>:
 80079e2:	b510      	push	{r4, lr}
 80079e4:	460c      	mov	r4, r1
 80079e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ea:	f000 f829 	bl	8007a40 <_lseek_r>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	89a3      	ldrh	r3, [r4, #12]
 80079f2:	bf15      	itete	ne
 80079f4:	6520      	strne	r0, [r4, #80]	; 0x50
 80079f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079fe:	81a3      	strheq	r3, [r4, #12]
 8007a00:	bf18      	it	ne
 8007a02:	81a3      	strhne	r3, [r4, #12]
 8007a04:	bd10      	pop	{r4, pc}

08007a06 <__sclose>:
 8007a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0a:	f000 b809 	b.w	8007a20 <_close_r>

08007a0e <memset>:
 8007a0e:	4402      	add	r2, r0
 8007a10:	4603      	mov	r3, r0
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d100      	bne.n	8007a18 <memset+0xa>
 8007a16:	4770      	bx	lr
 8007a18:	f803 1b01 	strb.w	r1, [r3], #1
 8007a1c:	e7f9      	b.n	8007a12 <memset+0x4>
	...

08007a20 <_close_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4d06      	ldr	r5, [pc, #24]	; (8007a3c <_close_r+0x1c>)
 8007a24:	2300      	movs	r3, #0
 8007a26:	4604      	mov	r4, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	602b      	str	r3, [r5, #0]
 8007a2c:	f7f9 fc49 	bl	80012c2 <_close>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_close_r+0x1a>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_close_r+0x1a>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	200024f0 	.word	0x200024f0

08007a40 <_lseek_r>:
 8007a40:	b538      	push	{r3, r4, r5, lr}
 8007a42:	4d07      	ldr	r5, [pc, #28]	; (8007a60 <_lseek_r+0x20>)
 8007a44:	4604      	mov	r4, r0
 8007a46:	4608      	mov	r0, r1
 8007a48:	4611      	mov	r1, r2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	602a      	str	r2, [r5, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f7f9 fc5e 	bl	8001310 <_lseek>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	d102      	bne.n	8007a5e <_lseek_r+0x1e>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	b103      	cbz	r3, 8007a5e <_lseek_r+0x1e>
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	200024f0 	.word	0x200024f0

08007a64 <_read_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	4d07      	ldr	r5, [pc, #28]	; (8007a84 <_read_r+0x20>)
 8007a68:	4604      	mov	r4, r0
 8007a6a:	4608      	mov	r0, r1
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	2200      	movs	r2, #0
 8007a70:	602a      	str	r2, [r5, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	f7f9 fbec 	bl	8001250 <_read>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d102      	bne.n	8007a82 <_read_r+0x1e>
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	b103      	cbz	r3, 8007a82 <_read_r+0x1e>
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	200024f0 	.word	0x200024f0

08007a88 <_write_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4d07      	ldr	r5, [pc, #28]	; (8007aa8 <_write_r+0x20>)
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	4608      	mov	r0, r1
 8007a90:	4611      	mov	r1, r2
 8007a92:	2200      	movs	r2, #0
 8007a94:	602a      	str	r2, [r5, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	f7f9 fbf7 	bl	800128a <_write>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_write_r+0x1e>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_write_r+0x1e>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	200024f0 	.word	0x200024f0

08007aac <__errno>:
 8007aac:	4b01      	ldr	r3, [pc, #4]	; (8007ab4 <__errno+0x8>)
 8007aae:	6818      	ldr	r0, [r3, #0]
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	20000228 	.word	0x20000228

08007ab8 <__libc_init_array>:
 8007ab8:	b570      	push	{r4, r5, r6, lr}
 8007aba:	4d0d      	ldr	r5, [pc, #52]	; (8007af0 <__libc_init_array+0x38>)
 8007abc:	4c0d      	ldr	r4, [pc, #52]	; (8007af4 <__libc_init_array+0x3c>)
 8007abe:	1b64      	subs	r4, r4, r5
 8007ac0:	10a4      	asrs	r4, r4, #2
 8007ac2:	2600      	movs	r6, #0
 8007ac4:	42a6      	cmp	r6, r4
 8007ac6:	d109      	bne.n	8007adc <__libc_init_array+0x24>
 8007ac8:	4d0b      	ldr	r5, [pc, #44]	; (8007af8 <__libc_init_array+0x40>)
 8007aca:	4c0c      	ldr	r4, [pc, #48]	; (8007afc <__libc_init_array+0x44>)
 8007acc:	f005 fc28 	bl	800d320 <_init>
 8007ad0:	1b64      	subs	r4, r4, r5
 8007ad2:	10a4      	asrs	r4, r4, #2
 8007ad4:	2600      	movs	r6, #0
 8007ad6:	42a6      	cmp	r6, r4
 8007ad8:	d105      	bne.n	8007ae6 <__libc_init_array+0x2e>
 8007ada:	bd70      	pop	{r4, r5, r6, pc}
 8007adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae0:	4798      	blx	r3
 8007ae2:	3601      	adds	r6, #1
 8007ae4:	e7ee      	b.n	8007ac4 <__libc_init_array+0xc>
 8007ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aea:	4798      	blx	r3
 8007aec:	3601      	adds	r6, #1
 8007aee:	e7f2      	b.n	8007ad6 <__libc_init_array+0x1e>
 8007af0:	0800d908 	.word	0x0800d908
 8007af4:	0800d908 	.word	0x0800d908
 8007af8:	0800d908 	.word	0x0800d908
 8007afc:	0800d910 	.word	0x0800d910

08007b00 <__retarget_lock_init_recursive>:
 8007b00:	4770      	bx	lr

08007b02 <__retarget_lock_close_recursive>:
 8007b02:	4770      	bx	lr

08007b04 <__retarget_lock_acquire_recursive>:
 8007b04:	4770      	bx	lr

08007b06 <__retarget_lock_release_recursive>:
 8007b06:	4770      	bx	lr

08007b08 <register_fini>:
 8007b08:	4b02      	ldr	r3, [pc, #8]	; (8007b14 <register_fini+0xc>)
 8007b0a:	b113      	cbz	r3, 8007b12 <register_fini+0xa>
 8007b0c:	4802      	ldr	r0, [pc, #8]	; (8007b18 <register_fini+0x10>)
 8007b0e:	f000 b805 	b.w	8007b1c <atexit>
 8007b12:	4770      	bx	lr
 8007b14:	00000000 	.word	0x00000000
 8007b18:	08009821 	.word	0x08009821

08007b1c <atexit>:
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	4601      	mov	r1, r0
 8007b20:	461a      	mov	r2, r3
 8007b22:	4618      	mov	r0, r3
 8007b24:	f001 bed4 	b.w	80098d0 <__register_exitproc>

08007b28 <_malloc_trim_r>:
 8007b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b2c:	4606      	mov	r6, r0
 8007b2e:	2008      	movs	r0, #8
 8007b30:	460c      	mov	r4, r1
 8007b32:	f001 fe89 	bl	8009848 <sysconf>
 8007b36:	4f23      	ldr	r7, [pc, #140]	; (8007bc4 <_malloc_trim_r+0x9c>)
 8007b38:	4680      	mov	r8, r0
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	f000 fb42 	bl	80081c4 <__malloc_lock>
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	685d      	ldr	r5, [r3, #4]
 8007b44:	f025 0503 	bic.w	r5, r5, #3
 8007b48:	1b2c      	subs	r4, r5, r4
 8007b4a:	3c11      	subs	r4, #17
 8007b4c:	4444      	add	r4, r8
 8007b4e:	fbb4 f4f8 	udiv	r4, r4, r8
 8007b52:	3c01      	subs	r4, #1
 8007b54:	fb08 f404 	mul.w	r4, r8, r4
 8007b58:	45a0      	cmp	r8, r4
 8007b5a:	dd05      	ble.n	8007b68 <_malloc_trim_r+0x40>
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f000 fb37 	bl	80081d0 <__malloc_unlock>
 8007b62:	2000      	movs	r0, #0
 8007b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b68:	2100      	movs	r1, #0
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f001 fe48 	bl	8009800 <_sbrk_r>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	442b      	add	r3, r5
 8007b74:	4298      	cmp	r0, r3
 8007b76:	d1f1      	bne.n	8007b5c <_malloc_trim_r+0x34>
 8007b78:	4261      	negs	r1, r4
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f001 fe40 	bl	8009800 <_sbrk_r>
 8007b80:	3001      	adds	r0, #1
 8007b82:	d110      	bne.n	8007ba6 <_malloc_trim_r+0x7e>
 8007b84:	2100      	movs	r1, #0
 8007b86:	4630      	mov	r0, r6
 8007b88:	f001 fe3a 	bl	8009800 <_sbrk_r>
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	1a83      	subs	r3, r0, r2
 8007b90:	2b0f      	cmp	r3, #15
 8007b92:	dde3      	ble.n	8007b5c <_malloc_trim_r+0x34>
 8007b94:	490c      	ldr	r1, [pc, #48]	; (8007bc8 <_malloc_trim_r+0xa0>)
 8007b96:	6809      	ldr	r1, [r1, #0]
 8007b98:	1a40      	subs	r0, r0, r1
 8007b9a:	490c      	ldr	r1, [pc, #48]	; (8007bcc <_malloc_trim_r+0xa4>)
 8007b9c:	f043 0301 	orr.w	r3, r3, #1
 8007ba0:	6008      	str	r0, [r1, #0]
 8007ba2:	6053      	str	r3, [r2, #4]
 8007ba4:	e7da      	b.n	8007b5c <_malloc_trim_r+0x34>
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	4a08      	ldr	r2, [pc, #32]	; (8007bcc <_malloc_trim_r+0xa4>)
 8007baa:	1b2d      	subs	r5, r5, r4
 8007bac:	f045 0501 	orr.w	r5, r5, #1
 8007bb0:	605d      	str	r5, [r3, #4]
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	1b1b      	subs	r3, r3, r4
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	f000 fb09 	bl	80081d0 <__malloc_unlock>
 8007bbe:	2001      	movs	r0, #1
 8007bc0:	e7d0      	b.n	8007b64 <_malloc_trim_r+0x3c>
 8007bc2:	bf00      	nop
 8007bc4:	20000230 	.word	0x20000230
 8007bc8:	20000638 	.word	0x20000638
 8007bcc:	200024fc 	.word	0x200024fc

08007bd0 <_free_r>:
 8007bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	460f      	mov	r7, r1
 8007bd6:	2900      	cmp	r1, #0
 8007bd8:	f000 80b1 	beq.w	8007d3e <_free_r+0x16e>
 8007bdc:	f000 faf2 	bl	80081c4 <__malloc_lock>
 8007be0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007be4:	4856      	ldr	r0, [pc, #344]	; (8007d40 <_free_r+0x170>)
 8007be6:	f022 0401 	bic.w	r4, r2, #1
 8007bea:	f1a7 0308 	sub.w	r3, r7, #8
 8007bee:	eb03 0c04 	add.w	ip, r3, r4
 8007bf2:	6881      	ldr	r1, [r0, #8]
 8007bf4:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8007bf8:	4561      	cmp	r1, ip
 8007bfa:	f026 0603 	bic.w	r6, r6, #3
 8007bfe:	f002 0201 	and.w	r2, r2, #1
 8007c02:	d11b      	bne.n	8007c3c <_free_r+0x6c>
 8007c04:	4426      	add	r6, r4
 8007c06:	b93a      	cbnz	r2, 8007c18 <_free_r+0x48>
 8007c08:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8007c0c:	1a9b      	subs	r3, r3, r2
 8007c0e:	4416      	add	r6, r2
 8007c10:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8007c14:	60ca      	str	r2, [r1, #12]
 8007c16:	6091      	str	r1, [r2, #8]
 8007c18:	f046 0201 	orr.w	r2, r6, #1
 8007c1c:	605a      	str	r2, [r3, #4]
 8007c1e:	6083      	str	r3, [r0, #8]
 8007c20:	4b48      	ldr	r3, [pc, #288]	; (8007d44 <_free_r+0x174>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	42b3      	cmp	r3, r6
 8007c26:	d804      	bhi.n	8007c32 <_free_r+0x62>
 8007c28:	4b47      	ldr	r3, [pc, #284]	; (8007d48 <_free_r+0x178>)
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	6819      	ldr	r1, [r3, #0]
 8007c2e:	f7ff ff7b 	bl	8007b28 <_malloc_trim_r>
 8007c32:	4628      	mov	r0, r5
 8007c34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c38:	f000 baca 	b.w	80081d0 <__malloc_unlock>
 8007c3c:	f8cc 6004 	str.w	r6, [ip, #4]
 8007c40:	2a00      	cmp	r2, #0
 8007c42:	d138      	bne.n	8007cb6 <_free_r+0xe6>
 8007c44:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8007c48:	1a5b      	subs	r3, r3, r1
 8007c4a:	440c      	add	r4, r1
 8007c4c:	6899      	ldr	r1, [r3, #8]
 8007c4e:	f100 0708 	add.w	r7, r0, #8
 8007c52:	42b9      	cmp	r1, r7
 8007c54:	d031      	beq.n	8007cba <_free_r+0xea>
 8007c56:	68df      	ldr	r7, [r3, #12]
 8007c58:	60cf      	str	r7, [r1, #12]
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	eb0c 0106 	add.w	r1, ip, r6
 8007c60:	6849      	ldr	r1, [r1, #4]
 8007c62:	07c9      	lsls	r1, r1, #31
 8007c64:	d40b      	bmi.n	8007c7e <_free_r+0xae>
 8007c66:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8007c6a:	4434      	add	r4, r6
 8007c6c:	bb3a      	cbnz	r2, 8007cbe <_free_r+0xee>
 8007c6e:	4e37      	ldr	r6, [pc, #220]	; (8007d4c <_free_r+0x17c>)
 8007c70:	42b1      	cmp	r1, r6
 8007c72:	d124      	bne.n	8007cbe <_free_r+0xee>
 8007c74:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c78:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f044 0101 	orr.w	r1, r4, #1
 8007c82:	6059      	str	r1, [r3, #4]
 8007c84:	511c      	str	r4, [r3, r4]
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	d1d3      	bne.n	8007c32 <_free_r+0x62>
 8007c8a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8007c8e:	d21b      	bcs.n	8007cc8 <_free_r+0xf8>
 8007c90:	08e2      	lsrs	r2, r4, #3
 8007c92:	2101      	movs	r1, #1
 8007c94:	0964      	lsrs	r4, r4, #5
 8007c96:	40a1      	lsls	r1, r4
 8007c98:	6844      	ldr	r4, [r0, #4]
 8007c9a:	3201      	adds	r2, #1
 8007c9c:	4321      	orrs	r1, r4
 8007c9e:	6041      	str	r1, [r0, #4]
 8007ca0:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8007ca4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8007ca8:	3908      	subs	r1, #8
 8007caa:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8007cae:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8007cb2:	60e3      	str	r3, [r4, #12]
 8007cb4:	e7bd      	b.n	8007c32 <_free_r+0x62>
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	e7d0      	b.n	8007c5c <_free_r+0x8c>
 8007cba:	2201      	movs	r2, #1
 8007cbc:	e7ce      	b.n	8007c5c <_free_r+0x8c>
 8007cbe:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8007cc2:	60ce      	str	r6, [r1, #12]
 8007cc4:	60b1      	str	r1, [r6, #8]
 8007cc6:	e7da      	b.n	8007c7e <_free_r+0xae>
 8007cc8:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8007ccc:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8007cd0:	d214      	bcs.n	8007cfc <_free_r+0x12c>
 8007cd2:	09a2      	lsrs	r2, r4, #6
 8007cd4:	3238      	adds	r2, #56	; 0x38
 8007cd6:	1c51      	adds	r1, r2, #1
 8007cd8:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8007cdc:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8007ce0:	428e      	cmp	r6, r1
 8007ce2:	d125      	bne.n	8007d30 <_free_r+0x160>
 8007ce4:	2401      	movs	r4, #1
 8007ce6:	1092      	asrs	r2, r2, #2
 8007ce8:	fa04 f202 	lsl.w	r2, r4, r2
 8007cec:	6844      	ldr	r4, [r0, #4]
 8007cee:	4322      	orrs	r2, r4
 8007cf0:	6042      	str	r2, [r0, #4]
 8007cf2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8007cf6:	60b3      	str	r3, [r6, #8]
 8007cf8:	60cb      	str	r3, [r1, #12]
 8007cfa:	e79a      	b.n	8007c32 <_free_r+0x62>
 8007cfc:	2a14      	cmp	r2, #20
 8007cfe:	d801      	bhi.n	8007d04 <_free_r+0x134>
 8007d00:	325b      	adds	r2, #91	; 0x5b
 8007d02:	e7e8      	b.n	8007cd6 <_free_r+0x106>
 8007d04:	2a54      	cmp	r2, #84	; 0x54
 8007d06:	d802      	bhi.n	8007d0e <_free_r+0x13e>
 8007d08:	0b22      	lsrs	r2, r4, #12
 8007d0a:	326e      	adds	r2, #110	; 0x6e
 8007d0c:	e7e3      	b.n	8007cd6 <_free_r+0x106>
 8007d0e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007d12:	d802      	bhi.n	8007d1a <_free_r+0x14a>
 8007d14:	0be2      	lsrs	r2, r4, #15
 8007d16:	3277      	adds	r2, #119	; 0x77
 8007d18:	e7dd      	b.n	8007cd6 <_free_r+0x106>
 8007d1a:	f240 5154 	movw	r1, #1364	; 0x554
 8007d1e:	428a      	cmp	r2, r1
 8007d20:	bf9a      	itte	ls
 8007d22:	0ca2      	lsrls	r2, r4, #18
 8007d24:	327c      	addls	r2, #124	; 0x7c
 8007d26:	227e      	movhi	r2, #126	; 0x7e
 8007d28:	e7d5      	b.n	8007cd6 <_free_r+0x106>
 8007d2a:	6889      	ldr	r1, [r1, #8]
 8007d2c:	428e      	cmp	r6, r1
 8007d2e:	d004      	beq.n	8007d3a <_free_r+0x16a>
 8007d30:	684a      	ldr	r2, [r1, #4]
 8007d32:	f022 0203 	bic.w	r2, r2, #3
 8007d36:	42a2      	cmp	r2, r4
 8007d38:	d8f7      	bhi.n	8007d2a <_free_r+0x15a>
 8007d3a:	68ce      	ldr	r6, [r1, #12]
 8007d3c:	e7d9      	b.n	8007cf2 <_free_r+0x122>
 8007d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d40:	20000230 	.word	0x20000230
 8007d44:	2000063c 	.word	0x2000063c
 8007d48:	2000252c 	.word	0x2000252c
 8007d4c:	20000238 	.word	0x20000238

08007d50 <_malloc_r>:
 8007d50:	f101 030b 	add.w	r3, r1, #11
 8007d54:	2b16      	cmp	r3, #22
 8007d56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	d906      	bls.n	8007d6c <_malloc_r+0x1c>
 8007d5e:	f033 0707 	bics.w	r7, r3, #7
 8007d62:	d504      	bpl.n	8007d6e <_malloc_r+0x1e>
 8007d64:	230c      	movs	r3, #12
 8007d66:	602b      	str	r3, [r5, #0]
 8007d68:	2400      	movs	r4, #0
 8007d6a:	e1a3      	b.n	80080b4 <_malloc_r+0x364>
 8007d6c:	2710      	movs	r7, #16
 8007d6e:	42b9      	cmp	r1, r7
 8007d70:	d8f8      	bhi.n	8007d64 <_malloc_r+0x14>
 8007d72:	4628      	mov	r0, r5
 8007d74:	f000 fa26 	bl	80081c4 <__malloc_lock>
 8007d78:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8007d7c:	4eaf      	ldr	r6, [pc, #700]	; (800803c <_malloc_r+0x2ec>)
 8007d7e:	d237      	bcs.n	8007df0 <_malloc_r+0xa0>
 8007d80:	f107 0208 	add.w	r2, r7, #8
 8007d84:	4432      	add	r2, r6
 8007d86:	f1a2 0108 	sub.w	r1, r2, #8
 8007d8a:	6854      	ldr	r4, [r2, #4]
 8007d8c:	428c      	cmp	r4, r1
 8007d8e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8007d92:	d102      	bne.n	8007d9a <_malloc_r+0x4a>
 8007d94:	68d4      	ldr	r4, [r2, #12]
 8007d96:	42a2      	cmp	r2, r4
 8007d98:	d010      	beq.n	8007dbc <_malloc_r+0x6c>
 8007d9a:	6863      	ldr	r3, [r4, #4]
 8007d9c:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8007da0:	f023 0303 	bic.w	r3, r3, #3
 8007da4:	60ca      	str	r2, [r1, #12]
 8007da6:	4423      	add	r3, r4
 8007da8:	6091      	str	r1, [r2, #8]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	f042 0201 	orr.w	r2, r2, #1
 8007db0:	605a      	str	r2, [r3, #4]
 8007db2:	4628      	mov	r0, r5
 8007db4:	f000 fa0c 	bl	80081d0 <__malloc_unlock>
 8007db8:	3408      	adds	r4, #8
 8007dba:	e17b      	b.n	80080b4 <_malloc_r+0x364>
 8007dbc:	3302      	adds	r3, #2
 8007dbe:	6934      	ldr	r4, [r6, #16]
 8007dc0:	499f      	ldr	r1, [pc, #636]	; (8008040 <_malloc_r+0x2f0>)
 8007dc2:	428c      	cmp	r4, r1
 8007dc4:	d077      	beq.n	8007eb6 <_malloc_r+0x166>
 8007dc6:	6862      	ldr	r2, [r4, #4]
 8007dc8:	f022 0c03 	bic.w	ip, r2, #3
 8007dcc:	ebac 0007 	sub.w	r0, ip, r7
 8007dd0:	280f      	cmp	r0, #15
 8007dd2:	dd48      	ble.n	8007e66 <_malloc_r+0x116>
 8007dd4:	19e2      	adds	r2, r4, r7
 8007dd6:	f040 0301 	orr.w	r3, r0, #1
 8007dda:	f047 0701 	orr.w	r7, r7, #1
 8007dde:	6067      	str	r7, [r4, #4]
 8007de0:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8007de4:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8007de8:	6053      	str	r3, [r2, #4]
 8007dea:	f844 000c 	str.w	r0, [r4, ip]
 8007dee:	e7e0      	b.n	8007db2 <_malloc_r+0x62>
 8007df0:	0a7b      	lsrs	r3, r7, #9
 8007df2:	d02a      	beq.n	8007e4a <_malloc_r+0xfa>
 8007df4:	2b04      	cmp	r3, #4
 8007df6:	d812      	bhi.n	8007e1e <_malloc_r+0xce>
 8007df8:	09bb      	lsrs	r3, r7, #6
 8007dfa:	3338      	adds	r3, #56	; 0x38
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8007e02:	f1a2 0c08 	sub.w	ip, r2, #8
 8007e06:	6854      	ldr	r4, [r2, #4]
 8007e08:	4564      	cmp	r4, ip
 8007e0a:	d006      	beq.n	8007e1a <_malloc_r+0xca>
 8007e0c:	6862      	ldr	r2, [r4, #4]
 8007e0e:	f022 0203 	bic.w	r2, r2, #3
 8007e12:	1bd0      	subs	r0, r2, r7
 8007e14:	280f      	cmp	r0, #15
 8007e16:	dd1c      	ble.n	8007e52 <_malloc_r+0x102>
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	e7cf      	b.n	8007dbe <_malloc_r+0x6e>
 8007e1e:	2b14      	cmp	r3, #20
 8007e20:	d801      	bhi.n	8007e26 <_malloc_r+0xd6>
 8007e22:	335b      	adds	r3, #91	; 0x5b
 8007e24:	e7ea      	b.n	8007dfc <_malloc_r+0xac>
 8007e26:	2b54      	cmp	r3, #84	; 0x54
 8007e28:	d802      	bhi.n	8007e30 <_malloc_r+0xe0>
 8007e2a:	0b3b      	lsrs	r3, r7, #12
 8007e2c:	336e      	adds	r3, #110	; 0x6e
 8007e2e:	e7e5      	b.n	8007dfc <_malloc_r+0xac>
 8007e30:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007e34:	d802      	bhi.n	8007e3c <_malloc_r+0xec>
 8007e36:	0bfb      	lsrs	r3, r7, #15
 8007e38:	3377      	adds	r3, #119	; 0x77
 8007e3a:	e7df      	b.n	8007dfc <_malloc_r+0xac>
 8007e3c:	f240 5254 	movw	r2, #1364	; 0x554
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d804      	bhi.n	8007e4e <_malloc_r+0xfe>
 8007e44:	0cbb      	lsrs	r3, r7, #18
 8007e46:	337c      	adds	r3, #124	; 0x7c
 8007e48:	e7d8      	b.n	8007dfc <_malloc_r+0xac>
 8007e4a:	233f      	movs	r3, #63	; 0x3f
 8007e4c:	e7d6      	b.n	8007dfc <_malloc_r+0xac>
 8007e4e:	237e      	movs	r3, #126	; 0x7e
 8007e50:	e7d4      	b.n	8007dfc <_malloc_r+0xac>
 8007e52:	2800      	cmp	r0, #0
 8007e54:	68e1      	ldr	r1, [r4, #12]
 8007e56:	db04      	blt.n	8007e62 <_malloc_r+0x112>
 8007e58:	68a3      	ldr	r3, [r4, #8]
 8007e5a:	60d9      	str	r1, [r3, #12]
 8007e5c:	608b      	str	r3, [r1, #8]
 8007e5e:	18a3      	adds	r3, r4, r2
 8007e60:	e7a3      	b.n	8007daa <_malloc_r+0x5a>
 8007e62:	460c      	mov	r4, r1
 8007e64:	e7d0      	b.n	8007e08 <_malloc_r+0xb8>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8007e6c:	db07      	blt.n	8007e7e <_malloc_r+0x12e>
 8007e6e:	44a4      	add	ip, r4
 8007e70:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007e74:	f043 0301 	orr.w	r3, r3, #1
 8007e78:	f8cc 3004 	str.w	r3, [ip, #4]
 8007e7c:	e799      	b.n	8007db2 <_malloc_r+0x62>
 8007e7e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8007e82:	6870      	ldr	r0, [r6, #4]
 8007e84:	f080 8095 	bcs.w	8007fb2 <_malloc_r+0x262>
 8007e88:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8007e8c:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8007e90:	f04f 0c01 	mov.w	ip, #1
 8007e94:	3201      	adds	r2, #1
 8007e96:	fa0c fc0e 	lsl.w	ip, ip, lr
 8007e9a:	ea4c 0000 	orr.w	r0, ip, r0
 8007e9e:	6070      	str	r0, [r6, #4]
 8007ea0:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8007ea4:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8007ea8:	3808      	subs	r0, #8
 8007eaa:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8007eae:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8007eb2:	f8cc 400c 	str.w	r4, [ip, #12]
 8007eb6:	1098      	asrs	r0, r3, #2
 8007eb8:	2201      	movs	r2, #1
 8007eba:	4082      	lsls	r2, r0
 8007ebc:	6870      	ldr	r0, [r6, #4]
 8007ebe:	4290      	cmp	r0, r2
 8007ec0:	d326      	bcc.n	8007f10 <_malloc_r+0x1c0>
 8007ec2:	4210      	tst	r0, r2
 8007ec4:	d106      	bne.n	8007ed4 <_malloc_r+0x184>
 8007ec6:	f023 0303 	bic.w	r3, r3, #3
 8007eca:	0052      	lsls	r2, r2, #1
 8007ecc:	4210      	tst	r0, r2
 8007ece:	f103 0304 	add.w	r3, r3, #4
 8007ed2:	d0fa      	beq.n	8007eca <_malloc_r+0x17a>
 8007ed4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8007ed8:	46c1      	mov	r9, r8
 8007eda:	469e      	mov	lr, r3
 8007edc:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8007ee0:	454c      	cmp	r4, r9
 8007ee2:	f040 80b9 	bne.w	8008058 <_malloc_r+0x308>
 8007ee6:	f10e 0e01 	add.w	lr, lr, #1
 8007eea:	f01e 0f03 	tst.w	lr, #3
 8007eee:	f109 0908 	add.w	r9, r9, #8
 8007ef2:	d1f3      	bne.n	8007edc <_malloc_r+0x18c>
 8007ef4:	0798      	lsls	r0, r3, #30
 8007ef6:	f040 80e3 	bne.w	80080c0 <_malloc_r+0x370>
 8007efa:	6873      	ldr	r3, [r6, #4]
 8007efc:	ea23 0302 	bic.w	r3, r3, r2
 8007f00:	6073      	str	r3, [r6, #4]
 8007f02:	6870      	ldr	r0, [r6, #4]
 8007f04:	0052      	lsls	r2, r2, #1
 8007f06:	4290      	cmp	r0, r2
 8007f08:	d302      	bcc.n	8007f10 <_malloc_r+0x1c0>
 8007f0a:	2a00      	cmp	r2, #0
 8007f0c:	f040 80e5 	bne.w	80080da <_malloc_r+0x38a>
 8007f10:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8007f14:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007f18:	f023 0903 	bic.w	r9, r3, #3
 8007f1c:	45b9      	cmp	r9, r7
 8007f1e:	d304      	bcc.n	8007f2a <_malloc_r+0x1da>
 8007f20:	eba9 0207 	sub.w	r2, r9, r7
 8007f24:	2a0f      	cmp	r2, #15
 8007f26:	f300 8141 	bgt.w	80081ac <_malloc_r+0x45c>
 8007f2a:	4b46      	ldr	r3, [pc, #280]	; (8008044 <_malloc_r+0x2f4>)
 8007f2c:	6819      	ldr	r1, [r3, #0]
 8007f2e:	3110      	adds	r1, #16
 8007f30:	4439      	add	r1, r7
 8007f32:	2008      	movs	r0, #8
 8007f34:	9101      	str	r1, [sp, #4]
 8007f36:	f001 fc87 	bl	8009848 <sysconf>
 8007f3a:	4a43      	ldr	r2, [pc, #268]	; (8008048 <_malloc_r+0x2f8>)
 8007f3c:	9901      	ldr	r1, [sp, #4]
 8007f3e:	6813      	ldr	r3, [r2, #0]
 8007f40:	3301      	adds	r3, #1
 8007f42:	bf1f      	itttt	ne
 8007f44:	f101 31ff 	addne.w	r1, r1, #4294967295
 8007f48:	1809      	addne	r1, r1, r0
 8007f4a:	4243      	negne	r3, r0
 8007f4c:	4019      	andne	r1, r3
 8007f4e:	4680      	mov	r8, r0
 8007f50:	4628      	mov	r0, r5
 8007f52:	9101      	str	r1, [sp, #4]
 8007f54:	f001 fc54 	bl	8009800 <_sbrk_r>
 8007f58:	1c42      	adds	r2, r0, #1
 8007f5a:	eb0a 0b09 	add.w	fp, sl, r9
 8007f5e:	4604      	mov	r4, r0
 8007f60:	f000 80f7 	beq.w	8008152 <_malloc_r+0x402>
 8007f64:	4583      	cmp	fp, r0
 8007f66:	9901      	ldr	r1, [sp, #4]
 8007f68:	4a37      	ldr	r2, [pc, #220]	; (8008048 <_malloc_r+0x2f8>)
 8007f6a:	d902      	bls.n	8007f72 <_malloc_r+0x222>
 8007f6c:	45b2      	cmp	sl, r6
 8007f6e:	f040 80f0 	bne.w	8008152 <_malloc_r+0x402>
 8007f72:	4b36      	ldr	r3, [pc, #216]	; (800804c <_malloc_r+0x2fc>)
 8007f74:	6818      	ldr	r0, [r3, #0]
 8007f76:	45a3      	cmp	fp, r4
 8007f78:	eb00 0e01 	add.w	lr, r0, r1
 8007f7c:	f8c3 e000 	str.w	lr, [r3]
 8007f80:	f108 3cff 	add.w	ip, r8, #4294967295
 8007f84:	f040 80ab 	bne.w	80080de <_malloc_r+0x38e>
 8007f88:	ea1b 0f0c 	tst.w	fp, ip
 8007f8c:	f040 80a7 	bne.w	80080de <_malloc_r+0x38e>
 8007f90:	68b2      	ldr	r2, [r6, #8]
 8007f92:	4449      	add	r1, r9
 8007f94:	f041 0101 	orr.w	r1, r1, #1
 8007f98:	6051      	str	r1, [r2, #4]
 8007f9a:	4a2d      	ldr	r2, [pc, #180]	; (8008050 <_malloc_r+0x300>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	6811      	ldr	r1, [r2, #0]
 8007fa0:	428b      	cmp	r3, r1
 8007fa2:	bf88      	it	hi
 8007fa4:	6013      	strhi	r3, [r2, #0]
 8007fa6:	4a2b      	ldr	r2, [pc, #172]	; (8008054 <_malloc_r+0x304>)
 8007fa8:	6811      	ldr	r1, [r2, #0]
 8007faa:	428b      	cmp	r3, r1
 8007fac:	bf88      	it	hi
 8007fae:	6013      	strhi	r3, [r2, #0]
 8007fb0:	e0cf      	b.n	8008152 <_malloc_r+0x402>
 8007fb2:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8007fb6:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8007fba:	d218      	bcs.n	8007fee <_malloc_r+0x29e>
 8007fbc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8007fc0:	3238      	adds	r2, #56	; 0x38
 8007fc2:	f102 0e01 	add.w	lr, r2, #1
 8007fc6:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8007fca:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8007fce:	45f0      	cmp	r8, lr
 8007fd0:	d12b      	bne.n	800802a <_malloc_r+0x2da>
 8007fd2:	1092      	asrs	r2, r2, #2
 8007fd4:	f04f 0c01 	mov.w	ip, #1
 8007fd8:	fa0c f202 	lsl.w	r2, ip, r2
 8007fdc:	4302      	orrs	r2, r0
 8007fde:	6072      	str	r2, [r6, #4]
 8007fe0:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8007fe4:	f8c8 4008 	str.w	r4, [r8, #8]
 8007fe8:	f8ce 400c 	str.w	r4, [lr, #12]
 8007fec:	e763      	b.n	8007eb6 <_malloc_r+0x166>
 8007fee:	2a14      	cmp	r2, #20
 8007ff0:	d801      	bhi.n	8007ff6 <_malloc_r+0x2a6>
 8007ff2:	325b      	adds	r2, #91	; 0x5b
 8007ff4:	e7e5      	b.n	8007fc2 <_malloc_r+0x272>
 8007ff6:	2a54      	cmp	r2, #84	; 0x54
 8007ff8:	d803      	bhi.n	8008002 <_malloc_r+0x2b2>
 8007ffa:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8007ffe:	326e      	adds	r2, #110	; 0x6e
 8008000:	e7df      	b.n	8007fc2 <_malloc_r+0x272>
 8008002:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008006:	d803      	bhi.n	8008010 <_malloc_r+0x2c0>
 8008008:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800800c:	3277      	adds	r2, #119	; 0x77
 800800e:	e7d8      	b.n	8007fc2 <_malloc_r+0x272>
 8008010:	f240 5e54 	movw	lr, #1364	; 0x554
 8008014:	4572      	cmp	r2, lr
 8008016:	bf9a      	itte	ls
 8008018:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800801c:	327c      	addls	r2, #124	; 0x7c
 800801e:	227e      	movhi	r2, #126	; 0x7e
 8008020:	e7cf      	b.n	8007fc2 <_malloc_r+0x272>
 8008022:	f8de e008 	ldr.w	lr, [lr, #8]
 8008026:	45f0      	cmp	r8, lr
 8008028:	d005      	beq.n	8008036 <_malloc_r+0x2e6>
 800802a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800802e:	f022 0203 	bic.w	r2, r2, #3
 8008032:	4562      	cmp	r2, ip
 8008034:	d8f5      	bhi.n	8008022 <_malloc_r+0x2d2>
 8008036:	f8de 800c 	ldr.w	r8, [lr, #12]
 800803a:	e7d1      	b.n	8007fe0 <_malloc_r+0x290>
 800803c:	20000230 	.word	0x20000230
 8008040:	20000238 	.word	0x20000238
 8008044:	2000252c 	.word	0x2000252c
 8008048:	20000638 	.word	0x20000638
 800804c:	200024fc 	.word	0x200024fc
 8008050:	20002524 	.word	0x20002524
 8008054:	20002528 	.word	0x20002528
 8008058:	6860      	ldr	r0, [r4, #4]
 800805a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800805e:	f020 0003 	bic.w	r0, r0, #3
 8008062:	eba0 0a07 	sub.w	sl, r0, r7
 8008066:	f1ba 0f0f 	cmp.w	sl, #15
 800806a:	dd12      	ble.n	8008092 <_malloc_r+0x342>
 800806c:	68a3      	ldr	r3, [r4, #8]
 800806e:	19e2      	adds	r2, r4, r7
 8008070:	f047 0701 	orr.w	r7, r7, #1
 8008074:	6067      	str	r7, [r4, #4]
 8008076:	f8c3 c00c 	str.w	ip, [r3, #12]
 800807a:	f8cc 3008 	str.w	r3, [ip, #8]
 800807e:	f04a 0301 	orr.w	r3, sl, #1
 8008082:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8008086:	e9c2 1102 	strd	r1, r1, [r2, #8]
 800808a:	6053      	str	r3, [r2, #4]
 800808c:	f844 a000 	str.w	sl, [r4, r0]
 8008090:	e68f      	b.n	8007db2 <_malloc_r+0x62>
 8008092:	f1ba 0f00 	cmp.w	sl, #0
 8008096:	db11      	blt.n	80080bc <_malloc_r+0x36c>
 8008098:	4420      	add	r0, r4
 800809a:	6843      	ldr	r3, [r0, #4]
 800809c:	f043 0301 	orr.w	r3, r3, #1
 80080a0:	6043      	str	r3, [r0, #4]
 80080a2:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80080a6:	4628      	mov	r0, r5
 80080a8:	f8c3 c00c 	str.w	ip, [r3, #12]
 80080ac:	f8cc 3008 	str.w	r3, [ip, #8]
 80080b0:	f000 f88e 	bl	80081d0 <__malloc_unlock>
 80080b4:	4620      	mov	r0, r4
 80080b6:	b003      	add	sp, #12
 80080b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080bc:	4664      	mov	r4, ip
 80080be:	e70f      	b.n	8007ee0 <_malloc_r+0x190>
 80080c0:	f858 0908 	ldr.w	r0, [r8], #-8
 80080c4:	4540      	cmp	r0, r8
 80080c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80080ca:	f43f af13 	beq.w	8007ef4 <_malloc_r+0x1a4>
 80080ce:	e718      	b.n	8007f02 <_malloc_r+0x1b2>
 80080d0:	3304      	adds	r3, #4
 80080d2:	0052      	lsls	r2, r2, #1
 80080d4:	4210      	tst	r0, r2
 80080d6:	d0fb      	beq.n	80080d0 <_malloc_r+0x380>
 80080d8:	e6fc      	b.n	8007ed4 <_malloc_r+0x184>
 80080da:	4673      	mov	r3, lr
 80080dc:	e7fa      	b.n	80080d4 <_malloc_r+0x384>
 80080de:	6810      	ldr	r0, [r2, #0]
 80080e0:	3001      	adds	r0, #1
 80080e2:	bf1b      	ittet	ne
 80080e4:	eba4 0b0b 	subne.w	fp, r4, fp
 80080e8:	eb0b 020e 	addne.w	r2, fp, lr
 80080ec:	6014      	streq	r4, [r2, #0]
 80080ee:	601a      	strne	r2, [r3, #0]
 80080f0:	f014 0b07 	ands.w	fp, r4, #7
 80080f4:	bf1a      	itte	ne
 80080f6:	f1cb 0008 	rsbne	r0, fp, #8
 80080fa:	1824      	addne	r4, r4, r0
 80080fc:	4658      	moveq	r0, fp
 80080fe:	1862      	adds	r2, r4, r1
 8008100:	ea02 010c 	and.w	r1, r2, ip
 8008104:	4480      	add	r8, r0
 8008106:	eba8 0801 	sub.w	r8, r8, r1
 800810a:	ea08 080c 	and.w	r8, r8, ip
 800810e:	4641      	mov	r1, r8
 8008110:	4628      	mov	r0, r5
 8008112:	9201      	str	r2, [sp, #4]
 8008114:	f001 fb74 	bl	8009800 <_sbrk_r>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	9a01      	ldr	r2, [sp, #4]
 800811c:	4b28      	ldr	r3, [pc, #160]	; (80081c0 <_malloc_r+0x470>)
 800811e:	d107      	bne.n	8008130 <_malloc_r+0x3e0>
 8008120:	f1bb 0f00 	cmp.w	fp, #0
 8008124:	d023      	beq.n	800816e <_malloc_r+0x41e>
 8008126:	f1ab 0008 	sub.w	r0, fp, #8
 800812a:	4410      	add	r0, r2
 800812c:	f04f 0800 	mov.w	r8, #0
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	60b4      	str	r4, [r6, #8]
 8008134:	1b00      	subs	r0, r0, r4
 8008136:	4440      	add	r0, r8
 8008138:	4442      	add	r2, r8
 800813a:	f040 0001 	orr.w	r0, r0, #1
 800813e:	45b2      	cmp	sl, r6
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	6060      	str	r0, [r4, #4]
 8008144:	f43f af29 	beq.w	8007f9a <_malloc_r+0x24a>
 8008148:	f1b9 0f0f 	cmp.w	r9, #15
 800814c:	d812      	bhi.n	8008174 <_malloc_r+0x424>
 800814e:	2301      	movs	r3, #1
 8008150:	6063      	str	r3, [r4, #4]
 8008152:	68b3      	ldr	r3, [r6, #8]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f023 0303 	bic.w	r3, r3, #3
 800815a:	42bb      	cmp	r3, r7
 800815c:	eba3 0207 	sub.w	r2, r3, r7
 8008160:	d301      	bcc.n	8008166 <_malloc_r+0x416>
 8008162:	2a0f      	cmp	r2, #15
 8008164:	dc22      	bgt.n	80081ac <_malloc_r+0x45c>
 8008166:	4628      	mov	r0, r5
 8008168:	f000 f832 	bl	80081d0 <__malloc_unlock>
 800816c:	e5fc      	b.n	8007d68 <_malloc_r+0x18>
 800816e:	4610      	mov	r0, r2
 8008170:	46d8      	mov	r8, fp
 8008172:	e7dd      	b.n	8008130 <_malloc_r+0x3e0>
 8008174:	f8da 2004 	ldr.w	r2, [sl, #4]
 8008178:	f1a9 090c 	sub.w	r9, r9, #12
 800817c:	f029 0907 	bic.w	r9, r9, #7
 8008180:	f002 0201 	and.w	r2, r2, #1
 8008184:	ea42 0209 	orr.w	r2, r2, r9
 8008188:	f8ca 2004 	str.w	r2, [sl, #4]
 800818c:	2105      	movs	r1, #5
 800818e:	eb0a 0209 	add.w	r2, sl, r9
 8008192:	f1b9 0f0f 	cmp.w	r9, #15
 8008196:	e9c2 1101 	strd	r1, r1, [r2, #4]
 800819a:	f67f aefe 	bls.w	8007f9a <_malloc_r+0x24a>
 800819e:	f10a 0108 	add.w	r1, sl, #8
 80081a2:	4628      	mov	r0, r5
 80081a4:	f7ff fd14 	bl	8007bd0 <_free_r>
 80081a8:	4b05      	ldr	r3, [pc, #20]	; (80081c0 <_malloc_r+0x470>)
 80081aa:	e6f6      	b.n	8007f9a <_malloc_r+0x24a>
 80081ac:	68b4      	ldr	r4, [r6, #8]
 80081ae:	f047 0301 	orr.w	r3, r7, #1
 80081b2:	4427      	add	r7, r4
 80081b4:	f042 0201 	orr.w	r2, r2, #1
 80081b8:	6063      	str	r3, [r4, #4]
 80081ba:	60b7      	str	r7, [r6, #8]
 80081bc:	607a      	str	r2, [r7, #4]
 80081be:	e5f8      	b.n	8007db2 <_malloc_r+0x62>
 80081c0:	200024fc 	.word	0x200024fc

080081c4 <__malloc_lock>:
 80081c4:	4801      	ldr	r0, [pc, #4]	; (80081cc <__malloc_lock+0x8>)
 80081c6:	f7ff bc9d 	b.w	8007b04 <__retarget_lock_acquire_recursive>
 80081ca:	bf00      	nop
 80081cc:	200024f5 	.word	0x200024f5

080081d0 <__malloc_unlock>:
 80081d0:	4801      	ldr	r0, [pc, #4]	; (80081d8 <__malloc_unlock+0x8>)
 80081d2:	f7ff bc98 	b.w	8007b06 <__retarget_lock_release_recursive>
 80081d6:	bf00      	nop
 80081d8:	200024f5 	.word	0x200024f5
 80081dc:	00000000 	.word	0x00000000

080081e0 <_svfprintf_r>:
 80081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e4:	ed2d 8b04 	vpush	{d8-d9}
 80081e8:	b0cf      	sub	sp, #316	; 0x13c
 80081ea:	4689      	mov	r9, r1
 80081ec:	9203      	str	r2, [sp, #12]
 80081ee:	461d      	mov	r5, r3
 80081f0:	4682      	mov	sl, r0
 80081f2:	f001 fb01 	bl	80097f8 <_localeconv_r>
 80081f6:	6803      	ldr	r3, [r0, #0]
 80081f8:	9313      	str	r3, [sp, #76]	; 0x4c
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7f8 f840 	bl	8000280 <strlen>
 8008200:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008204:	900e      	str	r0, [sp, #56]	; 0x38
 8008206:	0619      	lsls	r1, r3, #24
 8008208:	d51a      	bpl.n	8008240 <_svfprintf_r+0x60>
 800820a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800820e:	b9bb      	cbnz	r3, 8008240 <_svfprintf_r+0x60>
 8008210:	2140      	movs	r1, #64	; 0x40
 8008212:	4650      	mov	r0, sl
 8008214:	f7ff fd9c 	bl	8007d50 <_malloc_r>
 8008218:	f8c9 0000 	str.w	r0, [r9]
 800821c:	f8c9 0010 	str.w	r0, [r9, #16]
 8008220:	b958      	cbnz	r0, 800823a <_svfprintf_r+0x5a>
 8008222:	230c      	movs	r3, #12
 8008224:	f8ca 3000 	str.w	r3, [sl]
 8008228:	f04f 33ff 	mov.w	r3, #4294967295
 800822c:	930b      	str	r3, [sp, #44]	; 0x2c
 800822e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008230:	b04f      	add	sp, #316	; 0x13c
 8008232:	ecbd 8b04 	vpop	{d8-d9}
 8008236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823a:	2340      	movs	r3, #64	; 0x40
 800823c:	f8c9 3014 	str.w	r3, [r9, #20]
 8008240:	ed9f 7b91 	vldr	d7, [pc, #580]	; 8008488 <_svfprintf_r+0x2a8>
 8008244:	2300      	movs	r3, #0
 8008246:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 800824a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800824e:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 8008252:	ac25      	add	r4, sp, #148	; 0x94
 8008254:	9422      	str	r4, [sp, #136]	; 0x88
 8008256:	9305      	str	r3, [sp, #20]
 8008258:	9309      	str	r3, [sp, #36]	; 0x24
 800825a:	9311      	str	r3, [sp, #68]	; 0x44
 800825c:	9314      	str	r3, [sp, #80]	; 0x50
 800825e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008260:	9b03      	ldr	r3, [sp, #12]
 8008262:	461e      	mov	r6, r3
 8008264:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008268:	b10a      	cbz	r2, 800826e <_svfprintf_r+0x8e>
 800826a:	2a25      	cmp	r2, #37	; 0x25
 800826c:	d1f9      	bne.n	8008262 <_svfprintf_r+0x82>
 800826e:	9b03      	ldr	r3, [sp, #12]
 8008270:	1af7      	subs	r7, r6, r3
 8008272:	d00d      	beq.n	8008290 <_svfprintf_r+0xb0>
 8008274:	e9c4 3700 	strd	r3, r7, [r4]
 8008278:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800827a:	443b      	add	r3, r7
 800827c:	9324      	str	r3, [sp, #144]	; 0x90
 800827e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008280:	3301      	adds	r3, #1
 8008282:	2b07      	cmp	r3, #7
 8008284:	9323      	str	r3, [sp, #140]	; 0x8c
 8008286:	dc78      	bgt.n	800837a <_svfprintf_r+0x19a>
 8008288:	3408      	adds	r4, #8
 800828a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800828c:	443b      	add	r3, r7
 800828e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008290:	7833      	ldrb	r3, [r6, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f001 815a 	beq.w	800954c <_svfprintf_r+0x136c>
 8008298:	2300      	movs	r3, #0
 800829a:	3601      	adds	r6, #1
 800829c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80082a0:	f04f 38ff 	mov.w	r8, #4294967295
 80082a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80082a6:	469b      	mov	fp, r3
 80082a8:	270a      	movs	r7, #10
 80082aa:	212b      	movs	r1, #43	; 0x2b
 80082ac:	4633      	mov	r3, r6
 80082ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082b2:	9207      	str	r2, [sp, #28]
 80082b4:	930a      	str	r3, [sp, #40]	; 0x28
 80082b6:	9b07      	ldr	r3, [sp, #28]
 80082b8:	3b20      	subs	r3, #32
 80082ba:	2b5a      	cmp	r3, #90	; 0x5a
 80082bc:	f200 85c6 	bhi.w	8008e4c <_svfprintf_r+0xc6c>
 80082c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80082c4:	05c4007e 	.word	0x05c4007e
 80082c8:	008605c4 	.word	0x008605c4
 80082cc:	05c405c4 	.word	0x05c405c4
 80082d0:	006505c4 	.word	0x006505c4
 80082d4:	05c405c4 	.word	0x05c405c4
 80082d8:	00930089 	.word	0x00930089
 80082dc:	009005c4 	.word	0x009005c4
 80082e0:	05c40096 	.word	0x05c40096
 80082e4:	00b200af 	.word	0x00b200af
 80082e8:	00b200b2 	.word	0x00b200b2
 80082ec:	00b200b2 	.word	0x00b200b2
 80082f0:	00b200b2 	.word	0x00b200b2
 80082f4:	00b200b2 	.word	0x00b200b2
 80082f8:	05c405c4 	.word	0x05c405c4
 80082fc:	05c405c4 	.word	0x05c405c4
 8008300:	05c405c4 	.word	0x05c405c4
 8008304:	012905c4 	.word	0x012905c4
 8008308:	00e605c4 	.word	0x00e605c4
 800830c:	012900f9 	.word	0x012900f9
 8008310:	01290129 	.word	0x01290129
 8008314:	05c405c4 	.word	0x05c405c4
 8008318:	05c405c4 	.word	0x05c405c4
 800831c:	05c400c2 	.word	0x05c400c2
 8008320:	049105c4 	.word	0x049105c4
 8008324:	05c405c4 	.word	0x05c405c4
 8008328:	04db05c4 	.word	0x04db05c4
 800832c:	050105c4 	.word	0x050105c4
 8008330:	05c405c4 	.word	0x05c405c4
 8008334:	05c40523 	.word	0x05c40523
 8008338:	05c405c4 	.word	0x05c405c4
 800833c:	05c405c4 	.word	0x05c405c4
 8008340:	05c405c4 	.word	0x05c405c4
 8008344:	012905c4 	.word	0x012905c4
 8008348:	00e605c4 	.word	0x00e605c4
 800834c:	012900fb 	.word	0x012900fb
 8008350:	01290129 	.word	0x01290129
 8008354:	00fb00c5 	.word	0x00fb00c5
 8008358:	05c400d9 	.word	0x05c400d9
 800835c:	05c400d2 	.word	0x05c400d2
 8008360:	0493046c 	.word	0x0493046c
 8008364:	00d904ca 	.word	0x00d904ca
 8008368:	04db05c4 	.word	0x04db05c4
 800836c:	0503007c 	.word	0x0503007c
 8008370:	05c405c4 	.word	0x05c405c4
 8008374:	05c40542 	.word	0x05c40542
 8008378:	007c      	.short	0x007c
 800837a:	aa22      	add	r2, sp, #136	; 0x88
 800837c:	4649      	mov	r1, r9
 800837e:	4650      	mov	r0, sl
 8008380:	f002 fc72 	bl	800ac68 <__ssprint_r>
 8008384:	2800      	cmp	r0, #0
 8008386:	f040 8137 	bne.w	80085f8 <_svfprintf_r+0x418>
 800838a:	ac25      	add	r4, sp, #148	; 0x94
 800838c:	e77d      	b.n	800828a <_svfprintf_r+0xaa>
 800838e:	4650      	mov	r0, sl
 8008390:	f001 fa32 	bl	80097f8 <_localeconv_r>
 8008394:	6843      	ldr	r3, [r0, #4]
 8008396:	9314      	str	r3, [sp, #80]	; 0x50
 8008398:	4618      	mov	r0, r3
 800839a:	f7f7 ff71 	bl	8000280 <strlen>
 800839e:	9011      	str	r0, [sp, #68]	; 0x44
 80083a0:	4650      	mov	r0, sl
 80083a2:	f001 fa29 	bl	80097f8 <_localeconv_r>
 80083a6:	6883      	ldr	r3, [r0, #8]
 80083a8:	9309      	str	r3, [sp, #36]	; 0x24
 80083aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083ac:	212b      	movs	r1, #43	; 0x2b
 80083ae:	b12b      	cbz	r3, 80083bc <_svfprintf_r+0x1dc>
 80083b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b2:	b11b      	cbz	r3, 80083bc <_svfprintf_r+0x1dc>
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	b10b      	cbz	r3, 80083bc <_svfprintf_r+0x1dc>
 80083b8:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80083bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80083be:	e775      	b.n	80082ac <_svfprintf_r+0xcc>
 80083c0:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1f9      	bne.n	80083bc <_svfprintf_r+0x1dc>
 80083c8:	2320      	movs	r3, #32
 80083ca:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80083ce:	e7f5      	b.n	80083bc <_svfprintf_r+0x1dc>
 80083d0:	f04b 0b01 	orr.w	fp, fp, #1
 80083d4:	e7f2      	b.n	80083bc <_svfprintf_r+0x1dc>
 80083d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083da:	930f      	str	r3, [sp, #60]	; 0x3c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	daed      	bge.n	80083bc <_svfprintf_r+0x1dc>
 80083e0:	425b      	negs	r3, r3
 80083e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80083e4:	f04b 0b04 	orr.w	fp, fp, #4
 80083e8:	e7e8      	b.n	80083bc <_svfprintf_r+0x1dc>
 80083ea:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 80083ee:	e7e5      	b.n	80083bc <_svfprintf_r+0x1dc>
 80083f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083f6:	9207      	str	r2, [sp, #28]
 80083f8:	2a2a      	cmp	r2, #42	; 0x2a
 80083fa:	d10f      	bne.n	800841c <_svfprintf_r+0x23c>
 80083fc:	f855 2b04 	ldr.w	r2, [r5], #4
 8008400:	930a      	str	r3, [sp, #40]	; 0x28
 8008402:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8008406:	e7d9      	b.n	80083bc <_svfprintf_r+0x1dc>
 8008408:	fb07 2808 	mla	r8, r7, r8, r2
 800840c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008410:	9207      	str	r2, [sp, #28]
 8008412:	9a07      	ldr	r2, [sp, #28]
 8008414:	3a30      	subs	r2, #48	; 0x30
 8008416:	2a09      	cmp	r2, #9
 8008418:	d9f6      	bls.n	8008408 <_svfprintf_r+0x228>
 800841a:	e74b      	b.n	80082b4 <_svfprintf_r+0xd4>
 800841c:	f04f 0800 	mov.w	r8, #0
 8008420:	e7f7      	b.n	8008412 <_svfprintf_r+0x232>
 8008422:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8008426:	e7c9      	b.n	80083bc <_svfprintf_r+0x1dc>
 8008428:	2200      	movs	r2, #0
 800842a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800842c:	920f      	str	r2, [sp, #60]	; 0x3c
 800842e:	9a07      	ldr	r2, [sp, #28]
 8008430:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008432:	3a30      	subs	r2, #48	; 0x30
 8008434:	fb07 2200 	mla	r2, r7, r0, r2
 8008438:	920f      	str	r2, [sp, #60]	; 0x3c
 800843a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800843e:	9207      	str	r2, [sp, #28]
 8008440:	3a30      	subs	r2, #48	; 0x30
 8008442:	2a09      	cmp	r2, #9
 8008444:	d9f3      	bls.n	800842e <_svfprintf_r+0x24e>
 8008446:	e735      	b.n	80082b4 <_svfprintf_r+0xd4>
 8008448:	f04b 0b08 	orr.w	fp, fp, #8
 800844c:	e7b6      	b.n	80083bc <_svfprintf_r+0x1dc>
 800844e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b68      	cmp	r3, #104	; 0x68
 8008454:	bf01      	itttt	eq
 8008456:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 8008458:	3301      	addeq	r3, #1
 800845a:	930a      	streq	r3, [sp, #40]	; 0x28
 800845c:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8008460:	bf18      	it	ne
 8008462:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8008466:	e7a9      	b.n	80083bc <_svfprintf_r+0x1dc>
 8008468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b6c      	cmp	r3, #108	; 0x6c
 800846e:	d105      	bne.n	800847c <_svfprintf_r+0x29c>
 8008470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008472:	3301      	adds	r3, #1
 8008474:	930a      	str	r3, [sp, #40]	; 0x28
 8008476:	f04b 0b20 	orr.w	fp, fp, #32
 800847a:	e79f      	b.n	80083bc <_svfprintf_r+0x1dc>
 800847c:	f04b 0b10 	orr.w	fp, fp, #16
 8008480:	e79c      	b.n	80083bc <_svfprintf_r+0x1dc>
 8008482:	bf00      	nop
 8008484:	f3af 8000 	nop.w
	...
 8008490:	462a      	mov	r2, r5
 8008492:	f852 3b04 	ldr.w	r3, [r2], #4
 8008496:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800849a:	2300      	movs	r3, #0
 800849c:	9206      	str	r2, [sp, #24]
 800849e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	461f      	mov	r7, r3
 80084a6:	461e      	mov	r6, r3
 80084a8:	9308      	str	r3, [sp, #32]
 80084aa:	461d      	mov	r5, r3
 80084ac:	ab35      	add	r3, sp, #212	; 0xd4
 80084ae:	f04f 0801 	mov.w	r8, #1
 80084b2:	9303      	str	r3, [sp, #12]
 80084b4:	e1b9      	b.n	800882a <_svfprintf_r+0x64a>
 80084b6:	f04b 0b10 	orr.w	fp, fp, #16
 80084ba:	f01b 0f20 	tst.w	fp, #32
 80084be:	d012      	beq.n	80084e6 <_svfprintf_r+0x306>
 80084c0:	3507      	adds	r5, #7
 80084c2:	f025 0307 	bic.w	r3, r5, #7
 80084c6:	461a      	mov	r2, r3
 80084c8:	685e      	ldr	r6, [r3, #4]
 80084ca:	f852 5b08 	ldr.w	r5, [r2], #8
 80084ce:	9206      	str	r2, [sp, #24]
 80084d0:	2e00      	cmp	r6, #0
 80084d2:	da06      	bge.n	80084e2 <_svfprintf_r+0x302>
 80084d4:	426d      	negs	r5, r5
 80084d6:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80084da:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 80084de:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80084e2:	2301      	movs	r3, #1
 80084e4:	e392      	b.n	8008c0c <_svfprintf_r+0xa2c>
 80084e6:	462b      	mov	r3, r5
 80084e8:	f01b 0f10 	tst.w	fp, #16
 80084ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80084f0:	9306      	str	r3, [sp, #24]
 80084f2:	d002      	beq.n	80084fa <_svfprintf_r+0x31a>
 80084f4:	4635      	mov	r5, r6
 80084f6:	17f6      	asrs	r6, r6, #31
 80084f8:	e7ea      	b.n	80084d0 <_svfprintf_r+0x2f0>
 80084fa:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80084fe:	d003      	beq.n	8008508 <_svfprintf_r+0x328>
 8008500:	b235      	sxth	r5, r6
 8008502:	f346 36c0 	sbfx	r6, r6, #15, #1
 8008506:	e7e3      	b.n	80084d0 <_svfprintf_r+0x2f0>
 8008508:	f41b 7f00 	tst.w	fp, #512	; 0x200
 800850c:	d0f2      	beq.n	80084f4 <_svfprintf_r+0x314>
 800850e:	b275      	sxtb	r5, r6
 8008510:	f346 16c0 	sbfx	r6, r6, #7, #1
 8008514:	e7dc      	b.n	80084d0 <_svfprintf_r+0x2f0>
 8008516:	3507      	adds	r5, #7
 8008518:	f025 0307 	bic.w	r3, r5, #7
 800851c:	ecb3 7b02 	vldmia	r3!, {d7}
 8008520:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008524:	9306      	str	r3, [sp, #24]
 8008526:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008528:	ee09 3a10 	vmov	s18, r3
 800852c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800852e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008532:	ee09 3a90 	vmov	s19, r3
 8008536:	f04f 32ff 	mov.w	r2, #4294967295
 800853a:	4b34      	ldr	r3, [pc, #208]	; (800860c <_svfprintf_r+0x42c>)
 800853c:	ec51 0b19 	vmov	r0, r1, d9
 8008540:	f7f8 fafc 	bl	8000b3c <__aeabi_dcmpun>
 8008544:	bb18      	cbnz	r0, 800858e <_svfprintf_r+0x3ae>
 8008546:	4b31      	ldr	r3, [pc, #196]	; (800860c <_svfprintf_r+0x42c>)
 8008548:	ec51 0b19 	vmov	r0, r1, d9
 800854c:	f04f 32ff 	mov.w	r2, #4294967295
 8008550:	f7f8 fad6 	bl	8000b00 <__aeabi_dcmple>
 8008554:	b9d8      	cbnz	r0, 800858e <_svfprintf_r+0x3ae>
 8008556:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800855a:	2200      	movs	r2, #0
 800855c:	2300      	movs	r3, #0
 800855e:	f7f8 fac5 	bl	8000aec <__aeabi_dcmplt>
 8008562:	b110      	cbz	r0, 800856a <_svfprintf_r+0x38a>
 8008564:	232d      	movs	r3, #45	; 0x2d
 8008566:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800856a:	4a29      	ldr	r2, [pc, #164]	; (8008610 <_svfprintf_r+0x430>)
 800856c:	4b29      	ldr	r3, [pc, #164]	; (8008614 <_svfprintf_r+0x434>)
 800856e:	9907      	ldr	r1, [sp, #28]
 8008570:	2947      	cmp	r1, #71	; 0x47
 8008572:	bfc8      	it	gt
 8008574:	461a      	movgt	r2, r3
 8008576:	2300      	movs	r3, #0
 8008578:	9203      	str	r2, [sp, #12]
 800857a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 800857e:	9304      	str	r3, [sp, #16]
 8008580:	f04f 0803 	mov.w	r8, #3
 8008584:	461f      	mov	r7, r3
 8008586:	461e      	mov	r6, r3
 8008588:	9308      	str	r3, [sp, #32]
 800858a:	461d      	mov	r5, r3
 800858c:	e14d      	b.n	800882a <_svfprintf_r+0x64a>
 800858e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008592:	4610      	mov	r0, r2
 8008594:	4619      	mov	r1, r3
 8008596:	f7f8 fad1 	bl	8000b3c <__aeabi_dcmpun>
 800859a:	b140      	cbz	r0, 80085ae <_svfprintf_r+0x3ce>
 800859c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800859e:	4a1e      	ldr	r2, [pc, #120]	; (8008618 <_svfprintf_r+0x438>)
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	bfbc      	itt	lt
 80085a4:	232d      	movlt	r3, #45	; 0x2d
 80085a6:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 80085aa:	4b1c      	ldr	r3, [pc, #112]	; (800861c <_svfprintf_r+0x43c>)
 80085ac:	e7df      	b.n	800856e <_svfprintf_r+0x38e>
 80085ae:	9b07      	ldr	r3, [sp, #28]
 80085b0:	f023 0320 	bic.w	r3, r3, #32
 80085b4:	2b41      	cmp	r3, #65	; 0x41
 80085b6:	9308      	str	r3, [sp, #32]
 80085b8:	d132      	bne.n	8008620 <_svfprintf_r+0x440>
 80085ba:	2330      	movs	r3, #48	; 0x30
 80085bc:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80085c0:	9b07      	ldr	r3, [sp, #28]
 80085c2:	2b61      	cmp	r3, #97	; 0x61
 80085c4:	bf0c      	ite	eq
 80085c6:	2378      	moveq	r3, #120	; 0x78
 80085c8:	2358      	movne	r3, #88	; 0x58
 80085ca:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 80085ce:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80085d2:	f04b 0b02 	orr.w	fp, fp, #2
 80085d6:	f340 8204 	ble.w	80089e2 <_svfprintf_r+0x802>
 80085da:	f108 0101 	add.w	r1, r8, #1
 80085de:	4650      	mov	r0, sl
 80085e0:	f7ff fbb6 	bl	8007d50 <_malloc_r>
 80085e4:	9003      	str	r0, [sp, #12]
 80085e6:	2800      	cmp	r0, #0
 80085e8:	f040 81ff 	bne.w	80089ea <_svfprintf_r+0x80a>
 80085ec:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80085f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085f4:	f8a9 300c 	strh.w	r3, [r9, #12]
 80085f8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80085fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008602:	bf18      	it	ne
 8008604:	f04f 33ff 	movne.w	r3, #4294967295
 8008608:	e610      	b.n	800822c <_svfprintf_r+0x4c>
 800860a:	bf00      	nop
 800860c:	7fefffff 	.word	0x7fefffff
 8008610:	0800d398 	.word	0x0800d398
 8008614:	0800d39c 	.word	0x0800d39c
 8008618:	0800d3a0 	.word	0x0800d3a0
 800861c:	0800d3a4 	.word	0x0800d3a4
 8008620:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008624:	f000 81e4 	beq.w	80089f0 <_svfprintf_r+0x810>
 8008628:	9b08      	ldr	r3, [sp, #32]
 800862a:	2b47      	cmp	r3, #71	; 0x47
 800862c:	f040 81e4 	bne.w	80089f8 <_svfprintf_r+0x818>
 8008630:	f1b8 0f00 	cmp.w	r8, #0
 8008634:	f040 81e0 	bne.w	80089f8 <_svfprintf_r+0x818>
 8008638:	f8cd 8010 	str.w	r8, [sp, #16]
 800863c:	f04f 0801 	mov.w	r8, #1
 8008640:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8008644:	9310      	str	r3, [sp, #64]	; 0x40
 8008646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008648:	2b00      	cmp	r3, #0
 800864a:	f280 81d7 	bge.w	80089fc <_svfprintf_r+0x81c>
 800864e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008650:	ee08 3a10 	vmov	s16, r3
 8008654:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008656:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800865a:	ee08 3a90 	vmov	s17, r3
 800865e:	232d      	movs	r3, #45	; 0x2d
 8008660:	9318      	str	r3, [sp, #96]	; 0x60
 8008662:	9b08      	ldr	r3, [sp, #32]
 8008664:	2b41      	cmp	r3, #65	; 0x41
 8008666:	f040 81e7 	bne.w	8008a38 <_svfprintf_r+0x858>
 800866a:	eeb0 0a48 	vmov.f32	s0, s16
 800866e:	eef0 0a68 	vmov.f32	s1, s17
 8008672:	a81c      	add	r0, sp, #112	; 0x70
 8008674:	f001 f8f4 	bl	8009860 <frexp>
 8008678:	2200      	movs	r2, #0
 800867a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800867e:	ec51 0b10 	vmov	r0, r1, d0
 8008682:	f7f7 ffc1 	bl	8000608 <__aeabi_dmul>
 8008686:	2200      	movs	r2, #0
 8008688:	2300      	movs	r3, #0
 800868a:	4606      	mov	r6, r0
 800868c:	460f      	mov	r7, r1
 800868e:	f7f8 fa23 	bl	8000ad8 <__aeabi_dcmpeq>
 8008692:	b108      	cbz	r0, 8008698 <_svfprintf_r+0x4b8>
 8008694:	2301      	movs	r3, #1
 8008696:	931c      	str	r3, [sp, #112]	; 0x70
 8008698:	4bac      	ldr	r3, [pc, #688]	; (800894c <_svfprintf_r+0x76c>)
 800869a:	4aad      	ldr	r2, [pc, #692]	; (8008950 <_svfprintf_r+0x770>)
 800869c:	9907      	ldr	r1, [sp, #28]
 800869e:	9d03      	ldr	r5, [sp, #12]
 80086a0:	2961      	cmp	r1, #97	; 0x61
 80086a2:	bf18      	it	ne
 80086a4:	461a      	movne	r2, r3
 80086a6:	f108 33ff 	add.w	r3, r8, #4294967295
 80086aa:	9217      	str	r2, [sp, #92]	; 0x5c
 80086ac:	9305      	str	r3, [sp, #20]
 80086ae:	4ba9      	ldr	r3, [pc, #676]	; (8008954 <_svfprintf_r+0x774>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	4630      	mov	r0, r6
 80086b4:	4639      	mov	r1, r7
 80086b6:	f7f7 ffa7 	bl	8000608 <__aeabi_dmul>
 80086ba:	460f      	mov	r7, r1
 80086bc:	4606      	mov	r6, r0
 80086be:	f7f8 fa53 	bl	8000b68 <__aeabi_d2iz>
 80086c2:	9019      	str	r0, [sp, #100]	; 0x64
 80086c4:	f7f7 ff36 	bl	8000534 <__aeabi_i2d>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	4630      	mov	r0, r6
 80086ce:	4639      	mov	r1, r7
 80086d0:	f7f7 fde2 	bl	8000298 <__aeabi_dsub>
 80086d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80086d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086d8:	5c9b      	ldrb	r3, [r3, r2]
 80086da:	f805 3b01 	strb.w	r3, [r5], #1
 80086de:	9b05      	ldr	r3, [sp, #20]
 80086e0:	9312      	str	r3, [sp, #72]	; 0x48
 80086e2:	1c5a      	adds	r2, r3, #1
 80086e4:	4606      	mov	r6, r0
 80086e6:	460f      	mov	r7, r1
 80086e8:	d007      	beq.n	80086fa <_svfprintf_r+0x51a>
 80086ea:	3b01      	subs	r3, #1
 80086ec:	9305      	str	r3, [sp, #20]
 80086ee:	2200      	movs	r2, #0
 80086f0:	2300      	movs	r3, #0
 80086f2:	f7f8 f9f1 	bl	8000ad8 <__aeabi_dcmpeq>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d0d9      	beq.n	80086ae <_svfprintf_r+0x4ce>
 80086fa:	4b97      	ldr	r3, [pc, #604]	; (8008958 <_svfprintf_r+0x778>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	4630      	mov	r0, r6
 8008700:	4639      	mov	r1, r7
 8008702:	f7f8 fa11 	bl	8000b28 <__aeabi_dcmpgt>
 8008706:	b960      	cbnz	r0, 8008722 <_svfprintf_r+0x542>
 8008708:	4b93      	ldr	r3, [pc, #588]	; (8008958 <_svfprintf_r+0x778>)
 800870a:	2200      	movs	r2, #0
 800870c:	4630      	mov	r0, r6
 800870e:	4639      	mov	r1, r7
 8008710:	f7f8 f9e2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008714:	2800      	cmp	r0, #0
 8008716:	f000 818a 	beq.w	8008a2e <_svfprintf_r+0x84e>
 800871a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800871c:	07de      	lsls	r6, r3, #31
 800871e:	f140 8186 	bpl.w	8008a2e <_svfprintf_r+0x84e>
 8008722:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008724:	9520      	str	r5, [sp, #128]	; 0x80
 8008726:	7bd9      	ldrb	r1, [r3, #15]
 8008728:	2030      	movs	r0, #48	; 0x30
 800872a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800872c:	1e53      	subs	r3, r2, #1
 800872e:	9320      	str	r3, [sp, #128]	; 0x80
 8008730:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8008734:	428b      	cmp	r3, r1
 8008736:	f000 8169 	beq.w	8008a0c <_svfprintf_r+0x82c>
 800873a:	2b39      	cmp	r3, #57	; 0x39
 800873c:	bf0b      	itete	eq
 800873e:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8008740:	3301      	addne	r3, #1
 8008742:	7a9b      	ldrbeq	r3, [r3, #10]
 8008744:	b2db      	uxtbne	r3, r3
 8008746:	f802 3c01 	strb.w	r3, [r2, #-1]
 800874a:	9b03      	ldr	r3, [sp, #12]
 800874c:	1aeb      	subs	r3, r5, r3
 800874e:	9305      	str	r3, [sp, #20]
 8008750:	9b08      	ldr	r3, [sp, #32]
 8008752:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8008754:	2b47      	cmp	r3, #71	; 0x47
 8008756:	f040 81b9 	bne.w	8008acc <_svfprintf_r+0x8ec>
 800875a:	1ce8      	adds	r0, r5, #3
 800875c:	db02      	blt.n	8008764 <_svfprintf_r+0x584>
 800875e:	45a8      	cmp	r8, r5
 8008760:	f280 81d7 	bge.w	8008b12 <_svfprintf_r+0x932>
 8008764:	9b07      	ldr	r3, [sp, #28]
 8008766:	3b02      	subs	r3, #2
 8008768:	9307      	str	r3, [sp, #28]
 800876a:	9907      	ldr	r1, [sp, #28]
 800876c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8008770:	f021 0120 	bic.w	r1, r1, #32
 8008774:	2941      	cmp	r1, #65	; 0x41
 8008776:	bf08      	it	eq
 8008778:	320f      	addeq	r2, #15
 800877a:	f105 33ff 	add.w	r3, r5, #4294967295
 800877e:	bf06      	itte	eq
 8008780:	b2d2      	uxtbeq	r2, r2
 8008782:	2101      	moveq	r1, #1
 8008784:	2100      	movne	r1, #0
 8008786:	2b00      	cmp	r3, #0
 8008788:	931c      	str	r3, [sp, #112]	; 0x70
 800878a:	bfb8      	it	lt
 800878c:	f1c5 0301 	rsblt	r3, r5, #1
 8008790:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8008794:	bfb4      	ite	lt
 8008796:	222d      	movlt	r2, #45	; 0x2d
 8008798:	222b      	movge	r2, #43	; 0x2b
 800879a:	2b09      	cmp	r3, #9
 800879c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 80087a0:	f340 81aa 	ble.w	8008af8 <_svfprintf_r+0x918>
 80087a4:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 80087a8:	260a      	movs	r6, #10
 80087aa:	4602      	mov	r2, r0
 80087ac:	fb93 f5f6 	sdiv	r5, r3, r6
 80087b0:	fb06 3115 	mls	r1, r6, r5, r3
 80087b4:	3130      	adds	r1, #48	; 0x30
 80087b6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80087ba:	4619      	mov	r1, r3
 80087bc:	2963      	cmp	r1, #99	; 0x63
 80087be:	f100 30ff 	add.w	r0, r0, #4294967295
 80087c2:	462b      	mov	r3, r5
 80087c4:	dcf1      	bgt.n	80087aa <_svfprintf_r+0x5ca>
 80087c6:	3330      	adds	r3, #48	; 0x30
 80087c8:	1e91      	subs	r1, r2, #2
 80087ca:	f800 3c01 	strb.w	r3, [r0, #-1]
 80087ce:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 80087d2:	460b      	mov	r3, r1
 80087d4:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 80087d8:	4283      	cmp	r3, r0
 80087da:	f0c0 8188 	bcc.w	8008aee <_svfprintf_r+0x90e>
 80087de:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 80087e2:	1a9b      	subs	r3, r3, r2
 80087e4:	4281      	cmp	r1, r0
 80087e6:	bf88      	it	hi
 80087e8:	2300      	movhi	r3, #0
 80087ea:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80087ee:	441a      	add	r2, r3
 80087f0:	ab1e      	add	r3, sp, #120	; 0x78
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	9a05      	ldr	r2, [sp, #20]
 80087f6:	9315      	str	r3, [sp, #84]	; 0x54
 80087f8:	2a01      	cmp	r2, #1
 80087fa:	eb03 0802 	add.w	r8, r3, r2
 80087fe:	dc02      	bgt.n	8008806 <_svfprintf_r+0x626>
 8008800:	f01b 0f01 	tst.w	fp, #1
 8008804:	d001      	beq.n	800880a <_svfprintf_r+0x62a>
 8008806:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008808:	4498      	add	r8, r3
 800880a:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 800880e:	2600      	movs	r6, #0
 8008810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008814:	9310      	str	r3, [sp, #64]	; 0x40
 8008816:	9608      	str	r6, [sp, #32]
 8008818:	4635      	mov	r5, r6
 800881a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800881c:	b113      	cbz	r3, 8008824 <_svfprintf_r+0x644>
 800881e:	232d      	movs	r3, #45	; 0x2d
 8008820:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008824:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8008828:	2700      	movs	r7, #0
 800882a:	4547      	cmp	r7, r8
 800882c:	463b      	mov	r3, r7
 800882e:	bfb8      	it	lt
 8008830:	4643      	movlt	r3, r8
 8008832:	9310      	str	r3, [sp, #64]	; 0x40
 8008834:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8008838:	b113      	cbz	r3, 8008840 <_svfprintf_r+0x660>
 800883a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800883c:	3301      	adds	r3, #1
 800883e:	9310      	str	r3, [sp, #64]	; 0x40
 8008840:	f01b 0302 	ands.w	r3, fp, #2
 8008844:	9317      	str	r3, [sp, #92]	; 0x5c
 8008846:	bf1e      	ittt	ne
 8008848:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 800884a:	3302      	addne	r3, #2
 800884c:	9310      	strne	r3, [sp, #64]	; 0x40
 800884e:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8008852:	9318      	str	r3, [sp, #96]	; 0x60
 8008854:	d122      	bne.n	800889c <_svfprintf_r+0x6bc>
 8008856:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800885a:	1a9b      	subs	r3, r3, r2
 800885c:	2b00      	cmp	r3, #0
 800885e:	9312      	str	r3, [sp, #72]	; 0x48
 8008860:	dd1c      	ble.n	800889c <_svfprintf_r+0x6bc>
 8008862:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008864:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8008868:	2810      	cmp	r0, #16
 800886a:	483c      	ldr	r0, [pc, #240]	; (800895c <_svfprintf_r+0x77c>)
 800886c:	6020      	str	r0, [r4, #0]
 800886e:	f102 0201 	add.w	r2, r2, #1
 8008872:	f104 0108 	add.w	r1, r4, #8
 8008876:	f300 82f7 	bgt.w	8008e68 <_svfprintf_r+0xc88>
 800887a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800887c:	6060      	str	r0, [r4, #4]
 800887e:	4403      	add	r3, r0
 8008880:	2a07      	cmp	r2, #7
 8008882:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8008886:	f340 8304 	ble.w	8008e92 <_svfprintf_r+0xcb2>
 800888a:	aa22      	add	r2, sp, #136	; 0x88
 800888c:	4649      	mov	r1, r9
 800888e:	4650      	mov	r0, sl
 8008890:	f002 f9ea 	bl	800ac68 <__ssprint_r>
 8008894:	2800      	cmp	r0, #0
 8008896:	f040 8637 	bne.w	8009508 <_svfprintf_r+0x1328>
 800889a:	ac25      	add	r4, sp, #148	; 0x94
 800889c:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 80088a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80088a2:	b16a      	cbz	r2, 80088c0 <_svfprintf_r+0x6e0>
 80088a4:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 80088a8:	6022      	str	r2, [r4, #0]
 80088aa:	2201      	movs	r2, #1
 80088ac:	4413      	add	r3, r2
 80088ae:	9324      	str	r3, [sp, #144]	; 0x90
 80088b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088b2:	6062      	str	r2, [r4, #4]
 80088b4:	4413      	add	r3, r2
 80088b6:	2b07      	cmp	r3, #7
 80088b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80088ba:	f300 82ec 	bgt.w	8008e96 <_svfprintf_r+0xcb6>
 80088be:	3408      	adds	r4, #8
 80088c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80088c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80088c4:	b162      	cbz	r2, 80088e0 <_svfprintf_r+0x700>
 80088c6:	aa1b      	add	r2, sp, #108	; 0x6c
 80088c8:	6022      	str	r2, [r4, #0]
 80088ca:	2202      	movs	r2, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	9324      	str	r3, [sp, #144]	; 0x90
 80088d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088d2:	6062      	str	r2, [r4, #4]
 80088d4:	3301      	adds	r3, #1
 80088d6:	2b07      	cmp	r3, #7
 80088d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80088da:	f300 82e6 	bgt.w	8008eaa <_svfprintf_r+0xcca>
 80088de:	3408      	adds	r4, #8
 80088e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80088e2:	2b80      	cmp	r3, #128	; 0x80
 80088e4:	d122      	bne.n	800892c <_svfprintf_r+0x74c>
 80088e6:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80088ea:	1a9b      	subs	r3, r3, r2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	9312      	str	r3, [sp, #72]	; 0x48
 80088f0:	dd1c      	ble.n	800892c <_svfprintf_r+0x74c>
 80088f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80088f4:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 80088f8:	2810      	cmp	r0, #16
 80088fa:	4819      	ldr	r0, [pc, #100]	; (8008960 <_svfprintf_r+0x780>)
 80088fc:	6020      	str	r0, [r4, #0]
 80088fe:	f102 0201 	add.w	r2, r2, #1
 8008902:	f104 0108 	add.w	r1, r4, #8
 8008906:	f300 82da 	bgt.w	8008ebe <_svfprintf_r+0xcde>
 800890a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800890c:	6060      	str	r0, [r4, #4]
 800890e:	4403      	add	r3, r0
 8008910:	2a07      	cmp	r2, #7
 8008912:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8008916:	f340 82e7 	ble.w	8008ee8 <_svfprintf_r+0xd08>
 800891a:	aa22      	add	r2, sp, #136	; 0x88
 800891c:	4649      	mov	r1, r9
 800891e:	4650      	mov	r0, sl
 8008920:	f002 f9a2 	bl	800ac68 <__ssprint_r>
 8008924:	2800      	cmp	r0, #0
 8008926:	f040 85ef 	bne.w	8009508 <_svfprintf_r+0x1328>
 800892a:	ac25      	add	r4, sp, #148	; 0x94
 800892c:	eba7 0708 	sub.w	r7, r7, r8
 8008930:	2f00      	cmp	r7, #0
 8008932:	dd27      	ble.n	8008984 <_svfprintf_r+0x7a4>
 8008934:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008938:	4809      	ldr	r0, [pc, #36]	; (8008960 <_svfprintf_r+0x780>)
 800893a:	6020      	str	r0, [r4, #0]
 800893c:	2f10      	cmp	r7, #16
 800893e:	f103 0301 	add.w	r3, r3, #1
 8008942:	f104 0108 	add.w	r1, r4, #8
 8008946:	f300 82d1 	bgt.w	8008eec <_svfprintf_r+0xd0c>
 800894a:	e00b      	b.n	8008964 <_svfprintf_r+0x784>
 800894c:	0800d3b9 	.word	0x0800d3b9
 8008950:	0800d3a8 	.word	0x0800d3a8
 8008954:	40300000 	.word	0x40300000
 8008958:	3fe00000 	.word	0x3fe00000
 800895c:	0800d3cc 	.word	0x0800d3cc
 8008960:	0800d3dc 	.word	0x0800d3dc
 8008964:	6067      	str	r7, [r4, #4]
 8008966:	2b07      	cmp	r3, #7
 8008968:	4417      	add	r7, r2
 800896a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800896e:	f340 82d0 	ble.w	8008f12 <_svfprintf_r+0xd32>
 8008972:	aa22      	add	r2, sp, #136	; 0x88
 8008974:	4649      	mov	r1, r9
 8008976:	4650      	mov	r0, sl
 8008978:	f002 f976 	bl	800ac68 <__ssprint_r>
 800897c:	2800      	cmp	r0, #0
 800897e:	f040 85c3 	bne.w	8009508 <_svfprintf_r+0x1328>
 8008982:	ac25      	add	r4, sp, #148	; 0x94
 8008984:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008988:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800898a:	f040 82c9 	bne.w	8008f20 <_svfprintf_r+0xd40>
 800898e:	9b03      	ldr	r3, [sp, #12]
 8008990:	e9c4 3800 	strd	r3, r8, [r4]
 8008994:	4447      	add	r7, r8
 8008996:	9724      	str	r7, [sp, #144]	; 0x90
 8008998:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800899a:	3301      	adds	r3, #1
 800899c:	2b07      	cmp	r3, #7
 800899e:	9323      	str	r3, [sp, #140]	; 0x8c
 80089a0:	f300 8303 	bgt.w	8008faa <_svfprintf_r+0xdca>
 80089a4:	3408      	adds	r4, #8
 80089a6:	f01b 0f04 	tst.w	fp, #4
 80089aa:	f040 858f 	bne.w	80094cc <_svfprintf_r+0x12ec>
 80089ae:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 80089b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089b4:	428a      	cmp	r2, r1
 80089b6:	bfac      	ite	ge
 80089b8:	189b      	addge	r3, r3, r2
 80089ba:	185b      	addlt	r3, r3, r1
 80089bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80089be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80089c0:	b13b      	cbz	r3, 80089d2 <_svfprintf_r+0x7f2>
 80089c2:	aa22      	add	r2, sp, #136	; 0x88
 80089c4:	4649      	mov	r1, r9
 80089c6:	4650      	mov	r0, sl
 80089c8:	f002 f94e 	bl	800ac68 <__ssprint_r>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	f040 859b 	bne.w	8009508 <_svfprintf_r+0x1328>
 80089d2:	2300      	movs	r3, #0
 80089d4:	9323      	str	r3, [sp, #140]	; 0x8c
 80089d6:	9b04      	ldr	r3, [sp, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f040 85b1 	bne.w	8009540 <_svfprintf_r+0x1360>
 80089de:	ac25      	add	r4, sp, #148	; 0x94
 80089e0:	e0e7      	b.n	8008bb2 <_svfprintf_r+0x9d2>
 80089e2:	ab35      	add	r3, sp, #212	; 0xd4
 80089e4:	9004      	str	r0, [sp, #16]
 80089e6:	9303      	str	r3, [sp, #12]
 80089e8:	e62a      	b.n	8008640 <_svfprintf_r+0x460>
 80089ea:	9b03      	ldr	r3, [sp, #12]
 80089ec:	9304      	str	r3, [sp, #16]
 80089ee:	e627      	b.n	8008640 <_svfprintf_r+0x460>
 80089f0:	9004      	str	r0, [sp, #16]
 80089f2:	f04f 0806 	mov.w	r8, #6
 80089f6:	e623      	b.n	8008640 <_svfprintf_r+0x460>
 80089f8:	9004      	str	r0, [sp, #16]
 80089fa:	e621      	b.n	8008640 <_svfprintf_r+0x460>
 80089fc:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8008a00:	2300      	movs	r3, #0
 8008a02:	eeb0 8a47 	vmov.f32	s16, s14
 8008a06:	eef0 8a67 	vmov.f32	s17, s15
 8008a0a:	e629      	b.n	8008660 <_svfprintf_r+0x480>
 8008a0c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8008a10:	e68b      	b.n	800872a <_svfprintf_r+0x54a>
 8008a12:	f803 0b01 	strb.w	r0, [r3], #1
 8008a16:	1aca      	subs	r2, r1, r3
 8008a18:	2a00      	cmp	r2, #0
 8008a1a:	dafa      	bge.n	8008a12 <_svfprintf_r+0x832>
 8008a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a20:	3201      	adds	r2, #1
 8008a22:	f103 0301 	add.w	r3, r3, #1
 8008a26:	bfb8      	it	lt
 8008a28:	2300      	movlt	r3, #0
 8008a2a:	441d      	add	r5, r3
 8008a2c:	e68d      	b.n	800874a <_svfprintf_r+0x56a>
 8008a2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a30:	462b      	mov	r3, r5
 8008a32:	18a9      	adds	r1, r5, r2
 8008a34:	2030      	movs	r0, #48	; 0x30
 8008a36:	e7ee      	b.n	8008a16 <_svfprintf_r+0x836>
 8008a38:	9b08      	ldr	r3, [sp, #32]
 8008a3a:	2b46      	cmp	r3, #70	; 0x46
 8008a3c:	d005      	beq.n	8008a4a <_svfprintf_r+0x86a>
 8008a3e:	2b45      	cmp	r3, #69	; 0x45
 8008a40:	d11d      	bne.n	8008a7e <_svfprintf_r+0x89e>
 8008a42:	f108 0501 	add.w	r5, r8, #1
 8008a46:	2102      	movs	r1, #2
 8008a48:	e001      	b.n	8008a4e <_svfprintf_r+0x86e>
 8008a4a:	4645      	mov	r5, r8
 8008a4c:	2103      	movs	r1, #3
 8008a4e:	ab20      	add	r3, sp, #128	; 0x80
 8008a50:	9301      	str	r3, [sp, #4]
 8008a52:	ab1d      	add	r3, sp, #116	; 0x74
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	462a      	mov	r2, r5
 8008a58:	ab1c      	add	r3, sp, #112	; 0x70
 8008a5a:	4650      	mov	r0, sl
 8008a5c:	eeb0 0a48 	vmov.f32	s0, s16
 8008a60:	eef0 0a68 	vmov.f32	s1, s17
 8008a64:	f000 fffc 	bl	8009a60 <_dtoa_r>
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	9003      	str	r0, [sp, #12]
 8008a6c:	2b47      	cmp	r3, #71	; 0x47
 8008a6e:	d108      	bne.n	8008a82 <_svfprintf_r+0x8a2>
 8008a70:	f01b 0f01 	tst.w	fp, #1
 8008a74:	d105      	bne.n	8008a82 <_svfprintf_r+0x8a2>
 8008a76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008a78:	9a03      	ldr	r2, [sp, #12]
 8008a7a:	1a9b      	subs	r3, r3, r2
 8008a7c:	e667      	b.n	800874e <_svfprintf_r+0x56e>
 8008a7e:	4645      	mov	r5, r8
 8008a80:	e7e1      	b.n	8008a46 <_svfprintf_r+0x866>
 8008a82:	9b03      	ldr	r3, [sp, #12]
 8008a84:	195e      	adds	r6, r3, r5
 8008a86:	9b08      	ldr	r3, [sp, #32]
 8008a88:	2b46      	cmp	r3, #70	; 0x46
 8008a8a:	d10f      	bne.n	8008aac <_svfprintf_r+0x8cc>
 8008a8c:	9b03      	ldr	r3, [sp, #12]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	2b30      	cmp	r3, #48	; 0x30
 8008a92:	d109      	bne.n	8008aa8 <_svfprintf_r+0x8c8>
 8008a94:	ec51 0b18 	vmov	r0, r1, d8
 8008a98:	2200      	movs	r2, #0
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f7f8 f81c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008aa0:	b910      	cbnz	r0, 8008aa8 <_svfprintf_r+0x8c8>
 8008aa2:	f1c5 0501 	rsb	r5, r5, #1
 8008aa6:	951c      	str	r5, [sp, #112]	; 0x70
 8008aa8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008aaa:	441e      	add	r6, r3
 8008aac:	ec51 0b18 	vmov	r0, r1, d8
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f7f8 f810 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ab8:	b100      	cbz	r0, 8008abc <_svfprintf_r+0x8dc>
 8008aba:	9620      	str	r6, [sp, #128]	; 0x80
 8008abc:	2230      	movs	r2, #48	; 0x30
 8008abe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ac0:	429e      	cmp	r6, r3
 8008ac2:	d9d8      	bls.n	8008a76 <_svfprintf_r+0x896>
 8008ac4:	1c59      	adds	r1, r3, #1
 8008ac6:	9120      	str	r1, [sp, #128]	; 0x80
 8008ac8:	701a      	strb	r2, [r3, #0]
 8008aca:	e7f8      	b.n	8008abe <_svfprintf_r+0x8de>
 8008acc:	9b08      	ldr	r3, [sp, #32]
 8008ace:	2b46      	cmp	r3, #70	; 0x46
 8008ad0:	f47f ae4b 	bne.w	800876a <_svfprintf_r+0x58a>
 8008ad4:	f00b 0301 	and.w	r3, fp, #1
 8008ad8:	2d00      	cmp	r5, #0
 8008ada:	ea43 0308 	orr.w	r3, r3, r8
 8008ade:	dd25      	ble.n	8008b2c <_svfprintf_r+0x94c>
 8008ae0:	b383      	cbz	r3, 8008b44 <_svfprintf_r+0x964>
 8008ae2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae4:	18eb      	adds	r3, r5, r3
 8008ae6:	4498      	add	r8, r3
 8008ae8:	2366      	movs	r3, #102	; 0x66
 8008aea:	9307      	str	r3, [sp, #28]
 8008aec:	e030      	b.n	8008b50 <_svfprintf_r+0x970>
 8008aee:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008af2:	f805 6f01 	strb.w	r6, [r5, #1]!
 8008af6:	e66f      	b.n	80087d8 <_svfprintf_r+0x5f8>
 8008af8:	b941      	cbnz	r1, 8008b0c <_svfprintf_r+0x92c>
 8008afa:	2230      	movs	r2, #48	; 0x30
 8008afc:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8008b00:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8008b04:	3330      	adds	r3, #48	; 0x30
 8008b06:	f802 3b01 	strb.w	r3, [r2], #1
 8008b0a:	e671      	b.n	80087f0 <_svfprintf_r+0x610>
 8008b0c:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8008b10:	e7f8      	b.n	8008b04 <_svfprintf_r+0x924>
 8008b12:	9b05      	ldr	r3, [sp, #20]
 8008b14:	42ab      	cmp	r3, r5
 8008b16:	dd0d      	ble.n	8008b34 <_svfprintf_r+0x954>
 8008b18:	9b05      	ldr	r3, [sp, #20]
 8008b1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b1c:	2d00      	cmp	r5, #0
 8008b1e:	eb03 0802 	add.w	r8, r3, r2
 8008b22:	dc0d      	bgt.n	8008b40 <_svfprintf_r+0x960>
 8008b24:	f1c5 0301 	rsb	r3, r5, #1
 8008b28:	4498      	add	r8, r3
 8008b2a:	e009      	b.n	8008b40 <_svfprintf_r+0x960>
 8008b2c:	b163      	cbz	r3, 8008b48 <_svfprintf_r+0x968>
 8008b2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b30:	3301      	adds	r3, #1
 8008b32:	e7d8      	b.n	8008ae6 <_svfprintf_r+0x906>
 8008b34:	f01b 0f01 	tst.w	fp, #1
 8008b38:	d01d      	beq.n	8008b76 <_svfprintf_r+0x996>
 8008b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b3c:	eb05 0803 	add.w	r8, r5, r3
 8008b40:	2367      	movs	r3, #103	; 0x67
 8008b42:	e7d2      	b.n	8008aea <_svfprintf_r+0x90a>
 8008b44:	46a8      	mov	r8, r5
 8008b46:	e7cf      	b.n	8008ae8 <_svfprintf_r+0x908>
 8008b48:	2366      	movs	r3, #102	; 0x66
 8008b4a:	9307      	str	r3, [sp, #28]
 8008b4c:	f04f 0801 	mov.w	r8, #1
 8008b50:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8008b54:	9308      	str	r3, [sp, #32]
 8008b56:	d01f      	beq.n	8008b98 <_svfprintf_r+0x9b8>
 8008b58:	2600      	movs	r6, #0
 8008b5a:	2d00      	cmp	r5, #0
 8008b5c:	9608      	str	r6, [sp, #32]
 8008b5e:	f77f ae5c 	ble.w	800881a <_svfprintf_r+0x63a>
 8008b62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	2bff      	cmp	r3, #255	; 0xff
 8008b68:	d107      	bne.n	8008b7a <_svfprintf_r+0x99a>
 8008b6a:	9b08      	ldr	r3, [sp, #32]
 8008b6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b6e:	4433      	add	r3, r6
 8008b70:	fb02 8803 	mla	r8, r2, r3, r8
 8008b74:	e651      	b.n	800881a <_svfprintf_r+0x63a>
 8008b76:	46a8      	mov	r8, r5
 8008b78:	e7e2      	b.n	8008b40 <_svfprintf_r+0x960>
 8008b7a:	42ab      	cmp	r3, r5
 8008b7c:	daf5      	bge.n	8008b6a <_svfprintf_r+0x98a>
 8008b7e:	1aed      	subs	r5, r5, r3
 8008b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b82:	785b      	ldrb	r3, [r3, #1]
 8008b84:	b133      	cbz	r3, 8008b94 <_svfprintf_r+0x9b4>
 8008b86:	9b08      	ldr	r3, [sp, #32]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	9308      	str	r3, [sp, #32]
 8008b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8e:	3301      	adds	r3, #1
 8008b90:	9309      	str	r3, [sp, #36]	; 0x24
 8008b92:	e7e6      	b.n	8008b62 <_svfprintf_r+0x982>
 8008b94:	3601      	adds	r6, #1
 8008b96:	e7e4      	b.n	8008b62 <_svfprintf_r+0x982>
 8008b98:	9e08      	ldr	r6, [sp, #32]
 8008b9a:	e63e      	b.n	800881a <_svfprintf_r+0x63a>
 8008b9c:	1d2b      	adds	r3, r5, #4
 8008b9e:	f01b 0f20 	tst.w	fp, #32
 8008ba2:	9306      	str	r3, [sp, #24]
 8008ba4:	d00a      	beq.n	8008bbc <_svfprintf_r+0x9dc>
 8008ba6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008ba8:	682b      	ldr	r3, [r5, #0]
 8008baa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bac:	17d2      	asrs	r2, r2, #31
 8008bae:	e9c3 1200 	strd	r1, r2, [r3]
 8008bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb4:	9d06      	ldr	r5, [sp, #24]
 8008bb6:	9303      	str	r3, [sp, #12]
 8008bb8:	f7ff bb52 	b.w	8008260 <_svfprintf_r+0x80>
 8008bbc:	f01b 0f10 	tst.w	fp, #16
 8008bc0:	d003      	beq.n	8008bca <_svfprintf_r+0x9ea>
 8008bc2:	682b      	ldr	r3, [r5, #0]
 8008bc4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bc6:	601a      	str	r2, [r3, #0]
 8008bc8:	e7f3      	b.n	8008bb2 <_svfprintf_r+0x9d2>
 8008bca:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8008bce:	d003      	beq.n	8008bd8 <_svfprintf_r+0x9f8>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008bd4:	801a      	strh	r2, [r3, #0]
 8008bd6:	e7ec      	b.n	8008bb2 <_svfprintf_r+0x9d2>
 8008bd8:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8008bdc:	d0f1      	beq.n	8008bc2 <_svfprintf_r+0x9e2>
 8008bde:	682b      	ldr	r3, [r5, #0]
 8008be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	e7e5      	b.n	8008bb2 <_svfprintf_r+0x9d2>
 8008be6:	f04b 0b10 	orr.w	fp, fp, #16
 8008bea:	f01b 0320 	ands.w	r3, fp, #32
 8008bee:	d020      	beq.n	8008c32 <_svfprintf_r+0xa52>
 8008bf0:	3507      	adds	r5, #7
 8008bf2:	f025 0307 	bic.w	r3, r5, #7
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	685e      	ldr	r6, [r3, #4]
 8008bfa:	f852 5b08 	ldr.w	r5, [r2], #8
 8008bfe:	9206      	str	r2, [sp, #24]
 8008c00:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8008c04:	2300      	movs	r3, #0
 8008c06:	2200      	movs	r2, #0
 8008c08:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8008c0c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008c10:	f000 84a7 	beq.w	8009562 <_svfprintf_r+0x1382>
 8008c14:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8008c18:	9204      	str	r2, [sp, #16]
 8008c1a:	ea55 0206 	orrs.w	r2, r5, r6
 8008c1e:	f040 84a6 	bne.w	800956e <_svfprintf_r+0x138e>
 8008c22:	f1b8 0f00 	cmp.w	r8, #0
 8008c26:	f000 8107 	beq.w	8008e38 <_svfprintf_r+0xc58>
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	f040 84a2 	bne.w	8009574 <_svfprintf_r+0x1394>
 8008c30:	e0a3      	b.n	8008d7a <_svfprintf_r+0xb9a>
 8008c32:	462a      	mov	r2, r5
 8008c34:	f01b 0610 	ands.w	r6, fp, #16
 8008c38:	f852 5b04 	ldr.w	r5, [r2], #4
 8008c3c:	9206      	str	r2, [sp, #24]
 8008c3e:	d001      	beq.n	8008c44 <_svfprintf_r+0xa64>
 8008c40:	461e      	mov	r6, r3
 8008c42:	e7dd      	b.n	8008c00 <_svfprintf_r+0xa20>
 8008c44:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8008c48:	d001      	beq.n	8008c4e <_svfprintf_r+0xa6e>
 8008c4a:	b2ad      	uxth	r5, r5
 8008c4c:	e7d8      	b.n	8008c00 <_svfprintf_r+0xa20>
 8008c4e:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8008c52:	d0d5      	beq.n	8008c00 <_svfprintf_r+0xa20>
 8008c54:	b2ed      	uxtb	r5, r5
 8008c56:	e7f3      	b.n	8008c40 <_svfprintf_r+0xa60>
 8008c58:	462b      	mov	r3, r5
 8008c5a:	2278      	movs	r2, #120	; 0x78
 8008c5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c60:	9306      	str	r3, [sp, #24]
 8008c62:	f647 0330 	movw	r3, #30768	; 0x7830
 8008c66:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8008c6a:	4bab      	ldr	r3, [pc, #684]	; (8008f18 <_svfprintf_r+0xd38>)
 8008c6c:	9316      	str	r3, [sp, #88]	; 0x58
 8008c6e:	2600      	movs	r6, #0
 8008c70:	f04b 0b02 	orr.w	fp, fp, #2
 8008c74:	2302      	movs	r3, #2
 8008c76:	9207      	str	r2, [sp, #28]
 8008c78:	e7c5      	b.n	8008c06 <_svfprintf_r+0xa26>
 8008c7a:	462b      	mov	r3, r5
 8008c7c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c84:	9203      	str	r2, [sp, #12]
 8008c86:	f04f 0500 	mov.w	r5, #0
 8008c8a:	9306      	str	r3, [sp, #24]
 8008c8c:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8008c90:	d010      	beq.n	8008cb4 <_svfprintf_r+0xad4>
 8008c92:	9803      	ldr	r0, [sp, #12]
 8008c94:	4642      	mov	r2, r8
 8008c96:	4629      	mov	r1, r5
 8008c98:	f7f7 faa2 	bl	80001e0 <memchr>
 8008c9c:	9004      	str	r0, [sp, #16]
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	f000 80e0 	beq.w	8008e64 <_svfprintf_r+0xc84>
 8008ca4:	9a03      	ldr	r2, [sp, #12]
 8008ca6:	9504      	str	r5, [sp, #16]
 8008ca8:	eba0 0802 	sub.w	r8, r0, r2
 8008cac:	462f      	mov	r7, r5
 8008cae:	462e      	mov	r6, r5
 8008cb0:	9508      	str	r5, [sp, #32]
 8008cb2:	e5ba      	b.n	800882a <_svfprintf_r+0x64a>
 8008cb4:	9803      	ldr	r0, [sp, #12]
 8008cb6:	f7f7 fae3 	bl	8000280 <strlen>
 8008cba:	462f      	mov	r7, r5
 8008cbc:	4680      	mov	r8, r0
 8008cbe:	9504      	str	r5, [sp, #16]
 8008cc0:	463e      	mov	r6, r7
 8008cc2:	463b      	mov	r3, r7
 8008cc4:	e460      	b.n	8008588 <_svfprintf_r+0x3a8>
 8008cc6:	f04b 0b10 	orr.w	fp, fp, #16
 8008cca:	f01b 0320 	ands.w	r3, fp, #32
 8008cce:	d009      	beq.n	8008ce4 <_svfprintf_r+0xb04>
 8008cd0:	3507      	adds	r5, #7
 8008cd2:	f025 0307 	bic.w	r3, r5, #7
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	685e      	ldr	r6, [r3, #4]
 8008cda:	f852 5b08 	ldr.w	r5, [r2], #8
 8008cde:	9206      	str	r2, [sp, #24]
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e790      	b.n	8008c06 <_svfprintf_r+0xa26>
 8008ce4:	462a      	mov	r2, r5
 8008ce6:	f01b 0610 	ands.w	r6, fp, #16
 8008cea:	f852 5b04 	ldr.w	r5, [r2], #4
 8008cee:	9206      	str	r2, [sp, #24]
 8008cf0:	d001      	beq.n	8008cf6 <_svfprintf_r+0xb16>
 8008cf2:	461e      	mov	r6, r3
 8008cf4:	e7f4      	b.n	8008ce0 <_svfprintf_r+0xb00>
 8008cf6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8008cfa:	d001      	beq.n	8008d00 <_svfprintf_r+0xb20>
 8008cfc:	b2ad      	uxth	r5, r5
 8008cfe:	e7ef      	b.n	8008ce0 <_svfprintf_r+0xb00>
 8008d00:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8008d04:	d0ec      	beq.n	8008ce0 <_svfprintf_r+0xb00>
 8008d06:	b2ed      	uxtb	r5, r5
 8008d08:	e7f3      	b.n	8008cf2 <_svfprintf_r+0xb12>
 8008d0a:	4b84      	ldr	r3, [pc, #528]	; (8008f1c <_svfprintf_r+0xd3c>)
 8008d0c:	9316      	str	r3, [sp, #88]	; 0x58
 8008d0e:	f01b 0320 	ands.w	r3, fp, #32
 8008d12:	d01b      	beq.n	8008d4c <_svfprintf_r+0xb6c>
 8008d14:	3507      	adds	r5, #7
 8008d16:	f025 0307 	bic.w	r3, r5, #7
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	685e      	ldr	r6, [r3, #4]
 8008d1e:	f852 5b08 	ldr.w	r5, [r2], #8
 8008d22:	9206      	str	r2, [sp, #24]
 8008d24:	f01b 0f01 	tst.w	fp, #1
 8008d28:	d00a      	beq.n	8008d40 <_svfprintf_r+0xb60>
 8008d2a:	ea55 0306 	orrs.w	r3, r5, r6
 8008d2e:	d007      	beq.n	8008d40 <_svfprintf_r+0xb60>
 8008d30:	2330      	movs	r3, #48	; 0x30
 8008d32:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8008d36:	9b07      	ldr	r3, [sp, #28]
 8008d38:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8008d3c:	f04b 0b02 	orr.w	fp, fp, #2
 8008d40:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8008d44:	2302      	movs	r3, #2
 8008d46:	e75e      	b.n	8008c06 <_svfprintf_r+0xa26>
 8008d48:	4b73      	ldr	r3, [pc, #460]	; (8008f18 <_svfprintf_r+0xd38>)
 8008d4a:	e7df      	b.n	8008d0c <_svfprintf_r+0xb2c>
 8008d4c:	462a      	mov	r2, r5
 8008d4e:	f01b 0610 	ands.w	r6, fp, #16
 8008d52:	f852 5b04 	ldr.w	r5, [r2], #4
 8008d56:	9206      	str	r2, [sp, #24]
 8008d58:	d001      	beq.n	8008d5e <_svfprintf_r+0xb7e>
 8008d5a:	461e      	mov	r6, r3
 8008d5c:	e7e2      	b.n	8008d24 <_svfprintf_r+0xb44>
 8008d5e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8008d62:	d001      	beq.n	8008d68 <_svfprintf_r+0xb88>
 8008d64:	b2ad      	uxth	r5, r5
 8008d66:	e7dd      	b.n	8008d24 <_svfprintf_r+0xb44>
 8008d68:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8008d6c:	d0da      	beq.n	8008d24 <_svfprintf_r+0xb44>
 8008d6e:	b2ed      	uxtb	r5, r5
 8008d70:	e7f3      	b.n	8008d5a <_svfprintf_r+0xb7a>
 8008d72:	2d0a      	cmp	r5, #10
 8008d74:	f176 0300 	sbcs.w	r3, r6, #0
 8008d78:	d206      	bcs.n	8008d88 <_svfprintf_r+0xba8>
 8008d7a:	3530      	adds	r5, #48	; 0x30
 8008d7c:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 8008d80:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8008d84:	f000 bc16 	b.w	80095b4 <_svfprintf_r+0x13d4>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9305      	str	r3, [sp, #20]
 8008d8c:	9b04      	ldr	r3, [sp, #16]
 8008d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d92:	af4e      	add	r7, sp, #312	; 0x138
 8008d94:	9308      	str	r3, [sp, #32]
 8008d96:	220a      	movs	r2, #10
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4628      	mov	r0, r5
 8008d9c:	4631      	mov	r1, r6
 8008d9e:	f7f7 ff5b 	bl	8000c58 <__aeabi_uldivmod>
 8008da2:	1e7b      	subs	r3, r7, #1
 8008da4:	9303      	str	r3, [sp, #12]
 8008da6:	9b05      	ldr	r3, [sp, #20]
 8008da8:	9010      	str	r0, [sp, #64]	; 0x40
 8008daa:	3301      	adds	r3, #1
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	9b08      	ldr	r3, [sp, #32]
 8008db0:	3230      	adds	r2, #48	; 0x30
 8008db2:	468b      	mov	fp, r1
 8008db4:	f807 2c01 	strb.w	r2, [r7, #-1]
 8008db8:	b1d3      	cbz	r3, 8008df0 <_svfprintf_r+0xc10>
 8008dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dbc:	9a05      	ldr	r2, [sp, #20]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d115      	bne.n	8008df0 <_svfprintf_r+0xc10>
 8008dc4:	2aff      	cmp	r2, #255	; 0xff
 8008dc6:	d013      	beq.n	8008df0 <_svfprintf_r+0xc10>
 8008dc8:	2d0a      	cmp	r5, #10
 8008dca:	f176 0300 	sbcs.w	r3, r6, #0
 8008dce:	d30f      	bcc.n	8008df0 <_svfprintf_r+0xc10>
 8008dd0:	9b03      	ldr	r3, [sp, #12]
 8008dd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008dd4:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008dd6:	1a9b      	subs	r3, r3, r2
 8008dd8:	4618      	mov	r0, r3
 8008dda:	9303      	str	r3, [sp, #12]
 8008ddc:	f000 fcf9 	bl	80097d2 <strncpy>
 8008de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de2:	785b      	ldrb	r3, [r3, #1]
 8008de4:	b11b      	cbz	r3, 8008dee <_svfprintf_r+0xc0e>
 8008de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de8:	3301      	adds	r3, #1
 8008dea:	9309      	str	r3, [sp, #36]	; 0x24
 8008dec:	2300      	movs	r3, #0
 8008dee:	9305      	str	r3, [sp, #20]
 8008df0:	2d0a      	cmp	r5, #10
 8008df2:	f176 0600 	sbcs.w	r6, r6, #0
 8008df6:	d20b      	bcs.n	8008e10 <_svfprintf_r+0xc30>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	f8dd b010 	ldr.w	fp, [sp, #16]
 8008dfe:	aa4e      	add	r2, sp, #312	; 0x138
 8008e00:	4647      	mov	r7, r8
 8008e02:	eba2 0803 	sub.w	r8, r2, r3
 8008e06:	2300      	movs	r3, #0
 8008e08:	9304      	str	r3, [sp, #16]
 8008e0a:	461e      	mov	r6, r3
 8008e0c:	f7ff bbbc 	b.w	8008588 <_svfprintf_r+0x3a8>
 8008e10:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008e12:	9f03      	ldr	r7, [sp, #12]
 8008e14:	465e      	mov	r6, fp
 8008e16:	e7be      	b.n	8008d96 <_svfprintf_r+0xbb6>
 8008e18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008e1a:	f005 030f 	and.w	r3, r5, #15
 8008e1e:	092d      	lsrs	r5, r5, #4
 8008e20:	5cd3      	ldrb	r3, [r2, r3]
 8008e22:	9a03      	ldr	r2, [sp, #12]
 8008e24:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 8008e28:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8008e2c:	0936      	lsrs	r6, r6, #4
 8008e2e:	ea55 0306 	orrs.w	r3, r5, r6
 8008e32:	9203      	str	r2, [sp, #12]
 8008e34:	d1f0      	bne.n	8008e18 <_svfprintf_r+0xc38>
 8008e36:	e7df      	b.n	8008df8 <_svfprintf_r+0xc18>
 8008e38:	b933      	cbnz	r3, 8008e48 <_svfprintf_r+0xc68>
 8008e3a:	f01b 0f01 	tst.w	fp, #1
 8008e3e:	d003      	beq.n	8008e48 <_svfprintf_r+0xc68>
 8008e40:	2330      	movs	r3, #48	; 0x30
 8008e42:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8008e46:	e79b      	b.n	8008d80 <_svfprintf_r+0xba0>
 8008e48:	ab4e      	add	r3, sp, #312	; 0x138
 8008e4a:	e3b3      	b.n	80095b4 <_svfprintf_r+0x13d4>
 8008e4c:	9b07      	ldr	r3, [sp, #28]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 837c 	beq.w	800954c <_svfprintf_r+0x136c>
 8008e54:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8008e58:	2300      	movs	r3, #0
 8008e5a:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008e5e:	9506      	str	r5, [sp, #24]
 8008e60:	f7ff bb1f 	b.w	80084a2 <_svfprintf_r+0x2c2>
 8008e64:	9f04      	ldr	r7, [sp, #16]
 8008e66:	e72b      	b.n	8008cc0 <_svfprintf_r+0xae0>
 8008e68:	2010      	movs	r0, #16
 8008e6a:	4403      	add	r3, r0
 8008e6c:	2a07      	cmp	r2, #7
 8008e6e:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8008e72:	6060      	str	r0, [r4, #4]
 8008e74:	dd08      	ble.n	8008e88 <_svfprintf_r+0xca8>
 8008e76:	aa22      	add	r2, sp, #136	; 0x88
 8008e78:	4649      	mov	r1, r9
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	f001 fef4 	bl	800ac68 <__ssprint_r>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	f040 8341 	bne.w	8009508 <_svfprintf_r+0x1328>
 8008e86:	a925      	add	r1, sp, #148	; 0x94
 8008e88:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008e8a:	3b10      	subs	r3, #16
 8008e8c:	9312      	str	r3, [sp, #72]	; 0x48
 8008e8e:	460c      	mov	r4, r1
 8008e90:	e4e7      	b.n	8008862 <_svfprintf_r+0x682>
 8008e92:	460c      	mov	r4, r1
 8008e94:	e502      	b.n	800889c <_svfprintf_r+0x6bc>
 8008e96:	aa22      	add	r2, sp, #136	; 0x88
 8008e98:	4649      	mov	r1, r9
 8008e9a:	4650      	mov	r0, sl
 8008e9c:	f001 fee4 	bl	800ac68 <__ssprint_r>
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	f040 8331 	bne.w	8009508 <_svfprintf_r+0x1328>
 8008ea6:	ac25      	add	r4, sp, #148	; 0x94
 8008ea8:	e50a      	b.n	80088c0 <_svfprintf_r+0x6e0>
 8008eaa:	aa22      	add	r2, sp, #136	; 0x88
 8008eac:	4649      	mov	r1, r9
 8008eae:	4650      	mov	r0, sl
 8008eb0:	f001 feda 	bl	800ac68 <__ssprint_r>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	f040 8327 	bne.w	8009508 <_svfprintf_r+0x1328>
 8008eba:	ac25      	add	r4, sp, #148	; 0x94
 8008ebc:	e510      	b.n	80088e0 <_svfprintf_r+0x700>
 8008ebe:	2010      	movs	r0, #16
 8008ec0:	4403      	add	r3, r0
 8008ec2:	2a07      	cmp	r2, #7
 8008ec4:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8008ec8:	6060      	str	r0, [r4, #4]
 8008eca:	dd08      	ble.n	8008ede <_svfprintf_r+0xcfe>
 8008ecc:	aa22      	add	r2, sp, #136	; 0x88
 8008ece:	4649      	mov	r1, r9
 8008ed0:	4650      	mov	r0, sl
 8008ed2:	f001 fec9 	bl	800ac68 <__ssprint_r>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	f040 8316 	bne.w	8009508 <_svfprintf_r+0x1328>
 8008edc:	a925      	add	r1, sp, #148	; 0x94
 8008ede:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ee0:	3b10      	subs	r3, #16
 8008ee2:	9312      	str	r3, [sp, #72]	; 0x48
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	e504      	b.n	80088f2 <_svfprintf_r+0x712>
 8008ee8:	460c      	mov	r4, r1
 8008eea:	e51f      	b.n	800892c <_svfprintf_r+0x74c>
 8008eec:	2010      	movs	r0, #16
 8008eee:	4402      	add	r2, r0
 8008ef0:	2b07      	cmp	r3, #7
 8008ef2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008ef6:	6060      	str	r0, [r4, #4]
 8008ef8:	dd08      	ble.n	8008f0c <_svfprintf_r+0xd2c>
 8008efa:	aa22      	add	r2, sp, #136	; 0x88
 8008efc:	4649      	mov	r1, r9
 8008efe:	4650      	mov	r0, sl
 8008f00:	f001 feb2 	bl	800ac68 <__ssprint_r>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	f040 82ff 	bne.w	8009508 <_svfprintf_r+0x1328>
 8008f0a:	a925      	add	r1, sp, #148	; 0x94
 8008f0c:	3f10      	subs	r7, #16
 8008f0e:	460c      	mov	r4, r1
 8008f10:	e510      	b.n	8008934 <_svfprintf_r+0x754>
 8008f12:	460c      	mov	r4, r1
 8008f14:	e536      	b.n	8008984 <_svfprintf_r+0x7a4>
 8008f16:	bf00      	nop
 8008f18:	0800d3a8 	.word	0x0800d3a8
 8008f1c:	0800d3b9 	.word	0x0800d3b9
 8008f20:	9b07      	ldr	r3, [sp, #28]
 8008f22:	2b65      	cmp	r3, #101	; 0x65
 8008f24:	f340 823a 	ble.w	800939c <_svfprintf_r+0x11bc>
 8008f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2300      	movs	r3, #0
 8008f30:	f7f7 fdd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d068      	beq.n	800900a <_svfprintf_r+0xe2a>
 8008f38:	4b6d      	ldr	r3, [pc, #436]	; (80090f0 <_svfprintf_r+0xf10>)
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	441f      	add	r7, r3
 8008f40:	6063      	str	r3, [r4, #4]
 8008f42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f44:	9724      	str	r7, [sp, #144]	; 0x90
 8008f46:	3301      	adds	r3, #1
 8008f48:	2b07      	cmp	r3, #7
 8008f4a:	9323      	str	r3, [sp, #140]	; 0x8c
 8008f4c:	dc37      	bgt.n	8008fbe <_svfprintf_r+0xdde>
 8008f4e:	3408      	adds	r4, #8
 8008f50:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008f52:	9a05      	ldr	r2, [sp, #20]
 8008f54:	4293      	cmp	r3, r2
 8008f56:	db03      	blt.n	8008f60 <_svfprintf_r+0xd80>
 8008f58:	f01b 0f01 	tst.w	fp, #1
 8008f5c:	f43f ad23 	beq.w	80089a6 <_svfprintf_r+0x7c6>
 8008f60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008f62:	6023      	str	r3, [r4, #0]
 8008f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f68:	6063      	str	r3, [r4, #4]
 8008f6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f6c:	4413      	add	r3, r2
 8008f6e:	9324      	str	r3, [sp, #144]	; 0x90
 8008f70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f72:	3301      	adds	r3, #1
 8008f74:	2b07      	cmp	r3, #7
 8008f76:	9323      	str	r3, [sp, #140]	; 0x8c
 8008f78:	dc2b      	bgt.n	8008fd2 <_svfprintf_r+0xdf2>
 8008f7a:	3408      	adds	r4, #8
 8008f7c:	9b05      	ldr	r3, [sp, #20]
 8008f7e:	1e5d      	subs	r5, r3, #1
 8008f80:	2d00      	cmp	r5, #0
 8008f82:	f77f ad10 	ble.w	80089a6 <_svfprintf_r+0x7c6>
 8008f86:	4e5b      	ldr	r6, [pc, #364]	; (80090f4 <_svfprintf_r+0xf14>)
 8008f88:	2710      	movs	r7, #16
 8008f8a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8008f8e:	2d10      	cmp	r5, #16
 8008f90:	f103 0301 	add.w	r3, r3, #1
 8008f94:	f104 0108 	add.w	r1, r4, #8
 8008f98:	6026      	str	r6, [r4, #0]
 8008f9a:	dc24      	bgt.n	8008fe6 <_svfprintf_r+0xe06>
 8008f9c:	6065      	str	r5, [r4, #4]
 8008f9e:	4415      	add	r5, r2
 8008fa0:	9524      	str	r5, [sp, #144]	; 0x90
 8008fa2:	2b07      	cmp	r3, #7
 8008fa4:	9323      	str	r3, [sp, #140]	; 0x8c
 8008fa6:	f340 828e 	ble.w	80094c6 <_svfprintf_r+0x12e6>
 8008faa:	aa22      	add	r2, sp, #136	; 0x88
 8008fac:	4649      	mov	r1, r9
 8008fae:	4650      	mov	r0, sl
 8008fb0:	f001 fe5a 	bl	800ac68 <__ssprint_r>
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	f040 82a7 	bne.w	8009508 <_svfprintf_r+0x1328>
 8008fba:	ac25      	add	r4, sp, #148	; 0x94
 8008fbc:	e4f3      	b.n	80089a6 <_svfprintf_r+0x7c6>
 8008fbe:	aa22      	add	r2, sp, #136	; 0x88
 8008fc0:	4649      	mov	r1, r9
 8008fc2:	4650      	mov	r0, sl
 8008fc4:	f001 fe50 	bl	800ac68 <__ssprint_r>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	f040 829d 	bne.w	8009508 <_svfprintf_r+0x1328>
 8008fce:	ac25      	add	r4, sp, #148	; 0x94
 8008fd0:	e7be      	b.n	8008f50 <_svfprintf_r+0xd70>
 8008fd2:	aa22      	add	r2, sp, #136	; 0x88
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	4650      	mov	r0, sl
 8008fd8:	f001 fe46 	bl	800ac68 <__ssprint_r>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	f040 8293 	bne.w	8009508 <_svfprintf_r+0x1328>
 8008fe2:	ac25      	add	r4, sp, #148	; 0x94
 8008fe4:	e7ca      	b.n	8008f7c <_svfprintf_r+0xd9c>
 8008fe6:	3210      	adds	r2, #16
 8008fe8:	2b07      	cmp	r3, #7
 8008fea:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8008fee:	6067      	str	r7, [r4, #4]
 8008ff0:	dd08      	ble.n	8009004 <_svfprintf_r+0xe24>
 8008ff2:	aa22      	add	r2, sp, #136	; 0x88
 8008ff4:	4649      	mov	r1, r9
 8008ff6:	4650      	mov	r0, sl
 8008ff8:	f001 fe36 	bl	800ac68 <__ssprint_r>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f040 8283 	bne.w	8009508 <_svfprintf_r+0x1328>
 8009002:	a925      	add	r1, sp, #148	; 0x94
 8009004:	3d10      	subs	r5, #16
 8009006:	460c      	mov	r4, r1
 8009008:	e7bf      	b.n	8008f8a <_svfprintf_r+0xdaa>
 800900a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800900c:	2b00      	cmp	r3, #0
 800900e:	dc73      	bgt.n	80090f8 <_svfprintf_r+0xf18>
 8009010:	4b37      	ldr	r3, [pc, #220]	; (80090f0 <_svfprintf_r+0xf10>)
 8009012:	6023      	str	r3, [r4, #0]
 8009014:	2301      	movs	r3, #1
 8009016:	441f      	add	r7, r3
 8009018:	6063      	str	r3, [r4, #4]
 800901a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800901c:	9724      	str	r7, [sp, #144]	; 0x90
 800901e:	3301      	adds	r3, #1
 8009020:	2b07      	cmp	r3, #7
 8009022:	9323      	str	r3, [sp, #140]	; 0x8c
 8009024:	dc3d      	bgt.n	80090a2 <_svfprintf_r+0xec2>
 8009026:	3408      	adds	r4, #8
 8009028:	9905      	ldr	r1, [sp, #20]
 800902a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800902c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800902e:	430b      	orrs	r3, r1
 8009030:	f00b 0101 	and.w	r1, fp, #1
 8009034:	430b      	orrs	r3, r1
 8009036:	f43f acb6 	beq.w	80089a6 <_svfprintf_r+0x7c6>
 800903a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	441a      	add	r2, r3
 8009044:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009046:	9224      	str	r2, [sp, #144]	; 0x90
 8009048:	3301      	adds	r3, #1
 800904a:	2b07      	cmp	r3, #7
 800904c:	9323      	str	r3, [sp, #140]	; 0x8c
 800904e:	dc32      	bgt.n	80090b6 <_svfprintf_r+0xed6>
 8009050:	3408      	adds	r4, #8
 8009052:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009054:	2d00      	cmp	r5, #0
 8009056:	da1b      	bge.n	8009090 <_svfprintf_r+0xeb0>
 8009058:	4e26      	ldr	r6, [pc, #152]	; (80090f4 <_svfprintf_r+0xf14>)
 800905a:	426d      	negs	r5, r5
 800905c:	4623      	mov	r3, r4
 800905e:	2710      	movs	r7, #16
 8009060:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8009064:	2d10      	cmp	r5, #16
 8009066:	f102 0201 	add.w	r2, r2, #1
 800906a:	f104 0408 	add.w	r4, r4, #8
 800906e:	601e      	str	r6, [r3, #0]
 8009070:	dc2b      	bgt.n	80090ca <_svfprintf_r+0xeea>
 8009072:	605d      	str	r5, [r3, #4]
 8009074:	2a07      	cmp	r2, #7
 8009076:	440d      	add	r5, r1
 8009078:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800907c:	dd08      	ble.n	8009090 <_svfprintf_r+0xeb0>
 800907e:	aa22      	add	r2, sp, #136	; 0x88
 8009080:	4649      	mov	r1, r9
 8009082:	4650      	mov	r0, sl
 8009084:	f001 fdf0 	bl	800ac68 <__ssprint_r>
 8009088:	2800      	cmp	r0, #0
 800908a:	f040 823d 	bne.w	8009508 <_svfprintf_r+0x1328>
 800908e:	ac25      	add	r4, sp, #148	; 0x94
 8009090:	9b03      	ldr	r3, [sp, #12]
 8009092:	6023      	str	r3, [r4, #0]
 8009094:	9b05      	ldr	r3, [sp, #20]
 8009096:	9a05      	ldr	r2, [sp, #20]
 8009098:	6063      	str	r3, [r4, #4]
 800909a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800909c:	4413      	add	r3, r2
 800909e:	9324      	str	r3, [sp, #144]	; 0x90
 80090a0:	e47a      	b.n	8008998 <_svfprintf_r+0x7b8>
 80090a2:	aa22      	add	r2, sp, #136	; 0x88
 80090a4:	4649      	mov	r1, r9
 80090a6:	4650      	mov	r0, sl
 80090a8:	f001 fdde 	bl	800ac68 <__ssprint_r>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	f040 822b 	bne.w	8009508 <_svfprintf_r+0x1328>
 80090b2:	ac25      	add	r4, sp, #148	; 0x94
 80090b4:	e7b8      	b.n	8009028 <_svfprintf_r+0xe48>
 80090b6:	aa22      	add	r2, sp, #136	; 0x88
 80090b8:	4649      	mov	r1, r9
 80090ba:	4650      	mov	r0, sl
 80090bc:	f001 fdd4 	bl	800ac68 <__ssprint_r>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	f040 8221 	bne.w	8009508 <_svfprintf_r+0x1328>
 80090c6:	ac25      	add	r4, sp, #148	; 0x94
 80090c8:	e7c3      	b.n	8009052 <_svfprintf_r+0xe72>
 80090ca:	3110      	adds	r1, #16
 80090cc:	2a07      	cmp	r2, #7
 80090ce:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 80090d2:	605f      	str	r7, [r3, #4]
 80090d4:	dd08      	ble.n	80090e8 <_svfprintf_r+0xf08>
 80090d6:	aa22      	add	r2, sp, #136	; 0x88
 80090d8:	4649      	mov	r1, r9
 80090da:	4650      	mov	r0, sl
 80090dc:	f001 fdc4 	bl	800ac68 <__ssprint_r>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	f040 8211 	bne.w	8009508 <_svfprintf_r+0x1328>
 80090e6:	ac25      	add	r4, sp, #148	; 0x94
 80090e8:	3d10      	subs	r5, #16
 80090ea:	4623      	mov	r3, r4
 80090ec:	e7b8      	b.n	8009060 <_svfprintf_r+0xe80>
 80090ee:	bf00      	nop
 80090f0:	0800d3ca 	.word	0x0800d3ca
 80090f4:	0800d3dc 	.word	0x0800d3dc
 80090f8:	9b05      	ldr	r3, [sp, #20]
 80090fa:	42ab      	cmp	r3, r5
 80090fc:	bfa8      	it	ge
 80090fe:	462b      	movge	r3, r5
 8009100:	2b00      	cmp	r3, #0
 8009102:	4698      	mov	r8, r3
 8009104:	dd0a      	ble.n	800911c <_svfprintf_r+0xf3c>
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	e9c4 3800 	strd	r3, r8, [r4]
 800910c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800910e:	3301      	adds	r3, #1
 8009110:	4447      	add	r7, r8
 8009112:	2b07      	cmp	r3, #7
 8009114:	9724      	str	r7, [sp, #144]	; 0x90
 8009116:	9323      	str	r3, [sp, #140]	; 0x8c
 8009118:	dc7b      	bgt.n	8009212 <_svfprintf_r+0x1032>
 800911a:	3408      	adds	r4, #8
 800911c:	f1b8 0f00 	cmp.w	r8, #0
 8009120:	bfac      	ite	ge
 8009122:	eba5 0708 	subge.w	r7, r5, r8
 8009126:	462f      	movlt	r7, r5
 8009128:	2f00      	cmp	r7, #0
 800912a:	dd1a      	ble.n	8009162 <_svfprintf_r+0xf82>
 800912c:	f8df 8368 	ldr.w	r8, [pc, #872]	; 8009498 <_svfprintf_r+0x12b8>
 8009130:	f8c4 8000 	str.w	r8, [r4]
 8009134:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009138:	2f10      	cmp	r7, #16
 800913a:	f103 0301 	add.w	r3, r3, #1
 800913e:	f104 0108 	add.w	r1, r4, #8
 8009142:	dc70      	bgt.n	8009226 <_svfprintf_r+0x1046>
 8009144:	6067      	str	r7, [r4, #4]
 8009146:	2b07      	cmp	r3, #7
 8009148:	4417      	add	r7, r2
 800914a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800914e:	dd7d      	ble.n	800924c <_svfprintf_r+0x106c>
 8009150:	aa22      	add	r2, sp, #136	; 0x88
 8009152:	4649      	mov	r1, r9
 8009154:	4650      	mov	r0, sl
 8009156:	f001 fd87 	bl	800ac68 <__ssprint_r>
 800915a:	2800      	cmp	r0, #0
 800915c:	f040 81d4 	bne.w	8009508 <_svfprintf_r+0x1328>
 8009160:	ac25      	add	r4, sp, #148	; 0x94
 8009162:	9b03      	ldr	r3, [sp, #12]
 8009164:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8009168:	441d      	add	r5, r3
 800916a:	d00a      	beq.n	8009182 <_svfprintf_r+0xfa2>
 800916c:	9b08      	ldr	r3, [sp, #32]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d16e      	bne.n	8009250 <_svfprintf_r+0x1070>
 8009172:	2e00      	cmp	r6, #0
 8009174:	d16e      	bne.n	8009254 <_svfprintf_r+0x1074>
 8009176:	9b03      	ldr	r3, [sp, #12]
 8009178:	9a05      	ldr	r2, [sp, #20]
 800917a:	4413      	add	r3, r2
 800917c:	429d      	cmp	r5, r3
 800917e:	bf28      	it	cs
 8009180:	461d      	movcs	r5, r3
 8009182:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009184:	9a05      	ldr	r2, [sp, #20]
 8009186:	4293      	cmp	r3, r2
 8009188:	db02      	blt.n	8009190 <_svfprintf_r+0xfb0>
 800918a:	f01b 0f01 	tst.w	fp, #1
 800918e:	d00e      	beq.n	80091ae <_svfprintf_r+0xfce>
 8009190:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009192:	6023      	str	r3, [r4, #0]
 8009194:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009198:	6063      	str	r3, [r4, #4]
 800919a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800919c:	4413      	add	r3, r2
 800919e:	9324      	str	r3, [sp, #144]	; 0x90
 80091a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091a2:	3301      	adds	r3, #1
 80091a4:	2b07      	cmp	r3, #7
 80091a6:	9323      	str	r3, [sp, #140]	; 0x8c
 80091a8:	f300 80d2 	bgt.w	8009350 <_svfprintf_r+0x1170>
 80091ac:	3408      	adds	r4, #8
 80091ae:	9b05      	ldr	r3, [sp, #20]
 80091b0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80091b2:	9a05      	ldr	r2, [sp, #20]
 80091b4:	1b9e      	subs	r6, r3, r6
 80091b6:	9b03      	ldr	r3, [sp, #12]
 80091b8:	4413      	add	r3, r2
 80091ba:	1b5b      	subs	r3, r3, r5
 80091bc:	429e      	cmp	r6, r3
 80091be:	bfa8      	it	ge
 80091c0:	461e      	movge	r6, r3
 80091c2:	2e00      	cmp	r6, #0
 80091c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80091c6:	dd0a      	ble.n	80091de <_svfprintf_r+0xffe>
 80091c8:	4433      	add	r3, r6
 80091ca:	9324      	str	r3, [sp, #144]	; 0x90
 80091cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091ce:	3301      	adds	r3, #1
 80091d0:	2b07      	cmp	r3, #7
 80091d2:	e9c4 5600 	strd	r5, r6, [r4]
 80091d6:	9323      	str	r3, [sp, #140]	; 0x8c
 80091d8:	f300 80c4 	bgt.w	8009364 <_svfprintf_r+0x1184>
 80091dc:	3408      	adds	r4, #8
 80091de:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80091e0:	9b05      	ldr	r3, [sp, #20]
 80091e2:	2e00      	cmp	r6, #0
 80091e4:	eba3 0505 	sub.w	r5, r3, r5
 80091e8:	bfa8      	it	ge
 80091ea:	1bad      	subge	r5, r5, r6
 80091ec:	2d00      	cmp	r5, #0
 80091ee:	f77f abda 	ble.w	80089a6 <_svfprintf_r+0x7c6>
 80091f2:	4ea9      	ldr	r6, [pc, #676]	; (8009498 <_svfprintf_r+0x12b8>)
 80091f4:	2710      	movs	r7, #16
 80091f6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80091fa:	2d10      	cmp	r5, #16
 80091fc:	f103 0301 	add.w	r3, r3, #1
 8009200:	f104 0108 	add.w	r1, r4, #8
 8009204:	6026      	str	r6, [r4, #0]
 8009206:	f300 80b7 	bgt.w	8009378 <_svfprintf_r+0x1198>
 800920a:	442a      	add	r2, r5
 800920c:	6065      	str	r5, [r4, #4]
 800920e:	9224      	str	r2, [sp, #144]	; 0x90
 8009210:	e6c7      	b.n	8008fa2 <_svfprintf_r+0xdc2>
 8009212:	aa22      	add	r2, sp, #136	; 0x88
 8009214:	4649      	mov	r1, r9
 8009216:	4650      	mov	r0, sl
 8009218:	f001 fd26 	bl	800ac68 <__ssprint_r>
 800921c:	2800      	cmp	r0, #0
 800921e:	f040 8173 	bne.w	8009508 <_svfprintf_r+0x1328>
 8009222:	ac25      	add	r4, sp, #148	; 0x94
 8009224:	e77a      	b.n	800911c <_svfprintf_r+0xf3c>
 8009226:	2010      	movs	r0, #16
 8009228:	4402      	add	r2, r0
 800922a:	2b07      	cmp	r3, #7
 800922c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009230:	6060      	str	r0, [r4, #4]
 8009232:	dd08      	ble.n	8009246 <_svfprintf_r+0x1066>
 8009234:	aa22      	add	r2, sp, #136	; 0x88
 8009236:	4649      	mov	r1, r9
 8009238:	4650      	mov	r0, sl
 800923a:	f001 fd15 	bl	800ac68 <__ssprint_r>
 800923e:	2800      	cmp	r0, #0
 8009240:	f040 8162 	bne.w	8009508 <_svfprintf_r+0x1328>
 8009244:	a925      	add	r1, sp, #148	; 0x94
 8009246:	3f10      	subs	r7, #16
 8009248:	460c      	mov	r4, r1
 800924a:	e771      	b.n	8009130 <_svfprintf_r+0xf50>
 800924c:	460c      	mov	r4, r1
 800924e:	e788      	b.n	8009162 <_svfprintf_r+0xf82>
 8009250:	2e00      	cmp	r6, #0
 8009252:	d04d      	beq.n	80092f0 <_svfprintf_r+0x1110>
 8009254:	3e01      	subs	r6, #1
 8009256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009258:	6023      	str	r3, [r4, #0]
 800925a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800925c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800925e:	6063      	str	r3, [r4, #4]
 8009260:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009262:	4413      	add	r3, r2
 8009264:	9324      	str	r3, [sp, #144]	; 0x90
 8009266:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009268:	3301      	adds	r3, #1
 800926a:	2b07      	cmp	r3, #7
 800926c:	9323      	str	r3, [sp, #140]	; 0x8c
 800926e:	dc46      	bgt.n	80092fe <_svfprintf_r+0x111e>
 8009270:	3408      	adds	r4, #8
 8009272:	9b03      	ldr	r3, [sp, #12]
 8009274:	9a05      	ldr	r2, [sp, #20]
 8009276:	eb03 0802 	add.w	r8, r3, r2
 800927a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	eba8 0805 	sub.w	r8, r8, r5
 8009282:	4598      	cmp	r8, r3
 8009284:	bfa8      	it	ge
 8009286:	4698      	movge	r8, r3
 8009288:	f1b8 0f00 	cmp.w	r8, #0
 800928c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800928e:	dd09      	ble.n	80092a4 <_svfprintf_r+0x10c4>
 8009290:	4443      	add	r3, r8
 8009292:	9324      	str	r3, [sp, #144]	; 0x90
 8009294:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009296:	3301      	adds	r3, #1
 8009298:	2b07      	cmp	r3, #7
 800929a:	e9c4 5800 	strd	r5, r8, [r4]
 800929e:	9323      	str	r3, [sp, #140]	; 0x8c
 80092a0:	dc37      	bgt.n	8009312 <_svfprintf_r+0x1132>
 80092a2:	3408      	adds	r4, #8
 80092a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a6:	781f      	ldrb	r7, [r3, #0]
 80092a8:	f1b8 0f00 	cmp.w	r8, #0
 80092ac:	bfa8      	it	ge
 80092ae:	eba7 0708 	subge.w	r7, r7, r8
 80092b2:	2f00      	cmp	r7, #0
 80092b4:	dd18      	ble.n	80092e8 <_svfprintf_r+0x1108>
 80092b6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80092ba:	4877      	ldr	r0, [pc, #476]	; (8009498 <_svfprintf_r+0x12b8>)
 80092bc:	6020      	str	r0, [r4, #0]
 80092be:	2f10      	cmp	r7, #16
 80092c0:	f103 0301 	add.w	r3, r3, #1
 80092c4:	f104 0108 	add.w	r1, r4, #8
 80092c8:	dc2d      	bgt.n	8009326 <_svfprintf_r+0x1146>
 80092ca:	443a      	add	r2, r7
 80092cc:	2b07      	cmp	r3, #7
 80092ce:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80092d2:	6067      	str	r7, [r4, #4]
 80092d4:	dd3a      	ble.n	800934c <_svfprintf_r+0x116c>
 80092d6:	aa22      	add	r2, sp, #136	; 0x88
 80092d8:	4649      	mov	r1, r9
 80092da:	4650      	mov	r0, sl
 80092dc:	f001 fcc4 	bl	800ac68 <__ssprint_r>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	f040 8111 	bne.w	8009508 <_svfprintf_r+0x1328>
 80092e6:	ac25      	add	r4, sp, #148	; 0x94
 80092e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	441d      	add	r5, r3
 80092ee:	e73d      	b.n	800916c <_svfprintf_r+0xf8c>
 80092f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f2:	3b01      	subs	r3, #1
 80092f4:	9309      	str	r3, [sp, #36]	; 0x24
 80092f6:	9b08      	ldr	r3, [sp, #32]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	9308      	str	r3, [sp, #32]
 80092fc:	e7ab      	b.n	8009256 <_svfprintf_r+0x1076>
 80092fe:	aa22      	add	r2, sp, #136	; 0x88
 8009300:	4649      	mov	r1, r9
 8009302:	4650      	mov	r0, sl
 8009304:	f001 fcb0 	bl	800ac68 <__ssprint_r>
 8009308:	2800      	cmp	r0, #0
 800930a:	f040 80fd 	bne.w	8009508 <_svfprintf_r+0x1328>
 800930e:	ac25      	add	r4, sp, #148	; 0x94
 8009310:	e7af      	b.n	8009272 <_svfprintf_r+0x1092>
 8009312:	aa22      	add	r2, sp, #136	; 0x88
 8009314:	4649      	mov	r1, r9
 8009316:	4650      	mov	r0, sl
 8009318:	f001 fca6 	bl	800ac68 <__ssprint_r>
 800931c:	2800      	cmp	r0, #0
 800931e:	f040 80f3 	bne.w	8009508 <_svfprintf_r+0x1328>
 8009322:	ac25      	add	r4, sp, #148	; 0x94
 8009324:	e7be      	b.n	80092a4 <_svfprintf_r+0x10c4>
 8009326:	2010      	movs	r0, #16
 8009328:	4402      	add	r2, r0
 800932a:	2b07      	cmp	r3, #7
 800932c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009330:	6060      	str	r0, [r4, #4]
 8009332:	dd08      	ble.n	8009346 <_svfprintf_r+0x1166>
 8009334:	aa22      	add	r2, sp, #136	; 0x88
 8009336:	4649      	mov	r1, r9
 8009338:	4650      	mov	r0, sl
 800933a:	f001 fc95 	bl	800ac68 <__ssprint_r>
 800933e:	2800      	cmp	r0, #0
 8009340:	f040 80e2 	bne.w	8009508 <_svfprintf_r+0x1328>
 8009344:	a925      	add	r1, sp, #148	; 0x94
 8009346:	3f10      	subs	r7, #16
 8009348:	460c      	mov	r4, r1
 800934a:	e7b4      	b.n	80092b6 <_svfprintf_r+0x10d6>
 800934c:	460c      	mov	r4, r1
 800934e:	e7cb      	b.n	80092e8 <_svfprintf_r+0x1108>
 8009350:	aa22      	add	r2, sp, #136	; 0x88
 8009352:	4649      	mov	r1, r9
 8009354:	4650      	mov	r0, sl
 8009356:	f001 fc87 	bl	800ac68 <__ssprint_r>
 800935a:	2800      	cmp	r0, #0
 800935c:	f040 80d4 	bne.w	8009508 <_svfprintf_r+0x1328>
 8009360:	ac25      	add	r4, sp, #148	; 0x94
 8009362:	e724      	b.n	80091ae <_svfprintf_r+0xfce>
 8009364:	aa22      	add	r2, sp, #136	; 0x88
 8009366:	4649      	mov	r1, r9
 8009368:	4650      	mov	r0, sl
 800936a:	f001 fc7d 	bl	800ac68 <__ssprint_r>
 800936e:	2800      	cmp	r0, #0
 8009370:	f040 80ca 	bne.w	8009508 <_svfprintf_r+0x1328>
 8009374:	ac25      	add	r4, sp, #148	; 0x94
 8009376:	e732      	b.n	80091de <_svfprintf_r+0xffe>
 8009378:	3210      	adds	r2, #16
 800937a:	2b07      	cmp	r3, #7
 800937c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009380:	6067      	str	r7, [r4, #4]
 8009382:	dd08      	ble.n	8009396 <_svfprintf_r+0x11b6>
 8009384:	aa22      	add	r2, sp, #136	; 0x88
 8009386:	4649      	mov	r1, r9
 8009388:	4650      	mov	r0, sl
 800938a:	f001 fc6d 	bl	800ac68 <__ssprint_r>
 800938e:	2800      	cmp	r0, #0
 8009390:	f040 80ba 	bne.w	8009508 <_svfprintf_r+0x1328>
 8009394:	a925      	add	r1, sp, #148	; 0x94
 8009396:	3d10      	subs	r5, #16
 8009398:	460c      	mov	r4, r1
 800939a:	e72c      	b.n	80091f6 <_svfprintf_r+0x1016>
 800939c:	9a05      	ldr	r2, [sp, #20]
 800939e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093a0:	2a01      	cmp	r2, #1
 80093a2:	9a03      	ldr	r2, [sp, #12]
 80093a4:	6022      	str	r2, [r4, #0]
 80093a6:	f107 0701 	add.w	r7, r7, #1
 80093aa:	f103 0301 	add.w	r3, r3, #1
 80093ae:	f04f 0201 	mov.w	r2, #1
 80093b2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80093b6:	f104 0508 	add.w	r5, r4, #8
 80093ba:	6062      	str	r2, [r4, #4]
 80093bc:	dc02      	bgt.n	80093c4 <_svfprintf_r+0x11e4>
 80093be:	f01b 0f01 	tst.w	fp, #1
 80093c2:	d07b      	beq.n	80094bc <_svfprintf_r+0x12dc>
 80093c4:	2b07      	cmp	r3, #7
 80093c6:	dd08      	ble.n	80093da <_svfprintf_r+0x11fa>
 80093c8:	aa22      	add	r2, sp, #136	; 0x88
 80093ca:	4649      	mov	r1, r9
 80093cc:	4650      	mov	r0, sl
 80093ce:	f001 fc4b 	bl	800ac68 <__ssprint_r>
 80093d2:	2800      	cmp	r0, #0
 80093d4:	f040 8098 	bne.w	8009508 <_svfprintf_r+0x1328>
 80093d8:	ad25      	add	r5, sp, #148	; 0x94
 80093da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093dc:	602b      	str	r3, [r5, #0]
 80093de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093e2:	606b      	str	r3, [r5, #4]
 80093e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80093e6:	4413      	add	r3, r2
 80093e8:	9324      	str	r3, [sp, #144]	; 0x90
 80093ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80093ec:	3301      	adds	r3, #1
 80093ee:	2b07      	cmp	r3, #7
 80093f0:	9323      	str	r3, [sp, #140]	; 0x8c
 80093f2:	dc32      	bgt.n	800945a <_svfprintf_r+0x127a>
 80093f4:	3508      	adds	r5, #8
 80093f6:	9b05      	ldr	r3, [sp, #20]
 80093f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80093fc:	1e5c      	subs	r4, r3, #1
 80093fe:	2200      	movs	r2, #0
 8009400:	2300      	movs	r3, #0
 8009402:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 8009406:	f7f7 fb67 	bl	8000ad8 <__aeabi_dcmpeq>
 800940a:	2800      	cmp	r0, #0
 800940c:	d12e      	bne.n	800946c <_svfprintf_r+0x128c>
 800940e:	9b03      	ldr	r3, [sp, #12]
 8009410:	3301      	adds	r3, #1
 8009412:	e9c5 3400 	strd	r3, r4, [r5]
 8009416:	9b05      	ldr	r3, [sp, #20]
 8009418:	3701      	adds	r7, #1
 800941a:	3e01      	subs	r6, #1
 800941c:	441e      	add	r6, r3
 800941e:	2f07      	cmp	r7, #7
 8009420:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 8009424:	dd4d      	ble.n	80094c2 <_svfprintf_r+0x12e2>
 8009426:	aa22      	add	r2, sp, #136	; 0x88
 8009428:	4649      	mov	r1, r9
 800942a:	4650      	mov	r0, sl
 800942c:	f001 fc1c 	bl	800ac68 <__ssprint_r>
 8009430:	2800      	cmp	r0, #0
 8009432:	d169      	bne.n	8009508 <_svfprintf_r+0x1328>
 8009434:	ad25      	add	r5, sp, #148	; 0x94
 8009436:	ab1e      	add	r3, sp, #120	; 0x78
 8009438:	602b      	str	r3, [r5, #0]
 800943a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800943c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800943e:	606b      	str	r3, [r5, #4]
 8009440:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009442:	4413      	add	r3, r2
 8009444:	9324      	str	r3, [sp, #144]	; 0x90
 8009446:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009448:	3301      	adds	r3, #1
 800944a:	2b07      	cmp	r3, #7
 800944c:	9323      	str	r3, [sp, #140]	; 0x8c
 800944e:	f73f adac 	bgt.w	8008faa <_svfprintf_r+0xdca>
 8009452:	f105 0408 	add.w	r4, r5, #8
 8009456:	f7ff baa6 	b.w	80089a6 <_svfprintf_r+0x7c6>
 800945a:	aa22      	add	r2, sp, #136	; 0x88
 800945c:	4649      	mov	r1, r9
 800945e:	4650      	mov	r0, sl
 8009460:	f001 fc02 	bl	800ac68 <__ssprint_r>
 8009464:	2800      	cmp	r0, #0
 8009466:	d14f      	bne.n	8009508 <_svfprintf_r+0x1328>
 8009468:	ad25      	add	r5, sp, #148	; 0x94
 800946a:	e7c4      	b.n	80093f6 <_svfprintf_r+0x1216>
 800946c:	2c00      	cmp	r4, #0
 800946e:	dde2      	ble.n	8009436 <_svfprintf_r+0x1256>
 8009470:	4e09      	ldr	r6, [pc, #36]	; (8009498 <_svfprintf_r+0x12b8>)
 8009472:	2710      	movs	r7, #16
 8009474:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009478:	2c10      	cmp	r4, #16
 800947a:	f103 0301 	add.w	r3, r3, #1
 800947e:	f105 0108 	add.w	r1, r5, #8
 8009482:	602e      	str	r6, [r5, #0]
 8009484:	dc0a      	bgt.n	800949c <_svfprintf_r+0x12bc>
 8009486:	606c      	str	r4, [r5, #4]
 8009488:	2b07      	cmp	r3, #7
 800948a:	4414      	add	r4, r2
 800948c:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8009490:	dcc9      	bgt.n	8009426 <_svfprintf_r+0x1246>
 8009492:	460d      	mov	r5, r1
 8009494:	e7cf      	b.n	8009436 <_svfprintf_r+0x1256>
 8009496:	bf00      	nop
 8009498:	0800d3dc 	.word	0x0800d3dc
 800949c:	3210      	adds	r2, #16
 800949e:	2b07      	cmp	r3, #7
 80094a0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80094a4:	606f      	str	r7, [r5, #4]
 80094a6:	dd06      	ble.n	80094b6 <_svfprintf_r+0x12d6>
 80094a8:	aa22      	add	r2, sp, #136	; 0x88
 80094aa:	4649      	mov	r1, r9
 80094ac:	4650      	mov	r0, sl
 80094ae:	f001 fbdb 	bl	800ac68 <__ssprint_r>
 80094b2:	bb48      	cbnz	r0, 8009508 <_svfprintf_r+0x1328>
 80094b4:	a925      	add	r1, sp, #148	; 0x94
 80094b6:	3c10      	subs	r4, #16
 80094b8:	460d      	mov	r5, r1
 80094ba:	e7db      	b.n	8009474 <_svfprintf_r+0x1294>
 80094bc:	2b07      	cmp	r3, #7
 80094be:	ddba      	ble.n	8009436 <_svfprintf_r+0x1256>
 80094c0:	e7b1      	b.n	8009426 <_svfprintf_r+0x1246>
 80094c2:	3508      	adds	r5, #8
 80094c4:	e7b7      	b.n	8009436 <_svfprintf_r+0x1256>
 80094c6:	460c      	mov	r4, r1
 80094c8:	f7ff ba6d 	b.w	80089a6 <_svfprintf_r+0x7c6>
 80094cc:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80094d0:	1a9d      	subs	r5, r3, r2
 80094d2:	2d00      	cmp	r5, #0
 80094d4:	f77f aa6b 	ble.w	80089ae <_svfprintf_r+0x7ce>
 80094d8:	4e37      	ldr	r6, [pc, #220]	; (80095b8 <_svfprintf_r+0x13d8>)
 80094da:	2710      	movs	r7, #16
 80094dc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80094e0:	2d10      	cmp	r5, #16
 80094e2:	f103 0301 	add.w	r3, r3, #1
 80094e6:	6026      	str	r6, [r4, #0]
 80094e8:	dc18      	bgt.n	800951c <_svfprintf_r+0x133c>
 80094ea:	6065      	str	r5, [r4, #4]
 80094ec:	2b07      	cmp	r3, #7
 80094ee:	4415      	add	r5, r2
 80094f0:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 80094f4:	f77f aa5b 	ble.w	80089ae <_svfprintf_r+0x7ce>
 80094f8:	aa22      	add	r2, sp, #136	; 0x88
 80094fa:	4649      	mov	r1, r9
 80094fc:	4650      	mov	r0, sl
 80094fe:	f001 fbb3 	bl	800ac68 <__ssprint_r>
 8009502:	2800      	cmp	r0, #0
 8009504:	f43f aa53 	beq.w	80089ae <_svfprintf_r+0x7ce>
 8009508:	9b04      	ldr	r3, [sp, #16]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f43f a874 	beq.w	80085f8 <_svfprintf_r+0x418>
 8009510:	4619      	mov	r1, r3
 8009512:	4650      	mov	r0, sl
 8009514:	f7fe fb5c 	bl	8007bd0 <_free_r>
 8009518:	f7ff b86e 	b.w	80085f8 <_svfprintf_r+0x418>
 800951c:	3210      	adds	r2, #16
 800951e:	2b07      	cmp	r3, #7
 8009520:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009524:	6067      	str	r7, [r4, #4]
 8009526:	dc02      	bgt.n	800952e <_svfprintf_r+0x134e>
 8009528:	3408      	adds	r4, #8
 800952a:	3d10      	subs	r5, #16
 800952c:	e7d6      	b.n	80094dc <_svfprintf_r+0x12fc>
 800952e:	aa22      	add	r2, sp, #136	; 0x88
 8009530:	4649      	mov	r1, r9
 8009532:	4650      	mov	r0, sl
 8009534:	f001 fb98 	bl	800ac68 <__ssprint_r>
 8009538:	2800      	cmp	r0, #0
 800953a:	d1e5      	bne.n	8009508 <_svfprintf_r+0x1328>
 800953c:	ac25      	add	r4, sp, #148	; 0x94
 800953e:	e7f4      	b.n	800952a <_svfprintf_r+0x134a>
 8009540:	9904      	ldr	r1, [sp, #16]
 8009542:	4650      	mov	r0, sl
 8009544:	f7fe fb44 	bl	8007bd0 <_free_r>
 8009548:	f7ff ba49 	b.w	80089de <_svfprintf_r+0x7fe>
 800954c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800954e:	2b00      	cmp	r3, #0
 8009550:	f43f a852 	beq.w	80085f8 <_svfprintf_r+0x418>
 8009554:	aa22      	add	r2, sp, #136	; 0x88
 8009556:	4649      	mov	r1, r9
 8009558:	4650      	mov	r0, sl
 800955a:	f001 fb85 	bl	800ac68 <__ssprint_r>
 800955e:	f7ff b84b 	b.w	80085f8 <_svfprintf_r+0x418>
 8009562:	ea55 0206 	orrs.w	r2, r5, r6
 8009566:	f8cd b010 	str.w	fp, [sp, #16]
 800956a:	f43f ab5e 	beq.w	8008c2a <_svfprintf_r+0xa4a>
 800956e:	2b01      	cmp	r3, #1
 8009570:	f43f abff 	beq.w	8008d72 <_svfprintf_r+0xb92>
 8009574:	2b02      	cmp	r3, #2
 8009576:	ab4e      	add	r3, sp, #312	; 0x138
 8009578:	9303      	str	r3, [sp, #12]
 800957a:	f43f ac4d 	beq.w	8008e18 <_svfprintf_r+0xc38>
 800957e:	9a03      	ldr	r2, [sp, #12]
 8009580:	f005 0307 	and.w	r3, r5, #7
 8009584:	4611      	mov	r1, r2
 8009586:	3330      	adds	r3, #48	; 0x30
 8009588:	f801 3d01 	strb.w	r3, [r1, #-1]!
 800958c:	08ed      	lsrs	r5, r5, #3
 800958e:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 8009592:	08f6      	lsrs	r6, r6, #3
 8009594:	9103      	str	r1, [sp, #12]
 8009596:	ea55 0106 	orrs.w	r1, r5, r6
 800959a:	d1f0      	bne.n	800957e <_svfprintf_r+0x139e>
 800959c:	9904      	ldr	r1, [sp, #16]
 800959e:	07c9      	lsls	r1, r1, #31
 80095a0:	f57f ac2a 	bpl.w	8008df8 <_svfprintf_r+0xc18>
 80095a4:	2b30      	cmp	r3, #48	; 0x30
 80095a6:	f43f ac27 	beq.w	8008df8 <_svfprintf_r+0xc18>
 80095aa:	9903      	ldr	r1, [sp, #12]
 80095ac:	2330      	movs	r3, #48	; 0x30
 80095ae:	f801 3c01 	strb.w	r3, [r1, #-1]
 80095b2:	1e93      	subs	r3, r2, #2
 80095b4:	9303      	str	r3, [sp, #12]
 80095b6:	e41f      	b.n	8008df8 <_svfprintf_r+0xc18>
 80095b8:	0800d3cc 	.word	0x0800d3cc

080095bc <_fclose_r>:
 80095bc:	b570      	push	{r4, r5, r6, lr}
 80095be:	4606      	mov	r6, r0
 80095c0:	460c      	mov	r4, r1
 80095c2:	b911      	cbnz	r1, 80095ca <_fclose_r+0xe>
 80095c4:	2500      	movs	r5, #0
 80095c6:	4628      	mov	r0, r5
 80095c8:	bd70      	pop	{r4, r5, r6, pc}
 80095ca:	b118      	cbz	r0, 80095d4 <_fclose_r+0x18>
 80095cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80095ce:	b90b      	cbnz	r3, 80095d4 <_fclose_r+0x18>
 80095d0:	f7fe f970 	bl	80078b4 <__sinit>
 80095d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095d6:	07d8      	lsls	r0, r3, #31
 80095d8:	d405      	bmi.n	80095e6 <_fclose_r+0x2a>
 80095da:	89a3      	ldrh	r3, [r4, #12]
 80095dc:	0599      	lsls	r1, r3, #22
 80095de:	d402      	bmi.n	80095e6 <_fclose_r+0x2a>
 80095e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095e2:	f7fe fa8f 	bl	8007b04 <__retarget_lock_acquire_recursive>
 80095e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ea:	b93b      	cbnz	r3, 80095fc <_fclose_r+0x40>
 80095ec:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80095ee:	f015 0501 	ands.w	r5, r5, #1
 80095f2:	d1e7      	bne.n	80095c4 <_fclose_r+0x8>
 80095f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095f6:	f7fe fa86 	bl	8007b06 <__retarget_lock_release_recursive>
 80095fa:	e7e4      	b.n	80095c6 <_fclose_r+0xa>
 80095fc:	4621      	mov	r1, r4
 80095fe:	4630      	mov	r0, r6
 8009600:	f000 f834 	bl	800966c <__sflush_r>
 8009604:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009606:	4605      	mov	r5, r0
 8009608:	b133      	cbz	r3, 8009618 <_fclose_r+0x5c>
 800960a:	69e1      	ldr	r1, [r4, #28]
 800960c:	4630      	mov	r0, r6
 800960e:	4798      	blx	r3
 8009610:	2800      	cmp	r0, #0
 8009612:	bfb8      	it	lt
 8009614:	f04f 35ff 	movlt.w	r5, #4294967295
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	061a      	lsls	r2, r3, #24
 800961c:	d503      	bpl.n	8009626 <_fclose_r+0x6a>
 800961e:	6921      	ldr	r1, [r4, #16]
 8009620:	4630      	mov	r0, r6
 8009622:	f7fe fad5 	bl	8007bd0 <_free_r>
 8009626:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009628:	b141      	cbz	r1, 800963c <_fclose_r+0x80>
 800962a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800962e:	4299      	cmp	r1, r3
 8009630:	d002      	beq.n	8009638 <_fclose_r+0x7c>
 8009632:	4630      	mov	r0, r6
 8009634:	f7fe facc 	bl	8007bd0 <_free_r>
 8009638:	2300      	movs	r3, #0
 800963a:	6323      	str	r3, [r4, #48]	; 0x30
 800963c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800963e:	b121      	cbz	r1, 800964a <_fclose_r+0x8e>
 8009640:	4630      	mov	r0, r6
 8009642:	f7fe fac5 	bl	8007bd0 <_free_r>
 8009646:	2300      	movs	r3, #0
 8009648:	6463      	str	r3, [r4, #68]	; 0x44
 800964a:	f7fe f927 	bl	800789c <__sfp_lock_acquire>
 800964e:	2300      	movs	r3, #0
 8009650:	81a3      	strh	r3, [r4, #12]
 8009652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009654:	07db      	lsls	r3, r3, #31
 8009656:	d402      	bmi.n	800965e <_fclose_r+0xa2>
 8009658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800965a:	f7fe fa54 	bl	8007b06 <__retarget_lock_release_recursive>
 800965e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009660:	f7fe fa4f 	bl	8007b02 <__retarget_lock_close_recursive>
 8009664:	f7fe f920 	bl	80078a8 <__sfp_lock_release>
 8009668:	e7ad      	b.n	80095c6 <_fclose_r+0xa>
	...

0800966c <__sflush_r>:
 800966c:	898b      	ldrh	r3, [r1, #12]
 800966e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009672:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009676:	4605      	mov	r5, r0
 8009678:	0718      	lsls	r0, r3, #28
 800967a:	460c      	mov	r4, r1
 800967c:	d45f      	bmi.n	800973e <__sflush_r+0xd2>
 800967e:	684b      	ldr	r3, [r1, #4]
 8009680:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009684:	2b00      	cmp	r3, #0
 8009686:	818a      	strh	r2, [r1, #12]
 8009688:	dc05      	bgt.n	8009696 <__sflush_r+0x2a>
 800968a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800968c:	2b00      	cmp	r3, #0
 800968e:	dc02      	bgt.n	8009696 <__sflush_r+0x2a>
 8009690:	2000      	movs	r0, #0
 8009692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009698:	2e00      	cmp	r6, #0
 800969a:	d0f9      	beq.n	8009690 <__sflush_r+0x24>
 800969c:	2300      	movs	r3, #0
 800969e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096a2:	682f      	ldr	r7, [r5, #0]
 80096a4:	69e1      	ldr	r1, [r4, #28]
 80096a6:	602b      	str	r3, [r5, #0]
 80096a8:	d036      	beq.n	8009718 <__sflush_r+0xac>
 80096aa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	075a      	lsls	r2, r3, #29
 80096b0:	d505      	bpl.n	80096be <__sflush_r+0x52>
 80096b2:	6863      	ldr	r3, [r4, #4]
 80096b4:	1ac0      	subs	r0, r0, r3
 80096b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80096b8:	b10b      	cbz	r3, 80096be <__sflush_r+0x52>
 80096ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80096bc:	1ac0      	subs	r0, r0, r3
 80096be:	2300      	movs	r3, #0
 80096c0:	4602      	mov	r2, r0
 80096c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096c4:	69e1      	ldr	r1, [r4, #28]
 80096c6:	4628      	mov	r0, r5
 80096c8:	47b0      	blx	r6
 80096ca:	1c43      	adds	r3, r0, #1
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	d106      	bne.n	80096de <__sflush_r+0x72>
 80096d0:	6829      	ldr	r1, [r5, #0]
 80096d2:	291d      	cmp	r1, #29
 80096d4:	d82f      	bhi.n	8009736 <__sflush_r+0xca>
 80096d6:	4a2b      	ldr	r2, [pc, #172]	; (8009784 <__sflush_r+0x118>)
 80096d8:	410a      	asrs	r2, r1
 80096da:	07d6      	lsls	r6, r2, #31
 80096dc:	d42b      	bmi.n	8009736 <__sflush_r+0xca>
 80096de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80096e2:	b21b      	sxth	r3, r3
 80096e4:	2200      	movs	r2, #0
 80096e6:	6062      	str	r2, [r4, #4]
 80096e8:	04d9      	lsls	r1, r3, #19
 80096ea:	6922      	ldr	r2, [r4, #16]
 80096ec:	81a3      	strh	r3, [r4, #12]
 80096ee:	6022      	str	r2, [r4, #0]
 80096f0:	d504      	bpl.n	80096fc <__sflush_r+0x90>
 80096f2:	1c42      	adds	r2, r0, #1
 80096f4:	d101      	bne.n	80096fa <__sflush_r+0x8e>
 80096f6:	682b      	ldr	r3, [r5, #0]
 80096f8:	b903      	cbnz	r3, 80096fc <__sflush_r+0x90>
 80096fa:	6520      	str	r0, [r4, #80]	; 0x50
 80096fc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80096fe:	602f      	str	r7, [r5, #0]
 8009700:	2900      	cmp	r1, #0
 8009702:	d0c5      	beq.n	8009690 <__sflush_r+0x24>
 8009704:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8009708:	4299      	cmp	r1, r3
 800970a:	d002      	beq.n	8009712 <__sflush_r+0xa6>
 800970c:	4628      	mov	r0, r5
 800970e:	f7fe fa5f 	bl	8007bd0 <_free_r>
 8009712:	2000      	movs	r0, #0
 8009714:	6320      	str	r0, [r4, #48]	; 0x30
 8009716:	e7bc      	b.n	8009692 <__sflush_r+0x26>
 8009718:	2301      	movs	r3, #1
 800971a:	4628      	mov	r0, r5
 800971c:	47b0      	blx	r6
 800971e:	1c41      	adds	r1, r0, #1
 8009720:	d1c4      	bne.n	80096ac <__sflush_r+0x40>
 8009722:	682b      	ldr	r3, [r5, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d0c1      	beq.n	80096ac <__sflush_r+0x40>
 8009728:	2b1d      	cmp	r3, #29
 800972a:	d001      	beq.n	8009730 <__sflush_r+0xc4>
 800972c:	2b16      	cmp	r3, #22
 800972e:	d101      	bne.n	8009734 <__sflush_r+0xc8>
 8009730:	602f      	str	r7, [r5, #0]
 8009732:	e7ad      	b.n	8009690 <__sflush_r+0x24>
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800973a:	81a3      	strh	r3, [r4, #12]
 800973c:	e7a9      	b.n	8009692 <__sflush_r+0x26>
 800973e:	690f      	ldr	r7, [r1, #16]
 8009740:	2f00      	cmp	r7, #0
 8009742:	d0a5      	beq.n	8009690 <__sflush_r+0x24>
 8009744:	079b      	lsls	r3, r3, #30
 8009746:	680e      	ldr	r6, [r1, #0]
 8009748:	bf08      	it	eq
 800974a:	694b      	ldreq	r3, [r1, #20]
 800974c:	600f      	str	r7, [r1, #0]
 800974e:	bf18      	it	ne
 8009750:	2300      	movne	r3, #0
 8009752:	eba6 0807 	sub.w	r8, r6, r7
 8009756:	608b      	str	r3, [r1, #8]
 8009758:	f1b8 0f00 	cmp.w	r8, #0
 800975c:	dd98      	ble.n	8009690 <__sflush_r+0x24>
 800975e:	69e1      	ldr	r1, [r4, #28]
 8009760:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009762:	4643      	mov	r3, r8
 8009764:	463a      	mov	r2, r7
 8009766:	4628      	mov	r0, r5
 8009768:	47b0      	blx	r6
 800976a:	2800      	cmp	r0, #0
 800976c:	dc06      	bgt.n	800977c <__sflush_r+0x110>
 800976e:	89a3      	ldrh	r3, [r4, #12]
 8009770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009774:	81a3      	strh	r3, [r4, #12]
 8009776:	f04f 30ff 	mov.w	r0, #4294967295
 800977a:	e78a      	b.n	8009692 <__sflush_r+0x26>
 800977c:	4407      	add	r7, r0
 800977e:	eba8 0800 	sub.w	r8, r8, r0
 8009782:	e7e9      	b.n	8009758 <__sflush_r+0xec>
 8009784:	dfbffffe 	.word	0xdfbffffe

08009788 <_fflush_r>:
 8009788:	b538      	push	{r3, r4, r5, lr}
 800978a:	460c      	mov	r4, r1
 800978c:	4605      	mov	r5, r0
 800978e:	b118      	cbz	r0, 8009798 <_fflush_r+0x10>
 8009790:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009792:	b90b      	cbnz	r3, 8009798 <_fflush_r+0x10>
 8009794:	f7fe f88e 	bl	80078b4 <__sinit>
 8009798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800979c:	b1bb      	cbz	r3, 80097ce <_fflush_r+0x46>
 800979e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097a0:	07d0      	lsls	r0, r2, #31
 80097a2:	d404      	bmi.n	80097ae <_fflush_r+0x26>
 80097a4:	0599      	lsls	r1, r3, #22
 80097a6:	d402      	bmi.n	80097ae <_fflush_r+0x26>
 80097a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097aa:	f7fe f9ab 	bl	8007b04 <__retarget_lock_acquire_recursive>
 80097ae:	4628      	mov	r0, r5
 80097b0:	4621      	mov	r1, r4
 80097b2:	f7ff ff5b 	bl	800966c <__sflush_r>
 80097b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097b8:	07da      	lsls	r2, r3, #31
 80097ba:	4605      	mov	r5, r0
 80097bc:	d405      	bmi.n	80097ca <_fflush_r+0x42>
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	059b      	lsls	r3, r3, #22
 80097c2:	d402      	bmi.n	80097ca <_fflush_r+0x42>
 80097c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097c6:	f7fe f99e 	bl	8007b06 <__retarget_lock_release_recursive>
 80097ca:	4628      	mov	r0, r5
 80097cc:	bd38      	pop	{r3, r4, r5, pc}
 80097ce:	461d      	mov	r5, r3
 80097d0:	e7fb      	b.n	80097ca <_fflush_r+0x42>

080097d2 <strncpy>:
 80097d2:	b510      	push	{r4, lr}
 80097d4:	3901      	subs	r1, #1
 80097d6:	4603      	mov	r3, r0
 80097d8:	b132      	cbz	r2, 80097e8 <strncpy+0x16>
 80097da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80097de:	f803 4b01 	strb.w	r4, [r3], #1
 80097e2:	3a01      	subs	r2, #1
 80097e4:	2c00      	cmp	r4, #0
 80097e6:	d1f7      	bne.n	80097d8 <strncpy+0x6>
 80097e8:	441a      	add	r2, r3
 80097ea:	2100      	movs	r1, #0
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d100      	bne.n	80097f2 <strncpy+0x20>
 80097f0:	bd10      	pop	{r4, pc}
 80097f2:	f803 1b01 	strb.w	r1, [r3], #1
 80097f6:	e7f9      	b.n	80097ec <strncpy+0x1a>

080097f8 <_localeconv_r>:
 80097f8:	4800      	ldr	r0, [pc, #0]	; (80097fc <_localeconv_r+0x4>)
 80097fa:	4770      	bx	lr
 80097fc:	20000730 	.word	0x20000730

08009800 <_sbrk_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4d06      	ldr	r5, [pc, #24]	; (800981c <_sbrk_r+0x1c>)
 8009804:	2300      	movs	r3, #0
 8009806:	4604      	mov	r4, r0
 8009808:	4608      	mov	r0, r1
 800980a:	602b      	str	r3, [r5, #0]
 800980c:	f7f7 fd8e 	bl	800132c <_sbrk>
 8009810:	1c43      	adds	r3, r0, #1
 8009812:	d102      	bne.n	800981a <_sbrk_r+0x1a>
 8009814:	682b      	ldr	r3, [r5, #0]
 8009816:	b103      	cbz	r3, 800981a <_sbrk_r+0x1a>
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	bd38      	pop	{r3, r4, r5, pc}
 800981c:	200024f0 	.word	0x200024f0

08009820 <__libc_fini_array>:
 8009820:	b538      	push	{r3, r4, r5, lr}
 8009822:	4d07      	ldr	r5, [pc, #28]	; (8009840 <__libc_fini_array+0x20>)
 8009824:	4c07      	ldr	r4, [pc, #28]	; (8009844 <__libc_fini_array+0x24>)
 8009826:	1b64      	subs	r4, r4, r5
 8009828:	10a4      	asrs	r4, r4, #2
 800982a:	b91c      	cbnz	r4, 8009834 <__libc_fini_array+0x14>
 800982c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009830:	f003 bd7c 	b.w	800d32c <_fini>
 8009834:	3c01      	subs	r4, #1
 8009836:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800983a:	4798      	blx	r3
 800983c:	e7f5      	b.n	800982a <__libc_fini_array+0xa>
 800983e:	bf00      	nop
 8009840:	0800d910 	.word	0x0800d910
 8009844:	0800d914 	.word	0x0800d914

08009848 <sysconf>:
 8009848:	2808      	cmp	r0, #8
 800984a:	b508      	push	{r3, lr}
 800984c:	d006      	beq.n	800985c <sysconf+0x14>
 800984e:	f7fe f92d 	bl	8007aac <__errno>
 8009852:	2316      	movs	r3, #22
 8009854:	6003      	str	r3, [r0, #0]
 8009856:	f04f 30ff 	mov.w	r0, #4294967295
 800985a:	bd08      	pop	{r3, pc}
 800985c:	2080      	movs	r0, #128	; 0x80
 800985e:	e7fc      	b.n	800985a <sysconf+0x12>

08009860 <frexp>:
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	2100      	movs	r1, #0
 8009864:	ec55 4b10 	vmov	r4, r5, d0
 8009868:	6001      	str	r1, [r0, #0]
 800986a:	4916      	ldr	r1, [pc, #88]	; (80098c4 <frexp+0x64>)
 800986c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8009870:	428a      	cmp	r2, r1
 8009872:	4606      	mov	r6, r0
 8009874:	462b      	mov	r3, r5
 8009876:	dc22      	bgt.n	80098be <frexp+0x5e>
 8009878:	ee10 1a10 	vmov	r1, s0
 800987c:	4311      	orrs	r1, r2
 800987e:	d01e      	beq.n	80098be <frexp+0x5e>
 8009880:	4911      	ldr	r1, [pc, #68]	; (80098c8 <frexp+0x68>)
 8009882:	4029      	ands	r1, r5
 8009884:	b969      	cbnz	r1, 80098a2 <frexp+0x42>
 8009886:	4b11      	ldr	r3, [pc, #68]	; (80098cc <frexp+0x6c>)
 8009888:	2200      	movs	r2, #0
 800988a:	ee10 0a10 	vmov	r0, s0
 800988e:	4629      	mov	r1, r5
 8009890:	f7f6 feba 	bl	8000608 <__aeabi_dmul>
 8009894:	460b      	mov	r3, r1
 8009896:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800989a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800989e:	4604      	mov	r4, r0
 80098a0:	6031      	str	r1, [r6, #0]
 80098a2:	6831      	ldr	r1, [r6, #0]
 80098a4:	1512      	asrs	r2, r2, #20
 80098a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098aa:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80098ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098b2:	4411      	add	r1, r2
 80098b4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80098b8:	6031      	str	r1, [r6, #0]
 80098ba:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80098be:	ec45 4b10 	vmov	d0, r4, r5
 80098c2:	bd70      	pop	{r4, r5, r6, pc}
 80098c4:	7fefffff 	.word	0x7fefffff
 80098c8:	7ff00000 	.word	0x7ff00000
 80098cc:	43500000 	.word	0x43500000

080098d0 <__register_exitproc>:
 80098d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d4:	f8df a074 	ldr.w	sl, [pc, #116]	; 800994c <__register_exitproc+0x7c>
 80098d8:	4606      	mov	r6, r0
 80098da:	f8da 0000 	ldr.w	r0, [sl]
 80098de:	4698      	mov	r8, r3
 80098e0:	460f      	mov	r7, r1
 80098e2:	4691      	mov	r9, r2
 80098e4:	f7fe f90e 	bl	8007b04 <__retarget_lock_acquire_recursive>
 80098e8:	4b16      	ldr	r3, [pc, #88]	; (8009944 <__register_exitproc+0x74>)
 80098ea:	681c      	ldr	r4, [r3, #0]
 80098ec:	b90c      	cbnz	r4, 80098f2 <__register_exitproc+0x22>
 80098ee:	4c16      	ldr	r4, [pc, #88]	; (8009948 <__register_exitproc+0x78>)
 80098f0:	601c      	str	r4, [r3, #0]
 80098f2:	6865      	ldr	r5, [r4, #4]
 80098f4:	f8da 0000 	ldr.w	r0, [sl]
 80098f8:	2d1f      	cmp	r5, #31
 80098fa:	dd05      	ble.n	8009908 <__register_exitproc+0x38>
 80098fc:	f7fe f903 	bl	8007b06 <__retarget_lock_release_recursive>
 8009900:	f04f 30ff 	mov.w	r0, #4294967295
 8009904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009908:	b19e      	cbz	r6, 8009932 <__register_exitproc+0x62>
 800990a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800990e:	2201      	movs	r2, #1
 8009910:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8009914:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8009918:	40aa      	lsls	r2, r5
 800991a:	4313      	orrs	r3, r2
 800991c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8009920:	2e02      	cmp	r6, #2
 8009922:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8009926:	bf02      	ittt	eq
 8009928:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800992c:	4313      	orreq	r3, r2
 800992e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8009932:	1c6b      	adds	r3, r5, #1
 8009934:	3502      	adds	r5, #2
 8009936:	6063      	str	r3, [r4, #4]
 8009938:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800993c:	f7fe f8e3 	bl	8007b06 <__retarget_lock_release_recursive>
 8009940:	2000      	movs	r0, #0
 8009942:	e7df      	b.n	8009904 <__register_exitproc+0x34>
 8009944:	200024f8 	.word	0x200024f8
 8009948:	20002530 	.word	0x20002530
 800994c:	2000022c 	.word	0x2000022c

08009950 <quorem>:
 8009950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009954:	6903      	ldr	r3, [r0, #16]
 8009956:	690c      	ldr	r4, [r1, #16]
 8009958:	42a3      	cmp	r3, r4
 800995a:	4607      	mov	r7, r0
 800995c:	db7e      	blt.n	8009a5c <quorem+0x10c>
 800995e:	3c01      	subs	r4, #1
 8009960:	f101 0814 	add.w	r8, r1, #20
 8009964:	f100 0514 	add.w	r5, r0, #20
 8009968:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800996c:	9301      	str	r3, [sp, #4]
 800996e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009976:	3301      	adds	r3, #1
 8009978:	429a      	cmp	r2, r3
 800997a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800997e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009982:	fbb2 f6f3 	udiv	r6, r2, r3
 8009986:	d331      	bcc.n	80099ec <quorem+0x9c>
 8009988:	f04f 0e00 	mov.w	lr, #0
 800998c:	4640      	mov	r0, r8
 800998e:	46ac      	mov	ip, r5
 8009990:	46f2      	mov	sl, lr
 8009992:	f850 2b04 	ldr.w	r2, [r0], #4
 8009996:	b293      	uxth	r3, r2
 8009998:	fb06 e303 	mla	r3, r6, r3, lr
 800999c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099a0:	0c1a      	lsrs	r2, r3, #16
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	ebaa 0303 	sub.w	r3, sl, r3
 80099a8:	f8dc a000 	ldr.w	sl, [ip]
 80099ac:	fa13 f38a 	uxtah	r3, r3, sl
 80099b0:	fb06 220e 	mla	r2, r6, lr, r2
 80099b4:	9300      	str	r3, [sp, #0]
 80099b6:	9b00      	ldr	r3, [sp, #0]
 80099b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80099bc:	b292      	uxth	r2, r2
 80099be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80099c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80099ca:	4581      	cmp	r9, r0
 80099cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099d0:	f84c 3b04 	str.w	r3, [ip], #4
 80099d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80099d8:	d2db      	bcs.n	8009992 <quorem+0x42>
 80099da:	f855 300b 	ldr.w	r3, [r5, fp]
 80099de:	b92b      	cbnz	r3, 80099ec <quorem+0x9c>
 80099e0:	9b01      	ldr	r3, [sp, #4]
 80099e2:	3b04      	subs	r3, #4
 80099e4:	429d      	cmp	r5, r3
 80099e6:	461a      	mov	r2, r3
 80099e8:	d32c      	bcc.n	8009a44 <quorem+0xf4>
 80099ea:	613c      	str	r4, [r7, #16]
 80099ec:	4638      	mov	r0, r7
 80099ee:	f001 f83b 	bl	800aa68 <__mcmp>
 80099f2:	2800      	cmp	r0, #0
 80099f4:	db22      	blt.n	8009a3c <quorem+0xec>
 80099f6:	3601      	adds	r6, #1
 80099f8:	4629      	mov	r1, r5
 80099fa:	2000      	movs	r0, #0
 80099fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009a00:	f8d1 c000 	ldr.w	ip, [r1]
 8009a04:	b293      	uxth	r3, r2
 8009a06:	1ac3      	subs	r3, r0, r3
 8009a08:	0c12      	lsrs	r2, r2, #16
 8009a0a:	fa13 f38c 	uxtah	r3, r3, ip
 8009a0e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009a12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a1c:	45c1      	cmp	r9, r8
 8009a1e:	f841 3b04 	str.w	r3, [r1], #4
 8009a22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009a26:	d2e9      	bcs.n	80099fc <quorem+0xac>
 8009a28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a30:	b922      	cbnz	r2, 8009a3c <quorem+0xec>
 8009a32:	3b04      	subs	r3, #4
 8009a34:	429d      	cmp	r5, r3
 8009a36:	461a      	mov	r2, r3
 8009a38:	d30a      	bcc.n	8009a50 <quorem+0x100>
 8009a3a:	613c      	str	r4, [r7, #16]
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	b003      	add	sp, #12
 8009a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a44:	6812      	ldr	r2, [r2, #0]
 8009a46:	3b04      	subs	r3, #4
 8009a48:	2a00      	cmp	r2, #0
 8009a4a:	d1ce      	bne.n	80099ea <quorem+0x9a>
 8009a4c:	3c01      	subs	r4, #1
 8009a4e:	e7c9      	b.n	80099e4 <quorem+0x94>
 8009a50:	6812      	ldr	r2, [r2, #0]
 8009a52:	3b04      	subs	r3, #4
 8009a54:	2a00      	cmp	r2, #0
 8009a56:	d1f0      	bne.n	8009a3a <quorem+0xea>
 8009a58:	3c01      	subs	r4, #1
 8009a5a:	e7eb      	b.n	8009a34 <quorem+0xe4>
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	e7ee      	b.n	8009a3e <quorem+0xee>

08009a60 <_dtoa_r>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	ed2d 8b04 	vpush	{d8-d9}
 8009a68:	b093      	sub	sp, #76	; 0x4c
 8009a6a:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a6e:	9107      	str	r1, [sp, #28]
 8009a70:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8009a72:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8009a74:	920a      	str	r2, [sp, #40]	; 0x28
 8009a76:	ec57 6b10 	vmov	r6, r7, d0
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	930d      	str	r3, [sp, #52]	; 0x34
 8009a7e:	b141      	cbz	r1, 8009a92 <_dtoa_r+0x32>
 8009a80:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009a82:	604a      	str	r2, [r1, #4]
 8009a84:	2301      	movs	r3, #1
 8009a86:	4093      	lsls	r3, r2
 8009a88:	608b      	str	r3, [r1, #8]
 8009a8a:	f000 fde4 	bl	800a656 <_Bfree>
 8009a8e:	2300      	movs	r3, #0
 8009a90:	63a3      	str	r3, [r4, #56]	; 0x38
 8009a92:	1e3b      	subs	r3, r7, #0
 8009a94:	bfb9      	ittee	lt
 8009a96:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a9a:	9303      	strlt	r3, [sp, #12]
 8009a9c:	2300      	movge	r3, #0
 8009a9e:	602b      	strge	r3, [r5, #0]
 8009aa0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009aa4:	4ba2      	ldr	r3, [pc, #648]	; (8009d30 <_dtoa_r+0x2d0>)
 8009aa6:	bfbc      	itt	lt
 8009aa8:	2201      	movlt	r2, #1
 8009aaa:	602a      	strlt	r2, [r5, #0]
 8009aac:	ea33 0308 	bics.w	r3, r3, r8
 8009ab0:	d11b      	bne.n	8009aea <_dtoa_r+0x8a>
 8009ab2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ab4:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ab8:	6013      	str	r3, [r2, #0]
 8009aba:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009abe:	4333      	orrs	r3, r6
 8009ac0:	f000 858f 	beq.w	800a5e2 <_dtoa_r+0xb82>
 8009ac4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ac6:	b90b      	cbnz	r3, 8009acc <_dtoa_r+0x6c>
 8009ac8:	4b9a      	ldr	r3, [pc, #616]	; (8009d34 <_dtoa_r+0x2d4>)
 8009aca:	e027      	b.n	8009b1c <_dtoa_r+0xbc>
 8009acc:	4b99      	ldr	r3, [pc, #612]	; (8009d34 <_dtoa_r+0x2d4>)
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	3303      	adds	r3, #3
 8009ad2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ad4:	6013      	str	r3, [r2, #0]
 8009ad6:	9800      	ldr	r0, [sp, #0]
 8009ad8:	b013      	add	sp, #76	; 0x4c
 8009ada:	ecbd 8b04 	vpop	{d8-d9}
 8009ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae2:	4b95      	ldr	r3, [pc, #596]	; (8009d38 <_dtoa_r+0x2d8>)
 8009ae4:	9300      	str	r3, [sp, #0]
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	e7f3      	b.n	8009ad2 <_dtoa_r+0x72>
 8009aea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009aee:	2200      	movs	r2, #0
 8009af0:	ec51 0b17 	vmov	r0, r1, d7
 8009af4:	eeb0 8a47 	vmov.f32	s16, s14
 8009af8:	eef0 8a67 	vmov.f32	s17, s15
 8009afc:	2300      	movs	r3, #0
 8009afe:	f7f6 ffeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b02:	4681      	mov	r9, r0
 8009b04:	b160      	cbz	r0, 8009b20 <_dtoa_r+0xc0>
 8009b06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b08:	2301      	movs	r3, #1
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 8564 	beq.w	800a5dc <_dtoa_r+0xb7c>
 8009b14:	4b89      	ldr	r3, [pc, #548]	; (8009d3c <_dtoa_r+0x2dc>)
 8009b16:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009b18:	6013      	str	r3, [r2, #0]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	e7da      	b.n	8009ad6 <_dtoa_r+0x76>
 8009b20:	aa10      	add	r2, sp, #64	; 0x40
 8009b22:	a911      	add	r1, sp, #68	; 0x44
 8009b24:	4620      	mov	r0, r4
 8009b26:	eeb0 0a48 	vmov.f32	s0, s16
 8009b2a:	eef0 0a68 	vmov.f32	s1, s17
 8009b2e:	f001 f841 	bl	800abb4 <__d2b>
 8009b32:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009b36:	4682      	mov	sl, r0
 8009b38:	2d00      	cmp	r5, #0
 8009b3a:	d07e      	beq.n	8009c3a <_dtoa_r+0x1da>
 8009b3c:	ee18 3a90 	vmov	r3, s17
 8009b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b44:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009b48:	ec51 0b18 	vmov	r0, r1, d8
 8009b4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009b50:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b54:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009b58:	4619      	mov	r1, r3
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	4b78      	ldr	r3, [pc, #480]	; (8009d40 <_dtoa_r+0x2e0>)
 8009b5e:	f7f6 fb9b 	bl	8000298 <__aeabi_dsub>
 8009b62:	a36d      	add	r3, pc, #436	; (adr r3, 8009d18 <_dtoa_r+0x2b8>)
 8009b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b68:	f7f6 fd4e 	bl	8000608 <__aeabi_dmul>
 8009b6c:	a36c      	add	r3, pc, #432	; (adr r3, 8009d20 <_dtoa_r+0x2c0>)
 8009b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b72:	f7f6 fb93 	bl	800029c <__adddf3>
 8009b76:	4606      	mov	r6, r0
 8009b78:	4628      	mov	r0, r5
 8009b7a:	460f      	mov	r7, r1
 8009b7c:	f7f6 fcda 	bl	8000534 <__aeabi_i2d>
 8009b80:	a369      	add	r3, pc, #420	; (adr r3, 8009d28 <_dtoa_r+0x2c8>)
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	f7f6 fd3f 	bl	8000608 <__aeabi_dmul>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	4630      	mov	r0, r6
 8009b90:	4639      	mov	r1, r7
 8009b92:	f7f6 fb83 	bl	800029c <__adddf3>
 8009b96:	4606      	mov	r6, r0
 8009b98:	460f      	mov	r7, r1
 8009b9a:	f7f6 ffe5 	bl	8000b68 <__aeabi_d2iz>
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	4683      	mov	fp, r0
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	4639      	mov	r1, r7
 8009ba8:	f7f6 ffa0 	bl	8000aec <__aeabi_dcmplt>
 8009bac:	b148      	cbz	r0, 8009bc2 <_dtoa_r+0x162>
 8009bae:	4658      	mov	r0, fp
 8009bb0:	f7f6 fcc0 	bl	8000534 <__aeabi_i2d>
 8009bb4:	4632      	mov	r2, r6
 8009bb6:	463b      	mov	r3, r7
 8009bb8:	f7f6 ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bbc:	b908      	cbnz	r0, 8009bc2 <_dtoa_r+0x162>
 8009bbe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009bc2:	f1bb 0f16 	cmp.w	fp, #22
 8009bc6:	d856      	bhi.n	8009c76 <_dtoa_r+0x216>
 8009bc8:	4b5e      	ldr	r3, [pc, #376]	; (8009d44 <_dtoa_r+0x2e4>)
 8009bca:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd2:	ec51 0b18 	vmov	r0, r1, d8
 8009bd6:	f7f6 ff89 	bl	8000aec <__aeabi_dcmplt>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d04d      	beq.n	8009c7a <_dtoa_r+0x21a>
 8009bde:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009be2:	2300      	movs	r3, #0
 8009be4:	930c      	str	r3, [sp, #48]	; 0x30
 8009be6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009be8:	1b5b      	subs	r3, r3, r5
 8009bea:	1e5a      	subs	r2, r3, #1
 8009bec:	bf45      	ittet	mi
 8009bee:	f1c3 0301 	rsbmi	r3, r3, #1
 8009bf2:	9305      	strmi	r3, [sp, #20]
 8009bf4:	2300      	movpl	r3, #0
 8009bf6:	2300      	movmi	r3, #0
 8009bf8:	9206      	str	r2, [sp, #24]
 8009bfa:	bf54      	ite	pl
 8009bfc:	9305      	strpl	r3, [sp, #20]
 8009bfe:	9306      	strmi	r3, [sp, #24]
 8009c00:	f1bb 0f00 	cmp.w	fp, #0
 8009c04:	db3b      	blt.n	8009c7e <_dtoa_r+0x21e>
 8009c06:	9b06      	ldr	r3, [sp, #24]
 8009c08:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009c0c:	445b      	add	r3, fp
 8009c0e:	9306      	str	r3, [sp, #24]
 8009c10:	2300      	movs	r3, #0
 8009c12:	9308      	str	r3, [sp, #32]
 8009c14:	9b07      	ldr	r3, [sp, #28]
 8009c16:	2b09      	cmp	r3, #9
 8009c18:	d868      	bhi.n	8009cec <_dtoa_r+0x28c>
 8009c1a:	2b05      	cmp	r3, #5
 8009c1c:	bfc4      	itt	gt
 8009c1e:	3b04      	subgt	r3, #4
 8009c20:	9307      	strgt	r3, [sp, #28]
 8009c22:	9b07      	ldr	r3, [sp, #28]
 8009c24:	f1a3 0302 	sub.w	r3, r3, #2
 8009c28:	bfcc      	ite	gt
 8009c2a:	2500      	movgt	r5, #0
 8009c2c:	2501      	movle	r5, #1
 8009c2e:	2b03      	cmp	r3, #3
 8009c30:	d867      	bhi.n	8009d02 <_dtoa_r+0x2a2>
 8009c32:	e8df f003 	tbb	[pc, r3]
 8009c36:	3b2e      	.short	0x3b2e
 8009c38:	5939      	.short	0x5939
 8009c3a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c3e:	441d      	add	r5, r3
 8009c40:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c44:	2b20      	cmp	r3, #32
 8009c46:	bfc1      	itttt	gt
 8009c48:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c4c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009c50:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009c54:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009c58:	bfd6      	itet	le
 8009c5a:	f1c3 0320 	rsble	r3, r3, #32
 8009c5e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009c62:	fa06 f003 	lslle.w	r0, r6, r3
 8009c66:	f7f6 fc55 	bl	8000514 <__aeabi_ui2d>
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009c70:	3d01      	subs	r5, #1
 8009c72:	920e      	str	r2, [sp, #56]	; 0x38
 8009c74:	e770      	b.n	8009b58 <_dtoa_r+0xf8>
 8009c76:	2301      	movs	r3, #1
 8009c78:	e7b4      	b.n	8009be4 <_dtoa_r+0x184>
 8009c7a:	900c      	str	r0, [sp, #48]	; 0x30
 8009c7c:	e7b3      	b.n	8009be6 <_dtoa_r+0x186>
 8009c7e:	9b05      	ldr	r3, [sp, #20]
 8009c80:	eba3 030b 	sub.w	r3, r3, fp
 8009c84:	9305      	str	r3, [sp, #20]
 8009c86:	f1cb 0300 	rsb	r3, fp, #0
 8009c8a:	9308      	str	r3, [sp, #32]
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c90:	e7c0      	b.n	8009c14 <_dtoa_r+0x1b4>
 8009c92:	2300      	movs	r3, #0
 8009c94:	9309      	str	r3, [sp, #36]	; 0x24
 8009c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	dc35      	bgt.n	8009d08 <_dtoa_r+0x2a8>
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	9301      	str	r3, [sp, #4]
 8009ca0:	9304      	str	r3, [sp, #16]
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	920a      	str	r2, [sp, #40]	; 0x28
 8009ca6:	e00b      	b.n	8009cc0 <_dtoa_r+0x260>
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e7f3      	b.n	8009c94 <_dtoa_r+0x234>
 8009cac:	2300      	movs	r3, #0
 8009cae:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb2:	445b      	add	r3, fp
 8009cb4:	9301      	str	r3, [sp, #4]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	9304      	str	r3, [sp, #16]
 8009cbc:	bfb8      	it	lt
 8009cbe:	2301      	movlt	r3, #1
 8009cc0:	2100      	movs	r1, #0
 8009cc2:	2204      	movs	r2, #4
 8009cc4:	f102 0014 	add.w	r0, r2, #20
 8009cc8:	4298      	cmp	r0, r3
 8009cca:	d921      	bls.n	8009d10 <_dtoa_r+0x2b0>
 8009ccc:	63e1      	str	r1, [r4, #60]	; 0x3c
 8009cce:	4620      	mov	r0, r4
 8009cd0:	f000 fc9c 	bl	800a60c <_Balloc>
 8009cd4:	9000      	str	r0, [sp, #0]
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	d13a      	bne.n	8009d50 <_dtoa_r+0x2f0>
 8009cda:	4b1b      	ldr	r3, [pc, #108]	; (8009d48 <_dtoa_r+0x2e8>)
 8009cdc:	4602      	mov	r2, r0
 8009cde:	f240 11af 	movw	r1, #431	; 0x1af
 8009ce2:	481a      	ldr	r0, [pc, #104]	; (8009d4c <_dtoa_r+0x2ec>)
 8009ce4:	f001 f86c 	bl	800adc0 <__assert_func>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	e7e0      	b.n	8009cae <_dtoa_r+0x24e>
 8009cec:	2501      	movs	r5, #1
 8009cee:	2300      	movs	r3, #0
 8009cf0:	9307      	str	r3, [sp, #28]
 8009cf2:	9509      	str	r5, [sp, #36]	; 0x24
 8009cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf8:	9301      	str	r3, [sp, #4]
 8009cfa:	9304      	str	r3, [sp, #16]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2312      	movs	r3, #18
 8009d00:	e7d0      	b.n	8009ca4 <_dtoa_r+0x244>
 8009d02:	2301      	movs	r3, #1
 8009d04:	9309      	str	r3, [sp, #36]	; 0x24
 8009d06:	e7f5      	b.n	8009cf4 <_dtoa_r+0x294>
 8009d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d0a:	9301      	str	r3, [sp, #4]
 8009d0c:	9304      	str	r3, [sp, #16]
 8009d0e:	e7d7      	b.n	8009cc0 <_dtoa_r+0x260>
 8009d10:	3101      	adds	r1, #1
 8009d12:	0052      	lsls	r2, r2, #1
 8009d14:	e7d6      	b.n	8009cc4 <_dtoa_r+0x264>
 8009d16:	bf00      	nop
 8009d18:	636f4361 	.word	0x636f4361
 8009d1c:	3fd287a7 	.word	0x3fd287a7
 8009d20:	8b60c8b3 	.word	0x8b60c8b3
 8009d24:	3fc68a28 	.word	0x3fc68a28
 8009d28:	509f79fb 	.word	0x509f79fb
 8009d2c:	3fd34413 	.word	0x3fd34413
 8009d30:	7ff00000 	.word	0x7ff00000
 8009d34:	0800d3f5 	.word	0x0800d3f5
 8009d38:	0800d3ec 	.word	0x0800d3ec
 8009d3c:	0800d3cb 	.word	0x0800d3cb
 8009d40:	3ff80000 	.word	0x3ff80000
 8009d44:	0800d4e8 	.word	0x0800d4e8
 8009d48:	0800d3f9 	.word	0x0800d3f9
 8009d4c:	0800d40a 	.word	0x0800d40a
 8009d50:	9b00      	ldr	r3, [sp, #0]
 8009d52:	63a3      	str	r3, [r4, #56]	; 0x38
 8009d54:	9b04      	ldr	r3, [sp, #16]
 8009d56:	2b0e      	cmp	r3, #14
 8009d58:	f200 80a8 	bhi.w	8009eac <_dtoa_r+0x44c>
 8009d5c:	2d00      	cmp	r5, #0
 8009d5e:	f000 80a5 	beq.w	8009eac <_dtoa_r+0x44c>
 8009d62:	f1bb 0f00 	cmp.w	fp, #0
 8009d66:	dd38      	ble.n	8009dda <_dtoa_r+0x37a>
 8009d68:	4bbf      	ldr	r3, [pc, #764]	; (800a068 <_dtoa_r+0x608>)
 8009d6a:	f00b 020f 	and.w	r2, fp, #15
 8009d6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d72:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009d76:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009d7a:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009d7e:	d019      	beq.n	8009db4 <_dtoa_r+0x354>
 8009d80:	4bba      	ldr	r3, [pc, #744]	; (800a06c <_dtoa_r+0x60c>)
 8009d82:	ec51 0b18 	vmov	r0, r1, d8
 8009d86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d8a:	f7f6 fd67 	bl	800085c <__aeabi_ddiv>
 8009d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d92:	f008 080f 	and.w	r8, r8, #15
 8009d96:	2503      	movs	r5, #3
 8009d98:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800a06c <_dtoa_r+0x60c>
 8009d9c:	f1b8 0f00 	cmp.w	r8, #0
 8009da0:	d10a      	bne.n	8009db8 <_dtoa_r+0x358>
 8009da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009da6:	4632      	mov	r2, r6
 8009da8:	463b      	mov	r3, r7
 8009daa:	f7f6 fd57 	bl	800085c <__aeabi_ddiv>
 8009dae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009db2:	e02b      	b.n	8009e0c <_dtoa_r+0x3ac>
 8009db4:	2502      	movs	r5, #2
 8009db6:	e7ef      	b.n	8009d98 <_dtoa_r+0x338>
 8009db8:	f018 0f01 	tst.w	r8, #1
 8009dbc:	d008      	beq.n	8009dd0 <_dtoa_r+0x370>
 8009dbe:	4630      	mov	r0, r6
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009dc6:	f7f6 fc1f 	bl	8000608 <__aeabi_dmul>
 8009dca:	3501      	adds	r5, #1
 8009dcc:	4606      	mov	r6, r0
 8009dce:	460f      	mov	r7, r1
 8009dd0:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009dd4:	f109 0908 	add.w	r9, r9, #8
 8009dd8:	e7e0      	b.n	8009d9c <_dtoa_r+0x33c>
 8009dda:	f000 809f 	beq.w	8009f1c <_dtoa_r+0x4bc>
 8009dde:	f1cb 0600 	rsb	r6, fp, #0
 8009de2:	4ba1      	ldr	r3, [pc, #644]	; (800a068 <_dtoa_r+0x608>)
 8009de4:	4fa1      	ldr	r7, [pc, #644]	; (800a06c <_dtoa_r+0x60c>)
 8009de6:	f006 020f 	and.w	r2, r6, #15
 8009dea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	ec51 0b18 	vmov	r0, r1, d8
 8009df6:	f7f6 fc07 	bl	8000608 <__aeabi_dmul>
 8009dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dfe:	1136      	asrs	r6, r6, #4
 8009e00:	2300      	movs	r3, #0
 8009e02:	2502      	movs	r5, #2
 8009e04:	2e00      	cmp	r6, #0
 8009e06:	d17e      	bne.n	8009f06 <_dtoa_r+0x4a6>
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d1d0      	bne.n	8009dae <_dtoa_r+0x34e>
 8009e0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 8084 	beq.w	8009f20 <_dtoa_r+0x4c0>
 8009e18:	4b95      	ldr	r3, [pc, #596]	; (800a070 <_dtoa_r+0x610>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	4649      	mov	r1, r9
 8009e20:	f7f6 fe64 	bl	8000aec <__aeabi_dcmplt>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d07b      	beq.n	8009f20 <_dtoa_r+0x4c0>
 8009e28:	9b04      	ldr	r3, [sp, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d078      	beq.n	8009f20 <_dtoa_r+0x4c0>
 8009e2e:	9b01      	ldr	r3, [sp, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	dd39      	ble.n	8009ea8 <_dtoa_r+0x448>
 8009e34:	4b8f      	ldr	r3, [pc, #572]	; (800a074 <_dtoa_r+0x614>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	4640      	mov	r0, r8
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	f7f6 fbe4 	bl	8000608 <__aeabi_dmul>
 8009e40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e44:	9e01      	ldr	r6, [sp, #4]
 8009e46:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009e4a:	3501      	adds	r5, #1
 8009e4c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009e50:	4628      	mov	r0, r5
 8009e52:	f7f6 fb6f 	bl	8000534 <__aeabi_i2d>
 8009e56:	4642      	mov	r2, r8
 8009e58:	464b      	mov	r3, r9
 8009e5a:	f7f6 fbd5 	bl	8000608 <__aeabi_dmul>
 8009e5e:	4b86      	ldr	r3, [pc, #536]	; (800a078 <_dtoa_r+0x618>)
 8009e60:	2200      	movs	r2, #0
 8009e62:	f7f6 fa1b 	bl	800029c <__adddf3>
 8009e66:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e6e:	9303      	str	r3, [sp, #12]
 8009e70:	2e00      	cmp	r6, #0
 8009e72:	d158      	bne.n	8009f26 <_dtoa_r+0x4c6>
 8009e74:	4b81      	ldr	r3, [pc, #516]	; (800a07c <_dtoa_r+0x61c>)
 8009e76:	2200      	movs	r2, #0
 8009e78:	4640      	mov	r0, r8
 8009e7a:	4649      	mov	r1, r9
 8009e7c:	f7f6 fa0c 	bl	8000298 <__aeabi_dsub>
 8009e80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e84:	4680      	mov	r8, r0
 8009e86:	4689      	mov	r9, r1
 8009e88:	f7f6 fe4e 	bl	8000b28 <__aeabi_dcmpgt>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	f040 8295 	bne.w	800a3bc <_dtoa_r+0x95c>
 8009e92:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009e96:	4640      	mov	r0, r8
 8009e98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	f7f6 fe25 	bl	8000aec <__aeabi_dcmplt>
 8009ea2:	2800      	cmp	r0, #0
 8009ea4:	f040 8288 	bne.w	800a3b8 <_dtoa_r+0x958>
 8009ea8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009eac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	f2c0 814d 	blt.w	800a14e <_dtoa_r+0x6ee>
 8009eb4:	f1bb 0f0e 	cmp.w	fp, #14
 8009eb8:	f300 8149 	bgt.w	800a14e <_dtoa_r+0x6ee>
 8009ebc:	4b6a      	ldr	r3, [pc, #424]	; (800a068 <_dtoa_r+0x608>)
 8009ebe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009ec2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f280 80db 	bge.w	800a084 <_dtoa_r+0x624>
 8009ece:	9b04      	ldr	r3, [sp, #16]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f300 80d7 	bgt.w	800a084 <_dtoa_r+0x624>
 8009ed6:	f040 826e 	bne.w	800a3b6 <_dtoa_r+0x956>
 8009eda:	4b68      	ldr	r3, [pc, #416]	; (800a07c <_dtoa_r+0x61c>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	4640      	mov	r0, r8
 8009ee0:	4649      	mov	r1, r9
 8009ee2:	f7f6 fb91 	bl	8000608 <__aeabi_dmul>
 8009ee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eea:	f7f6 fe13 	bl	8000b14 <__aeabi_dcmpge>
 8009eee:	9e04      	ldr	r6, [sp, #16]
 8009ef0:	4637      	mov	r7, r6
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	f040 8244 	bne.w	800a380 <_dtoa_r+0x920>
 8009ef8:	9d00      	ldr	r5, [sp, #0]
 8009efa:	2331      	movs	r3, #49	; 0x31
 8009efc:	f805 3b01 	strb.w	r3, [r5], #1
 8009f00:	f10b 0b01 	add.w	fp, fp, #1
 8009f04:	e240      	b.n	800a388 <_dtoa_r+0x928>
 8009f06:	07f2      	lsls	r2, r6, #31
 8009f08:	d505      	bpl.n	8009f16 <_dtoa_r+0x4b6>
 8009f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f0e:	f7f6 fb7b 	bl	8000608 <__aeabi_dmul>
 8009f12:	3501      	adds	r5, #1
 8009f14:	2301      	movs	r3, #1
 8009f16:	1076      	asrs	r6, r6, #1
 8009f18:	3708      	adds	r7, #8
 8009f1a:	e773      	b.n	8009e04 <_dtoa_r+0x3a4>
 8009f1c:	2502      	movs	r5, #2
 8009f1e:	e775      	b.n	8009e0c <_dtoa_r+0x3ac>
 8009f20:	9e04      	ldr	r6, [sp, #16]
 8009f22:	465f      	mov	r7, fp
 8009f24:	e792      	b.n	8009e4c <_dtoa_r+0x3ec>
 8009f26:	9900      	ldr	r1, [sp, #0]
 8009f28:	4b4f      	ldr	r3, [pc, #316]	; (800a068 <_dtoa_r+0x608>)
 8009f2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f2e:	4431      	add	r1, r6
 8009f30:	9102      	str	r1, [sp, #8]
 8009f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f34:	eeb0 9a47 	vmov.f32	s18, s14
 8009f38:	eef0 9a67 	vmov.f32	s19, s15
 8009f3c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f44:	2900      	cmp	r1, #0
 8009f46:	d044      	beq.n	8009fd2 <_dtoa_r+0x572>
 8009f48:	494d      	ldr	r1, [pc, #308]	; (800a080 <_dtoa_r+0x620>)
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	f7f6 fc86 	bl	800085c <__aeabi_ddiv>
 8009f50:	ec53 2b19 	vmov	r2, r3, d9
 8009f54:	f7f6 f9a0 	bl	8000298 <__aeabi_dsub>
 8009f58:	9d00      	ldr	r5, [sp, #0]
 8009f5a:	ec41 0b19 	vmov	d9, r0, r1
 8009f5e:	4649      	mov	r1, r9
 8009f60:	4640      	mov	r0, r8
 8009f62:	f7f6 fe01 	bl	8000b68 <__aeabi_d2iz>
 8009f66:	4606      	mov	r6, r0
 8009f68:	f7f6 fae4 	bl	8000534 <__aeabi_i2d>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4640      	mov	r0, r8
 8009f72:	4649      	mov	r1, r9
 8009f74:	f7f6 f990 	bl	8000298 <__aeabi_dsub>
 8009f78:	3630      	adds	r6, #48	; 0x30
 8009f7a:	f805 6b01 	strb.w	r6, [r5], #1
 8009f7e:	ec53 2b19 	vmov	r2, r3, d9
 8009f82:	4680      	mov	r8, r0
 8009f84:	4689      	mov	r9, r1
 8009f86:	f7f6 fdb1 	bl	8000aec <__aeabi_dcmplt>
 8009f8a:	2800      	cmp	r0, #0
 8009f8c:	d164      	bne.n	800a058 <_dtoa_r+0x5f8>
 8009f8e:	4642      	mov	r2, r8
 8009f90:	464b      	mov	r3, r9
 8009f92:	4937      	ldr	r1, [pc, #220]	; (800a070 <_dtoa_r+0x610>)
 8009f94:	2000      	movs	r0, #0
 8009f96:	f7f6 f97f 	bl	8000298 <__aeabi_dsub>
 8009f9a:	ec53 2b19 	vmov	r2, r3, d9
 8009f9e:	f7f6 fda5 	bl	8000aec <__aeabi_dcmplt>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	f040 80b5 	bne.w	800a112 <_dtoa_r+0x6b2>
 8009fa8:	9b02      	ldr	r3, [sp, #8]
 8009faa:	429d      	cmp	r5, r3
 8009fac:	f43f af7c 	beq.w	8009ea8 <_dtoa_r+0x448>
 8009fb0:	4b30      	ldr	r3, [pc, #192]	; (800a074 <_dtoa_r+0x614>)
 8009fb2:	ec51 0b19 	vmov	r0, r1, d9
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f7f6 fb26 	bl	8000608 <__aeabi_dmul>
 8009fbc:	4b2d      	ldr	r3, [pc, #180]	; (800a074 <_dtoa_r+0x614>)
 8009fbe:	ec41 0b19 	vmov	d9, r0, r1
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	4649      	mov	r1, r9
 8009fc8:	f7f6 fb1e 	bl	8000608 <__aeabi_dmul>
 8009fcc:	4680      	mov	r8, r0
 8009fce:	4689      	mov	r9, r1
 8009fd0:	e7c5      	b.n	8009f5e <_dtoa_r+0x4fe>
 8009fd2:	ec51 0b17 	vmov	r0, r1, d7
 8009fd6:	f7f6 fb17 	bl	8000608 <__aeabi_dmul>
 8009fda:	9b02      	ldr	r3, [sp, #8]
 8009fdc:	9d00      	ldr	r5, [sp, #0]
 8009fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fe0:	ec41 0b19 	vmov	d9, r0, r1
 8009fe4:	4649      	mov	r1, r9
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	f7f6 fdbe 	bl	8000b68 <__aeabi_d2iz>
 8009fec:	4606      	mov	r6, r0
 8009fee:	f7f6 faa1 	bl	8000534 <__aeabi_i2d>
 8009ff2:	3630      	adds	r6, #48	; 0x30
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	460b      	mov	r3, r1
 8009ff8:	4640      	mov	r0, r8
 8009ffa:	4649      	mov	r1, r9
 8009ffc:	f7f6 f94c 	bl	8000298 <__aeabi_dsub>
 800a000:	f805 6b01 	strb.w	r6, [r5], #1
 800a004:	9b02      	ldr	r3, [sp, #8]
 800a006:	429d      	cmp	r5, r3
 800a008:	4680      	mov	r8, r0
 800a00a:	4689      	mov	r9, r1
 800a00c:	f04f 0200 	mov.w	r2, #0
 800a010:	d124      	bne.n	800a05c <_dtoa_r+0x5fc>
 800a012:	4b1b      	ldr	r3, [pc, #108]	; (800a080 <_dtoa_r+0x620>)
 800a014:	ec51 0b19 	vmov	r0, r1, d9
 800a018:	f7f6 f940 	bl	800029c <__adddf3>
 800a01c:	4602      	mov	r2, r0
 800a01e:	460b      	mov	r3, r1
 800a020:	4640      	mov	r0, r8
 800a022:	4649      	mov	r1, r9
 800a024:	f7f6 fd80 	bl	8000b28 <__aeabi_dcmpgt>
 800a028:	2800      	cmp	r0, #0
 800a02a:	d172      	bne.n	800a112 <_dtoa_r+0x6b2>
 800a02c:	ec53 2b19 	vmov	r2, r3, d9
 800a030:	4913      	ldr	r1, [pc, #76]	; (800a080 <_dtoa_r+0x620>)
 800a032:	2000      	movs	r0, #0
 800a034:	f7f6 f930 	bl	8000298 <__aeabi_dsub>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4640      	mov	r0, r8
 800a03e:	4649      	mov	r1, r9
 800a040:	f7f6 fd54 	bl	8000aec <__aeabi_dcmplt>
 800a044:	2800      	cmp	r0, #0
 800a046:	f43f af2f 	beq.w	8009ea8 <_dtoa_r+0x448>
 800a04a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a04c:	1e6b      	subs	r3, r5, #1
 800a04e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a050:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a054:	2b30      	cmp	r3, #48	; 0x30
 800a056:	d0f8      	beq.n	800a04a <_dtoa_r+0x5ea>
 800a058:	46bb      	mov	fp, r7
 800a05a:	e049      	b.n	800a0f0 <_dtoa_r+0x690>
 800a05c:	4b05      	ldr	r3, [pc, #20]	; (800a074 <_dtoa_r+0x614>)
 800a05e:	f7f6 fad3 	bl	8000608 <__aeabi_dmul>
 800a062:	4680      	mov	r8, r0
 800a064:	4689      	mov	r9, r1
 800a066:	e7bd      	b.n	8009fe4 <_dtoa_r+0x584>
 800a068:	0800d4e8 	.word	0x0800d4e8
 800a06c:	0800d4c0 	.word	0x0800d4c0
 800a070:	3ff00000 	.word	0x3ff00000
 800a074:	40240000 	.word	0x40240000
 800a078:	401c0000 	.word	0x401c0000
 800a07c:	40140000 	.word	0x40140000
 800a080:	3fe00000 	.word	0x3fe00000
 800a084:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a088:	9d00      	ldr	r5, [sp, #0]
 800a08a:	4642      	mov	r2, r8
 800a08c:	464b      	mov	r3, r9
 800a08e:	4630      	mov	r0, r6
 800a090:	4639      	mov	r1, r7
 800a092:	f7f6 fbe3 	bl	800085c <__aeabi_ddiv>
 800a096:	f7f6 fd67 	bl	8000b68 <__aeabi_d2iz>
 800a09a:	9001      	str	r0, [sp, #4]
 800a09c:	f7f6 fa4a 	bl	8000534 <__aeabi_i2d>
 800a0a0:	4642      	mov	r2, r8
 800a0a2:	464b      	mov	r3, r9
 800a0a4:	f7f6 fab0 	bl	8000608 <__aeabi_dmul>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	4639      	mov	r1, r7
 800a0b0:	f7f6 f8f2 	bl	8000298 <__aeabi_dsub>
 800a0b4:	9e01      	ldr	r6, [sp, #4]
 800a0b6:	9f04      	ldr	r7, [sp, #16]
 800a0b8:	3630      	adds	r6, #48	; 0x30
 800a0ba:	f805 6b01 	strb.w	r6, [r5], #1
 800a0be:	9e00      	ldr	r6, [sp, #0]
 800a0c0:	1bae      	subs	r6, r5, r6
 800a0c2:	42b7      	cmp	r7, r6
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	d134      	bne.n	800a134 <_dtoa_r+0x6d4>
 800a0ca:	f7f6 f8e7 	bl	800029c <__adddf3>
 800a0ce:	4642      	mov	r2, r8
 800a0d0:	464b      	mov	r3, r9
 800a0d2:	4606      	mov	r6, r0
 800a0d4:	460f      	mov	r7, r1
 800a0d6:	f7f6 fd27 	bl	8000b28 <__aeabi_dcmpgt>
 800a0da:	b9c8      	cbnz	r0, 800a110 <_dtoa_r+0x6b0>
 800a0dc:	4642      	mov	r2, r8
 800a0de:	464b      	mov	r3, r9
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	4639      	mov	r1, r7
 800a0e4:	f7f6 fcf8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0e8:	b110      	cbz	r0, 800a0f0 <_dtoa_r+0x690>
 800a0ea:	9b01      	ldr	r3, [sp, #4]
 800a0ec:	07db      	lsls	r3, r3, #31
 800a0ee:	d40f      	bmi.n	800a110 <_dtoa_r+0x6b0>
 800a0f0:	4651      	mov	r1, sl
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f000 faaf 	bl	800a656 <_Bfree>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0fc:	702b      	strb	r3, [r5, #0]
 800a0fe:	f10b 0301 	add.w	r3, fp, #1
 800a102:	6013      	str	r3, [r2, #0]
 800a104:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a106:	2b00      	cmp	r3, #0
 800a108:	f43f ace5 	beq.w	8009ad6 <_dtoa_r+0x76>
 800a10c:	601d      	str	r5, [r3, #0]
 800a10e:	e4e2      	b.n	8009ad6 <_dtoa_r+0x76>
 800a110:	465f      	mov	r7, fp
 800a112:	462b      	mov	r3, r5
 800a114:	461d      	mov	r5, r3
 800a116:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a11a:	2a39      	cmp	r2, #57	; 0x39
 800a11c:	d106      	bne.n	800a12c <_dtoa_r+0x6cc>
 800a11e:	9a00      	ldr	r2, [sp, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d1f7      	bne.n	800a114 <_dtoa_r+0x6b4>
 800a124:	9900      	ldr	r1, [sp, #0]
 800a126:	2230      	movs	r2, #48	; 0x30
 800a128:	3701      	adds	r7, #1
 800a12a:	700a      	strb	r2, [r1, #0]
 800a12c:	781a      	ldrb	r2, [r3, #0]
 800a12e:	3201      	adds	r2, #1
 800a130:	701a      	strb	r2, [r3, #0]
 800a132:	e791      	b.n	800a058 <_dtoa_r+0x5f8>
 800a134:	4ba3      	ldr	r3, [pc, #652]	; (800a3c4 <_dtoa_r+0x964>)
 800a136:	2200      	movs	r2, #0
 800a138:	f7f6 fa66 	bl	8000608 <__aeabi_dmul>
 800a13c:	2200      	movs	r2, #0
 800a13e:	2300      	movs	r3, #0
 800a140:	4606      	mov	r6, r0
 800a142:	460f      	mov	r7, r1
 800a144:	f7f6 fcc8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a148:	2800      	cmp	r0, #0
 800a14a:	d09e      	beq.n	800a08a <_dtoa_r+0x62a>
 800a14c:	e7d0      	b.n	800a0f0 <_dtoa_r+0x690>
 800a14e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a150:	2a00      	cmp	r2, #0
 800a152:	f000 80ca 	beq.w	800a2ea <_dtoa_r+0x88a>
 800a156:	9a07      	ldr	r2, [sp, #28]
 800a158:	2a01      	cmp	r2, #1
 800a15a:	f300 80ad 	bgt.w	800a2b8 <_dtoa_r+0x858>
 800a15e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a160:	2a00      	cmp	r2, #0
 800a162:	f000 80a5 	beq.w	800a2b0 <_dtoa_r+0x850>
 800a166:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a16a:	9e08      	ldr	r6, [sp, #32]
 800a16c:	9d05      	ldr	r5, [sp, #20]
 800a16e:	9a05      	ldr	r2, [sp, #20]
 800a170:	441a      	add	r2, r3
 800a172:	9205      	str	r2, [sp, #20]
 800a174:	9a06      	ldr	r2, [sp, #24]
 800a176:	2101      	movs	r1, #1
 800a178:	441a      	add	r2, r3
 800a17a:	4620      	mov	r0, r4
 800a17c:	9206      	str	r2, [sp, #24]
 800a17e:	f000 fb07 	bl	800a790 <__i2b>
 800a182:	4607      	mov	r7, r0
 800a184:	b165      	cbz	r5, 800a1a0 <_dtoa_r+0x740>
 800a186:	9b06      	ldr	r3, [sp, #24]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	dd09      	ble.n	800a1a0 <_dtoa_r+0x740>
 800a18c:	42ab      	cmp	r3, r5
 800a18e:	9a05      	ldr	r2, [sp, #20]
 800a190:	bfa8      	it	ge
 800a192:	462b      	movge	r3, r5
 800a194:	1ad2      	subs	r2, r2, r3
 800a196:	9205      	str	r2, [sp, #20]
 800a198:	9a06      	ldr	r2, [sp, #24]
 800a19a:	1aed      	subs	r5, r5, r3
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	9306      	str	r3, [sp, #24]
 800a1a0:	9b08      	ldr	r3, [sp, #32]
 800a1a2:	b1f3      	cbz	r3, 800a1e2 <_dtoa_r+0x782>
 800a1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 80a3 	beq.w	800a2f2 <_dtoa_r+0x892>
 800a1ac:	2e00      	cmp	r6, #0
 800a1ae:	dd10      	ble.n	800a1d2 <_dtoa_r+0x772>
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	4632      	mov	r2, r6
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f000 fbab 	bl	800a910 <__pow5mult>
 800a1ba:	4652      	mov	r2, sl
 800a1bc:	4601      	mov	r1, r0
 800a1be:	4607      	mov	r7, r0
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f000 fafb 	bl	800a7bc <__multiply>
 800a1c6:	4651      	mov	r1, sl
 800a1c8:	4680      	mov	r8, r0
 800a1ca:	4620      	mov	r0, r4
 800a1cc:	f000 fa43 	bl	800a656 <_Bfree>
 800a1d0:	46c2      	mov	sl, r8
 800a1d2:	9b08      	ldr	r3, [sp, #32]
 800a1d4:	1b9a      	subs	r2, r3, r6
 800a1d6:	d004      	beq.n	800a1e2 <_dtoa_r+0x782>
 800a1d8:	4651      	mov	r1, sl
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f000 fb98 	bl	800a910 <__pow5mult>
 800a1e0:	4682      	mov	sl, r0
 800a1e2:	2101      	movs	r1, #1
 800a1e4:	4620      	mov	r0, r4
 800a1e6:	f000 fad3 	bl	800a790 <__i2b>
 800a1ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	f340 8081 	ble.w	800a2f6 <_dtoa_r+0x896>
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4601      	mov	r1, r0
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	f000 fb89 	bl	800a910 <__pow5mult>
 800a1fe:	9b07      	ldr	r3, [sp, #28]
 800a200:	2b01      	cmp	r3, #1
 800a202:	4606      	mov	r6, r0
 800a204:	dd7a      	ble.n	800a2fc <_dtoa_r+0x89c>
 800a206:	f04f 0800 	mov.w	r8, #0
 800a20a:	6933      	ldr	r3, [r6, #16]
 800a20c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a210:	6918      	ldr	r0, [r3, #16]
 800a212:	f000 fa6f 	bl	800a6f4 <__hi0bits>
 800a216:	f1c0 0020 	rsb	r0, r0, #32
 800a21a:	9b06      	ldr	r3, [sp, #24]
 800a21c:	4418      	add	r0, r3
 800a21e:	f010 001f 	ands.w	r0, r0, #31
 800a222:	f000 8094 	beq.w	800a34e <_dtoa_r+0x8ee>
 800a226:	f1c0 0320 	rsb	r3, r0, #32
 800a22a:	2b04      	cmp	r3, #4
 800a22c:	f340 8085 	ble.w	800a33a <_dtoa_r+0x8da>
 800a230:	9b05      	ldr	r3, [sp, #20]
 800a232:	f1c0 001c 	rsb	r0, r0, #28
 800a236:	4403      	add	r3, r0
 800a238:	9305      	str	r3, [sp, #20]
 800a23a:	9b06      	ldr	r3, [sp, #24]
 800a23c:	4403      	add	r3, r0
 800a23e:	4405      	add	r5, r0
 800a240:	9306      	str	r3, [sp, #24]
 800a242:	9b05      	ldr	r3, [sp, #20]
 800a244:	2b00      	cmp	r3, #0
 800a246:	dd05      	ble.n	800a254 <_dtoa_r+0x7f4>
 800a248:	4651      	mov	r1, sl
 800a24a:	461a      	mov	r2, r3
 800a24c:	4620      	mov	r0, r4
 800a24e:	f000 fb9f 	bl	800a990 <__lshift>
 800a252:	4682      	mov	sl, r0
 800a254:	9b06      	ldr	r3, [sp, #24]
 800a256:	2b00      	cmp	r3, #0
 800a258:	dd05      	ble.n	800a266 <_dtoa_r+0x806>
 800a25a:	4631      	mov	r1, r6
 800a25c:	461a      	mov	r2, r3
 800a25e:	4620      	mov	r0, r4
 800a260:	f000 fb96 	bl	800a990 <__lshift>
 800a264:	4606      	mov	r6, r0
 800a266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d072      	beq.n	800a352 <_dtoa_r+0x8f2>
 800a26c:	4631      	mov	r1, r6
 800a26e:	4650      	mov	r0, sl
 800a270:	f000 fbfa 	bl	800aa68 <__mcmp>
 800a274:	2800      	cmp	r0, #0
 800a276:	da6c      	bge.n	800a352 <_dtoa_r+0x8f2>
 800a278:	2300      	movs	r3, #0
 800a27a:	4651      	mov	r1, sl
 800a27c:	220a      	movs	r2, #10
 800a27e:	4620      	mov	r0, r4
 800a280:	f000 f9f2 	bl	800a668 <__multadd>
 800a284:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a286:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a28a:	4682      	mov	sl, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	f000 81af 	beq.w	800a5f0 <_dtoa_r+0xb90>
 800a292:	2300      	movs	r3, #0
 800a294:	4639      	mov	r1, r7
 800a296:	220a      	movs	r2, #10
 800a298:	4620      	mov	r0, r4
 800a29a:	f000 f9e5 	bl	800a668 <__multadd>
 800a29e:	9b01      	ldr	r3, [sp, #4]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	4607      	mov	r7, r0
 800a2a4:	f300 8096 	bgt.w	800a3d4 <_dtoa_r+0x974>
 800a2a8:	9b07      	ldr	r3, [sp, #28]
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	dc59      	bgt.n	800a362 <_dtoa_r+0x902>
 800a2ae:	e091      	b.n	800a3d4 <_dtoa_r+0x974>
 800a2b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a2b2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a2b6:	e758      	b.n	800a16a <_dtoa_r+0x70a>
 800a2b8:	9b04      	ldr	r3, [sp, #16]
 800a2ba:	1e5e      	subs	r6, r3, #1
 800a2bc:	9b08      	ldr	r3, [sp, #32]
 800a2be:	42b3      	cmp	r3, r6
 800a2c0:	bfbf      	itttt	lt
 800a2c2:	9b08      	ldrlt	r3, [sp, #32]
 800a2c4:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a2c6:	9608      	strlt	r6, [sp, #32]
 800a2c8:	1af3      	sublt	r3, r6, r3
 800a2ca:	bfb4      	ite	lt
 800a2cc:	18d2      	addlt	r2, r2, r3
 800a2ce:	1b9e      	subge	r6, r3, r6
 800a2d0:	9b04      	ldr	r3, [sp, #16]
 800a2d2:	bfbc      	itt	lt
 800a2d4:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a2d6:	2600      	movlt	r6, #0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	bfb7      	itett	lt
 800a2dc:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a2e0:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a2e4:	1a9d      	sublt	r5, r3, r2
 800a2e6:	2300      	movlt	r3, #0
 800a2e8:	e741      	b.n	800a16e <_dtoa_r+0x70e>
 800a2ea:	9e08      	ldr	r6, [sp, #32]
 800a2ec:	9d05      	ldr	r5, [sp, #20]
 800a2ee:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a2f0:	e748      	b.n	800a184 <_dtoa_r+0x724>
 800a2f2:	9a08      	ldr	r2, [sp, #32]
 800a2f4:	e770      	b.n	800a1d8 <_dtoa_r+0x778>
 800a2f6:	9b07      	ldr	r3, [sp, #28]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	dc19      	bgt.n	800a330 <_dtoa_r+0x8d0>
 800a2fc:	9b02      	ldr	r3, [sp, #8]
 800a2fe:	b9bb      	cbnz	r3, 800a330 <_dtoa_r+0x8d0>
 800a300:	9b03      	ldr	r3, [sp, #12]
 800a302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a306:	b99b      	cbnz	r3, 800a330 <_dtoa_r+0x8d0>
 800a308:	9b03      	ldr	r3, [sp, #12]
 800a30a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a30e:	0d1b      	lsrs	r3, r3, #20
 800a310:	051b      	lsls	r3, r3, #20
 800a312:	b183      	cbz	r3, 800a336 <_dtoa_r+0x8d6>
 800a314:	9b05      	ldr	r3, [sp, #20]
 800a316:	3301      	adds	r3, #1
 800a318:	9305      	str	r3, [sp, #20]
 800a31a:	9b06      	ldr	r3, [sp, #24]
 800a31c:	3301      	adds	r3, #1
 800a31e:	9306      	str	r3, [sp, #24]
 800a320:	f04f 0801 	mov.w	r8, #1
 800a324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a326:	2b00      	cmp	r3, #0
 800a328:	f47f af6f 	bne.w	800a20a <_dtoa_r+0x7aa>
 800a32c:	2001      	movs	r0, #1
 800a32e:	e774      	b.n	800a21a <_dtoa_r+0x7ba>
 800a330:	f04f 0800 	mov.w	r8, #0
 800a334:	e7f6      	b.n	800a324 <_dtoa_r+0x8c4>
 800a336:	4698      	mov	r8, r3
 800a338:	e7f4      	b.n	800a324 <_dtoa_r+0x8c4>
 800a33a:	d082      	beq.n	800a242 <_dtoa_r+0x7e2>
 800a33c:	9a05      	ldr	r2, [sp, #20]
 800a33e:	331c      	adds	r3, #28
 800a340:	441a      	add	r2, r3
 800a342:	9205      	str	r2, [sp, #20]
 800a344:	9a06      	ldr	r2, [sp, #24]
 800a346:	441a      	add	r2, r3
 800a348:	441d      	add	r5, r3
 800a34a:	9206      	str	r2, [sp, #24]
 800a34c:	e779      	b.n	800a242 <_dtoa_r+0x7e2>
 800a34e:	4603      	mov	r3, r0
 800a350:	e7f4      	b.n	800a33c <_dtoa_r+0x8dc>
 800a352:	9b04      	ldr	r3, [sp, #16]
 800a354:	2b00      	cmp	r3, #0
 800a356:	dc37      	bgt.n	800a3c8 <_dtoa_r+0x968>
 800a358:	9b07      	ldr	r3, [sp, #28]
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	dd34      	ble.n	800a3c8 <_dtoa_r+0x968>
 800a35e:	9b04      	ldr	r3, [sp, #16]
 800a360:	9301      	str	r3, [sp, #4]
 800a362:	9b01      	ldr	r3, [sp, #4]
 800a364:	b963      	cbnz	r3, 800a380 <_dtoa_r+0x920>
 800a366:	4631      	mov	r1, r6
 800a368:	2205      	movs	r2, #5
 800a36a:	4620      	mov	r0, r4
 800a36c:	f000 f97c 	bl	800a668 <__multadd>
 800a370:	4601      	mov	r1, r0
 800a372:	4606      	mov	r6, r0
 800a374:	4650      	mov	r0, sl
 800a376:	f000 fb77 	bl	800aa68 <__mcmp>
 800a37a:	2800      	cmp	r0, #0
 800a37c:	f73f adbc 	bgt.w	8009ef8 <_dtoa_r+0x498>
 800a380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a382:	9d00      	ldr	r5, [sp, #0]
 800a384:	ea6f 0b03 	mvn.w	fp, r3
 800a388:	f04f 0800 	mov.w	r8, #0
 800a38c:	4631      	mov	r1, r6
 800a38e:	4620      	mov	r0, r4
 800a390:	f000 f961 	bl	800a656 <_Bfree>
 800a394:	2f00      	cmp	r7, #0
 800a396:	f43f aeab 	beq.w	800a0f0 <_dtoa_r+0x690>
 800a39a:	f1b8 0f00 	cmp.w	r8, #0
 800a39e:	d005      	beq.n	800a3ac <_dtoa_r+0x94c>
 800a3a0:	45b8      	cmp	r8, r7
 800a3a2:	d003      	beq.n	800a3ac <_dtoa_r+0x94c>
 800a3a4:	4641      	mov	r1, r8
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f000 f955 	bl	800a656 <_Bfree>
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 f951 	bl	800a656 <_Bfree>
 800a3b4:	e69c      	b.n	800a0f0 <_dtoa_r+0x690>
 800a3b6:	2600      	movs	r6, #0
 800a3b8:	4637      	mov	r7, r6
 800a3ba:	e7e1      	b.n	800a380 <_dtoa_r+0x920>
 800a3bc:	46bb      	mov	fp, r7
 800a3be:	4637      	mov	r7, r6
 800a3c0:	e59a      	b.n	8009ef8 <_dtoa_r+0x498>
 800a3c2:	bf00      	nop
 800a3c4:	40240000 	.word	0x40240000
 800a3c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	f000 80c7 	beq.w	800a55e <_dtoa_r+0xafe>
 800a3d0:	9b04      	ldr	r3, [sp, #16]
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	2d00      	cmp	r5, #0
 800a3d6:	dd05      	ble.n	800a3e4 <_dtoa_r+0x984>
 800a3d8:	4639      	mov	r1, r7
 800a3da:	462a      	mov	r2, r5
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f000 fad7 	bl	800a990 <__lshift>
 800a3e2:	4607      	mov	r7, r0
 800a3e4:	f1b8 0f00 	cmp.w	r8, #0
 800a3e8:	d05a      	beq.n	800a4a0 <_dtoa_r+0xa40>
 800a3ea:	6879      	ldr	r1, [r7, #4]
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f000 f90d 	bl	800a60c <_Balloc>
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	b920      	cbnz	r0, 800a400 <_dtoa_r+0x9a0>
 800a3f6:	4b82      	ldr	r3, [pc, #520]	; (800a600 <_dtoa_r+0xba0>)
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a3fe:	e470      	b.n	8009ce2 <_dtoa_r+0x282>
 800a400:	693a      	ldr	r2, [r7, #16]
 800a402:	3202      	adds	r2, #2
 800a404:	0092      	lsls	r2, r2, #2
 800a406:	f107 010c 	add.w	r1, r7, #12
 800a40a:	300c      	adds	r0, #12
 800a40c:	f000 fcca 	bl	800ada4 <memcpy>
 800a410:	2201      	movs	r2, #1
 800a412:	4629      	mov	r1, r5
 800a414:	4620      	mov	r0, r4
 800a416:	f000 fabb 	bl	800a990 <__lshift>
 800a41a:	9b00      	ldr	r3, [sp, #0]
 800a41c:	3301      	adds	r3, #1
 800a41e:	9304      	str	r3, [sp, #16]
 800a420:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a424:	4413      	add	r3, r2
 800a426:	9308      	str	r3, [sp, #32]
 800a428:	9b02      	ldr	r3, [sp, #8]
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	46b8      	mov	r8, r7
 800a430:	9306      	str	r3, [sp, #24]
 800a432:	4607      	mov	r7, r0
 800a434:	9b04      	ldr	r3, [sp, #16]
 800a436:	4631      	mov	r1, r6
 800a438:	3b01      	subs	r3, #1
 800a43a:	4650      	mov	r0, sl
 800a43c:	9301      	str	r3, [sp, #4]
 800a43e:	f7ff fa87 	bl	8009950 <quorem>
 800a442:	4641      	mov	r1, r8
 800a444:	9002      	str	r0, [sp, #8]
 800a446:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a44a:	4650      	mov	r0, sl
 800a44c:	f000 fb0c 	bl	800aa68 <__mcmp>
 800a450:	463a      	mov	r2, r7
 800a452:	9005      	str	r0, [sp, #20]
 800a454:	4631      	mov	r1, r6
 800a456:	4620      	mov	r0, r4
 800a458:	f000 fb22 	bl	800aaa0 <__mdiff>
 800a45c:	68c2      	ldr	r2, [r0, #12]
 800a45e:	4605      	mov	r5, r0
 800a460:	bb02      	cbnz	r2, 800a4a4 <_dtoa_r+0xa44>
 800a462:	4601      	mov	r1, r0
 800a464:	4650      	mov	r0, sl
 800a466:	f000 faff 	bl	800aa68 <__mcmp>
 800a46a:	4602      	mov	r2, r0
 800a46c:	4629      	mov	r1, r5
 800a46e:	4620      	mov	r0, r4
 800a470:	9209      	str	r2, [sp, #36]	; 0x24
 800a472:	f000 f8f0 	bl	800a656 <_Bfree>
 800a476:	9b07      	ldr	r3, [sp, #28]
 800a478:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a47a:	9d04      	ldr	r5, [sp, #16]
 800a47c:	ea43 0102 	orr.w	r1, r3, r2
 800a480:	9b06      	ldr	r3, [sp, #24]
 800a482:	4319      	orrs	r1, r3
 800a484:	d110      	bne.n	800a4a8 <_dtoa_r+0xa48>
 800a486:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a48a:	d029      	beq.n	800a4e0 <_dtoa_r+0xa80>
 800a48c:	9b05      	ldr	r3, [sp, #20]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dd02      	ble.n	800a498 <_dtoa_r+0xa38>
 800a492:	9b02      	ldr	r3, [sp, #8]
 800a494:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a498:	9b01      	ldr	r3, [sp, #4]
 800a49a:	f883 9000 	strb.w	r9, [r3]
 800a49e:	e775      	b.n	800a38c <_dtoa_r+0x92c>
 800a4a0:	4638      	mov	r0, r7
 800a4a2:	e7ba      	b.n	800a41a <_dtoa_r+0x9ba>
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	e7e1      	b.n	800a46c <_dtoa_r+0xa0c>
 800a4a8:	9b05      	ldr	r3, [sp, #20]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	db04      	blt.n	800a4b8 <_dtoa_r+0xa58>
 800a4ae:	9907      	ldr	r1, [sp, #28]
 800a4b0:	430b      	orrs	r3, r1
 800a4b2:	9906      	ldr	r1, [sp, #24]
 800a4b4:	430b      	orrs	r3, r1
 800a4b6:	d120      	bne.n	800a4fa <_dtoa_r+0xa9a>
 800a4b8:	2a00      	cmp	r2, #0
 800a4ba:	dded      	ble.n	800a498 <_dtoa_r+0xa38>
 800a4bc:	4651      	mov	r1, sl
 800a4be:	2201      	movs	r2, #1
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f000 fa65 	bl	800a990 <__lshift>
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	4682      	mov	sl, r0
 800a4ca:	f000 facd 	bl	800aa68 <__mcmp>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	dc03      	bgt.n	800a4da <_dtoa_r+0xa7a>
 800a4d2:	d1e1      	bne.n	800a498 <_dtoa_r+0xa38>
 800a4d4:	f019 0f01 	tst.w	r9, #1
 800a4d8:	d0de      	beq.n	800a498 <_dtoa_r+0xa38>
 800a4da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a4de:	d1d8      	bne.n	800a492 <_dtoa_r+0xa32>
 800a4e0:	9a01      	ldr	r2, [sp, #4]
 800a4e2:	2339      	movs	r3, #57	; 0x39
 800a4e4:	7013      	strb	r3, [r2, #0]
 800a4e6:	462b      	mov	r3, r5
 800a4e8:	461d      	mov	r5, r3
 800a4ea:	3b01      	subs	r3, #1
 800a4ec:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4f0:	2a39      	cmp	r2, #57	; 0x39
 800a4f2:	d06c      	beq.n	800a5ce <_dtoa_r+0xb6e>
 800a4f4:	3201      	adds	r2, #1
 800a4f6:	701a      	strb	r2, [r3, #0]
 800a4f8:	e748      	b.n	800a38c <_dtoa_r+0x92c>
 800a4fa:	2a00      	cmp	r2, #0
 800a4fc:	dd07      	ble.n	800a50e <_dtoa_r+0xaae>
 800a4fe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a502:	d0ed      	beq.n	800a4e0 <_dtoa_r+0xa80>
 800a504:	9a01      	ldr	r2, [sp, #4]
 800a506:	f109 0301 	add.w	r3, r9, #1
 800a50a:	7013      	strb	r3, [r2, #0]
 800a50c:	e73e      	b.n	800a38c <_dtoa_r+0x92c>
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	9a08      	ldr	r2, [sp, #32]
 800a512:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a516:	4293      	cmp	r3, r2
 800a518:	d043      	beq.n	800a5a2 <_dtoa_r+0xb42>
 800a51a:	4651      	mov	r1, sl
 800a51c:	2300      	movs	r3, #0
 800a51e:	220a      	movs	r2, #10
 800a520:	4620      	mov	r0, r4
 800a522:	f000 f8a1 	bl	800a668 <__multadd>
 800a526:	45b8      	cmp	r8, r7
 800a528:	4682      	mov	sl, r0
 800a52a:	f04f 0300 	mov.w	r3, #0
 800a52e:	f04f 020a 	mov.w	r2, #10
 800a532:	4641      	mov	r1, r8
 800a534:	4620      	mov	r0, r4
 800a536:	d107      	bne.n	800a548 <_dtoa_r+0xae8>
 800a538:	f000 f896 	bl	800a668 <__multadd>
 800a53c:	4680      	mov	r8, r0
 800a53e:	4607      	mov	r7, r0
 800a540:	9b04      	ldr	r3, [sp, #16]
 800a542:	3301      	adds	r3, #1
 800a544:	9304      	str	r3, [sp, #16]
 800a546:	e775      	b.n	800a434 <_dtoa_r+0x9d4>
 800a548:	f000 f88e 	bl	800a668 <__multadd>
 800a54c:	4639      	mov	r1, r7
 800a54e:	4680      	mov	r8, r0
 800a550:	2300      	movs	r3, #0
 800a552:	220a      	movs	r2, #10
 800a554:	4620      	mov	r0, r4
 800a556:	f000 f887 	bl	800a668 <__multadd>
 800a55a:	4607      	mov	r7, r0
 800a55c:	e7f0      	b.n	800a540 <_dtoa_r+0xae0>
 800a55e:	9b04      	ldr	r3, [sp, #16]
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	9d00      	ldr	r5, [sp, #0]
 800a564:	4631      	mov	r1, r6
 800a566:	4650      	mov	r0, sl
 800a568:	f7ff f9f2 	bl	8009950 <quorem>
 800a56c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a570:	9b00      	ldr	r3, [sp, #0]
 800a572:	f805 9b01 	strb.w	r9, [r5], #1
 800a576:	1aea      	subs	r2, r5, r3
 800a578:	9b01      	ldr	r3, [sp, #4]
 800a57a:	4293      	cmp	r3, r2
 800a57c:	dd07      	ble.n	800a58e <_dtoa_r+0xb2e>
 800a57e:	4651      	mov	r1, sl
 800a580:	2300      	movs	r3, #0
 800a582:	220a      	movs	r2, #10
 800a584:	4620      	mov	r0, r4
 800a586:	f000 f86f 	bl	800a668 <__multadd>
 800a58a:	4682      	mov	sl, r0
 800a58c:	e7ea      	b.n	800a564 <_dtoa_r+0xb04>
 800a58e:	9b01      	ldr	r3, [sp, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	bfc8      	it	gt
 800a594:	461d      	movgt	r5, r3
 800a596:	9b00      	ldr	r3, [sp, #0]
 800a598:	bfd8      	it	le
 800a59a:	2501      	movle	r5, #1
 800a59c:	441d      	add	r5, r3
 800a59e:	f04f 0800 	mov.w	r8, #0
 800a5a2:	4651      	mov	r1, sl
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	4620      	mov	r0, r4
 800a5a8:	f000 f9f2 	bl	800a990 <__lshift>
 800a5ac:	4631      	mov	r1, r6
 800a5ae:	4682      	mov	sl, r0
 800a5b0:	f000 fa5a 	bl	800aa68 <__mcmp>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	dc96      	bgt.n	800a4e6 <_dtoa_r+0xa86>
 800a5b8:	d102      	bne.n	800a5c0 <_dtoa_r+0xb60>
 800a5ba:	f019 0f01 	tst.w	r9, #1
 800a5be:	d192      	bne.n	800a4e6 <_dtoa_r+0xa86>
 800a5c0:	462b      	mov	r3, r5
 800a5c2:	461d      	mov	r5, r3
 800a5c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5c8:	2a30      	cmp	r2, #48	; 0x30
 800a5ca:	d0fa      	beq.n	800a5c2 <_dtoa_r+0xb62>
 800a5cc:	e6de      	b.n	800a38c <_dtoa_r+0x92c>
 800a5ce:	9a00      	ldr	r2, [sp, #0]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	d189      	bne.n	800a4e8 <_dtoa_r+0xa88>
 800a5d4:	f10b 0b01 	add.w	fp, fp, #1
 800a5d8:	2331      	movs	r3, #49	; 0x31
 800a5da:	e796      	b.n	800a50a <_dtoa_r+0xaaa>
 800a5dc:	4b09      	ldr	r3, [pc, #36]	; (800a604 <_dtoa_r+0xba4>)
 800a5de:	f7ff ba9d 	b.w	8009b1c <_dtoa_r+0xbc>
 800a5e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	f47f aa7c 	bne.w	8009ae2 <_dtoa_r+0x82>
 800a5ea:	4b07      	ldr	r3, [pc, #28]	; (800a608 <_dtoa_r+0xba8>)
 800a5ec:	f7ff ba96 	b.w	8009b1c <_dtoa_r+0xbc>
 800a5f0:	9b01      	ldr	r3, [sp, #4]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	dcb5      	bgt.n	800a562 <_dtoa_r+0xb02>
 800a5f6:	9b07      	ldr	r3, [sp, #28]
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	f73f aeb2 	bgt.w	800a362 <_dtoa_r+0x902>
 800a5fe:	e7b0      	b.n	800a562 <_dtoa_r+0xb02>
 800a600:	0800d3f9 	.word	0x0800d3f9
 800a604:	0800d3ca 	.word	0x0800d3ca
 800a608:	0800d3ec 	.word	0x0800d3ec

0800a60c <_Balloc>:
 800a60c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a60e:	b570      	push	{r4, r5, r6, lr}
 800a610:	4605      	mov	r5, r0
 800a612:	460c      	mov	r4, r1
 800a614:	b17b      	cbz	r3, 800a636 <_Balloc+0x2a>
 800a616:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800a618:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a61c:	b9a0      	cbnz	r0, 800a648 <_Balloc+0x3c>
 800a61e:	2101      	movs	r1, #1
 800a620:	fa01 f604 	lsl.w	r6, r1, r4
 800a624:	1d72      	adds	r2, r6, #5
 800a626:	0092      	lsls	r2, r2, #2
 800a628:	4628      	mov	r0, r5
 800a62a:	f000 fbe7 	bl	800adfc <_calloc_r>
 800a62e:	b148      	cbz	r0, 800a644 <_Balloc+0x38>
 800a630:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800a634:	e00b      	b.n	800a64e <_Balloc+0x42>
 800a636:	2221      	movs	r2, #33	; 0x21
 800a638:	2104      	movs	r1, #4
 800a63a:	f000 fbdf 	bl	800adfc <_calloc_r>
 800a63e:	6468      	str	r0, [r5, #68]	; 0x44
 800a640:	2800      	cmp	r0, #0
 800a642:	d1e8      	bne.n	800a616 <_Balloc+0xa>
 800a644:	2000      	movs	r0, #0
 800a646:	bd70      	pop	{r4, r5, r6, pc}
 800a648:	6802      	ldr	r2, [r0, #0]
 800a64a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a64e:	2300      	movs	r3, #0
 800a650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a654:	e7f7      	b.n	800a646 <_Balloc+0x3a>

0800a656 <_Bfree>:
 800a656:	b131      	cbz	r1, 800a666 <_Bfree+0x10>
 800a658:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a65a:	684a      	ldr	r2, [r1, #4]
 800a65c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a660:	6008      	str	r0, [r1, #0]
 800a662:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a666:	4770      	bx	lr

0800a668 <__multadd>:
 800a668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66c:	690d      	ldr	r5, [r1, #16]
 800a66e:	4607      	mov	r7, r0
 800a670:	460c      	mov	r4, r1
 800a672:	461e      	mov	r6, r3
 800a674:	f101 0c14 	add.w	ip, r1, #20
 800a678:	2000      	movs	r0, #0
 800a67a:	f8dc 3000 	ldr.w	r3, [ip]
 800a67e:	b299      	uxth	r1, r3
 800a680:	fb02 6101 	mla	r1, r2, r1, r6
 800a684:	0c1e      	lsrs	r6, r3, #16
 800a686:	0c0b      	lsrs	r3, r1, #16
 800a688:	fb02 3306 	mla	r3, r2, r6, r3
 800a68c:	b289      	uxth	r1, r1
 800a68e:	3001      	adds	r0, #1
 800a690:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a694:	4285      	cmp	r5, r0
 800a696:	f84c 1b04 	str.w	r1, [ip], #4
 800a69a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a69e:	dcec      	bgt.n	800a67a <__multadd+0x12>
 800a6a0:	b30e      	cbz	r6, 800a6e6 <__multadd+0x7e>
 800a6a2:	68a3      	ldr	r3, [r4, #8]
 800a6a4:	42ab      	cmp	r3, r5
 800a6a6:	dc19      	bgt.n	800a6dc <__multadd+0x74>
 800a6a8:	6861      	ldr	r1, [r4, #4]
 800a6aa:	4638      	mov	r0, r7
 800a6ac:	3101      	adds	r1, #1
 800a6ae:	f7ff ffad 	bl	800a60c <_Balloc>
 800a6b2:	4680      	mov	r8, r0
 800a6b4:	b928      	cbnz	r0, 800a6c2 <__multadd+0x5a>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	4b0c      	ldr	r3, [pc, #48]	; (800a6ec <__multadd+0x84>)
 800a6ba:	480d      	ldr	r0, [pc, #52]	; (800a6f0 <__multadd+0x88>)
 800a6bc:	21ba      	movs	r1, #186	; 0xba
 800a6be:	f000 fb7f 	bl	800adc0 <__assert_func>
 800a6c2:	6922      	ldr	r2, [r4, #16]
 800a6c4:	3202      	adds	r2, #2
 800a6c6:	f104 010c 	add.w	r1, r4, #12
 800a6ca:	0092      	lsls	r2, r2, #2
 800a6cc:	300c      	adds	r0, #12
 800a6ce:	f000 fb69 	bl	800ada4 <memcpy>
 800a6d2:	4621      	mov	r1, r4
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	f7ff ffbe 	bl	800a656 <_Bfree>
 800a6da:	4644      	mov	r4, r8
 800a6dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a6e0:	3501      	adds	r5, #1
 800a6e2:	615e      	str	r6, [r3, #20]
 800a6e4:	6125      	str	r5, [r4, #16]
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6ec:	0800d3f9 	.word	0x0800d3f9
 800a6f0:	0800d462 	.word	0x0800d462

0800a6f4 <__hi0bits>:
 800a6f4:	0c03      	lsrs	r3, r0, #16
 800a6f6:	041b      	lsls	r3, r3, #16
 800a6f8:	b9d3      	cbnz	r3, 800a730 <__hi0bits+0x3c>
 800a6fa:	0400      	lsls	r0, r0, #16
 800a6fc:	2310      	movs	r3, #16
 800a6fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a702:	bf04      	itt	eq
 800a704:	0200      	lsleq	r0, r0, #8
 800a706:	3308      	addeq	r3, #8
 800a708:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a70c:	bf04      	itt	eq
 800a70e:	0100      	lsleq	r0, r0, #4
 800a710:	3304      	addeq	r3, #4
 800a712:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a716:	bf04      	itt	eq
 800a718:	0080      	lsleq	r0, r0, #2
 800a71a:	3302      	addeq	r3, #2
 800a71c:	2800      	cmp	r0, #0
 800a71e:	db05      	blt.n	800a72c <__hi0bits+0x38>
 800a720:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a724:	f103 0301 	add.w	r3, r3, #1
 800a728:	bf08      	it	eq
 800a72a:	2320      	moveq	r3, #32
 800a72c:	4618      	mov	r0, r3
 800a72e:	4770      	bx	lr
 800a730:	2300      	movs	r3, #0
 800a732:	e7e4      	b.n	800a6fe <__hi0bits+0xa>

0800a734 <__lo0bits>:
 800a734:	6803      	ldr	r3, [r0, #0]
 800a736:	f013 0207 	ands.w	r2, r3, #7
 800a73a:	d00c      	beq.n	800a756 <__lo0bits+0x22>
 800a73c:	07d9      	lsls	r1, r3, #31
 800a73e:	d422      	bmi.n	800a786 <__lo0bits+0x52>
 800a740:	079a      	lsls	r2, r3, #30
 800a742:	bf49      	itett	mi
 800a744:	085b      	lsrmi	r3, r3, #1
 800a746:	089b      	lsrpl	r3, r3, #2
 800a748:	6003      	strmi	r3, [r0, #0]
 800a74a:	2201      	movmi	r2, #1
 800a74c:	bf5c      	itt	pl
 800a74e:	6003      	strpl	r3, [r0, #0]
 800a750:	2202      	movpl	r2, #2
 800a752:	4610      	mov	r0, r2
 800a754:	4770      	bx	lr
 800a756:	b299      	uxth	r1, r3
 800a758:	b909      	cbnz	r1, 800a75e <__lo0bits+0x2a>
 800a75a:	0c1b      	lsrs	r3, r3, #16
 800a75c:	2210      	movs	r2, #16
 800a75e:	b2d9      	uxtb	r1, r3
 800a760:	b909      	cbnz	r1, 800a766 <__lo0bits+0x32>
 800a762:	3208      	adds	r2, #8
 800a764:	0a1b      	lsrs	r3, r3, #8
 800a766:	0719      	lsls	r1, r3, #28
 800a768:	bf04      	itt	eq
 800a76a:	091b      	lsreq	r3, r3, #4
 800a76c:	3204      	addeq	r2, #4
 800a76e:	0799      	lsls	r1, r3, #30
 800a770:	bf04      	itt	eq
 800a772:	089b      	lsreq	r3, r3, #2
 800a774:	3202      	addeq	r2, #2
 800a776:	07d9      	lsls	r1, r3, #31
 800a778:	d403      	bmi.n	800a782 <__lo0bits+0x4e>
 800a77a:	085b      	lsrs	r3, r3, #1
 800a77c:	f102 0201 	add.w	r2, r2, #1
 800a780:	d003      	beq.n	800a78a <__lo0bits+0x56>
 800a782:	6003      	str	r3, [r0, #0]
 800a784:	e7e5      	b.n	800a752 <__lo0bits+0x1e>
 800a786:	2200      	movs	r2, #0
 800a788:	e7e3      	b.n	800a752 <__lo0bits+0x1e>
 800a78a:	2220      	movs	r2, #32
 800a78c:	e7e1      	b.n	800a752 <__lo0bits+0x1e>
	...

0800a790 <__i2b>:
 800a790:	b510      	push	{r4, lr}
 800a792:	460c      	mov	r4, r1
 800a794:	2101      	movs	r1, #1
 800a796:	f7ff ff39 	bl	800a60c <_Balloc>
 800a79a:	4602      	mov	r2, r0
 800a79c:	b928      	cbnz	r0, 800a7aa <__i2b+0x1a>
 800a79e:	4b05      	ldr	r3, [pc, #20]	; (800a7b4 <__i2b+0x24>)
 800a7a0:	4805      	ldr	r0, [pc, #20]	; (800a7b8 <__i2b+0x28>)
 800a7a2:	f240 1145 	movw	r1, #325	; 0x145
 800a7a6:	f000 fb0b 	bl	800adc0 <__assert_func>
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	6144      	str	r4, [r0, #20]
 800a7ae:	6103      	str	r3, [r0, #16]
 800a7b0:	bd10      	pop	{r4, pc}
 800a7b2:	bf00      	nop
 800a7b4:	0800d3f9 	.word	0x0800d3f9
 800a7b8:	0800d462 	.word	0x0800d462

0800a7bc <__multiply>:
 800a7bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c0:	4691      	mov	r9, r2
 800a7c2:	690a      	ldr	r2, [r1, #16]
 800a7c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	bfb8      	it	lt
 800a7cc:	460b      	movlt	r3, r1
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	bfbc      	itt	lt
 800a7d2:	464c      	movlt	r4, r9
 800a7d4:	4699      	movlt	r9, r3
 800a7d6:	6927      	ldr	r7, [r4, #16]
 800a7d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a7dc:	68a3      	ldr	r3, [r4, #8]
 800a7de:	6861      	ldr	r1, [r4, #4]
 800a7e0:	eb07 060a 	add.w	r6, r7, sl
 800a7e4:	42b3      	cmp	r3, r6
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	bfb8      	it	lt
 800a7ea:	3101      	addlt	r1, #1
 800a7ec:	f7ff ff0e 	bl	800a60c <_Balloc>
 800a7f0:	b930      	cbnz	r0, 800a800 <__multiply+0x44>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	4b44      	ldr	r3, [pc, #272]	; (800a908 <__multiply+0x14c>)
 800a7f6:	4845      	ldr	r0, [pc, #276]	; (800a90c <__multiply+0x150>)
 800a7f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a7fc:	f000 fae0 	bl	800adc0 <__assert_func>
 800a800:	f100 0514 	add.w	r5, r0, #20
 800a804:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a808:	462b      	mov	r3, r5
 800a80a:	2200      	movs	r2, #0
 800a80c:	4543      	cmp	r3, r8
 800a80e:	d321      	bcc.n	800a854 <__multiply+0x98>
 800a810:	f104 0314 	add.w	r3, r4, #20
 800a814:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a818:	f109 0314 	add.w	r3, r9, #20
 800a81c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a820:	9202      	str	r2, [sp, #8]
 800a822:	1b3a      	subs	r2, r7, r4
 800a824:	3a15      	subs	r2, #21
 800a826:	f022 0203 	bic.w	r2, r2, #3
 800a82a:	3204      	adds	r2, #4
 800a82c:	f104 0115 	add.w	r1, r4, #21
 800a830:	428f      	cmp	r7, r1
 800a832:	bf38      	it	cc
 800a834:	2204      	movcc	r2, #4
 800a836:	9201      	str	r2, [sp, #4]
 800a838:	9a02      	ldr	r2, [sp, #8]
 800a83a:	9303      	str	r3, [sp, #12]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d80c      	bhi.n	800a85a <__multiply+0x9e>
 800a840:	2e00      	cmp	r6, #0
 800a842:	dd03      	ble.n	800a84c <__multiply+0x90>
 800a844:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d05b      	beq.n	800a904 <__multiply+0x148>
 800a84c:	6106      	str	r6, [r0, #16]
 800a84e:	b005      	add	sp, #20
 800a850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a854:	f843 2b04 	str.w	r2, [r3], #4
 800a858:	e7d8      	b.n	800a80c <__multiply+0x50>
 800a85a:	f8b3 a000 	ldrh.w	sl, [r3]
 800a85e:	f1ba 0f00 	cmp.w	sl, #0
 800a862:	d024      	beq.n	800a8ae <__multiply+0xf2>
 800a864:	f104 0e14 	add.w	lr, r4, #20
 800a868:	46a9      	mov	r9, r5
 800a86a:	f04f 0c00 	mov.w	ip, #0
 800a86e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a872:	f8d9 1000 	ldr.w	r1, [r9]
 800a876:	fa1f fb82 	uxth.w	fp, r2
 800a87a:	b289      	uxth	r1, r1
 800a87c:	fb0a 110b 	mla	r1, sl, fp, r1
 800a880:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a884:	f8d9 2000 	ldr.w	r2, [r9]
 800a888:	4461      	add	r1, ip
 800a88a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a88e:	fb0a c20b 	mla	r2, sl, fp, ip
 800a892:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a896:	b289      	uxth	r1, r1
 800a898:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a89c:	4577      	cmp	r7, lr
 800a89e:	f849 1b04 	str.w	r1, [r9], #4
 800a8a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8a6:	d8e2      	bhi.n	800a86e <__multiply+0xb2>
 800a8a8:	9a01      	ldr	r2, [sp, #4]
 800a8aa:	f845 c002 	str.w	ip, [r5, r2]
 800a8ae:	9a03      	ldr	r2, [sp, #12]
 800a8b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8b4:	3304      	adds	r3, #4
 800a8b6:	f1b9 0f00 	cmp.w	r9, #0
 800a8ba:	d021      	beq.n	800a900 <__multiply+0x144>
 800a8bc:	6829      	ldr	r1, [r5, #0]
 800a8be:	f104 0c14 	add.w	ip, r4, #20
 800a8c2:	46ae      	mov	lr, r5
 800a8c4:	f04f 0a00 	mov.w	sl, #0
 800a8c8:	f8bc b000 	ldrh.w	fp, [ip]
 800a8cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a8d0:	fb09 220b 	mla	r2, r9, fp, r2
 800a8d4:	4452      	add	r2, sl
 800a8d6:	b289      	uxth	r1, r1
 800a8d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8dc:	f84e 1b04 	str.w	r1, [lr], #4
 800a8e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a8e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8e8:	f8be 1000 	ldrh.w	r1, [lr]
 800a8ec:	fb09 110a 	mla	r1, r9, sl, r1
 800a8f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a8f4:	4567      	cmp	r7, ip
 800a8f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8fa:	d8e5      	bhi.n	800a8c8 <__multiply+0x10c>
 800a8fc:	9a01      	ldr	r2, [sp, #4]
 800a8fe:	50a9      	str	r1, [r5, r2]
 800a900:	3504      	adds	r5, #4
 800a902:	e799      	b.n	800a838 <__multiply+0x7c>
 800a904:	3e01      	subs	r6, #1
 800a906:	e79b      	b.n	800a840 <__multiply+0x84>
 800a908:	0800d3f9 	.word	0x0800d3f9
 800a90c:	0800d462 	.word	0x0800d462

0800a910 <__pow5mult>:
 800a910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a914:	4615      	mov	r5, r2
 800a916:	f012 0203 	ands.w	r2, r2, #3
 800a91a:	4606      	mov	r6, r0
 800a91c:	460f      	mov	r7, r1
 800a91e:	d007      	beq.n	800a930 <__pow5mult+0x20>
 800a920:	4c1a      	ldr	r4, [pc, #104]	; (800a98c <__pow5mult+0x7c>)
 800a922:	3a01      	subs	r2, #1
 800a924:	2300      	movs	r3, #0
 800a926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a92a:	f7ff fe9d 	bl	800a668 <__multadd>
 800a92e:	4607      	mov	r7, r0
 800a930:	10ad      	asrs	r5, r5, #2
 800a932:	d027      	beq.n	800a984 <__pow5mult+0x74>
 800a934:	6c34      	ldr	r4, [r6, #64]	; 0x40
 800a936:	b944      	cbnz	r4, 800a94a <__pow5mult+0x3a>
 800a938:	f240 2171 	movw	r1, #625	; 0x271
 800a93c:	4630      	mov	r0, r6
 800a93e:	f7ff ff27 	bl	800a790 <__i2b>
 800a942:	2300      	movs	r3, #0
 800a944:	6430      	str	r0, [r6, #64]	; 0x40
 800a946:	4604      	mov	r4, r0
 800a948:	6003      	str	r3, [r0, #0]
 800a94a:	f04f 0900 	mov.w	r9, #0
 800a94e:	07eb      	lsls	r3, r5, #31
 800a950:	d50a      	bpl.n	800a968 <__pow5mult+0x58>
 800a952:	4639      	mov	r1, r7
 800a954:	4622      	mov	r2, r4
 800a956:	4630      	mov	r0, r6
 800a958:	f7ff ff30 	bl	800a7bc <__multiply>
 800a95c:	4639      	mov	r1, r7
 800a95e:	4680      	mov	r8, r0
 800a960:	4630      	mov	r0, r6
 800a962:	f7ff fe78 	bl	800a656 <_Bfree>
 800a966:	4647      	mov	r7, r8
 800a968:	106d      	asrs	r5, r5, #1
 800a96a:	d00b      	beq.n	800a984 <__pow5mult+0x74>
 800a96c:	6820      	ldr	r0, [r4, #0]
 800a96e:	b938      	cbnz	r0, 800a980 <__pow5mult+0x70>
 800a970:	4622      	mov	r2, r4
 800a972:	4621      	mov	r1, r4
 800a974:	4630      	mov	r0, r6
 800a976:	f7ff ff21 	bl	800a7bc <__multiply>
 800a97a:	6020      	str	r0, [r4, #0]
 800a97c:	f8c0 9000 	str.w	r9, [r0]
 800a980:	4604      	mov	r4, r0
 800a982:	e7e4      	b.n	800a94e <__pow5mult+0x3e>
 800a984:	4638      	mov	r0, r7
 800a986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a98a:	bf00      	nop
 800a98c:	0800d5b0 	.word	0x0800d5b0

0800a990 <__lshift>:
 800a990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a994:	460c      	mov	r4, r1
 800a996:	6849      	ldr	r1, [r1, #4]
 800a998:	6923      	ldr	r3, [r4, #16]
 800a99a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a99e:	68a3      	ldr	r3, [r4, #8]
 800a9a0:	4607      	mov	r7, r0
 800a9a2:	4691      	mov	r9, r2
 800a9a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9a8:	f108 0601 	add.w	r6, r8, #1
 800a9ac:	42b3      	cmp	r3, r6
 800a9ae:	db0b      	blt.n	800a9c8 <__lshift+0x38>
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	f7ff fe2b 	bl	800a60c <_Balloc>
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	b948      	cbnz	r0, 800a9ce <__lshift+0x3e>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	4b28      	ldr	r3, [pc, #160]	; (800aa60 <__lshift+0xd0>)
 800a9be:	4829      	ldr	r0, [pc, #164]	; (800aa64 <__lshift+0xd4>)
 800a9c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a9c4:	f000 f9fc 	bl	800adc0 <__assert_func>
 800a9c8:	3101      	adds	r1, #1
 800a9ca:	005b      	lsls	r3, r3, #1
 800a9cc:	e7ee      	b.n	800a9ac <__lshift+0x1c>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	f100 0114 	add.w	r1, r0, #20
 800a9d4:	f100 0210 	add.w	r2, r0, #16
 800a9d8:	4618      	mov	r0, r3
 800a9da:	4553      	cmp	r3, sl
 800a9dc:	db33      	blt.n	800aa46 <__lshift+0xb6>
 800a9de:	6920      	ldr	r0, [r4, #16]
 800a9e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9e4:	f104 0314 	add.w	r3, r4, #20
 800a9e8:	f019 091f 	ands.w	r9, r9, #31
 800a9ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9f4:	d02b      	beq.n	800aa4e <__lshift+0xbe>
 800a9f6:	f1c9 0e20 	rsb	lr, r9, #32
 800a9fa:	468a      	mov	sl, r1
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	6818      	ldr	r0, [r3, #0]
 800aa00:	fa00 f009 	lsl.w	r0, r0, r9
 800aa04:	4310      	orrs	r0, r2
 800aa06:	f84a 0b04 	str.w	r0, [sl], #4
 800aa0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa0e:	459c      	cmp	ip, r3
 800aa10:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa14:	d8f3      	bhi.n	800a9fe <__lshift+0x6e>
 800aa16:	ebac 0304 	sub.w	r3, ip, r4
 800aa1a:	3b15      	subs	r3, #21
 800aa1c:	f023 0303 	bic.w	r3, r3, #3
 800aa20:	3304      	adds	r3, #4
 800aa22:	f104 0015 	add.w	r0, r4, #21
 800aa26:	4584      	cmp	ip, r0
 800aa28:	bf38      	it	cc
 800aa2a:	2304      	movcc	r3, #4
 800aa2c:	50ca      	str	r2, [r1, r3]
 800aa2e:	b10a      	cbz	r2, 800aa34 <__lshift+0xa4>
 800aa30:	f108 0602 	add.w	r6, r8, #2
 800aa34:	3e01      	subs	r6, #1
 800aa36:	4638      	mov	r0, r7
 800aa38:	612e      	str	r6, [r5, #16]
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	f7ff fe0b 	bl	800a656 <_Bfree>
 800aa40:	4628      	mov	r0, r5
 800aa42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa46:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	e7c5      	b.n	800a9da <__lshift+0x4a>
 800aa4e:	3904      	subs	r1, #4
 800aa50:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa54:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa58:	459c      	cmp	ip, r3
 800aa5a:	d8f9      	bhi.n	800aa50 <__lshift+0xc0>
 800aa5c:	e7ea      	b.n	800aa34 <__lshift+0xa4>
 800aa5e:	bf00      	nop
 800aa60:	0800d3f9 	.word	0x0800d3f9
 800aa64:	0800d462 	.word	0x0800d462

0800aa68 <__mcmp>:
 800aa68:	b530      	push	{r4, r5, lr}
 800aa6a:	6902      	ldr	r2, [r0, #16]
 800aa6c:	690c      	ldr	r4, [r1, #16]
 800aa6e:	1b12      	subs	r2, r2, r4
 800aa70:	d10e      	bne.n	800aa90 <__mcmp+0x28>
 800aa72:	f100 0314 	add.w	r3, r0, #20
 800aa76:	3114      	adds	r1, #20
 800aa78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aa80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aa84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aa88:	42a5      	cmp	r5, r4
 800aa8a:	d003      	beq.n	800aa94 <__mcmp+0x2c>
 800aa8c:	d305      	bcc.n	800aa9a <__mcmp+0x32>
 800aa8e:	2201      	movs	r2, #1
 800aa90:	4610      	mov	r0, r2
 800aa92:	bd30      	pop	{r4, r5, pc}
 800aa94:	4283      	cmp	r3, r0
 800aa96:	d3f3      	bcc.n	800aa80 <__mcmp+0x18>
 800aa98:	e7fa      	b.n	800aa90 <__mcmp+0x28>
 800aa9a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa9e:	e7f7      	b.n	800aa90 <__mcmp+0x28>

0800aaa0 <__mdiff>:
 800aaa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	460c      	mov	r4, r1
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	4620      	mov	r0, r4
 800aaac:	4690      	mov	r8, r2
 800aaae:	f7ff ffdb 	bl	800aa68 <__mcmp>
 800aab2:	1e05      	subs	r5, r0, #0
 800aab4:	d110      	bne.n	800aad8 <__mdiff+0x38>
 800aab6:	4629      	mov	r1, r5
 800aab8:	4630      	mov	r0, r6
 800aaba:	f7ff fda7 	bl	800a60c <_Balloc>
 800aabe:	b930      	cbnz	r0, 800aace <__mdiff+0x2e>
 800aac0:	4b3a      	ldr	r3, [pc, #232]	; (800abac <__mdiff+0x10c>)
 800aac2:	4602      	mov	r2, r0
 800aac4:	f240 2137 	movw	r1, #567	; 0x237
 800aac8:	4839      	ldr	r0, [pc, #228]	; (800abb0 <__mdiff+0x110>)
 800aaca:	f000 f979 	bl	800adc0 <__assert_func>
 800aace:	2301      	movs	r3, #1
 800aad0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad8:	bfa4      	itt	ge
 800aada:	4643      	movge	r3, r8
 800aadc:	46a0      	movge	r8, r4
 800aade:	4630      	mov	r0, r6
 800aae0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aae4:	bfa6      	itte	ge
 800aae6:	461c      	movge	r4, r3
 800aae8:	2500      	movge	r5, #0
 800aaea:	2501      	movlt	r5, #1
 800aaec:	f7ff fd8e 	bl	800a60c <_Balloc>
 800aaf0:	b920      	cbnz	r0, 800aafc <__mdiff+0x5c>
 800aaf2:	4b2e      	ldr	r3, [pc, #184]	; (800abac <__mdiff+0x10c>)
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	f240 2145 	movw	r1, #581	; 0x245
 800aafa:	e7e5      	b.n	800aac8 <__mdiff+0x28>
 800aafc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab00:	6926      	ldr	r6, [r4, #16]
 800ab02:	60c5      	str	r5, [r0, #12]
 800ab04:	f104 0914 	add.w	r9, r4, #20
 800ab08:	f108 0514 	add.w	r5, r8, #20
 800ab0c:	f100 0e14 	add.w	lr, r0, #20
 800ab10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ab14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab18:	f108 0210 	add.w	r2, r8, #16
 800ab1c:	46f2      	mov	sl, lr
 800ab1e:	2100      	movs	r1, #0
 800ab20:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab28:	fa11 f88b 	uxtah	r8, r1, fp
 800ab2c:	b299      	uxth	r1, r3
 800ab2e:	0c1b      	lsrs	r3, r3, #16
 800ab30:	eba8 0801 	sub.w	r8, r8, r1
 800ab34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab3c:	fa1f f888 	uxth.w	r8, r8
 800ab40:	1419      	asrs	r1, r3, #16
 800ab42:	454e      	cmp	r6, r9
 800ab44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab48:	f84a 3b04 	str.w	r3, [sl], #4
 800ab4c:	d8e8      	bhi.n	800ab20 <__mdiff+0x80>
 800ab4e:	1b33      	subs	r3, r6, r4
 800ab50:	3b15      	subs	r3, #21
 800ab52:	f023 0303 	bic.w	r3, r3, #3
 800ab56:	3304      	adds	r3, #4
 800ab58:	3415      	adds	r4, #21
 800ab5a:	42a6      	cmp	r6, r4
 800ab5c:	bf38      	it	cc
 800ab5e:	2304      	movcc	r3, #4
 800ab60:	441d      	add	r5, r3
 800ab62:	4473      	add	r3, lr
 800ab64:	469e      	mov	lr, r3
 800ab66:	462e      	mov	r6, r5
 800ab68:	4566      	cmp	r6, ip
 800ab6a:	d30e      	bcc.n	800ab8a <__mdiff+0xea>
 800ab6c:	f10c 0203 	add.w	r2, ip, #3
 800ab70:	1b52      	subs	r2, r2, r5
 800ab72:	f022 0203 	bic.w	r2, r2, #3
 800ab76:	3d03      	subs	r5, #3
 800ab78:	45ac      	cmp	ip, r5
 800ab7a:	bf38      	it	cc
 800ab7c:	2200      	movcc	r2, #0
 800ab7e:	4413      	add	r3, r2
 800ab80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ab84:	b17a      	cbz	r2, 800aba6 <__mdiff+0x106>
 800ab86:	6107      	str	r7, [r0, #16]
 800ab88:	e7a4      	b.n	800aad4 <__mdiff+0x34>
 800ab8a:	f856 8b04 	ldr.w	r8, [r6], #4
 800ab8e:	fa11 f288 	uxtah	r2, r1, r8
 800ab92:	1414      	asrs	r4, r2, #16
 800ab94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ab98:	b292      	uxth	r2, r2
 800ab9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ab9e:	f84e 2b04 	str.w	r2, [lr], #4
 800aba2:	1421      	asrs	r1, r4, #16
 800aba4:	e7e0      	b.n	800ab68 <__mdiff+0xc8>
 800aba6:	3f01      	subs	r7, #1
 800aba8:	e7ea      	b.n	800ab80 <__mdiff+0xe0>
 800abaa:	bf00      	nop
 800abac:	0800d3f9 	.word	0x0800d3f9
 800abb0:	0800d462 	.word	0x0800d462

0800abb4 <__d2b>:
 800abb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abb8:	460f      	mov	r7, r1
 800abba:	2101      	movs	r1, #1
 800abbc:	ec59 8b10 	vmov	r8, r9, d0
 800abc0:	4616      	mov	r6, r2
 800abc2:	f7ff fd23 	bl	800a60c <_Balloc>
 800abc6:	4604      	mov	r4, r0
 800abc8:	b930      	cbnz	r0, 800abd8 <__d2b+0x24>
 800abca:	4602      	mov	r2, r0
 800abcc:	4b24      	ldr	r3, [pc, #144]	; (800ac60 <__d2b+0xac>)
 800abce:	4825      	ldr	r0, [pc, #148]	; (800ac64 <__d2b+0xb0>)
 800abd0:	f240 310f 	movw	r1, #783	; 0x30f
 800abd4:	f000 f8f4 	bl	800adc0 <__assert_func>
 800abd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abe0:	bb2d      	cbnz	r5, 800ac2e <__d2b+0x7a>
 800abe2:	9301      	str	r3, [sp, #4]
 800abe4:	f1b8 0300 	subs.w	r3, r8, #0
 800abe8:	d026      	beq.n	800ac38 <__d2b+0x84>
 800abea:	4668      	mov	r0, sp
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	f7ff fda1 	bl	800a734 <__lo0bits>
 800abf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abf6:	b1e8      	cbz	r0, 800ac34 <__d2b+0x80>
 800abf8:	f1c0 0320 	rsb	r3, r0, #32
 800abfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ac00:	430b      	orrs	r3, r1
 800ac02:	40c2      	lsrs	r2, r0
 800ac04:	6163      	str	r3, [r4, #20]
 800ac06:	9201      	str	r2, [sp, #4]
 800ac08:	9b01      	ldr	r3, [sp, #4]
 800ac0a:	61a3      	str	r3, [r4, #24]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	bf14      	ite	ne
 800ac10:	2202      	movne	r2, #2
 800ac12:	2201      	moveq	r2, #1
 800ac14:	6122      	str	r2, [r4, #16]
 800ac16:	b1bd      	cbz	r5, 800ac48 <__d2b+0x94>
 800ac18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac1c:	4405      	add	r5, r0
 800ac1e:	603d      	str	r5, [r7, #0]
 800ac20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac24:	6030      	str	r0, [r6, #0]
 800ac26:	4620      	mov	r0, r4
 800ac28:	b003      	add	sp, #12
 800ac2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac32:	e7d6      	b.n	800abe2 <__d2b+0x2e>
 800ac34:	6161      	str	r1, [r4, #20]
 800ac36:	e7e7      	b.n	800ac08 <__d2b+0x54>
 800ac38:	a801      	add	r0, sp, #4
 800ac3a:	f7ff fd7b 	bl	800a734 <__lo0bits>
 800ac3e:	9b01      	ldr	r3, [sp, #4]
 800ac40:	6163      	str	r3, [r4, #20]
 800ac42:	3020      	adds	r0, #32
 800ac44:	2201      	movs	r2, #1
 800ac46:	e7e5      	b.n	800ac14 <__d2b+0x60>
 800ac48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac50:	6038      	str	r0, [r7, #0]
 800ac52:	6918      	ldr	r0, [r3, #16]
 800ac54:	f7ff fd4e 	bl	800a6f4 <__hi0bits>
 800ac58:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac5c:	e7e2      	b.n	800ac24 <__d2b+0x70>
 800ac5e:	bf00      	nop
 800ac60:	0800d3f9 	.word	0x0800d3f9
 800ac64:	0800d462 	.word	0x0800d462

0800ac68 <__ssprint_r>:
 800ac68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	6813      	ldr	r3, [r2, #0]
 800ac6e:	9301      	str	r3, [sp, #4]
 800ac70:	6893      	ldr	r3, [r2, #8]
 800ac72:	4680      	mov	r8, r0
 800ac74:	460c      	mov	r4, r1
 800ac76:	4617      	mov	r7, r2
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d157      	bne.n	800ad2c <__ssprint_r+0xc4>
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	2300      	movs	r3, #0
 800ac80:	607b      	str	r3, [r7, #4]
 800ac82:	b003      	add	sp, #12
 800ac84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac88:	9b01      	ldr	r3, [sp, #4]
 800ac8a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800ac8e:	3308      	adds	r3, #8
 800ac90:	9301      	str	r3, [sp, #4]
 800ac92:	68a6      	ldr	r6, [r4, #8]
 800ac94:	6820      	ldr	r0, [r4, #0]
 800ac96:	f1bb 0f00 	cmp.w	fp, #0
 800ac9a:	d0f5      	beq.n	800ac88 <__ssprint_r+0x20>
 800ac9c:	45b3      	cmp	fp, r6
 800ac9e:	d32d      	bcc.n	800acfc <__ssprint_r+0x94>
 800aca0:	89a2      	ldrh	r2, [r4, #12]
 800aca2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aca6:	d029      	beq.n	800acfc <__ssprint_r+0x94>
 800aca8:	6921      	ldr	r1, [r4, #16]
 800acaa:	6965      	ldr	r5, [r4, #20]
 800acac:	eba0 0901 	sub.w	r9, r0, r1
 800acb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acb8:	f109 0001 	add.w	r0, r9, #1
 800acbc:	106d      	asrs	r5, r5, #1
 800acbe:	4458      	add	r0, fp
 800acc0:	4285      	cmp	r5, r0
 800acc2:	bf38      	it	cc
 800acc4:	4605      	movcc	r5, r0
 800acc6:	0553      	lsls	r3, r2, #21
 800acc8:	d534      	bpl.n	800ad34 <__ssprint_r+0xcc>
 800acca:	4629      	mov	r1, r5
 800accc:	4640      	mov	r0, r8
 800acce:	f7fd f83f 	bl	8007d50 <_malloc_r>
 800acd2:	4606      	mov	r6, r0
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d038      	beq.n	800ad4a <__ssprint_r+0xe2>
 800acd8:	464a      	mov	r2, r9
 800acda:	6921      	ldr	r1, [r4, #16]
 800acdc:	f000 f862 	bl	800ada4 <memcpy>
 800ace0:	89a2      	ldrh	r2, [r4, #12]
 800ace2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ace6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800acea:	81a2      	strh	r2, [r4, #12]
 800acec:	6126      	str	r6, [r4, #16]
 800acee:	6165      	str	r5, [r4, #20]
 800acf0:	444e      	add	r6, r9
 800acf2:	eba5 0509 	sub.w	r5, r5, r9
 800acf6:	6026      	str	r6, [r4, #0]
 800acf8:	60a5      	str	r5, [r4, #8]
 800acfa:	465e      	mov	r6, fp
 800acfc:	455e      	cmp	r6, fp
 800acfe:	bf28      	it	cs
 800ad00:	465e      	movcs	r6, fp
 800ad02:	4632      	mov	r2, r6
 800ad04:	4651      	mov	r1, sl
 800ad06:	6820      	ldr	r0, [r4, #0]
 800ad08:	f000 f82b 	bl	800ad62 <memmove>
 800ad0c:	68a2      	ldr	r2, [r4, #8]
 800ad0e:	1b92      	subs	r2, r2, r6
 800ad10:	60a2      	str	r2, [r4, #8]
 800ad12:	6822      	ldr	r2, [r4, #0]
 800ad14:	4432      	add	r2, r6
 800ad16:	6022      	str	r2, [r4, #0]
 800ad18:	68ba      	ldr	r2, [r7, #8]
 800ad1a:	eba2 030b 	sub.w	r3, r2, fp
 800ad1e:	44da      	add	sl, fp
 800ad20:	60bb      	str	r3, [r7, #8]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0aa      	beq.n	800ac7c <__ssprint_r+0x14>
 800ad26:	f04f 0b00 	mov.w	fp, #0
 800ad2a:	e7b2      	b.n	800ac92 <__ssprint_r+0x2a>
 800ad2c:	f04f 0a00 	mov.w	sl, #0
 800ad30:	46d3      	mov	fp, sl
 800ad32:	e7ae      	b.n	800ac92 <__ssprint_r+0x2a>
 800ad34:	462a      	mov	r2, r5
 800ad36:	4640      	mov	r0, r8
 800ad38:	f000 f8a8 	bl	800ae8c <_realloc_r>
 800ad3c:	4606      	mov	r6, r0
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d1d4      	bne.n	800acec <__ssprint_r+0x84>
 800ad42:	6921      	ldr	r1, [r4, #16]
 800ad44:	4640      	mov	r0, r8
 800ad46:	f7fc ff43 	bl	8007bd0 <_free_r>
 800ad4a:	230c      	movs	r3, #12
 800ad4c:	f8c8 3000 	str.w	r3, [r8]
 800ad50:	89a3      	ldrh	r3, [r4, #12]
 800ad52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad56:	81a3      	strh	r3, [r4, #12]
 800ad58:	2300      	movs	r3, #0
 800ad5a:	60bb      	str	r3, [r7, #8]
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad60:	e78d      	b.n	800ac7e <__ssprint_r+0x16>

0800ad62 <memmove>:
 800ad62:	4288      	cmp	r0, r1
 800ad64:	b510      	push	{r4, lr}
 800ad66:	eb01 0402 	add.w	r4, r1, r2
 800ad6a:	d902      	bls.n	800ad72 <memmove+0x10>
 800ad6c:	4284      	cmp	r4, r0
 800ad6e:	4623      	mov	r3, r4
 800ad70:	d807      	bhi.n	800ad82 <memmove+0x20>
 800ad72:	1e43      	subs	r3, r0, #1
 800ad74:	42a1      	cmp	r1, r4
 800ad76:	d008      	beq.n	800ad8a <memmove+0x28>
 800ad78:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad80:	e7f8      	b.n	800ad74 <memmove+0x12>
 800ad82:	4402      	add	r2, r0
 800ad84:	4601      	mov	r1, r0
 800ad86:	428a      	cmp	r2, r1
 800ad88:	d100      	bne.n	800ad8c <memmove+0x2a>
 800ad8a:	bd10      	pop	{r4, pc}
 800ad8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad90:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad94:	e7f7      	b.n	800ad86 <memmove+0x24>
	...

0800ad98 <__locale_mb_cur_max>:
 800ad98:	4b01      	ldr	r3, [pc, #4]	; (800ada0 <__locale_mb_cur_max+0x8>)
 800ad9a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800ad9e:	4770      	bx	lr
 800ada0:	20000640 	.word	0x20000640

0800ada4 <memcpy>:
 800ada4:	440a      	add	r2, r1
 800ada6:	4291      	cmp	r1, r2
 800ada8:	f100 33ff 	add.w	r3, r0, #4294967295
 800adac:	d100      	bne.n	800adb0 <memcpy+0xc>
 800adae:	4770      	bx	lr
 800adb0:	b510      	push	{r4, lr}
 800adb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adba:	4291      	cmp	r1, r2
 800adbc:	d1f9      	bne.n	800adb2 <memcpy+0xe>
 800adbe:	bd10      	pop	{r4, pc}

0800adc0 <__assert_func>:
 800adc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adc2:	4614      	mov	r4, r2
 800adc4:	461a      	mov	r2, r3
 800adc6:	4b09      	ldr	r3, [pc, #36]	; (800adec <__assert_func+0x2c>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4605      	mov	r5, r0
 800adcc:	68d8      	ldr	r0, [r3, #12]
 800adce:	b14c      	cbz	r4, 800ade4 <__assert_func+0x24>
 800add0:	4b07      	ldr	r3, [pc, #28]	; (800adf0 <__assert_func+0x30>)
 800add2:	9100      	str	r1, [sp, #0]
 800add4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800add8:	4906      	ldr	r1, [pc, #24]	; (800adf4 <__assert_func+0x34>)
 800adda:	462b      	mov	r3, r5
 800addc:	f000 fa0c 	bl	800b1f8 <fiprintf>
 800ade0:	f001 f92d 	bl	800c03e <abort>
 800ade4:	4b04      	ldr	r3, [pc, #16]	; (800adf8 <__assert_func+0x38>)
 800ade6:	461c      	mov	r4, r3
 800ade8:	e7f3      	b.n	800add2 <__assert_func+0x12>
 800adea:	bf00      	nop
 800adec:	20000228 	.word	0x20000228
 800adf0:	0800d5c6 	.word	0x0800d5c6
 800adf4:	0800d5d3 	.word	0x0800d5d3
 800adf8:	0800d601 	.word	0x0800d601

0800adfc <_calloc_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	fba1 1502 	umull	r1, r5, r1, r2
 800ae02:	b92d      	cbnz	r5, 800ae10 <_calloc_r+0x14>
 800ae04:	f7fc ffa4 	bl	8007d50 <_malloc_r>
 800ae08:	4604      	mov	r4, r0
 800ae0a:	b938      	cbnz	r0, 800ae1c <_calloc_r+0x20>
 800ae0c:	4620      	mov	r0, r4
 800ae0e:	bd38      	pop	{r3, r4, r5, pc}
 800ae10:	f7fc fe4c 	bl	8007aac <__errno>
 800ae14:	230c      	movs	r3, #12
 800ae16:	6003      	str	r3, [r0, #0]
 800ae18:	2400      	movs	r4, #0
 800ae1a:	e7f7      	b.n	800ae0c <_calloc_r+0x10>
 800ae1c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ae20:	f022 0203 	bic.w	r2, r2, #3
 800ae24:	3a04      	subs	r2, #4
 800ae26:	2a24      	cmp	r2, #36	; 0x24
 800ae28:	d819      	bhi.n	800ae5e <_calloc_r+0x62>
 800ae2a:	2a13      	cmp	r2, #19
 800ae2c:	d915      	bls.n	800ae5a <_calloc_r+0x5e>
 800ae2e:	2a1b      	cmp	r2, #27
 800ae30:	e9c0 5500 	strd	r5, r5, [r0]
 800ae34:	d806      	bhi.n	800ae44 <_calloc_r+0x48>
 800ae36:	f100 0308 	add.w	r3, r0, #8
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	e9c3 2200 	strd	r2, r2, [r3]
 800ae40:	609a      	str	r2, [r3, #8]
 800ae42:	e7e3      	b.n	800ae0c <_calloc_r+0x10>
 800ae44:	2a24      	cmp	r2, #36	; 0x24
 800ae46:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800ae4a:	bf11      	iteee	ne
 800ae4c:	f100 0310 	addne.w	r3, r0, #16
 800ae50:	6105      	streq	r5, [r0, #16]
 800ae52:	f100 0318 	addeq.w	r3, r0, #24
 800ae56:	6145      	streq	r5, [r0, #20]
 800ae58:	e7ef      	b.n	800ae3a <_calloc_r+0x3e>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	e7ed      	b.n	800ae3a <_calloc_r+0x3e>
 800ae5e:	4629      	mov	r1, r5
 800ae60:	f7fc fdd5 	bl	8007a0e <memset>
 800ae64:	e7d2      	b.n	800ae0c <_calloc_r+0x10>

0800ae66 <__ascii_mbtowc>:
 800ae66:	b082      	sub	sp, #8
 800ae68:	b901      	cbnz	r1, 800ae6c <__ascii_mbtowc+0x6>
 800ae6a:	a901      	add	r1, sp, #4
 800ae6c:	b142      	cbz	r2, 800ae80 <__ascii_mbtowc+0x1a>
 800ae6e:	b14b      	cbz	r3, 800ae84 <__ascii_mbtowc+0x1e>
 800ae70:	7813      	ldrb	r3, [r2, #0]
 800ae72:	600b      	str	r3, [r1, #0]
 800ae74:	7812      	ldrb	r2, [r2, #0]
 800ae76:	1e10      	subs	r0, r2, #0
 800ae78:	bf18      	it	ne
 800ae7a:	2001      	movne	r0, #1
 800ae7c:	b002      	add	sp, #8
 800ae7e:	4770      	bx	lr
 800ae80:	4610      	mov	r0, r2
 800ae82:	e7fb      	b.n	800ae7c <__ascii_mbtowc+0x16>
 800ae84:	f06f 0001 	mvn.w	r0, #1
 800ae88:	e7f8      	b.n	800ae7c <__ascii_mbtowc+0x16>
	...

0800ae8c <_realloc_r>:
 800ae8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae90:	4682      	mov	sl, r0
 800ae92:	460c      	mov	r4, r1
 800ae94:	b929      	cbnz	r1, 800aea2 <_realloc_r+0x16>
 800ae96:	4611      	mov	r1, r2
 800ae98:	b003      	add	sp, #12
 800ae9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9e:	f7fc bf57 	b.w	8007d50 <_malloc_r>
 800aea2:	9201      	str	r2, [sp, #4]
 800aea4:	f7fd f98e 	bl	80081c4 <__malloc_lock>
 800aea8:	9a01      	ldr	r2, [sp, #4]
 800aeaa:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800aeae:	f102 080b 	add.w	r8, r2, #11
 800aeb2:	f1b8 0f16 	cmp.w	r8, #22
 800aeb6:	d90b      	bls.n	800aed0 <_realloc_r+0x44>
 800aeb8:	f038 0807 	bics.w	r8, r8, #7
 800aebc:	d50a      	bpl.n	800aed4 <_realloc_r+0x48>
 800aebe:	230c      	movs	r3, #12
 800aec0:	f8ca 3000 	str.w	r3, [sl]
 800aec4:	f04f 0b00 	mov.w	fp, #0
 800aec8:	4658      	mov	r0, fp
 800aeca:	b003      	add	sp, #12
 800aecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed0:	f04f 0810 	mov.w	r8, #16
 800aed4:	4590      	cmp	r8, r2
 800aed6:	d3f2      	bcc.n	800aebe <_realloc_r+0x32>
 800aed8:	f025 0603 	bic.w	r6, r5, #3
 800aedc:	45b0      	cmp	r8, r6
 800aede:	f1a4 0908 	sub.w	r9, r4, #8
 800aee2:	f340 8170 	ble.w	800b1c6 <_realloc_r+0x33a>
 800aee6:	499c      	ldr	r1, [pc, #624]	; (800b158 <_realloc_r+0x2cc>)
 800aee8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800aeec:	eb09 0306 	add.w	r3, r9, r6
 800aef0:	459c      	cmp	ip, r3
 800aef2:	6859      	ldr	r1, [r3, #4]
 800aef4:	d005      	beq.n	800af02 <_realloc_r+0x76>
 800aef6:	f021 0001 	bic.w	r0, r1, #1
 800aefa:	4418      	add	r0, r3
 800aefc:	6840      	ldr	r0, [r0, #4]
 800aefe:	07c7      	lsls	r7, r0, #31
 800af00:	d447      	bmi.n	800af92 <_realloc_r+0x106>
 800af02:	f021 0103 	bic.w	r1, r1, #3
 800af06:	459c      	cmp	ip, r3
 800af08:	eb06 0701 	add.w	r7, r6, r1
 800af0c:	d119      	bne.n	800af42 <_realloc_r+0xb6>
 800af0e:	f108 0010 	add.w	r0, r8, #16
 800af12:	42b8      	cmp	r0, r7
 800af14:	dc3f      	bgt.n	800af96 <_realloc_r+0x10a>
 800af16:	eb09 0308 	add.w	r3, r9, r8
 800af1a:	4a8f      	ldr	r2, [pc, #572]	; (800b158 <_realloc_r+0x2cc>)
 800af1c:	eba7 0708 	sub.w	r7, r7, r8
 800af20:	f047 0701 	orr.w	r7, r7, #1
 800af24:	6093      	str	r3, [r2, #8]
 800af26:	605f      	str	r7, [r3, #4]
 800af28:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800af2c:	f003 0301 	and.w	r3, r3, #1
 800af30:	ea43 0308 	orr.w	r3, r3, r8
 800af34:	f844 3c04 	str.w	r3, [r4, #-4]
 800af38:	4650      	mov	r0, sl
 800af3a:	f7fd f949 	bl	80081d0 <__malloc_unlock>
 800af3e:	46a3      	mov	fp, r4
 800af40:	e7c2      	b.n	800aec8 <_realloc_r+0x3c>
 800af42:	45b8      	cmp	r8, r7
 800af44:	dc27      	bgt.n	800af96 <_realloc_r+0x10a>
 800af46:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800af4a:	60da      	str	r2, [r3, #12]
 800af4c:	6093      	str	r3, [r2, #8]
 800af4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800af52:	eba7 0008 	sub.w	r0, r7, r8
 800af56:	280f      	cmp	r0, #15
 800af58:	f003 0301 	and.w	r3, r3, #1
 800af5c:	eb09 0207 	add.w	r2, r9, r7
 800af60:	f240 8133 	bls.w	800b1ca <_realloc_r+0x33e>
 800af64:	eb09 0108 	add.w	r1, r9, r8
 800af68:	ea48 0303 	orr.w	r3, r8, r3
 800af6c:	f040 0001 	orr.w	r0, r0, #1
 800af70:	f8c9 3004 	str.w	r3, [r9, #4]
 800af74:	6048      	str	r0, [r1, #4]
 800af76:	6853      	ldr	r3, [r2, #4]
 800af78:	f043 0301 	orr.w	r3, r3, #1
 800af7c:	6053      	str	r3, [r2, #4]
 800af7e:	3108      	adds	r1, #8
 800af80:	4650      	mov	r0, sl
 800af82:	f7fc fe25 	bl	8007bd0 <_free_r>
 800af86:	4650      	mov	r0, sl
 800af88:	f7fd f922 	bl	80081d0 <__malloc_unlock>
 800af8c:	f109 0b08 	add.w	fp, r9, #8
 800af90:	e79a      	b.n	800aec8 <_realloc_r+0x3c>
 800af92:	2100      	movs	r1, #0
 800af94:	460b      	mov	r3, r1
 800af96:	07e8      	lsls	r0, r5, #31
 800af98:	f100 80c6 	bmi.w	800b128 <_realloc_r+0x29c>
 800af9c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800afa0:	eba9 0505 	sub.w	r5, r9, r5
 800afa4:	6868      	ldr	r0, [r5, #4]
 800afa6:	f020 0003 	bic.w	r0, r0, #3
 800afaa:	eb00 0b06 	add.w	fp, r0, r6
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f000 8086 	beq.w	800b0c0 <_realloc_r+0x234>
 800afb4:	459c      	cmp	ip, r3
 800afb6:	eb01 070b 	add.w	r7, r1, fp
 800afba:	d149      	bne.n	800b050 <_realloc_r+0x1c4>
 800afbc:	f108 0310 	add.w	r3, r8, #16
 800afc0:	42bb      	cmp	r3, r7
 800afc2:	dc7d      	bgt.n	800b0c0 <_realloc_r+0x234>
 800afc4:	46ab      	mov	fp, r5
 800afc6:	68eb      	ldr	r3, [r5, #12]
 800afc8:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800afcc:	60d3      	str	r3, [r2, #12]
 800afce:	609a      	str	r2, [r3, #8]
 800afd0:	1f32      	subs	r2, r6, #4
 800afd2:	2a24      	cmp	r2, #36	; 0x24
 800afd4:	d837      	bhi.n	800b046 <_realloc_r+0x1ba>
 800afd6:	2a13      	cmp	r2, #19
 800afd8:	d933      	bls.n	800b042 <_realloc_r+0x1b6>
 800afda:	6823      	ldr	r3, [r4, #0]
 800afdc:	60ab      	str	r3, [r5, #8]
 800afde:	6863      	ldr	r3, [r4, #4]
 800afe0:	60eb      	str	r3, [r5, #12]
 800afe2:	2a1b      	cmp	r2, #27
 800afe4:	d81b      	bhi.n	800b01e <_realloc_r+0x192>
 800afe6:	3408      	adds	r4, #8
 800afe8:	f105 0310 	add.w	r3, r5, #16
 800afec:	6822      	ldr	r2, [r4, #0]
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	6862      	ldr	r2, [r4, #4]
 800aff2:	605a      	str	r2, [r3, #4]
 800aff4:	68a2      	ldr	r2, [r4, #8]
 800aff6:	609a      	str	r2, [r3, #8]
 800aff8:	eb05 0308 	add.w	r3, r5, r8
 800affc:	4a56      	ldr	r2, [pc, #344]	; (800b158 <_realloc_r+0x2cc>)
 800affe:	eba7 0708 	sub.w	r7, r7, r8
 800b002:	f047 0701 	orr.w	r7, r7, #1
 800b006:	6093      	str	r3, [r2, #8]
 800b008:	605f      	str	r7, [r3, #4]
 800b00a:	686b      	ldr	r3, [r5, #4]
 800b00c:	f003 0301 	and.w	r3, r3, #1
 800b010:	ea43 0308 	orr.w	r3, r3, r8
 800b014:	606b      	str	r3, [r5, #4]
 800b016:	4650      	mov	r0, sl
 800b018:	f7fd f8da 	bl	80081d0 <__malloc_unlock>
 800b01c:	e754      	b.n	800aec8 <_realloc_r+0x3c>
 800b01e:	68a3      	ldr	r3, [r4, #8]
 800b020:	612b      	str	r3, [r5, #16]
 800b022:	68e3      	ldr	r3, [r4, #12]
 800b024:	616b      	str	r3, [r5, #20]
 800b026:	2a24      	cmp	r2, #36	; 0x24
 800b028:	bf01      	itttt	eq
 800b02a:	6923      	ldreq	r3, [r4, #16]
 800b02c:	61ab      	streq	r3, [r5, #24]
 800b02e:	6962      	ldreq	r2, [r4, #20]
 800b030:	61ea      	streq	r2, [r5, #28]
 800b032:	bf19      	ittee	ne
 800b034:	3410      	addne	r4, #16
 800b036:	f105 0318 	addne.w	r3, r5, #24
 800b03a:	f105 0320 	addeq.w	r3, r5, #32
 800b03e:	3418      	addeq	r4, #24
 800b040:	e7d4      	b.n	800afec <_realloc_r+0x160>
 800b042:	465b      	mov	r3, fp
 800b044:	e7d2      	b.n	800afec <_realloc_r+0x160>
 800b046:	4621      	mov	r1, r4
 800b048:	4658      	mov	r0, fp
 800b04a:	f7ff fe8a 	bl	800ad62 <memmove>
 800b04e:	e7d3      	b.n	800aff8 <_realloc_r+0x16c>
 800b050:	45b8      	cmp	r8, r7
 800b052:	dc35      	bgt.n	800b0c0 <_realloc_r+0x234>
 800b054:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800b058:	4628      	mov	r0, r5
 800b05a:	60da      	str	r2, [r3, #12]
 800b05c:	6093      	str	r3, [r2, #8]
 800b05e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b062:	68eb      	ldr	r3, [r5, #12]
 800b064:	60d3      	str	r3, [r2, #12]
 800b066:	609a      	str	r2, [r3, #8]
 800b068:	1f32      	subs	r2, r6, #4
 800b06a:	2a24      	cmp	r2, #36	; 0x24
 800b06c:	d824      	bhi.n	800b0b8 <_realloc_r+0x22c>
 800b06e:	2a13      	cmp	r2, #19
 800b070:	d908      	bls.n	800b084 <_realloc_r+0x1f8>
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	60ab      	str	r3, [r5, #8]
 800b076:	6863      	ldr	r3, [r4, #4]
 800b078:	60eb      	str	r3, [r5, #12]
 800b07a:	2a1b      	cmp	r2, #27
 800b07c:	d80a      	bhi.n	800b094 <_realloc_r+0x208>
 800b07e:	3408      	adds	r4, #8
 800b080:	f105 0010 	add.w	r0, r5, #16
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	6003      	str	r3, [r0, #0]
 800b088:	6863      	ldr	r3, [r4, #4]
 800b08a:	6043      	str	r3, [r0, #4]
 800b08c:	68a3      	ldr	r3, [r4, #8]
 800b08e:	6083      	str	r3, [r0, #8]
 800b090:	46a9      	mov	r9, r5
 800b092:	e75c      	b.n	800af4e <_realloc_r+0xc2>
 800b094:	68a3      	ldr	r3, [r4, #8]
 800b096:	612b      	str	r3, [r5, #16]
 800b098:	68e3      	ldr	r3, [r4, #12]
 800b09a:	616b      	str	r3, [r5, #20]
 800b09c:	2a24      	cmp	r2, #36	; 0x24
 800b09e:	bf01      	itttt	eq
 800b0a0:	6923      	ldreq	r3, [r4, #16]
 800b0a2:	61ab      	streq	r3, [r5, #24]
 800b0a4:	6963      	ldreq	r3, [r4, #20]
 800b0a6:	61eb      	streq	r3, [r5, #28]
 800b0a8:	bf19      	ittee	ne
 800b0aa:	3410      	addne	r4, #16
 800b0ac:	f105 0018 	addne.w	r0, r5, #24
 800b0b0:	f105 0020 	addeq.w	r0, r5, #32
 800b0b4:	3418      	addeq	r4, #24
 800b0b6:	e7e5      	b.n	800b084 <_realloc_r+0x1f8>
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	f7ff fe52 	bl	800ad62 <memmove>
 800b0be:	e7e7      	b.n	800b090 <_realloc_r+0x204>
 800b0c0:	45d8      	cmp	r8, fp
 800b0c2:	dc31      	bgt.n	800b128 <_realloc_r+0x29c>
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	68eb      	ldr	r3, [r5, #12]
 800b0c8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b0cc:	60d3      	str	r3, [r2, #12]
 800b0ce:	609a      	str	r2, [r3, #8]
 800b0d0:	1f32      	subs	r2, r6, #4
 800b0d2:	2a24      	cmp	r2, #36	; 0x24
 800b0d4:	d824      	bhi.n	800b120 <_realloc_r+0x294>
 800b0d6:	2a13      	cmp	r2, #19
 800b0d8:	d908      	bls.n	800b0ec <_realloc_r+0x260>
 800b0da:	6823      	ldr	r3, [r4, #0]
 800b0dc:	60ab      	str	r3, [r5, #8]
 800b0de:	6863      	ldr	r3, [r4, #4]
 800b0e0:	60eb      	str	r3, [r5, #12]
 800b0e2:	2a1b      	cmp	r2, #27
 800b0e4:	d80a      	bhi.n	800b0fc <_realloc_r+0x270>
 800b0e6:	3408      	adds	r4, #8
 800b0e8:	f105 0010 	add.w	r0, r5, #16
 800b0ec:	6823      	ldr	r3, [r4, #0]
 800b0ee:	6003      	str	r3, [r0, #0]
 800b0f0:	6863      	ldr	r3, [r4, #4]
 800b0f2:	6043      	str	r3, [r0, #4]
 800b0f4:	68a3      	ldr	r3, [r4, #8]
 800b0f6:	6083      	str	r3, [r0, #8]
 800b0f8:	465f      	mov	r7, fp
 800b0fa:	e7c9      	b.n	800b090 <_realloc_r+0x204>
 800b0fc:	68a3      	ldr	r3, [r4, #8]
 800b0fe:	612b      	str	r3, [r5, #16]
 800b100:	68e3      	ldr	r3, [r4, #12]
 800b102:	616b      	str	r3, [r5, #20]
 800b104:	2a24      	cmp	r2, #36	; 0x24
 800b106:	bf01      	itttt	eq
 800b108:	6923      	ldreq	r3, [r4, #16]
 800b10a:	61ab      	streq	r3, [r5, #24]
 800b10c:	6963      	ldreq	r3, [r4, #20]
 800b10e:	61eb      	streq	r3, [r5, #28]
 800b110:	bf19      	ittee	ne
 800b112:	3410      	addne	r4, #16
 800b114:	f105 0018 	addne.w	r0, r5, #24
 800b118:	f105 0020 	addeq.w	r0, r5, #32
 800b11c:	3418      	addeq	r4, #24
 800b11e:	e7e5      	b.n	800b0ec <_realloc_r+0x260>
 800b120:	4621      	mov	r1, r4
 800b122:	f7ff fe1e 	bl	800ad62 <memmove>
 800b126:	e7e7      	b.n	800b0f8 <_realloc_r+0x26c>
 800b128:	4611      	mov	r1, r2
 800b12a:	4650      	mov	r0, sl
 800b12c:	f7fc fe10 	bl	8007d50 <_malloc_r>
 800b130:	4683      	mov	fp, r0
 800b132:	2800      	cmp	r0, #0
 800b134:	f43f af6f 	beq.w	800b016 <_realloc_r+0x18a>
 800b138:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b13c:	f023 0301 	bic.w	r3, r3, #1
 800b140:	444b      	add	r3, r9
 800b142:	f1a0 0208 	sub.w	r2, r0, #8
 800b146:	4293      	cmp	r3, r2
 800b148:	d108      	bne.n	800b15c <_realloc_r+0x2d0>
 800b14a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b14e:	f027 0703 	bic.w	r7, r7, #3
 800b152:	4437      	add	r7, r6
 800b154:	e6fb      	b.n	800af4e <_realloc_r+0xc2>
 800b156:	bf00      	nop
 800b158:	20000230 	.word	0x20000230
 800b15c:	1f32      	subs	r2, r6, #4
 800b15e:	2a24      	cmp	r2, #36	; 0x24
 800b160:	d82d      	bhi.n	800b1be <_realloc_r+0x332>
 800b162:	2a13      	cmp	r2, #19
 800b164:	d928      	bls.n	800b1b8 <_realloc_r+0x32c>
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	6003      	str	r3, [r0, #0]
 800b16a:	6863      	ldr	r3, [r4, #4]
 800b16c:	6043      	str	r3, [r0, #4]
 800b16e:	2a1b      	cmp	r2, #27
 800b170:	d80e      	bhi.n	800b190 <_realloc_r+0x304>
 800b172:	f104 0208 	add.w	r2, r4, #8
 800b176:	f100 0308 	add.w	r3, r0, #8
 800b17a:	6811      	ldr	r1, [r2, #0]
 800b17c:	6019      	str	r1, [r3, #0]
 800b17e:	6851      	ldr	r1, [r2, #4]
 800b180:	6059      	str	r1, [r3, #4]
 800b182:	6892      	ldr	r2, [r2, #8]
 800b184:	609a      	str	r2, [r3, #8]
 800b186:	4621      	mov	r1, r4
 800b188:	4650      	mov	r0, sl
 800b18a:	f7fc fd21 	bl	8007bd0 <_free_r>
 800b18e:	e742      	b.n	800b016 <_realloc_r+0x18a>
 800b190:	68a3      	ldr	r3, [r4, #8]
 800b192:	6083      	str	r3, [r0, #8]
 800b194:	68e3      	ldr	r3, [r4, #12]
 800b196:	60c3      	str	r3, [r0, #12]
 800b198:	2a24      	cmp	r2, #36	; 0x24
 800b19a:	bf01      	itttt	eq
 800b19c:	6923      	ldreq	r3, [r4, #16]
 800b19e:	6103      	streq	r3, [r0, #16]
 800b1a0:	6961      	ldreq	r1, [r4, #20]
 800b1a2:	6141      	streq	r1, [r0, #20]
 800b1a4:	bf19      	ittee	ne
 800b1a6:	f104 0210 	addne.w	r2, r4, #16
 800b1aa:	f100 0310 	addne.w	r3, r0, #16
 800b1ae:	f104 0218 	addeq.w	r2, r4, #24
 800b1b2:	f100 0318 	addeq.w	r3, r0, #24
 800b1b6:	e7e0      	b.n	800b17a <_realloc_r+0x2ee>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	4622      	mov	r2, r4
 800b1bc:	e7dd      	b.n	800b17a <_realloc_r+0x2ee>
 800b1be:	4621      	mov	r1, r4
 800b1c0:	f7ff fdcf 	bl	800ad62 <memmove>
 800b1c4:	e7df      	b.n	800b186 <_realloc_r+0x2fa>
 800b1c6:	4637      	mov	r7, r6
 800b1c8:	e6c1      	b.n	800af4e <_realloc_r+0xc2>
 800b1ca:	431f      	orrs	r7, r3
 800b1cc:	f8c9 7004 	str.w	r7, [r9, #4]
 800b1d0:	6853      	ldr	r3, [r2, #4]
 800b1d2:	f043 0301 	orr.w	r3, r3, #1
 800b1d6:	6053      	str	r3, [r2, #4]
 800b1d8:	e6d5      	b.n	800af86 <_realloc_r+0xfa>
 800b1da:	bf00      	nop

0800b1dc <__ascii_wctomb>:
 800b1dc:	b149      	cbz	r1, 800b1f2 <__ascii_wctomb+0x16>
 800b1de:	2aff      	cmp	r2, #255	; 0xff
 800b1e0:	bf85      	ittet	hi
 800b1e2:	238a      	movhi	r3, #138	; 0x8a
 800b1e4:	6003      	strhi	r3, [r0, #0]
 800b1e6:	700a      	strbls	r2, [r1, #0]
 800b1e8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b1ec:	bf98      	it	ls
 800b1ee:	2001      	movls	r0, #1
 800b1f0:	4770      	bx	lr
 800b1f2:	4608      	mov	r0, r1
 800b1f4:	4770      	bx	lr
	...

0800b1f8 <fiprintf>:
 800b1f8:	b40e      	push	{r1, r2, r3}
 800b1fa:	b503      	push	{r0, r1, lr}
 800b1fc:	4601      	mov	r1, r0
 800b1fe:	ab03      	add	r3, sp, #12
 800b200:	4805      	ldr	r0, [pc, #20]	; (800b218 <fiprintf+0x20>)
 800b202:	f853 2b04 	ldr.w	r2, [r3], #4
 800b206:	6800      	ldr	r0, [r0, #0]
 800b208:	9301      	str	r3, [sp, #4]
 800b20a:	f000 f839 	bl	800b280 <_vfiprintf_r>
 800b20e:	b002      	add	sp, #8
 800b210:	f85d eb04 	ldr.w	lr, [sp], #4
 800b214:	b003      	add	sp, #12
 800b216:	4770      	bx	lr
 800b218:	20000228 	.word	0x20000228

0800b21c <__sprint_r>:
 800b21c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b220:	6893      	ldr	r3, [r2, #8]
 800b222:	4680      	mov	r8, r0
 800b224:	460f      	mov	r7, r1
 800b226:	4614      	mov	r4, r2
 800b228:	b343      	cbz	r3, 800b27c <__sprint_r+0x60>
 800b22a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b22c:	049d      	lsls	r5, r3, #18
 800b22e:	d522      	bpl.n	800b276 <__sprint_r+0x5a>
 800b230:	6815      	ldr	r5, [r2, #0]
 800b232:	3508      	adds	r5, #8
 800b234:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800b238:	f04f 0900 	mov.w	r9, #0
 800b23c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800b240:	45ca      	cmp	sl, r9
 800b242:	dc0d      	bgt.n	800b260 <__sprint_r+0x44>
 800b244:	68a3      	ldr	r3, [r4, #8]
 800b246:	f026 0603 	bic.w	r6, r6, #3
 800b24a:	1b98      	subs	r0, r3, r6
 800b24c:	60a0      	str	r0, [r4, #8]
 800b24e:	3508      	adds	r5, #8
 800b250:	2800      	cmp	r0, #0
 800b252:	d1ef      	bne.n	800b234 <__sprint_r+0x18>
 800b254:	2300      	movs	r3, #0
 800b256:	60a3      	str	r3, [r4, #8]
 800b258:	2300      	movs	r3, #0
 800b25a:	6063      	str	r3, [r4, #4]
 800b25c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b260:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800b264:	463a      	mov	r2, r7
 800b266:	4640      	mov	r0, r8
 800b268:	f000 febf 	bl	800bfea <_fputwc_r>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d0f1      	beq.n	800b254 <__sprint_r+0x38>
 800b270:	f109 0901 	add.w	r9, r9, #1
 800b274:	e7e4      	b.n	800b240 <__sprint_r+0x24>
 800b276:	f000 fcd5 	bl	800bc24 <__sfvwrite_r>
 800b27a:	e7eb      	b.n	800b254 <__sprint_r+0x38>
 800b27c:	4618      	mov	r0, r3
 800b27e:	e7eb      	b.n	800b258 <__sprint_r+0x3c>

0800b280 <_vfiprintf_r>:
 800b280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	ed2d 8b02 	vpush	{d8}
 800b288:	b0bb      	sub	sp, #236	; 0xec
 800b28a:	460f      	mov	r7, r1
 800b28c:	9201      	str	r2, [sp, #4]
 800b28e:	461d      	mov	r5, r3
 800b290:	461c      	mov	r4, r3
 800b292:	4681      	mov	r9, r0
 800b294:	b118      	cbz	r0, 800b29e <_vfiprintf_r+0x1e>
 800b296:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800b298:	b90b      	cbnz	r3, 800b29e <_vfiprintf_r+0x1e>
 800b29a:	f7fc fb0b 	bl	80078b4 <__sinit>
 800b29e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2a0:	07d8      	lsls	r0, r3, #31
 800b2a2:	d405      	bmi.n	800b2b0 <_vfiprintf_r+0x30>
 800b2a4:	89bb      	ldrh	r3, [r7, #12]
 800b2a6:	0599      	lsls	r1, r3, #22
 800b2a8:	d402      	bmi.n	800b2b0 <_vfiprintf_r+0x30>
 800b2aa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b2ac:	f7fc fc2a 	bl	8007b04 <__retarget_lock_acquire_recursive>
 800b2b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b2b4:	049a      	lsls	r2, r3, #18
 800b2b6:	d406      	bmi.n	800b2c6 <_vfiprintf_r+0x46>
 800b2b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b2bc:	81bb      	strh	r3, [r7, #12]
 800b2be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b2c4:	667b      	str	r3, [r7, #100]	; 0x64
 800b2c6:	89bb      	ldrh	r3, [r7, #12]
 800b2c8:	071e      	lsls	r6, r3, #28
 800b2ca:	d501      	bpl.n	800b2d0 <_vfiprintf_r+0x50>
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	b9bb      	cbnz	r3, 800b300 <_vfiprintf_r+0x80>
 800b2d0:	4639      	mov	r1, r7
 800b2d2:	4648      	mov	r0, r9
 800b2d4:	f000 fdf0 	bl	800beb8 <__swsetup_r>
 800b2d8:	b190      	cbz	r0, 800b300 <_vfiprintf_r+0x80>
 800b2da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2dc:	07d8      	lsls	r0, r3, #31
 800b2de:	d508      	bpl.n	800b2f2 <_vfiprintf_r+0x72>
 800b2e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e4:	9302      	str	r3, [sp, #8]
 800b2e6:	9802      	ldr	r0, [sp, #8]
 800b2e8:	b03b      	add	sp, #236	; 0xec
 800b2ea:	ecbd 8b02 	vpop	{d8}
 800b2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2f2:	89bb      	ldrh	r3, [r7, #12]
 800b2f4:	0599      	lsls	r1, r3, #22
 800b2f6:	d4f3      	bmi.n	800b2e0 <_vfiprintf_r+0x60>
 800b2f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b2fa:	f7fc fc04 	bl	8007b06 <__retarget_lock_release_recursive>
 800b2fe:	e7ef      	b.n	800b2e0 <_vfiprintf_r+0x60>
 800b300:	89bb      	ldrh	r3, [r7, #12]
 800b302:	f003 021a 	and.w	r2, r3, #26
 800b306:	2a0a      	cmp	r2, #10
 800b308:	d116      	bne.n	800b338 <_vfiprintf_r+0xb8>
 800b30a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b30e:	2a00      	cmp	r2, #0
 800b310:	db12      	blt.n	800b338 <_vfiprintf_r+0xb8>
 800b312:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b314:	07d2      	lsls	r2, r2, #31
 800b316:	d404      	bmi.n	800b322 <_vfiprintf_r+0xa2>
 800b318:	059e      	lsls	r6, r3, #22
 800b31a:	d402      	bmi.n	800b322 <_vfiprintf_r+0xa2>
 800b31c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b31e:	f7fc fbf2 	bl	8007b06 <__retarget_lock_release_recursive>
 800b322:	9a01      	ldr	r2, [sp, #4]
 800b324:	462b      	mov	r3, r5
 800b326:	4639      	mov	r1, r7
 800b328:	4648      	mov	r0, r9
 800b32a:	b03b      	add	sp, #236	; 0xec
 800b32c:	ecbd 8b02 	vpop	{d8}
 800b330:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	f000 bc36 	b.w	800bba4 <__sbprintf>
 800b338:	2300      	movs	r3, #0
 800b33a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800b33e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800b342:	ae11      	add	r6, sp, #68	; 0x44
 800b344:	ee08 3a10 	vmov	s16, r3
 800b348:	960e      	str	r6, [sp, #56]	; 0x38
 800b34a:	9307      	str	r3, [sp, #28]
 800b34c:	9302      	str	r3, [sp, #8]
 800b34e:	9b01      	ldr	r3, [sp, #4]
 800b350:	461d      	mov	r5, r3
 800b352:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b356:	b10a      	cbz	r2, 800b35c <_vfiprintf_r+0xdc>
 800b358:	2a25      	cmp	r2, #37	; 0x25
 800b35a:	d1f9      	bne.n	800b350 <_vfiprintf_r+0xd0>
 800b35c:	9b01      	ldr	r3, [sp, #4]
 800b35e:	ebb5 0803 	subs.w	r8, r5, r3
 800b362:	d00d      	beq.n	800b380 <_vfiprintf_r+0x100>
 800b364:	e9c6 3800 	strd	r3, r8, [r6]
 800b368:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b36a:	4443      	add	r3, r8
 800b36c:	9310      	str	r3, [sp, #64]	; 0x40
 800b36e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b370:	3301      	adds	r3, #1
 800b372:	2b07      	cmp	r3, #7
 800b374:	930f      	str	r3, [sp, #60]	; 0x3c
 800b376:	dc76      	bgt.n	800b466 <_vfiprintf_r+0x1e6>
 800b378:	3608      	adds	r6, #8
 800b37a:	9b02      	ldr	r3, [sp, #8]
 800b37c:	4443      	add	r3, r8
 800b37e:	9302      	str	r3, [sp, #8]
 800b380:	782b      	ldrb	r3, [r5, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	f000 83d0 	beq.w	800bb28 <_vfiprintf_r+0x8a8>
 800b388:	2300      	movs	r3, #0
 800b38a:	f04f 32ff 	mov.w	r2, #4294967295
 800b38e:	3501      	adds	r5, #1
 800b390:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800b394:	9200      	str	r2, [sp, #0]
 800b396:	9303      	str	r3, [sp, #12]
 800b398:	469a      	mov	sl, r3
 800b39a:	462a      	mov	r2, r5
 800b39c:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b3a0:	9201      	str	r2, [sp, #4]
 800b3a2:	f1a3 0220 	sub.w	r2, r3, #32
 800b3a6:	2a5a      	cmp	r2, #90	; 0x5a
 800b3a8:	f200 831c 	bhi.w	800b9e4 <_vfiprintf_r+0x764>
 800b3ac:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b3b0:	031a007e 	.word	0x031a007e
 800b3b4:	0086031a 	.word	0x0086031a
 800b3b8:	031a031a 	.word	0x031a031a
 800b3bc:	0065031a 	.word	0x0065031a
 800b3c0:	031a031a 	.word	0x031a031a
 800b3c4:	00930089 	.word	0x00930089
 800b3c8:	0090031a 	.word	0x0090031a
 800b3cc:	031a0095 	.word	0x031a0095
 800b3d0:	00b300b0 	.word	0x00b300b0
 800b3d4:	00b300b3 	.word	0x00b300b3
 800b3d8:	00b300b3 	.word	0x00b300b3
 800b3dc:	00b300b3 	.word	0x00b300b3
 800b3e0:	00b300b3 	.word	0x00b300b3
 800b3e4:	031a031a 	.word	0x031a031a
 800b3e8:	031a031a 	.word	0x031a031a
 800b3ec:	031a031a 	.word	0x031a031a
 800b3f0:	031a031a 	.word	0x031a031a
 800b3f4:	00dd031a 	.word	0x00dd031a
 800b3f8:	031a00eb 	.word	0x031a00eb
 800b3fc:	031a031a 	.word	0x031a031a
 800b400:	031a031a 	.word	0x031a031a
 800b404:	031a031a 	.word	0x031a031a
 800b408:	031a031a 	.word	0x031a031a
 800b40c:	013b031a 	.word	0x013b031a
 800b410:	031a031a 	.word	0x031a031a
 800b414:	0180031a 	.word	0x0180031a
 800b418:	025e031a 	.word	0x025e031a
 800b41c:	031a031a 	.word	0x031a031a
 800b420:	031a027e 	.word	0x031a027e
 800b424:	031a031a 	.word	0x031a031a
 800b428:	031a031a 	.word	0x031a031a
 800b42c:	031a031a 	.word	0x031a031a
 800b430:	031a031a 	.word	0x031a031a
 800b434:	00dd031a 	.word	0x00dd031a
 800b438:	031a00ed 	.word	0x031a00ed
 800b43c:	031a031a 	.word	0x031a031a
 800b440:	00ed00c3 	.word	0x00ed00c3
 800b444:	031a00d7 	.word	0x031a00d7
 800b448:	031a00d0 	.word	0x031a00d0
 800b44c:	013d0119 	.word	0x013d0119
 800b450:	00d70172 	.word	0x00d70172
 800b454:	0180031a 	.word	0x0180031a
 800b458:	0260007c 	.word	0x0260007c
 800b45c:	031a031a 	.word	0x031a031a
 800b460:	031a029a 	.word	0x031a029a
 800b464:	007c      	.short	0x007c
 800b466:	aa0e      	add	r2, sp, #56	; 0x38
 800b468:	4639      	mov	r1, r7
 800b46a:	4648      	mov	r0, r9
 800b46c:	f7ff fed6 	bl	800b21c <__sprint_r>
 800b470:	2800      	cmp	r0, #0
 800b472:	f040 8338 	bne.w	800bae6 <_vfiprintf_r+0x866>
 800b476:	ae11      	add	r6, sp, #68	; 0x44
 800b478:	e77f      	b.n	800b37a <_vfiprintf_r+0xfa>
 800b47a:	4648      	mov	r0, r9
 800b47c:	f7fe f9bc 	bl	80097f8 <_localeconv_r>
 800b480:	6843      	ldr	r3, [r0, #4]
 800b482:	4618      	mov	r0, r3
 800b484:	ee08 3a10 	vmov	s16, r3
 800b488:	f7f4 fefa 	bl	8000280 <strlen>
 800b48c:	9007      	str	r0, [sp, #28]
 800b48e:	4648      	mov	r0, r9
 800b490:	f7fe f9b2 	bl	80097f8 <_localeconv_r>
 800b494:	6883      	ldr	r3, [r0, #8]
 800b496:	9306      	str	r3, [sp, #24]
 800b498:	9b07      	ldr	r3, [sp, #28]
 800b49a:	b12b      	cbz	r3, 800b4a8 <_vfiprintf_r+0x228>
 800b49c:	9b06      	ldr	r3, [sp, #24]
 800b49e:	b11b      	cbz	r3, 800b4a8 <_vfiprintf_r+0x228>
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	b10b      	cbz	r3, 800b4a8 <_vfiprintf_r+0x228>
 800b4a4:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800b4a8:	9d01      	ldr	r5, [sp, #4]
 800b4aa:	e776      	b.n	800b39a <_vfiprintf_r+0x11a>
 800b4ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d1f9      	bne.n	800b4a8 <_vfiprintf_r+0x228>
 800b4b4:	2320      	movs	r3, #32
 800b4b6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800b4ba:	e7f5      	b.n	800b4a8 <_vfiprintf_r+0x228>
 800b4bc:	f04a 0a01 	orr.w	sl, sl, #1
 800b4c0:	e7f2      	b.n	800b4a8 <_vfiprintf_r+0x228>
 800b4c2:	f854 3b04 	ldr.w	r3, [r4], #4
 800b4c6:	9303      	str	r3, [sp, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	daed      	bge.n	800b4a8 <_vfiprintf_r+0x228>
 800b4cc:	425b      	negs	r3, r3
 800b4ce:	9303      	str	r3, [sp, #12]
 800b4d0:	f04a 0a04 	orr.w	sl, sl, #4
 800b4d4:	e7e8      	b.n	800b4a8 <_vfiprintf_r+0x228>
 800b4d6:	232b      	movs	r3, #43	; 0x2b
 800b4d8:	e7ed      	b.n	800b4b6 <_vfiprintf_r+0x236>
 800b4da:	9a01      	ldr	r2, [sp, #4]
 800b4dc:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b4e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b4e2:	d112      	bne.n	800b50a <_vfiprintf_r+0x28a>
 800b4e4:	f854 3b04 	ldr.w	r3, [r4], #4
 800b4e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4ec:	e9cd 3200 	strd	r3, r2, [sp]
 800b4f0:	e7da      	b.n	800b4a8 <_vfiprintf_r+0x228>
 800b4f2:	9b00      	ldr	r3, [sp, #0]
 800b4f4:	200a      	movs	r0, #10
 800b4f6:	fb00 1303 	mla	r3, r0, r3, r1
 800b4fa:	9300      	str	r3, [sp, #0]
 800b4fc:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b500:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b504:	2909      	cmp	r1, #9
 800b506:	d9f4      	bls.n	800b4f2 <_vfiprintf_r+0x272>
 800b508:	e74a      	b.n	800b3a0 <_vfiprintf_r+0x120>
 800b50a:	2100      	movs	r1, #0
 800b50c:	9100      	str	r1, [sp, #0]
 800b50e:	e7f7      	b.n	800b500 <_vfiprintf_r+0x280>
 800b510:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800b514:	e7c8      	b.n	800b4a8 <_vfiprintf_r+0x228>
 800b516:	2100      	movs	r1, #0
 800b518:	9a01      	ldr	r2, [sp, #4]
 800b51a:	9103      	str	r1, [sp, #12]
 800b51c:	9903      	ldr	r1, [sp, #12]
 800b51e:	3b30      	subs	r3, #48	; 0x30
 800b520:	200a      	movs	r0, #10
 800b522:	fb00 3301 	mla	r3, r0, r1, r3
 800b526:	9303      	str	r3, [sp, #12]
 800b528:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b52c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b530:	2909      	cmp	r1, #9
 800b532:	d9f3      	bls.n	800b51c <_vfiprintf_r+0x29c>
 800b534:	e734      	b.n	800b3a0 <_vfiprintf_r+0x120>
 800b536:	9b01      	ldr	r3, [sp, #4]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b68      	cmp	r3, #104	; 0x68
 800b53c:	bf01      	itttt	eq
 800b53e:	9b01      	ldreq	r3, [sp, #4]
 800b540:	3301      	addeq	r3, #1
 800b542:	9301      	streq	r3, [sp, #4]
 800b544:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800b548:	bf18      	it	ne
 800b54a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800b54e:	e7ab      	b.n	800b4a8 <_vfiprintf_r+0x228>
 800b550:	9b01      	ldr	r3, [sp, #4]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	2b6c      	cmp	r3, #108	; 0x6c
 800b556:	d105      	bne.n	800b564 <_vfiprintf_r+0x2e4>
 800b558:	9b01      	ldr	r3, [sp, #4]
 800b55a:	3301      	adds	r3, #1
 800b55c:	9301      	str	r3, [sp, #4]
 800b55e:	f04a 0a20 	orr.w	sl, sl, #32
 800b562:	e7a1      	b.n	800b4a8 <_vfiprintf_r+0x228>
 800b564:	f04a 0a10 	orr.w	sl, sl, #16
 800b568:	e79e      	b.n	800b4a8 <_vfiprintf_r+0x228>
 800b56a:	46a0      	mov	r8, r4
 800b56c:	f858 3b04 	ldr.w	r3, [r8], #4
 800b570:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800b574:	2300      	movs	r3, #0
 800b576:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800b57a:	2201      	movs	r2, #1
 800b57c:	9200      	str	r2, [sp, #0]
 800b57e:	461d      	mov	r5, r3
 800b580:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 800b584:	e0a9      	b.n	800b6da <_vfiprintf_r+0x45a>
 800b586:	f04a 0a10 	orr.w	sl, sl, #16
 800b58a:	f01a 0f20 	tst.w	sl, #32
 800b58e:	d011      	beq.n	800b5b4 <_vfiprintf_r+0x334>
 800b590:	3407      	adds	r4, #7
 800b592:	f024 0307 	bic.w	r3, r4, #7
 800b596:	4698      	mov	r8, r3
 800b598:	685d      	ldr	r5, [r3, #4]
 800b59a:	f858 4b08 	ldr.w	r4, [r8], #8
 800b59e:	2d00      	cmp	r5, #0
 800b5a0:	da06      	bge.n	800b5b0 <_vfiprintf_r+0x330>
 800b5a2:	4264      	negs	r4, r4
 800b5a4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800b5a8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800b5ac:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e04a      	b.n	800b64a <_vfiprintf_r+0x3ca>
 800b5b4:	46a0      	mov	r8, r4
 800b5b6:	f01a 0f10 	tst.w	sl, #16
 800b5ba:	f858 5b04 	ldr.w	r5, [r8], #4
 800b5be:	d002      	beq.n	800b5c6 <_vfiprintf_r+0x346>
 800b5c0:	462c      	mov	r4, r5
 800b5c2:	17ed      	asrs	r5, r5, #31
 800b5c4:	e7eb      	b.n	800b59e <_vfiprintf_r+0x31e>
 800b5c6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800b5ca:	d003      	beq.n	800b5d4 <_vfiprintf_r+0x354>
 800b5cc:	b22c      	sxth	r4, r5
 800b5ce:	f345 35c0 	sbfx	r5, r5, #15, #1
 800b5d2:	e7e4      	b.n	800b59e <_vfiprintf_r+0x31e>
 800b5d4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800b5d8:	d0f2      	beq.n	800b5c0 <_vfiprintf_r+0x340>
 800b5da:	b26c      	sxtb	r4, r5
 800b5dc:	f345 15c0 	sbfx	r5, r5, #7, #1
 800b5e0:	e7dd      	b.n	800b59e <_vfiprintf_r+0x31e>
 800b5e2:	f01a 0f20 	tst.w	sl, #32
 800b5e6:	f104 0804 	add.w	r8, r4, #4
 800b5ea:	d007      	beq.n	800b5fc <_vfiprintf_r+0x37c>
 800b5ec:	9a02      	ldr	r2, [sp, #8]
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	9902      	ldr	r1, [sp, #8]
 800b5f2:	17d2      	asrs	r2, r2, #31
 800b5f4:	e9c3 1200 	strd	r1, r2, [r3]
 800b5f8:	4644      	mov	r4, r8
 800b5fa:	e6a8      	b.n	800b34e <_vfiprintf_r+0xce>
 800b5fc:	f01a 0f10 	tst.w	sl, #16
 800b600:	d003      	beq.n	800b60a <_vfiprintf_r+0x38a>
 800b602:	6823      	ldr	r3, [r4, #0]
 800b604:	9a02      	ldr	r2, [sp, #8]
 800b606:	601a      	str	r2, [r3, #0]
 800b608:	e7f6      	b.n	800b5f8 <_vfiprintf_r+0x378>
 800b60a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800b60e:	d003      	beq.n	800b618 <_vfiprintf_r+0x398>
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	9a02      	ldr	r2, [sp, #8]
 800b614:	801a      	strh	r2, [r3, #0]
 800b616:	e7ef      	b.n	800b5f8 <_vfiprintf_r+0x378>
 800b618:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800b61c:	d0f1      	beq.n	800b602 <_vfiprintf_r+0x382>
 800b61e:	6823      	ldr	r3, [r4, #0]
 800b620:	9a02      	ldr	r2, [sp, #8]
 800b622:	701a      	strb	r2, [r3, #0]
 800b624:	e7e8      	b.n	800b5f8 <_vfiprintf_r+0x378>
 800b626:	f04a 0a10 	orr.w	sl, sl, #16
 800b62a:	f01a 0320 	ands.w	r3, sl, #32
 800b62e:	d01f      	beq.n	800b670 <_vfiprintf_r+0x3f0>
 800b630:	3407      	adds	r4, #7
 800b632:	f024 0307 	bic.w	r3, r4, #7
 800b636:	4698      	mov	r8, r3
 800b638:	685d      	ldr	r5, [r3, #4]
 800b63a:	f858 4b08 	ldr.w	r4, [r8], #8
 800b63e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800b642:	2300      	movs	r3, #0
 800b644:	2200      	movs	r2, #0
 800b646:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800b64a:	9a00      	ldr	r2, [sp, #0]
 800b64c:	3201      	adds	r2, #1
 800b64e:	f000 8278 	beq.w	800bb42 <_vfiprintf_r+0x8c2>
 800b652:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800b656:	9204      	str	r2, [sp, #16]
 800b658:	ea54 0205 	orrs.w	r2, r4, r5
 800b65c:	f040 8277 	bne.w	800bb4e <_vfiprintf_r+0x8ce>
 800b660:	9a00      	ldr	r2, [sp, #0]
 800b662:	2a00      	cmp	r2, #0
 800b664:	f000 81b3 	beq.w	800b9ce <_vfiprintf_r+0x74e>
 800b668:	2b01      	cmp	r3, #1
 800b66a:	f040 8273 	bne.w	800bb54 <_vfiprintf_r+0x8d4>
 800b66e:	e151      	b.n	800b914 <_vfiprintf_r+0x694>
 800b670:	46a0      	mov	r8, r4
 800b672:	f01a 0510 	ands.w	r5, sl, #16
 800b676:	f858 4b04 	ldr.w	r4, [r8], #4
 800b67a:	d001      	beq.n	800b680 <_vfiprintf_r+0x400>
 800b67c:	461d      	mov	r5, r3
 800b67e:	e7de      	b.n	800b63e <_vfiprintf_r+0x3be>
 800b680:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800b684:	d001      	beq.n	800b68a <_vfiprintf_r+0x40a>
 800b686:	b2a4      	uxth	r4, r4
 800b688:	e7d9      	b.n	800b63e <_vfiprintf_r+0x3be>
 800b68a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800b68e:	d0d6      	beq.n	800b63e <_vfiprintf_r+0x3be>
 800b690:	b2e4      	uxtb	r4, r4
 800b692:	e7f3      	b.n	800b67c <_vfiprintf_r+0x3fc>
 800b694:	46a0      	mov	r8, r4
 800b696:	f647 0330 	movw	r3, #30768	; 0x7830
 800b69a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800b69e:	f858 4b04 	ldr.w	r4, [r8], #4
 800b6a2:	4b9f      	ldr	r3, [pc, #636]	; (800b920 <_vfiprintf_r+0x6a0>)
 800b6a4:	9305      	str	r3, [sp, #20]
 800b6a6:	2500      	movs	r5, #0
 800b6a8:	f04a 0a02 	orr.w	sl, sl, #2
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	e7c9      	b.n	800b644 <_vfiprintf_r+0x3c4>
 800b6b0:	9b00      	ldr	r3, [sp, #0]
 800b6b2:	46a0      	mov	r8, r4
 800b6b4:	2500      	movs	r5, #0
 800b6b6:	1c5c      	adds	r4, r3, #1
 800b6b8:	f858 bb04 	ldr.w	fp, [r8], #4
 800b6bc:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800b6c0:	f000 80cf 	beq.w	800b862 <_vfiprintf_r+0x5e2>
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	4658      	mov	r0, fp
 800b6ca:	f7f4 fd89 	bl	80001e0 <memchr>
 800b6ce:	2800      	cmp	r0, #0
 800b6d0:	f000 8192 	beq.w	800b9f8 <_vfiprintf_r+0x778>
 800b6d4:	eba0 030b 	sub.w	r3, r0, fp
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	9b00      	ldr	r3, [sp, #0]
 800b6dc:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800b6e0:	42ab      	cmp	r3, r5
 800b6e2:	bfb8      	it	lt
 800b6e4:	462b      	movlt	r3, r5
 800b6e6:	9304      	str	r3, [sp, #16]
 800b6e8:	b10a      	cbz	r2, 800b6ee <_vfiprintf_r+0x46e>
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	9304      	str	r3, [sp, #16]
 800b6ee:	f01a 0302 	ands.w	r3, sl, #2
 800b6f2:	9308      	str	r3, [sp, #32]
 800b6f4:	bf1e      	ittt	ne
 800b6f6:	9b04      	ldrne	r3, [sp, #16]
 800b6f8:	3302      	addne	r3, #2
 800b6fa:	9304      	strne	r3, [sp, #16]
 800b6fc:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800b700:	9309      	str	r3, [sp, #36]	; 0x24
 800b702:	d11f      	bne.n	800b744 <_vfiprintf_r+0x4c4>
 800b704:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b708:	1a9c      	subs	r4, r3, r2
 800b70a:	2c00      	cmp	r4, #0
 800b70c:	dd1a      	ble.n	800b744 <_vfiprintf_r+0x4c4>
 800b70e:	4b85      	ldr	r3, [pc, #532]	; (800b924 <_vfiprintf_r+0x6a4>)
 800b710:	6033      	str	r3, [r6, #0]
 800b712:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800b716:	2c10      	cmp	r4, #16
 800b718:	f102 0201 	add.w	r2, r2, #1
 800b71c:	f106 0008 	add.w	r0, r6, #8
 800b720:	f300 816c 	bgt.w	800b9fc <_vfiprintf_r+0x77c>
 800b724:	6074      	str	r4, [r6, #4]
 800b726:	2a07      	cmp	r2, #7
 800b728:	4464      	add	r4, ip
 800b72a:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800b72e:	f340 8178 	ble.w	800ba22 <_vfiprintf_r+0x7a2>
 800b732:	aa0e      	add	r2, sp, #56	; 0x38
 800b734:	4639      	mov	r1, r7
 800b736:	4648      	mov	r0, r9
 800b738:	f7ff fd70 	bl	800b21c <__sprint_r>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	f040 81d2 	bne.w	800bae6 <_vfiprintf_r+0x866>
 800b742:	ae11      	add	r6, sp, #68	; 0x44
 800b744:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 800b748:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800b74c:	b160      	cbz	r0, 800b768 <_vfiprintf_r+0x4e8>
 800b74e:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 800b752:	3201      	adds	r2, #1
 800b754:	6030      	str	r0, [r6, #0]
 800b756:	2001      	movs	r0, #1
 800b758:	4401      	add	r1, r0
 800b75a:	2a07      	cmp	r2, #7
 800b75c:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800b760:	6070      	str	r0, [r6, #4]
 800b762:	f300 8160 	bgt.w	800ba26 <_vfiprintf_r+0x7a6>
 800b766:	3608      	adds	r6, #8
 800b768:	9b08      	ldr	r3, [sp, #32]
 800b76a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800b76e:	b15b      	cbz	r3, 800b788 <_vfiprintf_r+0x508>
 800b770:	a80d      	add	r0, sp, #52	; 0x34
 800b772:	3201      	adds	r2, #1
 800b774:	6030      	str	r0, [r6, #0]
 800b776:	2002      	movs	r0, #2
 800b778:	4401      	add	r1, r0
 800b77a:	2a07      	cmp	r2, #7
 800b77c:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800b780:	6070      	str	r0, [r6, #4]
 800b782:	f300 8159 	bgt.w	800ba38 <_vfiprintf_r+0x7b8>
 800b786:	3608      	adds	r6, #8
 800b788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b78a:	2b80      	cmp	r3, #128	; 0x80
 800b78c:	d11f      	bne.n	800b7ce <_vfiprintf_r+0x54e>
 800b78e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800b792:	1a9c      	subs	r4, r3, r2
 800b794:	2c00      	cmp	r4, #0
 800b796:	dd1a      	ble.n	800b7ce <_vfiprintf_r+0x54e>
 800b798:	4b63      	ldr	r3, [pc, #396]	; (800b928 <_vfiprintf_r+0x6a8>)
 800b79a:	6033      	str	r3, [r6, #0]
 800b79c:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 800b7a0:	2c10      	cmp	r4, #16
 800b7a2:	f102 0201 	add.w	r2, r2, #1
 800b7a6:	f106 0008 	add.w	r0, r6, #8
 800b7aa:	f300 814e 	bgt.w	800ba4a <_vfiprintf_r+0x7ca>
 800b7ae:	6074      	str	r4, [r6, #4]
 800b7b0:	2a07      	cmp	r2, #7
 800b7b2:	4464      	add	r4, ip
 800b7b4:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800b7b8:	f340 815a 	ble.w	800ba70 <_vfiprintf_r+0x7f0>
 800b7bc:	aa0e      	add	r2, sp, #56	; 0x38
 800b7be:	4639      	mov	r1, r7
 800b7c0:	4648      	mov	r0, r9
 800b7c2:	f7ff fd2b 	bl	800b21c <__sprint_r>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	f040 818d 	bne.w	800bae6 <_vfiprintf_r+0x866>
 800b7cc:	ae11      	add	r6, sp, #68	; 0x44
 800b7ce:	9b00      	ldr	r3, [sp, #0]
 800b7d0:	1aec      	subs	r4, r5, r3
 800b7d2:	2c00      	cmp	r4, #0
 800b7d4:	dd1b      	ble.n	800b80e <_vfiprintf_r+0x58e>
 800b7d6:	4d54      	ldr	r5, [pc, #336]	; (800b928 <_vfiprintf_r+0x6a8>)
 800b7d8:	2310      	movs	r3, #16
 800b7da:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800b7de:	2c10      	cmp	r4, #16
 800b7e0:	f102 0201 	add.w	r2, r2, #1
 800b7e4:	f106 0008 	add.w	r0, r6, #8
 800b7e8:	6035      	str	r5, [r6, #0]
 800b7ea:	f300 8143 	bgt.w	800ba74 <_vfiprintf_r+0x7f4>
 800b7ee:	6074      	str	r4, [r6, #4]
 800b7f0:	2a07      	cmp	r2, #7
 800b7f2:	440c      	add	r4, r1
 800b7f4:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800b7f8:	f340 814d 	ble.w	800ba96 <_vfiprintf_r+0x816>
 800b7fc:	aa0e      	add	r2, sp, #56	; 0x38
 800b7fe:	4639      	mov	r1, r7
 800b800:	4648      	mov	r0, r9
 800b802:	f7ff fd0b 	bl	800b21c <__sprint_r>
 800b806:	2800      	cmp	r0, #0
 800b808:	f040 816d 	bne.w	800bae6 <_vfiprintf_r+0x866>
 800b80c:	ae11      	add	r6, sp, #68	; 0x44
 800b80e:	9b00      	ldr	r3, [sp, #0]
 800b810:	9a00      	ldr	r2, [sp, #0]
 800b812:	6073      	str	r3, [r6, #4]
 800b814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b816:	f8c6 b000 	str.w	fp, [r6]
 800b81a:	4413      	add	r3, r2
 800b81c:	9310      	str	r3, [sp, #64]	; 0x40
 800b81e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b820:	3301      	adds	r3, #1
 800b822:	2b07      	cmp	r3, #7
 800b824:	930f      	str	r3, [sp, #60]	; 0x3c
 800b826:	f300 8138 	bgt.w	800ba9a <_vfiprintf_r+0x81a>
 800b82a:	f106 0308 	add.w	r3, r6, #8
 800b82e:	f01a 0f04 	tst.w	sl, #4
 800b832:	f040 813a 	bne.w	800baaa <_vfiprintf_r+0x82a>
 800b836:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b83a:	9904      	ldr	r1, [sp, #16]
 800b83c:	428a      	cmp	r2, r1
 800b83e:	bfac      	ite	ge
 800b840:	189b      	addge	r3, r3, r2
 800b842:	185b      	addlt	r3, r3, r1
 800b844:	9302      	str	r3, [sp, #8]
 800b846:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b848:	b13b      	cbz	r3, 800b85a <_vfiprintf_r+0x5da>
 800b84a:	aa0e      	add	r2, sp, #56	; 0x38
 800b84c:	4639      	mov	r1, r7
 800b84e:	4648      	mov	r0, r9
 800b850:	f7ff fce4 	bl	800b21c <__sprint_r>
 800b854:	2800      	cmp	r0, #0
 800b856:	f040 8146 	bne.w	800bae6 <_vfiprintf_r+0x866>
 800b85a:	2300      	movs	r3, #0
 800b85c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b85e:	ae11      	add	r6, sp, #68	; 0x44
 800b860:	e6ca      	b.n	800b5f8 <_vfiprintf_r+0x378>
 800b862:	4658      	mov	r0, fp
 800b864:	f7f4 fd0c 	bl	8000280 <strlen>
 800b868:	9000      	str	r0, [sp, #0]
 800b86a:	e736      	b.n	800b6da <_vfiprintf_r+0x45a>
 800b86c:	f04a 0a10 	orr.w	sl, sl, #16
 800b870:	f01a 0320 	ands.w	r3, sl, #32
 800b874:	d008      	beq.n	800b888 <_vfiprintf_r+0x608>
 800b876:	3407      	adds	r4, #7
 800b878:	f024 0307 	bic.w	r3, r4, #7
 800b87c:	4698      	mov	r8, r3
 800b87e:	685d      	ldr	r5, [r3, #4]
 800b880:	f858 4b08 	ldr.w	r4, [r8], #8
 800b884:	2301      	movs	r3, #1
 800b886:	e6dd      	b.n	800b644 <_vfiprintf_r+0x3c4>
 800b888:	46a0      	mov	r8, r4
 800b88a:	f01a 0510 	ands.w	r5, sl, #16
 800b88e:	f858 4b04 	ldr.w	r4, [r8], #4
 800b892:	d001      	beq.n	800b898 <_vfiprintf_r+0x618>
 800b894:	461d      	mov	r5, r3
 800b896:	e7f5      	b.n	800b884 <_vfiprintf_r+0x604>
 800b898:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 800b89c:	d001      	beq.n	800b8a2 <_vfiprintf_r+0x622>
 800b89e:	b2a4      	uxth	r4, r4
 800b8a0:	e7f0      	b.n	800b884 <_vfiprintf_r+0x604>
 800b8a2:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800b8a6:	d0ed      	beq.n	800b884 <_vfiprintf_r+0x604>
 800b8a8:	b2e4      	uxtb	r4, r4
 800b8aa:	e7f3      	b.n	800b894 <_vfiprintf_r+0x614>
 800b8ac:	4a1f      	ldr	r2, [pc, #124]	; (800b92c <_vfiprintf_r+0x6ac>)
 800b8ae:	9205      	str	r2, [sp, #20]
 800b8b0:	f01a 0220 	ands.w	r2, sl, #32
 800b8b4:	d018      	beq.n	800b8e8 <_vfiprintf_r+0x668>
 800b8b6:	3407      	adds	r4, #7
 800b8b8:	f024 0207 	bic.w	r2, r4, #7
 800b8bc:	4690      	mov	r8, r2
 800b8be:	6855      	ldr	r5, [r2, #4]
 800b8c0:	f858 4b08 	ldr.w	r4, [r8], #8
 800b8c4:	f01a 0f01 	tst.w	sl, #1
 800b8c8:	d009      	beq.n	800b8de <_vfiprintf_r+0x65e>
 800b8ca:	ea54 0205 	orrs.w	r2, r4, r5
 800b8ce:	bf1f      	itttt	ne
 800b8d0:	2230      	movne	r2, #48	; 0x30
 800b8d2:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800b8d6:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800b8da:	f04a 0a02 	orrne.w	sl, sl, #2
 800b8de:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800b8e2:	e6e3      	b.n	800b6ac <_vfiprintf_r+0x42c>
 800b8e4:	4a0e      	ldr	r2, [pc, #56]	; (800b920 <_vfiprintf_r+0x6a0>)
 800b8e6:	e7e2      	b.n	800b8ae <_vfiprintf_r+0x62e>
 800b8e8:	46a0      	mov	r8, r4
 800b8ea:	f01a 0510 	ands.w	r5, sl, #16
 800b8ee:	f858 4b04 	ldr.w	r4, [r8], #4
 800b8f2:	d001      	beq.n	800b8f8 <_vfiprintf_r+0x678>
 800b8f4:	4615      	mov	r5, r2
 800b8f6:	e7e5      	b.n	800b8c4 <_vfiprintf_r+0x644>
 800b8f8:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800b8fc:	d001      	beq.n	800b902 <_vfiprintf_r+0x682>
 800b8fe:	b2a4      	uxth	r4, r4
 800b900:	e7e0      	b.n	800b8c4 <_vfiprintf_r+0x644>
 800b902:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 800b906:	d0dd      	beq.n	800b8c4 <_vfiprintf_r+0x644>
 800b908:	b2e4      	uxtb	r4, r4
 800b90a:	e7f3      	b.n	800b8f4 <_vfiprintf_r+0x674>
 800b90c:	2c0a      	cmp	r4, #10
 800b90e:	f175 0300 	sbcs.w	r3, r5, #0
 800b912:	d20d      	bcs.n	800b930 <_vfiprintf_r+0x6b0>
 800b914:	3430      	adds	r4, #48	; 0x30
 800b916:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800b91a:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 800b91e:	e135      	b.n	800bb8c <_vfiprintf_r+0x90c>
 800b920:	0800d3a8 	.word	0x0800d3a8
 800b924:	0800d703 	.word	0x0800d703
 800b928:	0800d713 	.word	0x0800d713
 800b92c:	0800d3b9 	.word	0x0800d3b9
 800b930:	ab3a      	add	r3, sp, #232	; 0xe8
 800b932:	9308      	str	r3, [sp, #32]
 800b934:	9b04      	ldr	r3, [sp, #16]
 800b936:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b93a:	f04f 0a00 	mov.w	sl, #0
 800b93e:	9309      	str	r3, [sp, #36]	; 0x24
 800b940:	220a      	movs	r2, #10
 800b942:	2300      	movs	r3, #0
 800b944:	4620      	mov	r0, r4
 800b946:	4629      	mov	r1, r5
 800b948:	f7f5 f986 	bl	8000c58 <__aeabi_uldivmod>
 800b94c:	9b08      	ldr	r3, [sp, #32]
 800b94e:	3230      	adds	r2, #48	; 0x30
 800b950:	f103 3bff 	add.w	fp, r3, #4294967295
 800b954:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b95a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b95e:	f10a 0a01 	add.w	sl, sl, #1
 800b962:	b1d3      	cbz	r3, 800b99a <_vfiprintf_r+0x71a>
 800b964:	9b06      	ldr	r3, [sp, #24]
 800b966:	781a      	ldrb	r2, [r3, #0]
 800b968:	4552      	cmp	r2, sl
 800b96a:	d116      	bne.n	800b99a <_vfiprintf_r+0x71a>
 800b96c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800b970:	d013      	beq.n	800b99a <_vfiprintf_r+0x71a>
 800b972:	2c0a      	cmp	r4, #10
 800b974:	f175 0200 	sbcs.w	r2, r5, #0
 800b978:	d30f      	bcc.n	800b99a <_vfiprintf_r+0x71a>
 800b97a:	9b07      	ldr	r3, [sp, #28]
 800b97c:	ebab 0b03 	sub.w	fp, fp, r3
 800b980:	461a      	mov	r2, r3
 800b982:	ee18 1a10 	vmov	r1, s16
 800b986:	4658      	mov	r0, fp
 800b988:	f7fd ff23 	bl	80097d2 <strncpy>
 800b98c:	9b06      	ldr	r3, [sp, #24]
 800b98e:	785a      	ldrb	r2, [r3, #1]
 800b990:	b16a      	cbz	r2, 800b9ae <_vfiprintf_r+0x72e>
 800b992:	3301      	adds	r3, #1
 800b994:	9306      	str	r3, [sp, #24]
 800b996:	f04f 0a00 	mov.w	sl, #0
 800b99a:	2c0a      	cmp	r4, #10
 800b99c:	f175 0500 	sbcs.w	r5, r5, #0
 800b9a0:	f0c0 80f4 	bcc.w	800bb8c <_vfiprintf_r+0x90c>
 800b9a4:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 800b9a8:	f8cd b020 	str.w	fp, [sp, #32]
 800b9ac:	e7c8      	b.n	800b940 <_vfiprintf_r+0x6c0>
 800b9ae:	4692      	mov	sl, r2
 800b9b0:	e7f3      	b.n	800b99a <_vfiprintf_r+0x71a>
 800b9b2:	f004 020f 	and.w	r2, r4, #15
 800b9b6:	9b05      	ldr	r3, [sp, #20]
 800b9b8:	0924      	lsrs	r4, r4, #4
 800b9ba:	5c9a      	ldrb	r2, [r3, r2]
 800b9bc:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800b9c0:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800b9c4:	092d      	lsrs	r5, r5, #4
 800b9c6:	ea54 0205 	orrs.w	r2, r4, r5
 800b9ca:	d1f2      	bne.n	800b9b2 <_vfiprintf_r+0x732>
 800b9cc:	e0de      	b.n	800bb8c <_vfiprintf_r+0x90c>
 800b9ce:	b933      	cbnz	r3, 800b9de <_vfiprintf_r+0x75e>
 800b9d0:	f01a 0f01 	tst.w	sl, #1
 800b9d4:	d003      	beq.n	800b9de <_vfiprintf_r+0x75e>
 800b9d6:	2330      	movs	r3, #48	; 0x30
 800b9d8:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800b9dc:	e79d      	b.n	800b91a <_vfiprintf_r+0x69a>
 800b9de:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800b9e2:	e0d3      	b.n	800bb8c <_vfiprintf_r+0x90c>
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 809f 	beq.w	800bb28 <_vfiprintf_r+0x8a8>
 800b9ea:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800b9f4:	46a0      	mov	r8, r4
 800b9f6:	e5c0      	b.n	800b57a <_vfiprintf_r+0x2fa>
 800b9f8:	4605      	mov	r5, r0
 800b9fa:	e66e      	b.n	800b6da <_vfiprintf_r+0x45a>
 800b9fc:	2110      	movs	r1, #16
 800b9fe:	6071      	str	r1, [r6, #4]
 800ba00:	2a07      	cmp	r2, #7
 800ba02:	4461      	add	r1, ip
 800ba04:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800ba08:	dd08      	ble.n	800ba1c <_vfiprintf_r+0x79c>
 800ba0a:	aa0e      	add	r2, sp, #56	; 0x38
 800ba0c:	4639      	mov	r1, r7
 800ba0e:	4648      	mov	r0, r9
 800ba10:	f7ff fc04 	bl	800b21c <__sprint_r>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d166      	bne.n	800bae6 <_vfiprintf_r+0x866>
 800ba18:	4b60      	ldr	r3, [pc, #384]	; (800bb9c <_vfiprintf_r+0x91c>)
 800ba1a:	a811      	add	r0, sp, #68	; 0x44
 800ba1c:	3c10      	subs	r4, #16
 800ba1e:	4606      	mov	r6, r0
 800ba20:	e676      	b.n	800b710 <_vfiprintf_r+0x490>
 800ba22:	4606      	mov	r6, r0
 800ba24:	e68e      	b.n	800b744 <_vfiprintf_r+0x4c4>
 800ba26:	aa0e      	add	r2, sp, #56	; 0x38
 800ba28:	4639      	mov	r1, r7
 800ba2a:	4648      	mov	r0, r9
 800ba2c:	f7ff fbf6 	bl	800b21c <__sprint_r>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	d158      	bne.n	800bae6 <_vfiprintf_r+0x866>
 800ba34:	ae11      	add	r6, sp, #68	; 0x44
 800ba36:	e697      	b.n	800b768 <_vfiprintf_r+0x4e8>
 800ba38:	aa0e      	add	r2, sp, #56	; 0x38
 800ba3a:	4639      	mov	r1, r7
 800ba3c:	4648      	mov	r0, r9
 800ba3e:	f7ff fbed 	bl	800b21c <__sprint_r>
 800ba42:	2800      	cmp	r0, #0
 800ba44:	d14f      	bne.n	800bae6 <_vfiprintf_r+0x866>
 800ba46:	ae11      	add	r6, sp, #68	; 0x44
 800ba48:	e69e      	b.n	800b788 <_vfiprintf_r+0x508>
 800ba4a:	2110      	movs	r1, #16
 800ba4c:	6071      	str	r1, [r6, #4]
 800ba4e:	2a07      	cmp	r2, #7
 800ba50:	4461      	add	r1, ip
 800ba52:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800ba56:	dd08      	ble.n	800ba6a <_vfiprintf_r+0x7ea>
 800ba58:	aa0e      	add	r2, sp, #56	; 0x38
 800ba5a:	4639      	mov	r1, r7
 800ba5c:	4648      	mov	r0, r9
 800ba5e:	f7ff fbdd 	bl	800b21c <__sprint_r>
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d13f      	bne.n	800bae6 <_vfiprintf_r+0x866>
 800ba66:	4b4e      	ldr	r3, [pc, #312]	; (800bba0 <_vfiprintf_r+0x920>)
 800ba68:	a811      	add	r0, sp, #68	; 0x44
 800ba6a:	3c10      	subs	r4, #16
 800ba6c:	4606      	mov	r6, r0
 800ba6e:	e694      	b.n	800b79a <_vfiprintf_r+0x51a>
 800ba70:	4606      	mov	r6, r0
 800ba72:	e6ac      	b.n	800b7ce <_vfiprintf_r+0x54e>
 800ba74:	3110      	adds	r1, #16
 800ba76:	2a07      	cmp	r2, #7
 800ba78:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800ba7c:	6073      	str	r3, [r6, #4]
 800ba7e:	dd07      	ble.n	800ba90 <_vfiprintf_r+0x810>
 800ba80:	aa0e      	add	r2, sp, #56	; 0x38
 800ba82:	4639      	mov	r1, r7
 800ba84:	4648      	mov	r0, r9
 800ba86:	f7ff fbc9 	bl	800b21c <__sprint_r>
 800ba8a:	bb60      	cbnz	r0, 800bae6 <_vfiprintf_r+0x866>
 800ba8c:	a811      	add	r0, sp, #68	; 0x44
 800ba8e:	2310      	movs	r3, #16
 800ba90:	3c10      	subs	r4, #16
 800ba92:	4606      	mov	r6, r0
 800ba94:	e6a1      	b.n	800b7da <_vfiprintf_r+0x55a>
 800ba96:	4606      	mov	r6, r0
 800ba98:	e6b9      	b.n	800b80e <_vfiprintf_r+0x58e>
 800ba9a:	aa0e      	add	r2, sp, #56	; 0x38
 800ba9c:	4639      	mov	r1, r7
 800ba9e:	4648      	mov	r0, r9
 800baa0:	f7ff fbbc 	bl	800b21c <__sprint_r>
 800baa4:	b9f8      	cbnz	r0, 800bae6 <_vfiprintf_r+0x866>
 800baa6:	ab11      	add	r3, sp, #68	; 0x44
 800baa8:	e6c1      	b.n	800b82e <_vfiprintf_r+0x5ae>
 800baaa:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800baae:	1a54      	subs	r4, r2, r1
 800bab0:	2c00      	cmp	r4, #0
 800bab2:	f77f aec0 	ble.w	800b836 <_vfiprintf_r+0x5b6>
 800bab6:	4d39      	ldr	r5, [pc, #228]	; (800bb9c <_vfiprintf_r+0x91c>)
 800bab8:	2610      	movs	r6, #16
 800baba:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800babe:	2c10      	cmp	r4, #16
 800bac0:	f102 0201 	add.w	r2, r2, #1
 800bac4:	601d      	str	r5, [r3, #0]
 800bac6:	dc1d      	bgt.n	800bb04 <_vfiprintf_r+0x884>
 800bac8:	605c      	str	r4, [r3, #4]
 800baca:	2a07      	cmp	r2, #7
 800bacc:	440c      	add	r4, r1
 800bace:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800bad2:	f77f aeb0 	ble.w	800b836 <_vfiprintf_r+0x5b6>
 800bad6:	aa0e      	add	r2, sp, #56	; 0x38
 800bad8:	4639      	mov	r1, r7
 800bada:	4648      	mov	r0, r9
 800badc:	f7ff fb9e 	bl	800b21c <__sprint_r>
 800bae0:	2800      	cmp	r0, #0
 800bae2:	f43f aea8 	beq.w	800b836 <_vfiprintf_r+0x5b6>
 800bae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bae8:	07d9      	lsls	r1, r3, #31
 800baea:	d405      	bmi.n	800baf8 <_vfiprintf_r+0x878>
 800baec:	89bb      	ldrh	r3, [r7, #12]
 800baee:	059a      	lsls	r2, r3, #22
 800baf0:	d402      	bmi.n	800baf8 <_vfiprintf_r+0x878>
 800baf2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800baf4:	f7fc f807 	bl	8007b06 <__retarget_lock_release_recursive>
 800baf8:	89bb      	ldrh	r3, [r7, #12]
 800bafa:	065b      	lsls	r3, r3, #25
 800bafc:	f57f abf3 	bpl.w	800b2e6 <_vfiprintf_r+0x66>
 800bb00:	f7ff bbee 	b.w	800b2e0 <_vfiprintf_r+0x60>
 800bb04:	3110      	adds	r1, #16
 800bb06:	2a07      	cmp	r2, #7
 800bb08:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800bb0c:	605e      	str	r6, [r3, #4]
 800bb0e:	dc02      	bgt.n	800bb16 <_vfiprintf_r+0x896>
 800bb10:	3308      	adds	r3, #8
 800bb12:	3c10      	subs	r4, #16
 800bb14:	e7d1      	b.n	800baba <_vfiprintf_r+0x83a>
 800bb16:	aa0e      	add	r2, sp, #56	; 0x38
 800bb18:	4639      	mov	r1, r7
 800bb1a:	4648      	mov	r0, r9
 800bb1c:	f7ff fb7e 	bl	800b21c <__sprint_r>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d1e0      	bne.n	800bae6 <_vfiprintf_r+0x866>
 800bb24:	ab11      	add	r3, sp, #68	; 0x44
 800bb26:	e7f4      	b.n	800bb12 <_vfiprintf_r+0x892>
 800bb28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb2a:	b913      	cbnz	r3, 800bb32 <_vfiprintf_r+0x8b2>
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb30:	e7d9      	b.n	800bae6 <_vfiprintf_r+0x866>
 800bb32:	aa0e      	add	r2, sp, #56	; 0x38
 800bb34:	4639      	mov	r1, r7
 800bb36:	4648      	mov	r0, r9
 800bb38:	f7ff fb70 	bl	800b21c <__sprint_r>
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d0f5      	beq.n	800bb2c <_vfiprintf_r+0x8ac>
 800bb40:	e7d1      	b.n	800bae6 <_vfiprintf_r+0x866>
 800bb42:	ea54 0205 	orrs.w	r2, r4, r5
 800bb46:	f8cd a010 	str.w	sl, [sp, #16]
 800bb4a:	f43f ad8d 	beq.w	800b668 <_vfiprintf_r+0x3e8>
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	f43f aedc 	beq.w	800b90c <_vfiprintf_r+0x68c>
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800bb5a:	f43f af2a 	beq.w	800b9b2 <_vfiprintf_r+0x732>
 800bb5e:	f004 0207 	and.w	r2, r4, #7
 800bb62:	08e4      	lsrs	r4, r4, #3
 800bb64:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800bb68:	08ed      	lsrs	r5, r5, #3
 800bb6a:	3230      	adds	r2, #48	; 0x30
 800bb6c:	ea54 0005 	orrs.w	r0, r4, r5
 800bb70:	4659      	mov	r1, fp
 800bb72:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 800bb76:	d1f2      	bne.n	800bb5e <_vfiprintf_r+0x8de>
 800bb78:	9b04      	ldr	r3, [sp, #16]
 800bb7a:	07d8      	lsls	r0, r3, #31
 800bb7c:	d506      	bpl.n	800bb8c <_vfiprintf_r+0x90c>
 800bb7e:	2a30      	cmp	r2, #48	; 0x30
 800bb80:	d004      	beq.n	800bb8c <_vfiprintf_r+0x90c>
 800bb82:	2230      	movs	r2, #48	; 0x30
 800bb84:	f80b 2c01 	strb.w	r2, [fp, #-1]
 800bb88:	f1a1 0b02 	sub.w	fp, r1, #2
 800bb8c:	ab3a      	add	r3, sp, #232	; 0xe8
 800bb8e:	eba3 030b 	sub.w	r3, r3, fp
 800bb92:	9d00      	ldr	r5, [sp, #0]
 800bb94:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	e59e      	b.n	800b6da <_vfiprintf_r+0x45a>
 800bb9c:	0800d703 	.word	0x0800d703
 800bba0:	0800d713 	.word	0x0800d713

0800bba4 <__sbprintf>:
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	460c      	mov	r4, r1
 800bba8:	8989      	ldrh	r1, [r1, #12]
 800bbaa:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800bbae:	f021 0102 	bic.w	r1, r1, #2
 800bbb2:	f8ad 1014 	strh.w	r1, [sp, #20]
 800bbb6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800bbb8:	911b      	str	r1, [sp, #108]	; 0x6c
 800bbba:	89e1      	ldrh	r1, [r4, #14]
 800bbbc:	f8ad 1016 	strh.w	r1, [sp, #22]
 800bbc0:	69e1      	ldr	r1, [r4, #28]
 800bbc2:	9109      	str	r1, [sp, #36]	; 0x24
 800bbc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bbc6:	910b      	str	r1, [sp, #44]	; 0x2c
 800bbc8:	a91c      	add	r1, sp, #112	; 0x70
 800bbca:	9102      	str	r1, [sp, #8]
 800bbcc:	9106      	str	r1, [sp, #24]
 800bbce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	9104      	str	r1, [sp, #16]
 800bbd6:	9107      	str	r1, [sp, #28]
 800bbd8:	a818      	add	r0, sp, #96	; 0x60
 800bbda:	2100      	movs	r1, #0
 800bbdc:	e9cd 3200 	strd	r3, r2, [sp]
 800bbe0:	9108      	str	r1, [sp, #32]
 800bbe2:	f7fb ff8d 	bl	8007b00 <__retarget_lock_init_recursive>
 800bbe6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bbea:	a902      	add	r1, sp, #8
 800bbec:	4630      	mov	r0, r6
 800bbee:	f7ff fb47 	bl	800b280 <_vfiprintf_r>
 800bbf2:	1e05      	subs	r5, r0, #0
 800bbf4:	db07      	blt.n	800bc06 <__sbprintf+0x62>
 800bbf6:	a902      	add	r1, sp, #8
 800bbf8:	4630      	mov	r0, r6
 800bbfa:	f7fd fdc5 	bl	8009788 <_fflush_r>
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	bf18      	it	ne
 800bc02:	f04f 35ff 	movne.w	r5, #4294967295
 800bc06:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800bc0a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800bc0c:	065b      	lsls	r3, r3, #25
 800bc0e:	bf42      	ittt	mi
 800bc10:	89a3      	ldrhmi	r3, [r4, #12]
 800bc12:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800bc16:	81a3      	strhmi	r3, [r4, #12]
 800bc18:	f7fb ff73 	bl	8007b02 <__retarget_lock_close_recursive>
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800bc22:	bd70      	pop	{r4, r5, r6, pc}

0800bc24 <__sfvwrite_r>:
 800bc24:	6893      	ldr	r3, [r2, #8]
 800bc26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2a:	4606      	mov	r6, r0
 800bc2c:	460c      	mov	r4, r1
 800bc2e:	4691      	mov	r9, r2
 800bc30:	b91b      	cbnz	r3, 800bc3a <__sfvwrite_r+0x16>
 800bc32:	2000      	movs	r0, #0
 800bc34:	b003      	add	sp, #12
 800bc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc3a:	898b      	ldrh	r3, [r1, #12]
 800bc3c:	0718      	lsls	r0, r3, #28
 800bc3e:	d54f      	bpl.n	800bce0 <__sfvwrite_r+0xbc>
 800bc40:	690b      	ldr	r3, [r1, #16]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d04c      	beq.n	800bce0 <__sfvwrite_r+0xbc>
 800bc46:	89a3      	ldrh	r3, [r4, #12]
 800bc48:	f8d9 8000 	ldr.w	r8, [r9]
 800bc4c:	f013 0702 	ands.w	r7, r3, #2
 800bc50:	d16b      	bne.n	800bd2a <__sfvwrite_r+0x106>
 800bc52:	f013 0301 	ands.w	r3, r3, #1
 800bc56:	f000 809b 	beq.w	800bd90 <__sfvwrite_r+0x16c>
 800bc5a:	4638      	mov	r0, r7
 800bc5c:	46ba      	mov	sl, r7
 800bc5e:	46bb      	mov	fp, r7
 800bc60:	f1bb 0f00 	cmp.w	fp, #0
 800bc64:	f000 8102 	beq.w	800be6c <__sfvwrite_r+0x248>
 800bc68:	b950      	cbnz	r0, 800bc80 <__sfvwrite_r+0x5c>
 800bc6a:	465a      	mov	r2, fp
 800bc6c:	210a      	movs	r1, #10
 800bc6e:	4650      	mov	r0, sl
 800bc70:	f7f4 fab6 	bl	80001e0 <memchr>
 800bc74:	2800      	cmp	r0, #0
 800bc76:	f000 80ff 	beq.w	800be78 <__sfvwrite_r+0x254>
 800bc7a:	3001      	adds	r0, #1
 800bc7c:	eba0 070a 	sub.w	r7, r0, sl
 800bc80:	6820      	ldr	r0, [r4, #0]
 800bc82:	6921      	ldr	r1, [r4, #16]
 800bc84:	68a5      	ldr	r5, [r4, #8]
 800bc86:	6963      	ldr	r3, [r4, #20]
 800bc88:	455f      	cmp	r7, fp
 800bc8a:	463a      	mov	r2, r7
 800bc8c:	bf28      	it	cs
 800bc8e:	465a      	movcs	r2, fp
 800bc90:	4288      	cmp	r0, r1
 800bc92:	f240 80f4 	bls.w	800be7e <__sfvwrite_r+0x25a>
 800bc96:	441d      	add	r5, r3
 800bc98:	42aa      	cmp	r2, r5
 800bc9a:	f340 80f0 	ble.w	800be7e <__sfvwrite_r+0x25a>
 800bc9e:	4651      	mov	r1, sl
 800bca0:	462a      	mov	r2, r5
 800bca2:	f7ff f85e 	bl	800ad62 <memmove>
 800bca6:	6823      	ldr	r3, [r4, #0]
 800bca8:	442b      	add	r3, r5
 800bcaa:	6023      	str	r3, [r4, #0]
 800bcac:	4621      	mov	r1, r4
 800bcae:	4630      	mov	r0, r6
 800bcb0:	f7fd fd6a 	bl	8009788 <_fflush_r>
 800bcb4:	2800      	cmp	r0, #0
 800bcb6:	d166      	bne.n	800bd86 <__sfvwrite_r+0x162>
 800bcb8:	1b7f      	subs	r7, r7, r5
 800bcba:	f040 80f8 	bne.w	800beae <__sfvwrite_r+0x28a>
 800bcbe:	4621      	mov	r1, r4
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	f7fd fd61 	bl	8009788 <_fflush_r>
 800bcc6:	2800      	cmp	r0, #0
 800bcc8:	d15d      	bne.n	800bd86 <__sfvwrite_r+0x162>
 800bcca:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bcce:	1b5b      	subs	r3, r3, r5
 800bcd0:	44aa      	add	sl, r5
 800bcd2:	ebab 0b05 	sub.w	fp, fp, r5
 800bcd6:	f8c9 3008 	str.w	r3, [r9, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d1c0      	bne.n	800bc60 <__sfvwrite_r+0x3c>
 800bcde:	e7a8      	b.n	800bc32 <__sfvwrite_r+0xe>
 800bce0:	4621      	mov	r1, r4
 800bce2:	4630      	mov	r0, r6
 800bce4:	f000 f8e8 	bl	800beb8 <__swsetup_r>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d0ac      	beq.n	800bc46 <__sfvwrite_r+0x22>
 800bcec:	f04f 30ff 	mov.w	r0, #4294967295
 800bcf0:	e7a0      	b.n	800bc34 <__sfvwrite_r+0x10>
 800bcf2:	e9d8 a500 	ldrd	sl, r5, [r8]
 800bcf6:	f108 0808 	add.w	r8, r8, #8
 800bcfa:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800bcfe:	69e1      	ldr	r1, [r4, #28]
 800bd00:	2d00      	cmp	r5, #0
 800bd02:	d0f6      	beq.n	800bcf2 <__sfvwrite_r+0xce>
 800bd04:	42bd      	cmp	r5, r7
 800bd06:	462b      	mov	r3, r5
 800bd08:	4652      	mov	r2, sl
 800bd0a:	bf28      	it	cs
 800bd0c:	463b      	movcs	r3, r7
 800bd0e:	4630      	mov	r0, r6
 800bd10:	47d8      	blx	fp
 800bd12:	2800      	cmp	r0, #0
 800bd14:	dd37      	ble.n	800bd86 <__sfvwrite_r+0x162>
 800bd16:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bd1a:	1a1b      	subs	r3, r3, r0
 800bd1c:	4482      	add	sl, r0
 800bd1e:	1a2d      	subs	r5, r5, r0
 800bd20:	f8c9 3008 	str.w	r3, [r9, #8]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d1e8      	bne.n	800bcfa <__sfvwrite_r+0xd6>
 800bd28:	e783      	b.n	800bc32 <__sfvwrite_r+0xe>
 800bd2a:	f04f 0a00 	mov.w	sl, #0
 800bd2e:	4f61      	ldr	r7, [pc, #388]	; (800beb4 <__sfvwrite_r+0x290>)
 800bd30:	4655      	mov	r5, sl
 800bd32:	e7e2      	b.n	800bcfa <__sfvwrite_r+0xd6>
 800bd34:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800bd38:	f108 0808 	add.w	r8, r8, #8
 800bd3c:	6820      	ldr	r0, [r4, #0]
 800bd3e:	68a2      	ldr	r2, [r4, #8]
 800bd40:	f1ba 0f00 	cmp.w	sl, #0
 800bd44:	d0f6      	beq.n	800bd34 <__sfvwrite_r+0x110>
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	0599      	lsls	r1, r3, #22
 800bd4a:	d563      	bpl.n	800be14 <__sfvwrite_r+0x1f0>
 800bd4c:	4552      	cmp	r2, sl
 800bd4e:	d836      	bhi.n	800bdbe <__sfvwrite_r+0x19a>
 800bd50:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800bd54:	d033      	beq.n	800bdbe <__sfvwrite_r+0x19a>
 800bd56:	6921      	ldr	r1, [r4, #16]
 800bd58:	6965      	ldr	r5, [r4, #20]
 800bd5a:	eba0 0b01 	sub.w	fp, r0, r1
 800bd5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd66:	f10b 0201 	add.w	r2, fp, #1
 800bd6a:	106d      	asrs	r5, r5, #1
 800bd6c:	4452      	add	r2, sl
 800bd6e:	4295      	cmp	r5, r2
 800bd70:	bf38      	it	cc
 800bd72:	4615      	movcc	r5, r2
 800bd74:	055b      	lsls	r3, r3, #21
 800bd76:	d53d      	bpl.n	800bdf4 <__sfvwrite_r+0x1d0>
 800bd78:	4629      	mov	r1, r5
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f7fb ffe8 	bl	8007d50 <_malloc_r>
 800bd80:	b948      	cbnz	r0, 800bd96 <__sfvwrite_r+0x172>
 800bd82:	230c      	movs	r3, #12
 800bd84:	6033      	str	r3, [r6, #0]
 800bd86:	89a3      	ldrh	r3, [r4, #12]
 800bd88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd8c:	81a3      	strh	r3, [r4, #12]
 800bd8e:	e7ad      	b.n	800bcec <__sfvwrite_r+0xc8>
 800bd90:	461f      	mov	r7, r3
 800bd92:	469a      	mov	sl, r3
 800bd94:	e7d2      	b.n	800bd3c <__sfvwrite_r+0x118>
 800bd96:	465a      	mov	r2, fp
 800bd98:	6921      	ldr	r1, [r4, #16]
 800bd9a:	9001      	str	r0, [sp, #4]
 800bd9c:	f7ff f802 	bl	800ada4 <memcpy>
 800bda0:	89a2      	ldrh	r2, [r4, #12]
 800bda2:	9b01      	ldr	r3, [sp, #4]
 800bda4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800bda8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bdac:	81a2      	strh	r2, [r4, #12]
 800bdae:	6123      	str	r3, [r4, #16]
 800bdb0:	6165      	str	r5, [r4, #20]
 800bdb2:	445b      	add	r3, fp
 800bdb4:	eba5 050b 	sub.w	r5, r5, fp
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	4652      	mov	r2, sl
 800bdbc:	60a5      	str	r5, [r4, #8]
 800bdbe:	4552      	cmp	r2, sl
 800bdc0:	bf28      	it	cs
 800bdc2:	4652      	movcs	r2, sl
 800bdc4:	6820      	ldr	r0, [r4, #0]
 800bdc6:	9201      	str	r2, [sp, #4]
 800bdc8:	4639      	mov	r1, r7
 800bdca:	f7fe ffca 	bl	800ad62 <memmove>
 800bdce:	68a3      	ldr	r3, [r4, #8]
 800bdd0:	9a01      	ldr	r2, [sp, #4]
 800bdd2:	1a9b      	subs	r3, r3, r2
 800bdd4:	60a3      	str	r3, [r4, #8]
 800bdd6:	6823      	ldr	r3, [r4, #0]
 800bdd8:	4413      	add	r3, r2
 800bdda:	4655      	mov	r5, sl
 800bddc:	6023      	str	r3, [r4, #0]
 800bdde:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800bde2:	1b5b      	subs	r3, r3, r5
 800bde4:	442f      	add	r7, r5
 800bde6:	ebaa 0a05 	sub.w	sl, sl, r5
 800bdea:	f8c9 3008 	str.w	r3, [r9, #8]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1a4      	bne.n	800bd3c <__sfvwrite_r+0x118>
 800bdf2:	e71e      	b.n	800bc32 <__sfvwrite_r+0xe>
 800bdf4:	462a      	mov	r2, r5
 800bdf6:	4630      	mov	r0, r6
 800bdf8:	f7ff f848 	bl	800ae8c <_realloc_r>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2800      	cmp	r0, #0
 800be00:	d1d5      	bne.n	800bdae <__sfvwrite_r+0x18a>
 800be02:	6921      	ldr	r1, [r4, #16]
 800be04:	4630      	mov	r0, r6
 800be06:	f7fb fee3 	bl	8007bd0 <_free_r>
 800be0a:	89a3      	ldrh	r3, [r4, #12]
 800be0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be10:	81a3      	strh	r3, [r4, #12]
 800be12:	e7b6      	b.n	800bd82 <__sfvwrite_r+0x15e>
 800be14:	6923      	ldr	r3, [r4, #16]
 800be16:	4283      	cmp	r3, r0
 800be18:	d302      	bcc.n	800be20 <__sfvwrite_r+0x1fc>
 800be1a:	6961      	ldr	r1, [r4, #20]
 800be1c:	4551      	cmp	r1, sl
 800be1e:	d915      	bls.n	800be4c <__sfvwrite_r+0x228>
 800be20:	4552      	cmp	r2, sl
 800be22:	bf28      	it	cs
 800be24:	4652      	movcs	r2, sl
 800be26:	4639      	mov	r1, r7
 800be28:	4615      	mov	r5, r2
 800be2a:	f7fe ff9a 	bl	800ad62 <memmove>
 800be2e:	68a3      	ldr	r3, [r4, #8]
 800be30:	6822      	ldr	r2, [r4, #0]
 800be32:	1b5b      	subs	r3, r3, r5
 800be34:	442a      	add	r2, r5
 800be36:	60a3      	str	r3, [r4, #8]
 800be38:	6022      	str	r2, [r4, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1cf      	bne.n	800bdde <__sfvwrite_r+0x1ba>
 800be3e:	4621      	mov	r1, r4
 800be40:	4630      	mov	r0, r6
 800be42:	f7fd fca1 	bl	8009788 <_fflush_r>
 800be46:	2800      	cmp	r0, #0
 800be48:	d0c9      	beq.n	800bdde <__sfvwrite_r+0x1ba>
 800be4a:	e79c      	b.n	800bd86 <__sfvwrite_r+0x162>
 800be4c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800be50:	459a      	cmp	sl, r3
 800be52:	bf38      	it	cc
 800be54:	4653      	movcc	r3, sl
 800be56:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800be58:	fb93 f3f1 	sdiv	r3, r3, r1
 800be5c:	463a      	mov	r2, r7
 800be5e:	434b      	muls	r3, r1
 800be60:	4630      	mov	r0, r6
 800be62:	69e1      	ldr	r1, [r4, #28]
 800be64:	47a8      	blx	r5
 800be66:	1e05      	subs	r5, r0, #0
 800be68:	dcb9      	bgt.n	800bdde <__sfvwrite_r+0x1ba>
 800be6a:	e78c      	b.n	800bd86 <__sfvwrite_r+0x162>
 800be6c:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800be70:	2000      	movs	r0, #0
 800be72:	f108 0808 	add.w	r8, r8, #8
 800be76:	e6f3      	b.n	800bc60 <__sfvwrite_r+0x3c>
 800be78:	f10b 0701 	add.w	r7, fp, #1
 800be7c:	e700      	b.n	800bc80 <__sfvwrite_r+0x5c>
 800be7e:	4293      	cmp	r3, r2
 800be80:	dc08      	bgt.n	800be94 <__sfvwrite_r+0x270>
 800be82:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800be84:	69e1      	ldr	r1, [r4, #28]
 800be86:	4652      	mov	r2, sl
 800be88:	4630      	mov	r0, r6
 800be8a:	47a8      	blx	r5
 800be8c:	1e05      	subs	r5, r0, #0
 800be8e:	f73f af13 	bgt.w	800bcb8 <__sfvwrite_r+0x94>
 800be92:	e778      	b.n	800bd86 <__sfvwrite_r+0x162>
 800be94:	4651      	mov	r1, sl
 800be96:	9201      	str	r2, [sp, #4]
 800be98:	f7fe ff63 	bl	800ad62 <memmove>
 800be9c:	9a01      	ldr	r2, [sp, #4]
 800be9e:	68a3      	ldr	r3, [r4, #8]
 800bea0:	1a9b      	subs	r3, r3, r2
 800bea2:	60a3      	str	r3, [r4, #8]
 800bea4:	6823      	ldr	r3, [r4, #0]
 800bea6:	4413      	add	r3, r2
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	4615      	mov	r5, r2
 800beac:	e704      	b.n	800bcb8 <__sfvwrite_r+0x94>
 800beae:	2001      	movs	r0, #1
 800beb0:	e70b      	b.n	800bcca <__sfvwrite_r+0xa6>
 800beb2:	bf00      	nop
 800beb4:	7ffffc00 	.word	0x7ffffc00

0800beb8 <__swsetup_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	4b2a      	ldr	r3, [pc, #168]	; (800bf64 <__swsetup_r+0xac>)
 800bebc:	4605      	mov	r5, r0
 800bebe:	6818      	ldr	r0, [r3, #0]
 800bec0:	460c      	mov	r4, r1
 800bec2:	b118      	cbz	r0, 800becc <__swsetup_r+0x14>
 800bec4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800bec6:	b90b      	cbnz	r3, 800becc <__swsetup_r+0x14>
 800bec8:	f7fb fcf4 	bl	80078b4 <__sinit>
 800becc:	89a3      	ldrh	r3, [r4, #12]
 800bece:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bed2:	0718      	lsls	r0, r3, #28
 800bed4:	d422      	bmi.n	800bf1c <__swsetup_r+0x64>
 800bed6:	06d9      	lsls	r1, r3, #27
 800bed8:	d407      	bmi.n	800beea <__swsetup_r+0x32>
 800beda:	2309      	movs	r3, #9
 800bedc:	602b      	str	r3, [r5, #0]
 800bede:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bee2:	81a3      	strh	r3, [r4, #12]
 800bee4:	f04f 30ff 	mov.w	r0, #4294967295
 800bee8:	e034      	b.n	800bf54 <__swsetup_r+0x9c>
 800beea:	0758      	lsls	r0, r3, #29
 800beec:	d512      	bpl.n	800bf14 <__swsetup_r+0x5c>
 800beee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bef0:	b141      	cbz	r1, 800bf04 <__swsetup_r+0x4c>
 800bef2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bef6:	4299      	cmp	r1, r3
 800bef8:	d002      	beq.n	800bf00 <__swsetup_r+0x48>
 800befa:	4628      	mov	r0, r5
 800befc:	f7fb fe68 	bl	8007bd0 <_free_r>
 800bf00:	2300      	movs	r3, #0
 800bf02:	6323      	str	r3, [r4, #48]	; 0x30
 800bf04:	89a3      	ldrh	r3, [r4, #12]
 800bf06:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf0a:	81a3      	strh	r3, [r4, #12]
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	6063      	str	r3, [r4, #4]
 800bf10:	6923      	ldr	r3, [r4, #16]
 800bf12:	6023      	str	r3, [r4, #0]
 800bf14:	89a3      	ldrh	r3, [r4, #12]
 800bf16:	f043 0308 	orr.w	r3, r3, #8
 800bf1a:	81a3      	strh	r3, [r4, #12]
 800bf1c:	6923      	ldr	r3, [r4, #16]
 800bf1e:	b94b      	cbnz	r3, 800bf34 <__swsetup_r+0x7c>
 800bf20:	89a3      	ldrh	r3, [r4, #12]
 800bf22:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf2a:	d003      	beq.n	800bf34 <__swsetup_r+0x7c>
 800bf2c:	4621      	mov	r1, r4
 800bf2e:	4628      	mov	r0, r5
 800bf30:	f000 f8ca 	bl	800c0c8 <__smakebuf_r>
 800bf34:	89a0      	ldrh	r0, [r4, #12]
 800bf36:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf3a:	f010 0301 	ands.w	r3, r0, #1
 800bf3e:	d00a      	beq.n	800bf56 <__swsetup_r+0x9e>
 800bf40:	2300      	movs	r3, #0
 800bf42:	60a3      	str	r3, [r4, #8]
 800bf44:	6963      	ldr	r3, [r4, #20]
 800bf46:	425b      	negs	r3, r3
 800bf48:	61a3      	str	r3, [r4, #24]
 800bf4a:	6923      	ldr	r3, [r4, #16]
 800bf4c:	b943      	cbnz	r3, 800bf60 <__swsetup_r+0xa8>
 800bf4e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bf52:	d1c4      	bne.n	800bede <__swsetup_r+0x26>
 800bf54:	bd38      	pop	{r3, r4, r5, pc}
 800bf56:	0781      	lsls	r1, r0, #30
 800bf58:	bf58      	it	pl
 800bf5a:	6963      	ldrpl	r3, [r4, #20]
 800bf5c:	60a3      	str	r3, [r4, #8]
 800bf5e:	e7f4      	b.n	800bf4a <__swsetup_r+0x92>
 800bf60:	2000      	movs	r0, #0
 800bf62:	e7f7      	b.n	800bf54 <__swsetup_r+0x9c>
 800bf64:	20000228 	.word	0x20000228

0800bf68 <__fputwc>:
 800bf68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bf6c:	4680      	mov	r8, r0
 800bf6e:	460e      	mov	r6, r1
 800bf70:	4615      	mov	r5, r2
 800bf72:	f7fe ff11 	bl	800ad98 <__locale_mb_cur_max>
 800bf76:	2801      	cmp	r0, #1
 800bf78:	d11c      	bne.n	800bfb4 <__fputwc+0x4c>
 800bf7a:	1e73      	subs	r3, r6, #1
 800bf7c:	2bfe      	cmp	r3, #254	; 0xfe
 800bf7e:	d819      	bhi.n	800bfb4 <__fputwc+0x4c>
 800bf80:	f88d 6004 	strb.w	r6, [sp, #4]
 800bf84:	4604      	mov	r4, r0
 800bf86:	2700      	movs	r7, #0
 800bf88:	f10d 0904 	add.w	r9, sp, #4
 800bf8c:	42a7      	cmp	r7, r4
 800bf8e:	d020      	beq.n	800bfd2 <__fputwc+0x6a>
 800bf90:	68ab      	ldr	r3, [r5, #8]
 800bf92:	f817 1009 	ldrb.w	r1, [r7, r9]
 800bf96:	3b01      	subs	r3, #1
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	60ab      	str	r3, [r5, #8]
 800bf9c:	da04      	bge.n	800bfa8 <__fputwc+0x40>
 800bf9e:	69aa      	ldr	r2, [r5, #24]
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	db1a      	blt.n	800bfda <__fputwc+0x72>
 800bfa4:	290a      	cmp	r1, #10
 800bfa6:	d018      	beq.n	800bfda <__fputwc+0x72>
 800bfa8:	682b      	ldr	r3, [r5, #0]
 800bfaa:	1c5a      	adds	r2, r3, #1
 800bfac:	602a      	str	r2, [r5, #0]
 800bfae:	7019      	strb	r1, [r3, #0]
 800bfb0:	3701      	adds	r7, #1
 800bfb2:	e7eb      	b.n	800bf8c <__fputwc+0x24>
 800bfb4:	a901      	add	r1, sp, #4
 800bfb6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800bfba:	4632      	mov	r2, r6
 800bfbc:	4640      	mov	r0, r8
 800bfbe:	f000 f845 	bl	800c04c <_wcrtomb_r>
 800bfc2:	1c41      	adds	r1, r0, #1
 800bfc4:	4604      	mov	r4, r0
 800bfc6:	d1de      	bne.n	800bf86 <__fputwc+0x1e>
 800bfc8:	89ab      	ldrh	r3, [r5, #12]
 800bfca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfce:	81ab      	strh	r3, [r5, #12]
 800bfd0:	4606      	mov	r6, r0
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	b003      	add	sp, #12
 800bfd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfda:	462a      	mov	r2, r5
 800bfdc:	4640      	mov	r0, r8
 800bfde:	f000 f8af 	bl	800c140 <__swbuf_r>
 800bfe2:	1c42      	adds	r2, r0, #1
 800bfe4:	d1e4      	bne.n	800bfb0 <__fputwc+0x48>
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	e7f3      	b.n	800bfd2 <__fputwc+0x6a>

0800bfea <_fputwc_r>:
 800bfea:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800bfec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bfee:	4614      	mov	r4, r2
 800bff0:	07da      	lsls	r2, r3, #31
 800bff2:	4605      	mov	r5, r0
 800bff4:	d407      	bmi.n	800c006 <_fputwc_r+0x1c>
 800bff6:	89a3      	ldrh	r3, [r4, #12]
 800bff8:	059b      	lsls	r3, r3, #22
 800bffa:	d404      	bmi.n	800c006 <_fputwc_r+0x1c>
 800bffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bffe:	9101      	str	r1, [sp, #4]
 800c000:	f7fb fd80 	bl	8007b04 <__retarget_lock_acquire_recursive>
 800c004:	9901      	ldr	r1, [sp, #4]
 800c006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c00a:	0498      	lsls	r0, r3, #18
 800c00c:	d406      	bmi.n	800c01c <_fputwc_r+0x32>
 800c00e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c012:	81a3      	strh	r3, [r4, #12]
 800c014:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c016:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c01a:	6663      	str	r3, [r4, #100]	; 0x64
 800c01c:	4622      	mov	r2, r4
 800c01e:	4628      	mov	r0, r5
 800c020:	f7ff ffa2 	bl	800bf68 <__fputwc>
 800c024:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c026:	07da      	lsls	r2, r3, #31
 800c028:	4605      	mov	r5, r0
 800c02a:	d405      	bmi.n	800c038 <_fputwc_r+0x4e>
 800c02c:	89a3      	ldrh	r3, [r4, #12]
 800c02e:	059b      	lsls	r3, r3, #22
 800c030:	d402      	bmi.n	800c038 <_fputwc_r+0x4e>
 800c032:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c034:	f7fb fd67 	bl	8007b06 <__retarget_lock_release_recursive>
 800c038:	4628      	mov	r0, r5
 800c03a:	b003      	add	sp, #12
 800c03c:	bd30      	pop	{r4, r5, pc}

0800c03e <abort>:
 800c03e:	b508      	push	{r3, lr}
 800c040:	2006      	movs	r0, #6
 800c042:	f000 f8ef 	bl	800c224 <raise>
 800c046:	2001      	movs	r0, #1
 800c048:	f7f5 f8f8 	bl	800123c <_exit>

0800c04c <_wcrtomb_r>:
 800c04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c04e:	4c09      	ldr	r4, [pc, #36]	; (800c074 <_wcrtomb_r+0x28>)
 800c050:	b085      	sub	sp, #20
 800c052:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800c056:	4605      	mov	r5, r0
 800c058:	461e      	mov	r6, r3
 800c05a:	b909      	cbnz	r1, 800c060 <_wcrtomb_r+0x14>
 800c05c:	460a      	mov	r2, r1
 800c05e:	a901      	add	r1, sp, #4
 800c060:	47b8      	blx	r7
 800c062:	1c43      	adds	r3, r0, #1
 800c064:	bf01      	itttt	eq
 800c066:	2300      	moveq	r3, #0
 800c068:	6033      	streq	r3, [r6, #0]
 800c06a:	238a      	moveq	r3, #138	; 0x8a
 800c06c:	602b      	streq	r3, [r5, #0]
 800c06e:	b005      	add	sp, #20
 800c070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c072:	bf00      	nop
 800c074:	20000640 	.word	0x20000640

0800c078 <__swhatbuf_r>:
 800c078:	b570      	push	{r4, r5, r6, lr}
 800c07a:	460c      	mov	r4, r1
 800c07c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c080:	2900      	cmp	r1, #0
 800c082:	b096      	sub	sp, #88	; 0x58
 800c084:	4615      	mov	r5, r2
 800c086:	461e      	mov	r6, r3
 800c088:	da07      	bge.n	800c09a <__swhatbuf_r+0x22>
 800c08a:	89a1      	ldrh	r1, [r4, #12]
 800c08c:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 800c090:	d017      	beq.n	800c0c2 <__swhatbuf_r+0x4a>
 800c092:	2100      	movs	r1, #0
 800c094:	2340      	movs	r3, #64	; 0x40
 800c096:	4608      	mov	r0, r1
 800c098:	e00f      	b.n	800c0ba <__swhatbuf_r+0x42>
 800c09a:	466a      	mov	r2, sp
 800c09c:	f000 f8ca 	bl	800c234 <_fstat_r>
 800c0a0:	2800      	cmp	r0, #0
 800c0a2:	dbf2      	blt.n	800c08a <__swhatbuf_r+0x12>
 800c0a4:	9901      	ldr	r1, [sp, #4]
 800c0a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c0aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c0ae:	4259      	negs	r1, r3
 800c0b0:	4159      	adcs	r1, r3
 800c0b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c0b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ba:	6031      	str	r1, [r6, #0]
 800c0bc:	602b      	str	r3, [r5, #0]
 800c0be:	b016      	add	sp, #88	; 0x58
 800c0c0:	bd70      	pop	{r4, r5, r6, pc}
 800c0c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0c6:	e7e6      	b.n	800c096 <__swhatbuf_r+0x1e>

0800c0c8 <__smakebuf_r>:
 800c0c8:	898b      	ldrh	r3, [r1, #12]
 800c0ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0cc:	079d      	lsls	r5, r3, #30
 800c0ce:	4606      	mov	r6, r0
 800c0d0:	460c      	mov	r4, r1
 800c0d2:	d507      	bpl.n	800c0e4 <__smakebuf_r+0x1c>
 800c0d4:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	6123      	str	r3, [r4, #16]
 800c0dc:	2301      	movs	r3, #1
 800c0de:	6163      	str	r3, [r4, #20]
 800c0e0:	b002      	add	sp, #8
 800c0e2:	bd70      	pop	{r4, r5, r6, pc}
 800c0e4:	ab01      	add	r3, sp, #4
 800c0e6:	466a      	mov	r2, sp
 800c0e8:	f7ff ffc6 	bl	800c078 <__swhatbuf_r>
 800c0ec:	9900      	ldr	r1, [sp, #0]
 800c0ee:	4605      	mov	r5, r0
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	f7fb fe2d 	bl	8007d50 <_malloc_r>
 800c0f6:	b948      	cbnz	r0, 800c10c <__smakebuf_r+0x44>
 800c0f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0fc:	059a      	lsls	r2, r3, #22
 800c0fe:	d4ef      	bmi.n	800c0e0 <__smakebuf_r+0x18>
 800c100:	f023 0303 	bic.w	r3, r3, #3
 800c104:	f043 0302 	orr.w	r3, r3, #2
 800c108:	81a3      	strh	r3, [r4, #12]
 800c10a:	e7e3      	b.n	800c0d4 <__smakebuf_r+0xc>
 800c10c:	89a3      	ldrh	r3, [r4, #12]
 800c10e:	6020      	str	r0, [r4, #0]
 800c110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c114:	81a3      	strh	r3, [r4, #12]
 800c116:	9b00      	ldr	r3, [sp, #0]
 800c118:	6163      	str	r3, [r4, #20]
 800c11a:	9b01      	ldr	r3, [sp, #4]
 800c11c:	6120      	str	r0, [r4, #16]
 800c11e:	b15b      	cbz	r3, 800c138 <__smakebuf_r+0x70>
 800c120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c124:	4630      	mov	r0, r6
 800c126:	f000 f897 	bl	800c258 <_isatty_r>
 800c12a:	b128      	cbz	r0, 800c138 <__smakebuf_r+0x70>
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	f023 0303 	bic.w	r3, r3, #3
 800c132:	f043 0301 	orr.w	r3, r3, #1
 800c136:	81a3      	strh	r3, [r4, #12]
 800c138:	89a3      	ldrh	r3, [r4, #12]
 800c13a:	431d      	orrs	r5, r3
 800c13c:	81a5      	strh	r5, [r4, #12]
 800c13e:	e7cf      	b.n	800c0e0 <__smakebuf_r+0x18>

0800c140 <__swbuf_r>:
 800c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c142:	460e      	mov	r6, r1
 800c144:	4614      	mov	r4, r2
 800c146:	4605      	mov	r5, r0
 800c148:	b118      	cbz	r0, 800c152 <__swbuf_r+0x12>
 800c14a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c14c:	b90b      	cbnz	r3, 800c152 <__swbuf_r+0x12>
 800c14e:	f7fb fbb1 	bl	80078b4 <__sinit>
 800c152:	69a3      	ldr	r3, [r4, #24]
 800c154:	60a3      	str	r3, [r4, #8]
 800c156:	89a3      	ldrh	r3, [r4, #12]
 800c158:	0719      	lsls	r1, r3, #28
 800c15a:	d529      	bpl.n	800c1b0 <__swbuf_r+0x70>
 800c15c:	6923      	ldr	r3, [r4, #16]
 800c15e:	b33b      	cbz	r3, 800c1b0 <__swbuf_r+0x70>
 800c160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c164:	b2f6      	uxtb	r6, r6
 800c166:	049a      	lsls	r2, r3, #18
 800c168:	4637      	mov	r7, r6
 800c16a:	d52a      	bpl.n	800c1c2 <__swbuf_r+0x82>
 800c16c:	6823      	ldr	r3, [r4, #0]
 800c16e:	6922      	ldr	r2, [r4, #16]
 800c170:	1a98      	subs	r0, r3, r2
 800c172:	6963      	ldr	r3, [r4, #20]
 800c174:	4283      	cmp	r3, r0
 800c176:	dc04      	bgt.n	800c182 <__swbuf_r+0x42>
 800c178:	4621      	mov	r1, r4
 800c17a:	4628      	mov	r0, r5
 800c17c:	f7fd fb04 	bl	8009788 <_fflush_r>
 800c180:	b9e0      	cbnz	r0, 800c1bc <__swbuf_r+0x7c>
 800c182:	68a3      	ldr	r3, [r4, #8]
 800c184:	3b01      	subs	r3, #1
 800c186:	60a3      	str	r3, [r4, #8]
 800c188:	6823      	ldr	r3, [r4, #0]
 800c18a:	1c5a      	adds	r2, r3, #1
 800c18c:	6022      	str	r2, [r4, #0]
 800c18e:	701e      	strb	r6, [r3, #0]
 800c190:	6962      	ldr	r2, [r4, #20]
 800c192:	1c43      	adds	r3, r0, #1
 800c194:	429a      	cmp	r2, r3
 800c196:	d004      	beq.n	800c1a2 <__swbuf_r+0x62>
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	07db      	lsls	r3, r3, #31
 800c19c:	d506      	bpl.n	800c1ac <__swbuf_r+0x6c>
 800c19e:	2e0a      	cmp	r6, #10
 800c1a0:	d104      	bne.n	800c1ac <__swbuf_r+0x6c>
 800c1a2:	4621      	mov	r1, r4
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	f7fd faef 	bl	8009788 <_fflush_r>
 800c1aa:	b938      	cbnz	r0, 800c1bc <__swbuf_r+0x7c>
 800c1ac:	4638      	mov	r0, r7
 800c1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f7ff fe80 	bl	800beb8 <__swsetup_r>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d0d1      	beq.n	800c160 <__swbuf_r+0x20>
 800c1bc:	f04f 37ff 	mov.w	r7, #4294967295
 800c1c0:	e7f4      	b.n	800c1ac <__swbuf_r+0x6c>
 800c1c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c1c6:	81a3      	strh	r3, [r4, #12]
 800c1c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1ce:	6663      	str	r3, [r4, #100]	; 0x64
 800c1d0:	e7cc      	b.n	800c16c <__swbuf_r+0x2c>

0800c1d2 <_raise_r>:
 800c1d2:	291f      	cmp	r1, #31
 800c1d4:	b538      	push	{r3, r4, r5, lr}
 800c1d6:	4604      	mov	r4, r0
 800c1d8:	460d      	mov	r5, r1
 800c1da:	d904      	bls.n	800c1e6 <_raise_r+0x14>
 800c1dc:	2316      	movs	r3, #22
 800c1de:	6003      	str	r3, [r0, #0]
 800c1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e4:	bd38      	pop	{r3, r4, r5, pc}
 800c1e6:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 800c1ea:	b112      	cbz	r2, 800c1f2 <_raise_r+0x20>
 800c1ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1f0:	b94b      	cbnz	r3, 800c206 <_raise_r+0x34>
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f000 f852 	bl	800c29c <_getpid_r>
 800c1f8:	462a      	mov	r2, r5
 800c1fa:	4601      	mov	r1, r0
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c202:	f000 b839 	b.w	800c278 <_kill_r>
 800c206:	2b01      	cmp	r3, #1
 800c208:	d00a      	beq.n	800c220 <_raise_r+0x4e>
 800c20a:	1c59      	adds	r1, r3, #1
 800c20c:	d103      	bne.n	800c216 <_raise_r+0x44>
 800c20e:	2316      	movs	r3, #22
 800c210:	6003      	str	r3, [r0, #0]
 800c212:	2001      	movs	r0, #1
 800c214:	e7e6      	b.n	800c1e4 <_raise_r+0x12>
 800c216:	2400      	movs	r4, #0
 800c218:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c21c:	4628      	mov	r0, r5
 800c21e:	4798      	blx	r3
 800c220:	2000      	movs	r0, #0
 800c222:	e7df      	b.n	800c1e4 <_raise_r+0x12>

0800c224 <raise>:
 800c224:	4b02      	ldr	r3, [pc, #8]	; (800c230 <raise+0xc>)
 800c226:	4601      	mov	r1, r0
 800c228:	6818      	ldr	r0, [r3, #0]
 800c22a:	f7ff bfd2 	b.w	800c1d2 <_raise_r>
 800c22e:	bf00      	nop
 800c230:	20000228 	.word	0x20000228

0800c234 <_fstat_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4d07      	ldr	r5, [pc, #28]	; (800c254 <_fstat_r+0x20>)
 800c238:	2300      	movs	r3, #0
 800c23a:	4604      	mov	r4, r0
 800c23c:	4608      	mov	r0, r1
 800c23e:	4611      	mov	r1, r2
 800c240:	602b      	str	r3, [r5, #0]
 800c242:	f7f5 f84a 	bl	80012da <_fstat>
 800c246:	1c43      	adds	r3, r0, #1
 800c248:	d102      	bne.n	800c250 <_fstat_r+0x1c>
 800c24a:	682b      	ldr	r3, [r5, #0]
 800c24c:	b103      	cbz	r3, 800c250 <_fstat_r+0x1c>
 800c24e:	6023      	str	r3, [r4, #0]
 800c250:	bd38      	pop	{r3, r4, r5, pc}
 800c252:	bf00      	nop
 800c254:	200024f0 	.word	0x200024f0

0800c258 <_isatty_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4d06      	ldr	r5, [pc, #24]	; (800c274 <_isatty_r+0x1c>)
 800c25c:	2300      	movs	r3, #0
 800c25e:	4604      	mov	r4, r0
 800c260:	4608      	mov	r0, r1
 800c262:	602b      	str	r3, [r5, #0]
 800c264:	f7f5 f849 	bl	80012fa <_isatty>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d102      	bne.n	800c272 <_isatty_r+0x1a>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b103      	cbz	r3, 800c272 <_isatty_r+0x1a>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	200024f0 	.word	0x200024f0

0800c278 <_kill_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	4d07      	ldr	r5, [pc, #28]	; (800c298 <_kill_r+0x20>)
 800c27c:	2300      	movs	r3, #0
 800c27e:	4604      	mov	r4, r0
 800c280:	4608      	mov	r0, r1
 800c282:	4611      	mov	r1, r2
 800c284:	602b      	str	r3, [r5, #0]
 800c286:	f7f4 ffc9 	bl	800121c <_kill>
 800c28a:	1c43      	adds	r3, r0, #1
 800c28c:	d102      	bne.n	800c294 <_kill_r+0x1c>
 800c28e:	682b      	ldr	r3, [r5, #0]
 800c290:	b103      	cbz	r3, 800c294 <_kill_r+0x1c>
 800c292:	6023      	str	r3, [r4, #0]
 800c294:	bd38      	pop	{r3, r4, r5, pc}
 800c296:	bf00      	nop
 800c298:	200024f0 	.word	0x200024f0

0800c29c <_getpid_r>:
 800c29c:	f7f4 bfb6 	b.w	800120c <_getpid>

0800c2a0 <sin>:
 800c2a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2a2:	ec53 2b10 	vmov	r2, r3, d0
 800c2a6:	4828      	ldr	r0, [pc, #160]	; (800c348 <sin+0xa8>)
 800c2a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c2ac:	4281      	cmp	r1, r0
 800c2ae:	dc07      	bgt.n	800c2c0 <sin+0x20>
 800c2b0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c340 <sin+0xa0>
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	b005      	add	sp, #20
 800c2b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2bc:	f000 b910 	b.w	800c4e0 <__kernel_sin>
 800c2c0:	4822      	ldr	r0, [pc, #136]	; (800c34c <sin+0xac>)
 800c2c2:	4281      	cmp	r1, r0
 800c2c4:	dd09      	ble.n	800c2da <sin+0x3a>
 800c2c6:	ee10 0a10 	vmov	r0, s0
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	f7f3 ffe4 	bl	8000298 <__aeabi_dsub>
 800c2d0:	ec41 0b10 	vmov	d0, r0, r1
 800c2d4:	b005      	add	sp, #20
 800c2d6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c2da:	4668      	mov	r0, sp
 800c2dc:	f000 f9c0 	bl	800c660 <__ieee754_rem_pio2>
 800c2e0:	f000 0003 	and.w	r0, r0, #3
 800c2e4:	2801      	cmp	r0, #1
 800c2e6:	d00c      	beq.n	800c302 <sin+0x62>
 800c2e8:	2802      	cmp	r0, #2
 800c2ea:	d011      	beq.n	800c310 <sin+0x70>
 800c2ec:	b9f0      	cbnz	r0, 800c32c <sin+0x8c>
 800c2ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c2f2:	ed9d 0b00 	vldr	d0, [sp]
 800c2f6:	2001      	movs	r0, #1
 800c2f8:	f000 f8f2 	bl	800c4e0 <__kernel_sin>
 800c2fc:	ec51 0b10 	vmov	r0, r1, d0
 800c300:	e7e6      	b.n	800c2d0 <sin+0x30>
 800c302:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c306:	ed9d 0b00 	vldr	d0, [sp]
 800c30a:	f000 f821 	bl	800c350 <__kernel_cos>
 800c30e:	e7f5      	b.n	800c2fc <sin+0x5c>
 800c310:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c314:	ed9d 0b00 	vldr	d0, [sp]
 800c318:	2001      	movs	r0, #1
 800c31a:	f000 f8e1 	bl	800c4e0 <__kernel_sin>
 800c31e:	ec53 2b10 	vmov	r2, r3, d0
 800c322:	ee10 0a10 	vmov	r0, s0
 800c326:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c32a:	e7d1      	b.n	800c2d0 <sin+0x30>
 800c32c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c330:	ed9d 0b00 	vldr	d0, [sp]
 800c334:	f000 f80c 	bl	800c350 <__kernel_cos>
 800c338:	e7f1      	b.n	800c31e <sin+0x7e>
 800c33a:	bf00      	nop
 800c33c:	f3af 8000 	nop.w
	...
 800c348:	3fe921fb 	.word	0x3fe921fb
 800c34c:	7fefffff 	.word	0x7fefffff

0800c350 <__kernel_cos>:
 800c350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c354:	ec57 6b10 	vmov	r6, r7, d0
 800c358:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c35c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c360:	ed8d 1b00 	vstr	d1, [sp]
 800c364:	da07      	bge.n	800c376 <__kernel_cos+0x26>
 800c366:	ee10 0a10 	vmov	r0, s0
 800c36a:	4639      	mov	r1, r7
 800c36c:	f7f4 fbfc 	bl	8000b68 <__aeabi_d2iz>
 800c370:	2800      	cmp	r0, #0
 800c372:	f000 8088 	beq.w	800c486 <__kernel_cos+0x136>
 800c376:	4632      	mov	r2, r6
 800c378:	463b      	mov	r3, r7
 800c37a:	4630      	mov	r0, r6
 800c37c:	4639      	mov	r1, r7
 800c37e:	f7f4 f943 	bl	8000608 <__aeabi_dmul>
 800c382:	4b51      	ldr	r3, [pc, #324]	; (800c4c8 <__kernel_cos+0x178>)
 800c384:	2200      	movs	r2, #0
 800c386:	4604      	mov	r4, r0
 800c388:	460d      	mov	r5, r1
 800c38a:	f7f4 f93d 	bl	8000608 <__aeabi_dmul>
 800c38e:	a340      	add	r3, pc, #256	; (adr r3, 800c490 <__kernel_cos+0x140>)
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	4682      	mov	sl, r0
 800c396:	468b      	mov	fp, r1
 800c398:	4620      	mov	r0, r4
 800c39a:	4629      	mov	r1, r5
 800c39c:	f7f4 f934 	bl	8000608 <__aeabi_dmul>
 800c3a0:	a33d      	add	r3, pc, #244	; (adr r3, 800c498 <__kernel_cos+0x148>)
 800c3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a6:	f7f3 ff79 	bl	800029c <__adddf3>
 800c3aa:	4622      	mov	r2, r4
 800c3ac:	462b      	mov	r3, r5
 800c3ae:	f7f4 f92b 	bl	8000608 <__aeabi_dmul>
 800c3b2:	a33b      	add	r3, pc, #236	; (adr r3, 800c4a0 <__kernel_cos+0x150>)
 800c3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b8:	f7f3 ff6e 	bl	8000298 <__aeabi_dsub>
 800c3bc:	4622      	mov	r2, r4
 800c3be:	462b      	mov	r3, r5
 800c3c0:	f7f4 f922 	bl	8000608 <__aeabi_dmul>
 800c3c4:	a338      	add	r3, pc, #224	; (adr r3, 800c4a8 <__kernel_cos+0x158>)
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	f7f3 ff67 	bl	800029c <__adddf3>
 800c3ce:	4622      	mov	r2, r4
 800c3d0:	462b      	mov	r3, r5
 800c3d2:	f7f4 f919 	bl	8000608 <__aeabi_dmul>
 800c3d6:	a336      	add	r3, pc, #216	; (adr r3, 800c4b0 <__kernel_cos+0x160>)
 800c3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3dc:	f7f3 ff5c 	bl	8000298 <__aeabi_dsub>
 800c3e0:	4622      	mov	r2, r4
 800c3e2:	462b      	mov	r3, r5
 800c3e4:	f7f4 f910 	bl	8000608 <__aeabi_dmul>
 800c3e8:	a333      	add	r3, pc, #204	; (adr r3, 800c4b8 <__kernel_cos+0x168>)
 800c3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ee:	f7f3 ff55 	bl	800029c <__adddf3>
 800c3f2:	4622      	mov	r2, r4
 800c3f4:	462b      	mov	r3, r5
 800c3f6:	f7f4 f907 	bl	8000608 <__aeabi_dmul>
 800c3fa:	4622      	mov	r2, r4
 800c3fc:	462b      	mov	r3, r5
 800c3fe:	f7f4 f903 	bl	8000608 <__aeabi_dmul>
 800c402:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c406:	4604      	mov	r4, r0
 800c408:	460d      	mov	r5, r1
 800c40a:	4630      	mov	r0, r6
 800c40c:	4639      	mov	r1, r7
 800c40e:	f7f4 f8fb 	bl	8000608 <__aeabi_dmul>
 800c412:	460b      	mov	r3, r1
 800c414:	4602      	mov	r2, r0
 800c416:	4629      	mov	r1, r5
 800c418:	4620      	mov	r0, r4
 800c41a:	f7f3 ff3d 	bl	8000298 <__aeabi_dsub>
 800c41e:	4b2b      	ldr	r3, [pc, #172]	; (800c4cc <__kernel_cos+0x17c>)
 800c420:	4598      	cmp	r8, r3
 800c422:	4606      	mov	r6, r0
 800c424:	460f      	mov	r7, r1
 800c426:	dc10      	bgt.n	800c44a <__kernel_cos+0xfa>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	4650      	mov	r0, sl
 800c42e:	4659      	mov	r1, fp
 800c430:	f7f3 ff32 	bl	8000298 <__aeabi_dsub>
 800c434:	460b      	mov	r3, r1
 800c436:	4926      	ldr	r1, [pc, #152]	; (800c4d0 <__kernel_cos+0x180>)
 800c438:	4602      	mov	r2, r0
 800c43a:	2000      	movs	r0, #0
 800c43c:	f7f3 ff2c 	bl	8000298 <__aeabi_dsub>
 800c440:	ec41 0b10 	vmov	d0, r0, r1
 800c444:	b003      	add	sp, #12
 800c446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c44a:	4b22      	ldr	r3, [pc, #136]	; (800c4d4 <__kernel_cos+0x184>)
 800c44c:	4920      	ldr	r1, [pc, #128]	; (800c4d0 <__kernel_cos+0x180>)
 800c44e:	4598      	cmp	r8, r3
 800c450:	bfcc      	ite	gt
 800c452:	4d21      	ldrgt	r5, [pc, #132]	; (800c4d8 <__kernel_cos+0x188>)
 800c454:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c458:	2400      	movs	r4, #0
 800c45a:	4622      	mov	r2, r4
 800c45c:	462b      	mov	r3, r5
 800c45e:	2000      	movs	r0, #0
 800c460:	f7f3 ff1a 	bl	8000298 <__aeabi_dsub>
 800c464:	4622      	mov	r2, r4
 800c466:	4680      	mov	r8, r0
 800c468:	4689      	mov	r9, r1
 800c46a:	462b      	mov	r3, r5
 800c46c:	4650      	mov	r0, sl
 800c46e:	4659      	mov	r1, fp
 800c470:	f7f3 ff12 	bl	8000298 <__aeabi_dsub>
 800c474:	4632      	mov	r2, r6
 800c476:	463b      	mov	r3, r7
 800c478:	f7f3 ff0e 	bl	8000298 <__aeabi_dsub>
 800c47c:	4602      	mov	r2, r0
 800c47e:	460b      	mov	r3, r1
 800c480:	4640      	mov	r0, r8
 800c482:	4649      	mov	r1, r9
 800c484:	e7da      	b.n	800c43c <__kernel_cos+0xec>
 800c486:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c4c0 <__kernel_cos+0x170>
 800c48a:	e7db      	b.n	800c444 <__kernel_cos+0xf4>
 800c48c:	f3af 8000 	nop.w
 800c490:	be8838d4 	.word	0xbe8838d4
 800c494:	bda8fae9 	.word	0xbda8fae9
 800c498:	bdb4b1c4 	.word	0xbdb4b1c4
 800c49c:	3e21ee9e 	.word	0x3e21ee9e
 800c4a0:	809c52ad 	.word	0x809c52ad
 800c4a4:	3e927e4f 	.word	0x3e927e4f
 800c4a8:	19cb1590 	.word	0x19cb1590
 800c4ac:	3efa01a0 	.word	0x3efa01a0
 800c4b0:	16c15177 	.word	0x16c15177
 800c4b4:	3f56c16c 	.word	0x3f56c16c
 800c4b8:	5555554c 	.word	0x5555554c
 800c4bc:	3fa55555 	.word	0x3fa55555
 800c4c0:	00000000 	.word	0x00000000
 800c4c4:	3ff00000 	.word	0x3ff00000
 800c4c8:	3fe00000 	.word	0x3fe00000
 800c4cc:	3fd33332 	.word	0x3fd33332
 800c4d0:	3ff00000 	.word	0x3ff00000
 800c4d4:	3fe90000 	.word	0x3fe90000
 800c4d8:	3fd20000 	.word	0x3fd20000
 800c4dc:	00000000 	.word	0x00000000

0800c4e0 <__kernel_sin>:
 800c4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e4:	ed2d 8b04 	vpush	{d8-d9}
 800c4e8:	eeb0 8a41 	vmov.f32	s16, s2
 800c4ec:	eef0 8a61 	vmov.f32	s17, s3
 800c4f0:	ec55 4b10 	vmov	r4, r5, d0
 800c4f4:	b083      	sub	sp, #12
 800c4f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c4fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c4fe:	9001      	str	r0, [sp, #4]
 800c500:	da06      	bge.n	800c510 <__kernel_sin+0x30>
 800c502:	ee10 0a10 	vmov	r0, s0
 800c506:	4629      	mov	r1, r5
 800c508:	f7f4 fb2e 	bl	8000b68 <__aeabi_d2iz>
 800c50c:	2800      	cmp	r0, #0
 800c50e:	d051      	beq.n	800c5b4 <__kernel_sin+0xd4>
 800c510:	4622      	mov	r2, r4
 800c512:	462b      	mov	r3, r5
 800c514:	4620      	mov	r0, r4
 800c516:	4629      	mov	r1, r5
 800c518:	f7f4 f876 	bl	8000608 <__aeabi_dmul>
 800c51c:	4682      	mov	sl, r0
 800c51e:	468b      	mov	fp, r1
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	4620      	mov	r0, r4
 800c526:	4629      	mov	r1, r5
 800c528:	f7f4 f86e 	bl	8000608 <__aeabi_dmul>
 800c52c:	a341      	add	r3, pc, #260	; (adr r3, 800c634 <__kernel_sin+0x154>)
 800c52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c532:	4680      	mov	r8, r0
 800c534:	4689      	mov	r9, r1
 800c536:	4650      	mov	r0, sl
 800c538:	4659      	mov	r1, fp
 800c53a:	f7f4 f865 	bl	8000608 <__aeabi_dmul>
 800c53e:	a33f      	add	r3, pc, #252	; (adr r3, 800c63c <__kernel_sin+0x15c>)
 800c540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c544:	f7f3 fea8 	bl	8000298 <__aeabi_dsub>
 800c548:	4652      	mov	r2, sl
 800c54a:	465b      	mov	r3, fp
 800c54c:	f7f4 f85c 	bl	8000608 <__aeabi_dmul>
 800c550:	a33c      	add	r3, pc, #240	; (adr r3, 800c644 <__kernel_sin+0x164>)
 800c552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c556:	f7f3 fea1 	bl	800029c <__adddf3>
 800c55a:	4652      	mov	r2, sl
 800c55c:	465b      	mov	r3, fp
 800c55e:	f7f4 f853 	bl	8000608 <__aeabi_dmul>
 800c562:	a33a      	add	r3, pc, #232	; (adr r3, 800c64c <__kernel_sin+0x16c>)
 800c564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c568:	f7f3 fe96 	bl	8000298 <__aeabi_dsub>
 800c56c:	4652      	mov	r2, sl
 800c56e:	465b      	mov	r3, fp
 800c570:	f7f4 f84a 	bl	8000608 <__aeabi_dmul>
 800c574:	a337      	add	r3, pc, #220	; (adr r3, 800c654 <__kernel_sin+0x174>)
 800c576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57a:	f7f3 fe8f 	bl	800029c <__adddf3>
 800c57e:	9b01      	ldr	r3, [sp, #4]
 800c580:	4606      	mov	r6, r0
 800c582:	460f      	mov	r7, r1
 800c584:	b9eb      	cbnz	r3, 800c5c2 <__kernel_sin+0xe2>
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	4650      	mov	r0, sl
 800c58c:	4659      	mov	r1, fp
 800c58e:	f7f4 f83b 	bl	8000608 <__aeabi_dmul>
 800c592:	a325      	add	r3, pc, #148	; (adr r3, 800c628 <__kernel_sin+0x148>)
 800c594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c598:	f7f3 fe7e 	bl	8000298 <__aeabi_dsub>
 800c59c:	4642      	mov	r2, r8
 800c59e:	464b      	mov	r3, r9
 800c5a0:	f7f4 f832 	bl	8000608 <__aeabi_dmul>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	4620      	mov	r0, r4
 800c5aa:	4629      	mov	r1, r5
 800c5ac:	f7f3 fe76 	bl	800029c <__adddf3>
 800c5b0:	4604      	mov	r4, r0
 800c5b2:	460d      	mov	r5, r1
 800c5b4:	ec45 4b10 	vmov	d0, r4, r5
 800c5b8:	b003      	add	sp, #12
 800c5ba:	ecbd 8b04 	vpop	{d8-d9}
 800c5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c2:	4b1b      	ldr	r3, [pc, #108]	; (800c630 <__kernel_sin+0x150>)
 800c5c4:	ec51 0b18 	vmov	r0, r1, d8
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	f7f4 f81d 	bl	8000608 <__aeabi_dmul>
 800c5ce:	4632      	mov	r2, r6
 800c5d0:	ec41 0b19 	vmov	d9, r0, r1
 800c5d4:	463b      	mov	r3, r7
 800c5d6:	4640      	mov	r0, r8
 800c5d8:	4649      	mov	r1, r9
 800c5da:	f7f4 f815 	bl	8000608 <__aeabi_dmul>
 800c5de:	4602      	mov	r2, r0
 800c5e0:	460b      	mov	r3, r1
 800c5e2:	ec51 0b19 	vmov	r0, r1, d9
 800c5e6:	f7f3 fe57 	bl	8000298 <__aeabi_dsub>
 800c5ea:	4652      	mov	r2, sl
 800c5ec:	465b      	mov	r3, fp
 800c5ee:	f7f4 f80b 	bl	8000608 <__aeabi_dmul>
 800c5f2:	ec53 2b18 	vmov	r2, r3, d8
 800c5f6:	f7f3 fe4f 	bl	8000298 <__aeabi_dsub>
 800c5fa:	a30b      	add	r3, pc, #44	; (adr r3, 800c628 <__kernel_sin+0x148>)
 800c5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c600:	4606      	mov	r6, r0
 800c602:	460f      	mov	r7, r1
 800c604:	4640      	mov	r0, r8
 800c606:	4649      	mov	r1, r9
 800c608:	f7f3 fffe 	bl	8000608 <__aeabi_dmul>
 800c60c:	4602      	mov	r2, r0
 800c60e:	460b      	mov	r3, r1
 800c610:	4630      	mov	r0, r6
 800c612:	4639      	mov	r1, r7
 800c614:	f7f3 fe42 	bl	800029c <__adddf3>
 800c618:	4602      	mov	r2, r0
 800c61a:	460b      	mov	r3, r1
 800c61c:	4620      	mov	r0, r4
 800c61e:	4629      	mov	r1, r5
 800c620:	f7f3 fe3a 	bl	8000298 <__aeabi_dsub>
 800c624:	e7c4      	b.n	800c5b0 <__kernel_sin+0xd0>
 800c626:	bf00      	nop
 800c628:	55555549 	.word	0x55555549
 800c62c:	3fc55555 	.word	0x3fc55555
 800c630:	3fe00000 	.word	0x3fe00000
 800c634:	5acfd57c 	.word	0x5acfd57c
 800c638:	3de5d93a 	.word	0x3de5d93a
 800c63c:	8a2b9ceb 	.word	0x8a2b9ceb
 800c640:	3e5ae5e6 	.word	0x3e5ae5e6
 800c644:	57b1fe7d 	.word	0x57b1fe7d
 800c648:	3ec71de3 	.word	0x3ec71de3
 800c64c:	19c161d5 	.word	0x19c161d5
 800c650:	3f2a01a0 	.word	0x3f2a01a0
 800c654:	1110f8a6 	.word	0x1110f8a6
 800c658:	3f811111 	.word	0x3f811111
 800c65c:	00000000 	.word	0x00000000

0800c660 <__ieee754_rem_pio2>:
 800c660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c664:	ed2d 8b02 	vpush	{d8}
 800c668:	ec55 4b10 	vmov	r4, r5, d0
 800c66c:	4bca      	ldr	r3, [pc, #808]	; (800c998 <__ieee754_rem_pio2+0x338>)
 800c66e:	b08b      	sub	sp, #44	; 0x2c
 800c670:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800c674:	4598      	cmp	r8, r3
 800c676:	4682      	mov	sl, r0
 800c678:	9502      	str	r5, [sp, #8]
 800c67a:	dc08      	bgt.n	800c68e <__ieee754_rem_pio2+0x2e>
 800c67c:	2200      	movs	r2, #0
 800c67e:	2300      	movs	r3, #0
 800c680:	ed80 0b00 	vstr	d0, [r0]
 800c684:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c688:	f04f 0b00 	mov.w	fp, #0
 800c68c:	e028      	b.n	800c6e0 <__ieee754_rem_pio2+0x80>
 800c68e:	4bc3      	ldr	r3, [pc, #780]	; (800c99c <__ieee754_rem_pio2+0x33c>)
 800c690:	4598      	cmp	r8, r3
 800c692:	dc78      	bgt.n	800c786 <__ieee754_rem_pio2+0x126>
 800c694:	9b02      	ldr	r3, [sp, #8]
 800c696:	4ec2      	ldr	r6, [pc, #776]	; (800c9a0 <__ieee754_rem_pio2+0x340>)
 800c698:	2b00      	cmp	r3, #0
 800c69a:	ee10 0a10 	vmov	r0, s0
 800c69e:	a3b0      	add	r3, pc, #704	; (adr r3, 800c960 <__ieee754_rem_pio2+0x300>)
 800c6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	dd39      	ble.n	800c71c <__ieee754_rem_pio2+0xbc>
 800c6a8:	f7f3 fdf6 	bl	8000298 <__aeabi_dsub>
 800c6ac:	45b0      	cmp	r8, r6
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	460d      	mov	r5, r1
 800c6b2:	d01b      	beq.n	800c6ec <__ieee754_rem_pio2+0x8c>
 800c6b4:	a3ac      	add	r3, pc, #688	; (adr r3, 800c968 <__ieee754_rem_pio2+0x308>)
 800c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ba:	f7f3 fded 	bl	8000298 <__aeabi_dsub>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	e9ca 2300 	strd	r2, r3, [sl]
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	f7f3 fde5 	bl	8000298 <__aeabi_dsub>
 800c6ce:	a3a6      	add	r3, pc, #664	; (adr r3, 800c968 <__ieee754_rem_pio2+0x308>)
 800c6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d4:	f7f3 fde0 	bl	8000298 <__aeabi_dsub>
 800c6d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c6dc:	f04f 0b01 	mov.w	fp, #1
 800c6e0:	4658      	mov	r0, fp
 800c6e2:	b00b      	add	sp, #44	; 0x2c
 800c6e4:	ecbd 8b02 	vpop	{d8}
 800c6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ec:	a3a0      	add	r3, pc, #640	; (adr r3, 800c970 <__ieee754_rem_pio2+0x310>)
 800c6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f2:	f7f3 fdd1 	bl	8000298 <__aeabi_dsub>
 800c6f6:	a3a0      	add	r3, pc, #640	; (adr r3, 800c978 <__ieee754_rem_pio2+0x318>)
 800c6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6fc:	4604      	mov	r4, r0
 800c6fe:	460d      	mov	r5, r1
 800c700:	f7f3 fdca 	bl	8000298 <__aeabi_dsub>
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	e9ca 2300 	strd	r2, r3, [sl]
 800c70c:	4620      	mov	r0, r4
 800c70e:	4629      	mov	r1, r5
 800c710:	f7f3 fdc2 	bl	8000298 <__aeabi_dsub>
 800c714:	a398      	add	r3, pc, #608	; (adr r3, 800c978 <__ieee754_rem_pio2+0x318>)
 800c716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71a:	e7db      	b.n	800c6d4 <__ieee754_rem_pio2+0x74>
 800c71c:	f7f3 fdbe 	bl	800029c <__adddf3>
 800c720:	45b0      	cmp	r8, r6
 800c722:	4604      	mov	r4, r0
 800c724:	460d      	mov	r5, r1
 800c726:	d016      	beq.n	800c756 <__ieee754_rem_pio2+0xf6>
 800c728:	a38f      	add	r3, pc, #572	; (adr r3, 800c968 <__ieee754_rem_pio2+0x308>)
 800c72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72e:	f7f3 fdb5 	bl	800029c <__adddf3>
 800c732:	4602      	mov	r2, r0
 800c734:	460b      	mov	r3, r1
 800c736:	e9ca 2300 	strd	r2, r3, [sl]
 800c73a:	4620      	mov	r0, r4
 800c73c:	4629      	mov	r1, r5
 800c73e:	f7f3 fdab 	bl	8000298 <__aeabi_dsub>
 800c742:	a389      	add	r3, pc, #548	; (adr r3, 800c968 <__ieee754_rem_pio2+0x308>)
 800c744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c748:	f7f3 fda8 	bl	800029c <__adddf3>
 800c74c:	f04f 3bff 	mov.w	fp, #4294967295
 800c750:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c754:	e7c4      	b.n	800c6e0 <__ieee754_rem_pio2+0x80>
 800c756:	a386      	add	r3, pc, #536	; (adr r3, 800c970 <__ieee754_rem_pio2+0x310>)
 800c758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75c:	f7f3 fd9e 	bl	800029c <__adddf3>
 800c760:	a385      	add	r3, pc, #532	; (adr r3, 800c978 <__ieee754_rem_pio2+0x318>)
 800c762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c766:	4604      	mov	r4, r0
 800c768:	460d      	mov	r5, r1
 800c76a:	f7f3 fd97 	bl	800029c <__adddf3>
 800c76e:	4602      	mov	r2, r0
 800c770:	460b      	mov	r3, r1
 800c772:	e9ca 2300 	strd	r2, r3, [sl]
 800c776:	4620      	mov	r0, r4
 800c778:	4629      	mov	r1, r5
 800c77a:	f7f3 fd8d 	bl	8000298 <__aeabi_dsub>
 800c77e:	a37e      	add	r3, pc, #504	; (adr r3, 800c978 <__ieee754_rem_pio2+0x318>)
 800c780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c784:	e7e0      	b.n	800c748 <__ieee754_rem_pio2+0xe8>
 800c786:	4b87      	ldr	r3, [pc, #540]	; (800c9a4 <__ieee754_rem_pio2+0x344>)
 800c788:	4598      	cmp	r8, r3
 800c78a:	f300 80d8 	bgt.w	800c93e <__ieee754_rem_pio2+0x2de>
 800c78e:	f000 f96d 	bl	800ca6c <fabs>
 800c792:	ec55 4b10 	vmov	r4, r5, d0
 800c796:	ee10 0a10 	vmov	r0, s0
 800c79a:	a379      	add	r3, pc, #484	; (adr r3, 800c980 <__ieee754_rem_pio2+0x320>)
 800c79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a0:	4629      	mov	r1, r5
 800c7a2:	f7f3 ff31 	bl	8000608 <__aeabi_dmul>
 800c7a6:	4b80      	ldr	r3, [pc, #512]	; (800c9a8 <__ieee754_rem_pio2+0x348>)
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f7f3 fd77 	bl	800029c <__adddf3>
 800c7ae:	f7f4 f9db 	bl	8000b68 <__aeabi_d2iz>
 800c7b2:	4683      	mov	fp, r0
 800c7b4:	f7f3 febe 	bl	8000534 <__aeabi_i2d>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	ec43 2b18 	vmov	d8, r2, r3
 800c7c0:	a367      	add	r3, pc, #412	; (adr r3, 800c960 <__ieee754_rem_pio2+0x300>)
 800c7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c6:	f7f3 ff1f 	bl	8000608 <__aeabi_dmul>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	f7f3 fd61 	bl	8000298 <__aeabi_dsub>
 800c7d6:	a364      	add	r3, pc, #400	; (adr r3, 800c968 <__ieee754_rem_pio2+0x308>)
 800c7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7dc:	4606      	mov	r6, r0
 800c7de:	460f      	mov	r7, r1
 800c7e0:	ec51 0b18 	vmov	r0, r1, d8
 800c7e4:	f7f3 ff10 	bl	8000608 <__aeabi_dmul>
 800c7e8:	f1bb 0f1f 	cmp.w	fp, #31
 800c7ec:	4604      	mov	r4, r0
 800c7ee:	460d      	mov	r5, r1
 800c7f0:	dc0d      	bgt.n	800c80e <__ieee754_rem_pio2+0x1ae>
 800c7f2:	4b6e      	ldr	r3, [pc, #440]	; (800c9ac <__ieee754_rem_pio2+0x34c>)
 800c7f4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7fc:	4543      	cmp	r3, r8
 800c7fe:	d006      	beq.n	800c80e <__ieee754_rem_pio2+0x1ae>
 800c800:	4622      	mov	r2, r4
 800c802:	462b      	mov	r3, r5
 800c804:	4630      	mov	r0, r6
 800c806:	4639      	mov	r1, r7
 800c808:	f7f3 fd46 	bl	8000298 <__aeabi_dsub>
 800c80c:	e00e      	b.n	800c82c <__ieee754_rem_pio2+0x1cc>
 800c80e:	462b      	mov	r3, r5
 800c810:	4622      	mov	r2, r4
 800c812:	4630      	mov	r0, r6
 800c814:	4639      	mov	r1, r7
 800c816:	f7f3 fd3f 	bl	8000298 <__aeabi_dsub>
 800c81a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c81e:	9303      	str	r3, [sp, #12]
 800c820:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c824:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c828:	2b10      	cmp	r3, #16
 800c82a:	dc02      	bgt.n	800c832 <__ieee754_rem_pio2+0x1d2>
 800c82c:	e9ca 0100 	strd	r0, r1, [sl]
 800c830:	e039      	b.n	800c8a6 <__ieee754_rem_pio2+0x246>
 800c832:	a34f      	add	r3, pc, #316	; (adr r3, 800c970 <__ieee754_rem_pio2+0x310>)
 800c834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c838:	ec51 0b18 	vmov	r0, r1, d8
 800c83c:	f7f3 fee4 	bl	8000608 <__aeabi_dmul>
 800c840:	4604      	mov	r4, r0
 800c842:	460d      	mov	r5, r1
 800c844:	4602      	mov	r2, r0
 800c846:	460b      	mov	r3, r1
 800c848:	4630      	mov	r0, r6
 800c84a:	4639      	mov	r1, r7
 800c84c:	f7f3 fd24 	bl	8000298 <__aeabi_dsub>
 800c850:	4602      	mov	r2, r0
 800c852:	460b      	mov	r3, r1
 800c854:	4680      	mov	r8, r0
 800c856:	4689      	mov	r9, r1
 800c858:	4630      	mov	r0, r6
 800c85a:	4639      	mov	r1, r7
 800c85c:	f7f3 fd1c 	bl	8000298 <__aeabi_dsub>
 800c860:	4622      	mov	r2, r4
 800c862:	462b      	mov	r3, r5
 800c864:	f7f3 fd18 	bl	8000298 <__aeabi_dsub>
 800c868:	a343      	add	r3, pc, #268	; (adr r3, 800c978 <__ieee754_rem_pio2+0x318>)
 800c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86e:	4604      	mov	r4, r0
 800c870:	460d      	mov	r5, r1
 800c872:	ec51 0b18 	vmov	r0, r1, d8
 800c876:	f7f3 fec7 	bl	8000608 <__aeabi_dmul>
 800c87a:	4622      	mov	r2, r4
 800c87c:	462b      	mov	r3, r5
 800c87e:	f7f3 fd0b 	bl	8000298 <__aeabi_dsub>
 800c882:	4602      	mov	r2, r0
 800c884:	460b      	mov	r3, r1
 800c886:	4604      	mov	r4, r0
 800c888:	460d      	mov	r5, r1
 800c88a:	4640      	mov	r0, r8
 800c88c:	4649      	mov	r1, r9
 800c88e:	f7f3 fd03 	bl	8000298 <__aeabi_dsub>
 800c892:	9a03      	ldr	r2, [sp, #12]
 800c894:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	2b31      	cmp	r3, #49	; 0x31
 800c89c:	dc24      	bgt.n	800c8e8 <__ieee754_rem_pio2+0x288>
 800c89e:	e9ca 0100 	strd	r0, r1, [sl]
 800c8a2:	4646      	mov	r6, r8
 800c8a4:	464f      	mov	r7, r9
 800c8a6:	e9da 8900 	ldrd	r8, r9, [sl]
 800c8aa:	4630      	mov	r0, r6
 800c8ac:	4642      	mov	r2, r8
 800c8ae:	464b      	mov	r3, r9
 800c8b0:	4639      	mov	r1, r7
 800c8b2:	f7f3 fcf1 	bl	8000298 <__aeabi_dsub>
 800c8b6:	462b      	mov	r3, r5
 800c8b8:	4622      	mov	r2, r4
 800c8ba:	f7f3 fced 	bl	8000298 <__aeabi_dsub>
 800c8be:	9b02      	ldr	r3, [sp, #8]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c8c6:	f6bf af0b 	bge.w	800c6e0 <__ieee754_rem_pio2+0x80>
 800c8ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c8ce:	f8ca 3004 	str.w	r3, [sl, #4]
 800c8d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8d6:	f8ca 8000 	str.w	r8, [sl]
 800c8da:	f8ca 0008 	str.w	r0, [sl, #8]
 800c8de:	f8ca 300c 	str.w	r3, [sl, #12]
 800c8e2:	f1cb 0b00 	rsb	fp, fp, #0
 800c8e6:	e6fb      	b.n	800c6e0 <__ieee754_rem_pio2+0x80>
 800c8e8:	a327      	add	r3, pc, #156	; (adr r3, 800c988 <__ieee754_rem_pio2+0x328>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	ec51 0b18 	vmov	r0, r1, d8
 800c8f2:	f7f3 fe89 	bl	8000608 <__aeabi_dmul>
 800c8f6:	4604      	mov	r4, r0
 800c8f8:	460d      	mov	r5, r1
 800c8fa:	4602      	mov	r2, r0
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	4640      	mov	r0, r8
 800c900:	4649      	mov	r1, r9
 800c902:	f7f3 fcc9 	bl	8000298 <__aeabi_dsub>
 800c906:	4602      	mov	r2, r0
 800c908:	460b      	mov	r3, r1
 800c90a:	4606      	mov	r6, r0
 800c90c:	460f      	mov	r7, r1
 800c90e:	4640      	mov	r0, r8
 800c910:	4649      	mov	r1, r9
 800c912:	f7f3 fcc1 	bl	8000298 <__aeabi_dsub>
 800c916:	4622      	mov	r2, r4
 800c918:	462b      	mov	r3, r5
 800c91a:	f7f3 fcbd 	bl	8000298 <__aeabi_dsub>
 800c91e:	a31c      	add	r3, pc, #112	; (adr r3, 800c990 <__ieee754_rem_pio2+0x330>)
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	4604      	mov	r4, r0
 800c926:	460d      	mov	r5, r1
 800c928:	ec51 0b18 	vmov	r0, r1, d8
 800c92c:	f7f3 fe6c 	bl	8000608 <__aeabi_dmul>
 800c930:	4622      	mov	r2, r4
 800c932:	462b      	mov	r3, r5
 800c934:	f7f3 fcb0 	bl	8000298 <__aeabi_dsub>
 800c938:	4604      	mov	r4, r0
 800c93a:	460d      	mov	r5, r1
 800c93c:	e760      	b.n	800c800 <__ieee754_rem_pio2+0x1a0>
 800c93e:	4b1c      	ldr	r3, [pc, #112]	; (800c9b0 <__ieee754_rem_pio2+0x350>)
 800c940:	4598      	cmp	r8, r3
 800c942:	dd37      	ble.n	800c9b4 <__ieee754_rem_pio2+0x354>
 800c944:	ee10 2a10 	vmov	r2, s0
 800c948:	462b      	mov	r3, r5
 800c94a:	4620      	mov	r0, r4
 800c94c:	4629      	mov	r1, r5
 800c94e:	f7f3 fca3 	bl	8000298 <__aeabi_dsub>
 800c952:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c956:	e9ca 0100 	strd	r0, r1, [sl]
 800c95a:	e695      	b.n	800c688 <__ieee754_rem_pio2+0x28>
 800c95c:	f3af 8000 	nop.w
 800c960:	54400000 	.word	0x54400000
 800c964:	3ff921fb 	.word	0x3ff921fb
 800c968:	1a626331 	.word	0x1a626331
 800c96c:	3dd0b461 	.word	0x3dd0b461
 800c970:	1a600000 	.word	0x1a600000
 800c974:	3dd0b461 	.word	0x3dd0b461
 800c978:	2e037073 	.word	0x2e037073
 800c97c:	3ba3198a 	.word	0x3ba3198a
 800c980:	6dc9c883 	.word	0x6dc9c883
 800c984:	3fe45f30 	.word	0x3fe45f30
 800c988:	2e000000 	.word	0x2e000000
 800c98c:	3ba3198a 	.word	0x3ba3198a
 800c990:	252049c1 	.word	0x252049c1
 800c994:	397b839a 	.word	0x397b839a
 800c998:	3fe921fb 	.word	0x3fe921fb
 800c99c:	4002d97b 	.word	0x4002d97b
 800c9a0:	3ff921fb 	.word	0x3ff921fb
 800c9a4:	413921fb 	.word	0x413921fb
 800c9a8:	3fe00000 	.word	0x3fe00000
 800c9ac:	0800d724 	.word	0x0800d724
 800c9b0:	7fefffff 	.word	0x7fefffff
 800c9b4:	ea4f 5628 	mov.w	r6, r8, asr #20
 800c9b8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800c9bc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	460d      	mov	r5, r1
 800c9c4:	f7f4 f8d0 	bl	8000b68 <__aeabi_d2iz>
 800c9c8:	f7f3 fdb4 	bl	8000534 <__aeabi_i2d>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	4629      	mov	r1, r5
 800c9d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c9d8:	f7f3 fc5e 	bl	8000298 <__aeabi_dsub>
 800c9dc:	4b21      	ldr	r3, [pc, #132]	; (800ca64 <__ieee754_rem_pio2+0x404>)
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f7f3 fe12 	bl	8000608 <__aeabi_dmul>
 800c9e4:	460d      	mov	r5, r1
 800c9e6:	4604      	mov	r4, r0
 800c9e8:	f7f4 f8be 	bl	8000b68 <__aeabi_d2iz>
 800c9ec:	f7f3 fda2 	bl	8000534 <__aeabi_i2d>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	4620      	mov	r0, r4
 800c9f6:	4629      	mov	r1, r5
 800c9f8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c9fc:	f7f3 fc4c 	bl	8000298 <__aeabi_dsub>
 800ca00:	4b18      	ldr	r3, [pc, #96]	; (800ca64 <__ieee754_rem_pio2+0x404>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	f7f3 fe00 	bl	8000608 <__aeabi_dmul>
 800ca08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ca0c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800ca10:	2703      	movs	r7, #3
 800ca12:	2400      	movs	r4, #0
 800ca14:	2500      	movs	r5, #0
 800ca16:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800ca1a:	4622      	mov	r2, r4
 800ca1c:	462b      	mov	r3, r5
 800ca1e:	46b9      	mov	r9, r7
 800ca20:	3f01      	subs	r7, #1
 800ca22:	f7f4 f859 	bl	8000ad8 <__aeabi_dcmpeq>
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d1f5      	bne.n	800ca16 <__ieee754_rem_pio2+0x3b6>
 800ca2a:	4b0f      	ldr	r3, [pc, #60]	; (800ca68 <__ieee754_rem_pio2+0x408>)
 800ca2c:	9301      	str	r3, [sp, #4]
 800ca2e:	2302      	movs	r3, #2
 800ca30:	9300      	str	r3, [sp, #0]
 800ca32:	4632      	mov	r2, r6
 800ca34:	464b      	mov	r3, r9
 800ca36:	4651      	mov	r1, sl
 800ca38:	a804      	add	r0, sp, #16
 800ca3a:	f000 f821 	bl	800ca80 <__kernel_rem_pio2>
 800ca3e:	9b02      	ldr	r3, [sp, #8]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	4683      	mov	fp, r0
 800ca44:	f6bf ae4c 	bge.w	800c6e0 <__ieee754_rem_pio2+0x80>
 800ca48:	e9da 2100 	ldrd	r2, r1, [sl]
 800ca4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca50:	e9ca 2300 	strd	r2, r3, [sl]
 800ca54:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ca58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ca5c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ca60:	e73f      	b.n	800c8e2 <__ieee754_rem_pio2+0x282>
 800ca62:	bf00      	nop
 800ca64:	41700000 	.word	0x41700000
 800ca68:	0800d7a4 	.word	0x0800d7a4

0800ca6c <fabs>:
 800ca6c:	ec51 0b10 	vmov	r0, r1, d0
 800ca70:	ee10 2a10 	vmov	r2, s0
 800ca74:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca78:	ec43 2b10 	vmov	d0, r2, r3
 800ca7c:	4770      	bx	lr
	...

0800ca80 <__kernel_rem_pio2>:
 800ca80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca84:	ed2d 8b02 	vpush	{d8}
 800ca88:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ca8c:	f112 0f14 	cmn.w	r2, #20
 800ca90:	9306      	str	r3, [sp, #24]
 800ca92:	9104      	str	r1, [sp, #16]
 800ca94:	4bc2      	ldr	r3, [pc, #776]	; (800cda0 <__kernel_rem_pio2+0x320>)
 800ca96:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ca98:	9009      	str	r0, [sp, #36]	; 0x24
 800ca9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca9e:	9300      	str	r3, [sp, #0]
 800caa0:	9b06      	ldr	r3, [sp, #24]
 800caa2:	f103 33ff 	add.w	r3, r3, #4294967295
 800caa6:	bfa8      	it	ge
 800caa8:	1ed4      	subge	r4, r2, #3
 800caaa:	9305      	str	r3, [sp, #20]
 800caac:	bfb2      	itee	lt
 800caae:	2400      	movlt	r4, #0
 800cab0:	2318      	movge	r3, #24
 800cab2:	fb94 f4f3 	sdivge	r4, r4, r3
 800cab6:	f06f 0317 	mvn.w	r3, #23
 800caba:	fb04 3303 	mla	r3, r4, r3, r3
 800cabe:	eb03 0a02 	add.w	sl, r3, r2
 800cac2:	9b00      	ldr	r3, [sp, #0]
 800cac4:	9a05      	ldr	r2, [sp, #20]
 800cac6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800cd90 <__kernel_rem_pio2+0x310>
 800caca:	eb03 0802 	add.w	r8, r3, r2
 800cace:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cad0:	1aa7      	subs	r7, r4, r2
 800cad2:	ae20      	add	r6, sp, #128	; 0x80
 800cad4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cad8:	2500      	movs	r5, #0
 800cada:	4545      	cmp	r5, r8
 800cadc:	dd13      	ble.n	800cb06 <__kernel_rem_pio2+0x86>
 800cade:	9b06      	ldr	r3, [sp, #24]
 800cae0:	aa20      	add	r2, sp, #128	; 0x80
 800cae2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800cae6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800caea:	f04f 0800 	mov.w	r8, #0
 800caee:	9b00      	ldr	r3, [sp, #0]
 800caf0:	4598      	cmp	r8, r3
 800caf2:	dc31      	bgt.n	800cb58 <__kernel_rem_pio2+0xd8>
 800caf4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800cd90 <__kernel_rem_pio2+0x310>
 800caf8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cafc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb00:	462f      	mov	r7, r5
 800cb02:	2600      	movs	r6, #0
 800cb04:	e01b      	b.n	800cb3e <__kernel_rem_pio2+0xbe>
 800cb06:	42ef      	cmn	r7, r5
 800cb08:	d407      	bmi.n	800cb1a <__kernel_rem_pio2+0x9a>
 800cb0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cb0e:	f7f3 fd11 	bl	8000534 <__aeabi_i2d>
 800cb12:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cb16:	3501      	adds	r5, #1
 800cb18:	e7df      	b.n	800cada <__kernel_rem_pio2+0x5a>
 800cb1a:	ec51 0b18 	vmov	r0, r1, d8
 800cb1e:	e7f8      	b.n	800cb12 <__kernel_rem_pio2+0x92>
 800cb20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb24:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800cb28:	f7f3 fd6e 	bl	8000608 <__aeabi_dmul>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	460b      	mov	r3, r1
 800cb30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb34:	f7f3 fbb2 	bl	800029c <__adddf3>
 800cb38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb3c:	3601      	adds	r6, #1
 800cb3e:	9b05      	ldr	r3, [sp, #20]
 800cb40:	429e      	cmp	r6, r3
 800cb42:	f1a7 0708 	sub.w	r7, r7, #8
 800cb46:	ddeb      	ble.n	800cb20 <__kernel_rem_pio2+0xa0>
 800cb48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb4c:	f108 0801 	add.w	r8, r8, #1
 800cb50:	ecab 7b02 	vstmia	fp!, {d7}
 800cb54:	3508      	adds	r5, #8
 800cb56:	e7ca      	b.n	800caee <__kernel_rem_pio2+0x6e>
 800cb58:	9b00      	ldr	r3, [sp, #0]
 800cb5a:	aa0c      	add	r2, sp, #48	; 0x30
 800cb5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb60:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb62:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800cb64:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cb68:	9c00      	ldr	r4, [sp, #0]
 800cb6a:	930a      	str	r3, [sp, #40]	; 0x28
 800cb6c:	00e3      	lsls	r3, r4, #3
 800cb6e:	9308      	str	r3, [sp, #32]
 800cb70:	ab98      	add	r3, sp, #608	; 0x260
 800cb72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb76:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800cb7a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800cb7e:	ab70      	add	r3, sp, #448	; 0x1c0
 800cb80:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800cb84:	46c3      	mov	fp, r8
 800cb86:	46a1      	mov	r9, r4
 800cb88:	f1b9 0f00 	cmp.w	r9, #0
 800cb8c:	f1a5 0508 	sub.w	r5, r5, #8
 800cb90:	dc77      	bgt.n	800cc82 <__kernel_rem_pio2+0x202>
 800cb92:	ec47 6b10 	vmov	d0, r6, r7
 800cb96:	4650      	mov	r0, sl
 800cb98:	f000 fac2 	bl	800d120 <scalbn>
 800cb9c:	ec57 6b10 	vmov	r6, r7, d0
 800cba0:	2200      	movs	r2, #0
 800cba2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cba6:	ee10 0a10 	vmov	r0, s0
 800cbaa:	4639      	mov	r1, r7
 800cbac:	f7f3 fd2c 	bl	8000608 <__aeabi_dmul>
 800cbb0:	ec41 0b10 	vmov	d0, r0, r1
 800cbb4:	f000 fb34 	bl	800d220 <floor>
 800cbb8:	4b7a      	ldr	r3, [pc, #488]	; (800cda4 <__kernel_rem_pio2+0x324>)
 800cbba:	ec51 0b10 	vmov	r0, r1, d0
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	f7f3 fd22 	bl	8000608 <__aeabi_dmul>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	4630      	mov	r0, r6
 800cbca:	4639      	mov	r1, r7
 800cbcc:	f7f3 fb64 	bl	8000298 <__aeabi_dsub>
 800cbd0:	460f      	mov	r7, r1
 800cbd2:	4606      	mov	r6, r0
 800cbd4:	f7f3 ffc8 	bl	8000b68 <__aeabi_d2iz>
 800cbd8:	9002      	str	r0, [sp, #8]
 800cbda:	f7f3 fcab 	bl	8000534 <__aeabi_i2d>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	4639      	mov	r1, r7
 800cbe6:	f7f3 fb57 	bl	8000298 <__aeabi_dsub>
 800cbea:	f1ba 0f00 	cmp.w	sl, #0
 800cbee:	4606      	mov	r6, r0
 800cbf0:	460f      	mov	r7, r1
 800cbf2:	dd6d      	ble.n	800ccd0 <__kernel_rem_pio2+0x250>
 800cbf4:	1e61      	subs	r1, r4, #1
 800cbf6:	ab0c      	add	r3, sp, #48	; 0x30
 800cbf8:	9d02      	ldr	r5, [sp, #8]
 800cbfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cbfe:	f1ca 0018 	rsb	r0, sl, #24
 800cc02:	fa43 f200 	asr.w	r2, r3, r0
 800cc06:	4415      	add	r5, r2
 800cc08:	4082      	lsls	r2, r0
 800cc0a:	1a9b      	subs	r3, r3, r2
 800cc0c:	aa0c      	add	r2, sp, #48	; 0x30
 800cc0e:	9502      	str	r5, [sp, #8]
 800cc10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cc14:	f1ca 0217 	rsb	r2, sl, #23
 800cc18:	fa43 fb02 	asr.w	fp, r3, r2
 800cc1c:	f1bb 0f00 	cmp.w	fp, #0
 800cc20:	dd65      	ble.n	800ccee <__kernel_rem_pio2+0x26e>
 800cc22:	9b02      	ldr	r3, [sp, #8]
 800cc24:	2200      	movs	r2, #0
 800cc26:	3301      	adds	r3, #1
 800cc28:	9302      	str	r3, [sp, #8]
 800cc2a:	4615      	mov	r5, r2
 800cc2c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800cc30:	4294      	cmp	r4, r2
 800cc32:	f300 809f 	bgt.w	800cd74 <__kernel_rem_pio2+0x2f4>
 800cc36:	f1ba 0f00 	cmp.w	sl, #0
 800cc3a:	dd07      	ble.n	800cc4c <__kernel_rem_pio2+0x1cc>
 800cc3c:	f1ba 0f01 	cmp.w	sl, #1
 800cc40:	f000 80c1 	beq.w	800cdc6 <__kernel_rem_pio2+0x346>
 800cc44:	f1ba 0f02 	cmp.w	sl, #2
 800cc48:	f000 80c7 	beq.w	800cdda <__kernel_rem_pio2+0x35a>
 800cc4c:	f1bb 0f02 	cmp.w	fp, #2
 800cc50:	d14d      	bne.n	800ccee <__kernel_rem_pio2+0x26e>
 800cc52:	4632      	mov	r2, r6
 800cc54:	463b      	mov	r3, r7
 800cc56:	4954      	ldr	r1, [pc, #336]	; (800cda8 <__kernel_rem_pio2+0x328>)
 800cc58:	2000      	movs	r0, #0
 800cc5a:	f7f3 fb1d 	bl	8000298 <__aeabi_dsub>
 800cc5e:	4606      	mov	r6, r0
 800cc60:	460f      	mov	r7, r1
 800cc62:	2d00      	cmp	r5, #0
 800cc64:	d043      	beq.n	800ccee <__kernel_rem_pio2+0x26e>
 800cc66:	4650      	mov	r0, sl
 800cc68:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800cd98 <__kernel_rem_pio2+0x318>
 800cc6c:	f000 fa58 	bl	800d120 <scalbn>
 800cc70:	4630      	mov	r0, r6
 800cc72:	4639      	mov	r1, r7
 800cc74:	ec53 2b10 	vmov	r2, r3, d0
 800cc78:	f7f3 fb0e 	bl	8000298 <__aeabi_dsub>
 800cc7c:	4606      	mov	r6, r0
 800cc7e:	460f      	mov	r7, r1
 800cc80:	e035      	b.n	800ccee <__kernel_rem_pio2+0x26e>
 800cc82:	4b4a      	ldr	r3, [pc, #296]	; (800cdac <__kernel_rem_pio2+0x32c>)
 800cc84:	2200      	movs	r2, #0
 800cc86:	4630      	mov	r0, r6
 800cc88:	4639      	mov	r1, r7
 800cc8a:	f7f3 fcbd 	bl	8000608 <__aeabi_dmul>
 800cc8e:	f7f3 ff6b 	bl	8000b68 <__aeabi_d2iz>
 800cc92:	f7f3 fc4f 	bl	8000534 <__aeabi_i2d>
 800cc96:	4602      	mov	r2, r0
 800cc98:	460b      	mov	r3, r1
 800cc9a:	ec43 2b18 	vmov	d8, r2, r3
 800cc9e:	4b44      	ldr	r3, [pc, #272]	; (800cdb0 <__kernel_rem_pio2+0x330>)
 800cca0:	2200      	movs	r2, #0
 800cca2:	f7f3 fcb1 	bl	8000608 <__aeabi_dmul>
 800cca6:	4602      	mov	r2, r0
 800cca8:	460b      	mov	r3, r1
 800ccaa:	4630      	mov	r0, r6
 800ccac:	4639      	mov	r1, r7
 800ccae:	f7f3 faf3 	bl	8000298 <__aeabi_dsub>
 800ccb2:	f7f3 ff59 	bl	8000b68 <__aeabi_d2iz>
 800ccb6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ccba:	f84b 0b04 	str.w	r0, [fp], #4
 800ccbe:	ec51 0b18 	vmov	r0, r1, d8
 800ccc2:	f7f3 faeb 	bl	800029c <__adddf3>
 800ccc6:	f109 39ff 	add.w	r9, r9, #4294967295
 800ccca:	4606      	mov	r6, r0
 800cccc:	460f      	mov	r7, r1
 800ccce:	e75b      	b.n	800cb88 <__kernel_rem_pio2+0x108>
 800ccd0:	d106      	bne.n	800cce0 <__kernel_rem_pio2+0x260>
 800ccd2:	1e63      	subs	r3, r4, #1
 800ccd4:	aa0c      	add	r2, sp, #48	; 0x30
 800ccd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccda:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800ccde:	e79d      	b.n	800cc1c <__kernel_rem_pio2+0x19c>
 800cce0:	4b34      	ldr	r3, [pc, #208]	; (800cdb4 <__kernel_rem_pio2+0x334>)
 800cce2:	2200      	movs	r2, #0
 800cce4:	f7f3 ff16 	bl	8000b14 <__aeabi_dcmpge>
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d140      	bne.n	800cd6e <__kernel_rem_pio2+0x2ee>
 800ccec:	4683      	mov	fp, r0
 800ccee:	2200      	movs	r2, #0
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	4639      	mov	r1, r7
 800ccf6:	f7f3 feef 	bl	8000ad8 <__aeabi_dcmpeq>
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	f000 80c1 	beq.w	800ce82 <__kernel_rem_pio2+0x402>
 800cd00:	1e65      	subs	r5, r4, #1
 800cd02:	462b      	mov	r3, r5
 800cd04:	2200      	movs	r2, #0
 800cd06:	9900      	ldr	r1, [sp, #0]
 800cd08:	428b      	cmp	r3, r1
 800cd0a:	da6d      	bge.n	800cde8 <__kernel_rem_pio2+0x368>
 800cd0c:	2a00      	cmp	r2, #0
 800cd0e:	f000 808a 	beq.w	800ce26 <__kernel_rem_pio2+0x3a6>
 800cd12:	ab0c      	add	r3, sp, #48	; 0x30
 800cd14:	f1aa 0a18 	sub.w	sl, sl, #24
 800cd18:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f000 80ae 	beq.w	800ce7e <__kernel_rem_pio2+0x3fe>
 800cd22:	4650      	mov	r0, sl
 800cd24:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800cd98 <__kernel_rem_pio2+0x318>
 800cd28:	f000 f9fa 	bl	800d120 <scalbn>
 800cd2c:	1c6b      	adds	r3, r5, #1
 800cd2e:	00da      	lsls	r2, r3, #3
 800cd30:	9205      	str	r2, [sp, #20]
 800cd32:	ec57 6b10 	vmov	r6, r7, d0
 800cd36:	aa70      	add	r2, sp, #448	; 0x1c0
 800cd38:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800cdac <__kernel_rem_pio2+0x32c>
 800cd3c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800cd40:	462c      	mov	r4, r5
 800cd42:	f04f 0800 	mov.w	r8, #0
 800cd46:	2c00      	cmp	r4, #0
 800cd48:	f280 80d4 	bge.w	800cef4 <__kernel_rem_pio2+0x474>
 800cd4c:	462c      	mov	r4, r5
 800cd4e:	2c00      	cmp	r4, #0
 800cd50:	f2c0 8102 	blt.w	800cf58 <__kernel_rem_pio2+0x4d8>
 800cd54:	4b18      	ldr	r3, [pc, #96]	; (800cdb8 <__kernel_rem_pio2+0x338>)
 800cd56:	461e      	mov	r6, r3
 800cd58:	ab70      	add	r3, sp, #448	; 0x1c0
 800cd5a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800cd5e:	1b2b      	subs	r3, r5, r4
 800cd60:	f04f 0900 	mov.w	r9, #0
 800cd64:	f04f 0a00 	mov.w	sl, #0
 800cd68:	2700      	movs	r7, #0
 800cd6a:	9306      	str	r3, [sp, #24]
 800cd6c:	e0e6      	b.n	800cf3c <__kernel_rem_pio2+0x4bc>
 800cd6e:	f04f 0b02 	mov.w	fp, #2
 800cd72:	e756      	b.n	800cc22 <__kernel_rem_pio2+0x1a2>
 800cd74:	f8d8 3000 	ldr.w	r3, [r8]
 800cd78:	bb05      	cbnz	r5, 800cdbc <__kernel_rem_pio2+0x33c>
 800cd7a:	b123      	cbz	r3, 800cd86 <__kernel_rem_pio2+0x306>
 800cd7c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cd80:	f8c8 3000 	str.w	r3, [r8]
 800cd84:	2301      	movs	r3, #1
 800cd86:	3201      	adds	r2, #1
 800cd88:	f108 0804 	add.w	r8, r8, #4
 800cd8c:	461d      	mov	r5, r3
 800cd8e:	e74f      	b.n	800cc30 <__kernel_rem_pio2+0x1b0>
	...
 800cd9c:	3ff00000 	.word	0x3ff00000
 800cda0:	0800d8f0 	.word	0x0800d8f0
 800cda4:	40200000 	.word	0x40200000
 800cda8:	3ff00000 	.word	0x3ff00000
 800cdac:	3e700000 	.word	0x3e700000
 800cdb0:	41700000 	.word	0x41700000
 800cdb4:	3fe00000 	.word	0x3fe00000
 800cdb8:	0800d8b0 	.word	0x0800d8b0
 800cdbc:	1acb      	subs	r3, r1, r3
 800cdbe:	f8c8 3000 	str.w	r3, [r8]
 800cdc2:	462b      	mov	r3, r5
 800cdc4:	e7df      	b.n	800cd86 <__kernel_rem_pio2+0x306>
 800cdc6:	1e62      	subs	r2, r4, #1
 800cdc8:	ab0c      	add	r3, sp, #48	; 0x30
 800cdca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdce:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cdd2:	a90c      	add	r1, sp, #48	; 0x30
 800cdd4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cdd8:	e738      	b.n	800cc4c <__kernel_rem_pio2+0x1cc>
 800cdda:	1e62      	subs	r2, r4, #1
 800cddc:	ab0c      	add	r3, sp, #48	; 0x30
 800cdde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cde2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cde6:	e7f4      	b.n	800cdd2 <__kernel_rem_pio2+0x352>
 800cde8:	a90c      	add	r1, sp, #48	; 0x30
 800cdea:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cdee:	3b01      	subs	r3, #1
 800cdf0:	430a      	orrs	r2, r1
 800cdf2:	e788      	b.n	800cd06 <__kernel_rem_pio2+0x286>
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800cdfa:	2900      	cmp	r1, #0
 800cdfc:	d0fa      	beq.n	800cdf4 <__kernel_rem_pio2+0x374>
 800cdfe:	9a08      	ldr	r2, [sp, #32]
 800ce00:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800ce04:	446a      	add	r2, sp
 800ce06:	3a98      	subs	r2, #152	; 0x98
 800ce08:	9208      	str	r2, [sp, #32]
 800ce0a:	9a06      	ldr	r2, [sp, #24]
 800ce0c:	a920      	add	r1, sp, #128	; 0x80
 800ce0e:	18a2      	adds	r2, r4, r2
 800ce10:	18e3      	adds	r3, r4, r3
 800ce12:	f104 0801 	add.w	r8, r4, #1
 800ce16:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800ce1a:	9302      	str	r3, [sp, #8]
 800ce1c:	9b02      	ldr	r3, [sp, #8]
 800ce1e:	4543      	cmp	r3, r8
 800ce20:	da04      	bge.n	800ce2c <__kernel_rem_pio2+0x3ac>
 800ce22:	461c      	mov	r4, r3
 800ce24:	e6a2      	b.n	800cb6c <__kernel_rem_pio2+0xec>
 800ce26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e7e4      	b.n	800cdf6 <__kernel_rem_pio2+0x376>
 800ce2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce2e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ce32:	f7f3 fb7f 	bl	8000534 <__aeabi_i2d>
 800ce36:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ce3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce3c:	46ab      	mov	fp, r5
 800ce3e:	461c      	mov	r4, r3
 800ce40:	f04f 0900 	mov.w	r9, #0
 800ce44:	2600      	movs	r6, #0
 800ce46:	2700      	movs	r7, #0
 800ce48:	9b05      	ldr	r3, [sp, #20]
 800ce4a:	4599      	cmp	r9, r3
 800ce4c:	dd06      	ble.n	800ce5c <__kernel_rem_pio2+0x3dc>
 800ce4e:	9b08      	ldr	r3, [sp, #32]
 800ce50:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ce54:	f108 0801 	add.w	r8, r8, #1
 800ce58:	9308      	str	r3, [sp, #32]
 800ce5a:	e7df      	b.n	800ce1c <__kernel_rem_pio2+0x39c>
 800ce5c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ce60:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ce64:	f7f3 fbd0 	bl	8000608 <__aeabi_dmul>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	4639      	mov	r1, r7
 800ce70:	f7f3 fa14 	bl	800029c <__adddf3>
 800ce74:	f109 0901 	add.w	r9, r9, #1
 800ce78:	4606      	mov	r6, r0
 800ce7a:	460f      	mov	r7, r1
 800ce7c:	e7e4      	b.n	800ce48 <__kernel_rem_pio2+0x3c8>
 800ce7e:	3d01      	subs	r5, #1
 800ce80:	e747      	b.n	800cd12 <__kernel_rem_pio2+0x292>
 800ce82:	ec47 6b10 	vmov	d0, r6, r7
 800ce86:	f1ca 0000 	rsb	r0, sl, #0
 800ce8a:	f000 f949 	bl	800d120 <scalbn>
 800ce8e:	ec57 6b10 	vmov	r6, r7, d0
 800ce92:	4ba0      	ldr	r3, [pc, #640]	; (800d114 <__kernel_rem_pio2+0x694>)
 800ce94:	ee10 0a10 	vmov	r0, s0
 800ce98:	2200      	movs	r2, #0
 800ce9a:	4639      	mov	r1, r7
 800ce9c:	f7f3 fe3a 	bl	8000b14 <__aeabi_dcmpge>
 800cea0:	b1f8      	cbz	r0, 800cee2 <__kernel_rem_pio2+0x462>
 800cea2:	4b9d      	ldr	r3, [pc, #628]	; (800d118 <__kernel_rem_pio2+0x698>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	4630      	mov	r0, r6
 800cea8:	4639      	mov	r1, r7
 800ceaa:	f7f3 fbad 	bl	8000608 <__aeabi_dmul>
 800ceae:	f7f3 fe5b 	bl	8000b68 <__aeabi_d2iz>
 800ceb2:	4680      	mov	r8, r0
 800ceb4:	f7f3 fb3e 	bl	8000534 <__aeabi_i2d>
 800ceb8:	4b96      	ldr	r3, [pc, #600]	; (800d114 <__kernel_rem_pio2+0x694>)
 800ceba:	2200      	movs	r2, #0
 800cebc:	f7f3 fba4 	bl	8000608 <__aeabi_dmul>
 800cec0:	460b      	mov	r3, r1
 800cec2:	4602      	mov	r2, r0
 800cec4:	4639      	mov	r1, r7
 800cec6:	4630      	mov	r0, r6
 800cec8:	f7f3 f9e6 	bl	8000298 <__aeabi_dsub>
 800cecc:	f7f3 fe4c 	bl	8000b68 <__aeabi_d2iz>
 800ced0:	1c65      	adds	r5, r4, #1
 800ced2:	ab0c      	add	r3, sp, #48	; 0x30
 800ced4:	f10a 0a18 	add.w	sl, sl, #24
 800ced8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cedc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800cee0:	e71f      	b.n	800cd22 <__kernel_rem_pio2+0x2a2>
 800cee2:	4630      	mov	r0, r6
 800cee4:	4639      	mov	r1, r7
 800cee6:	f7f3 fe3f 	bl	8000b68 <__aeabi_d2iz>
 800ceea:	ab0c      	add	r3, sp, #48	; 0x30
 800ceec:	4625      	mov	r5, r4
 800ceee:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800cef2:	e716      	b.n	800cd22 <__kernel_rem_pio2+0x2a2>
 800cef4:	ab0c      	add	r3, sp, #48	; 0x30
 800cef6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800cefa:	f7f3 fb1b 	bl	8000534 <__aeabi_i2d>
 800cefe:	4632      	mov	r2, r6
 800cf00:	463b      	mov	r3, r7
 800cf02:	f7f3 fb81 	bl	8000608 <__aeabi_dmul>
 800cf06:	4642      	mov	r2, r8
 800cf08:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800cf0c:	464b      	mov	r3, r9
 800cf0e:	4630      	mov	r0, r6
 800cf10:	4639      	mov	r1, r7
 800cf12:	f7f3 fb79 	bl	8000608 <__aeabi_dmul>
 800cf16:	3c01      	subs	r4, #1
 800cf18:	4606      	mov	r6, r0
 800cf1a:	460f      	mov	r7, r1
 800cf1c:	e713      	b.n	800cd46 <__kernel_rem_pio2+0x2c6>
 800cf1e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800cf22:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800cf26:	f7f3 fb6f 	bl	8000608 <__aeabi_dmul>
 800cf2a:	4602      	mov	r2, r0
 800cf2c:	460b      	mov	r3, r1
 800cf2e:	4648      	mov	r0, r9
 800cf30:	4651      	mov	r1, sl
 800cf32:	f7f3 f9b3 	bl	800029c <__adddf3>
 800cf36:	3701      	adds	r7, #1
 800cf38:	4681      	mov	r9, r0
 800cf3a:	468a      	mov	sl, r1
 800cf3c:	9b00      	ldr	r3, [sp, #0]
 800cf3e:	429f      	cmp	r7, r3
 800cf40:	dc02      	bgt.n	800cf48 <__kernel_rem_pio2+0x4c8>
 800cf42:	9b06      	ldr	r3, [sp, #24]
 800cf44:	429f      	cmp	r7, r3
 800cf46:	ddea      	ble.n	800cf1e <__kernel_rem_pio2+0x49e>
 800cf48:	9a06      	ldr	r2, [sp, #24]
 800cf4a:	ab48      	add	r3, sp, #288	; 0x120
 800cf4c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800cf50:	e9c6 9a00 	strd	r9, sl, [r6]
 800cf54:	3c01      	subs	r4, #1
 800cf56:	e6fa      	b.n	800cd4e <__kernel_rem_pio2+0x2ce>
 800cf58:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cf5a:	2b02      	cmp	r3, #2
 800cf5c:	dc0b      	bgt.n	800cf76 <__kernel_rem_pio2+0x4f6>
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	dc39      	bgt.n	800cfd6 <__kernel_rem_pio2+0x556>
 800cf62:	d05d      	beq.n	800d020 <__kernel_rem_pio2+0x5a0>
 800cf64:	9b02      	ldr	r3, [sp, #8]
 800cf66:	f003 0007 	and.w	r0, r3, #7
 800cf6a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cf6e:	ecbd 8b02 	vpop	{d8}
 800cf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf76:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800cf78:	2b03      	cmp	r3, #3
 800cf7a:	d1f3      	bne.n	800cf64 <__kernel_rem_pio2+0x4e4>
 800cf7c:	9b05      	ldr	r3, [sp, #20]
 800cf7e:	9500      	str	r5, [sp, #0]
 800cf80:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800cf84:	eb0d 0403 	add.w	r4, sp, r3
 800cf88:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800cf8c:	46a2      	mov	sl, r4
 800cf8e:	9b00      	ldr	r3, [sp, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f1aa 0a08 	sub.w	sl, sl, #8
 800cf96:	dc69      	bgt.n	800d06c <__kernel_rem_pio2+0x5ec>
 800cf98:	46aa      	mov	sl, r5
 800cf9a:	f1ba 0f01 	cmp.w	sl, #1
 800cf9e:	f1a4 0408 	sub.w	r4, r4, #8
 800cfa2:	f300 8083 	bgt.w	800d0ac <__kernel_rem_pio2+0x62c>
 800cfa6:	9c05      	ldr	r4, [sp, #20]
 800cfa8:	ab48      	add	r3, sp, #288	; 0x120
 800cfaa:	441c      	add	r4, r3
 800cfac:	2000      	movs	r0, #0
 800cfae:	2100      	movs	r1, #0
 800cfb0:	2d01      	cmp	r5, #1
 800cfb2:	f300 809a 	bgt.w	800d0ea <__kernel_rem_pio2+0x66a>
 800cfb6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800cfba:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800cfbe:	f1bb 0f00 	cmp.w	fp, #0
 800cfc2:	f040 8098 	bne.w	800d0f6 <__kernel_rem_pio2+0x676>
 800cfc6:	9b04      	ldr	r3, [sp, #16]
 800cfc8:	e9c3 7800 	strd	r7, r8, [r3]
 800cfcc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800cfd0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800cfd4:	e7c6      	b.n	800cf64 <__kernel_rem_pio2+0x4e4>
 800cfd6:	9e05      	ldr	r6, [sp, #20]
 800cfd8:	ab48      	add	r3, sp, #288	; 0x120
 800cfda:	441e      	add	r6, r3
 800cfdc:	462c      	mov	r4, r5
 800cfde:	2000      	movs	r0, #0
 800cfe0:	2100      	movs	r1, #0
 800cfe2:	2c00      	cmp	r4, #0
 800cfe4:	da33      	bge.n	800d04e <__kernel_rem_pio2+0x5ce>
 800cfe6:	f1bb 0f00 	cmp.w	fp, #0
 800cfea:	d036      	beq.n	800d05a <__kernel_rem_pio2+0x5da>
 800cfec:	4602      	mov	r2, r0
 800cfee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cff2:	9c04      	ldr	r4, [sp, #16]
 800cff4:	e9c4 2300 	strd	r2, r3, [r4]
 800cff8:	4602      	mov	r2, r0
 800cffa:	460b      	mov	r3, r1
 800cffc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d000:	f7f3 f94a 	bl	8000298 <__aeabi_dsub>
 800d004:	ae4a      	add	r6, sp, #296	; 0x128
 800d006:	2401      	movs	r4, #1
 800d008:	42a5      	cmp	r5, r4
 800d00a:	da29      	bge.n	800d060 <__kernel_rem_pio2+0x5e0>
 800d00c:	f1bb 0f00 	cmp.w	fp, #0
 800d010:	d002      	beq.n	800d018 <__kernel_rem_pio2+0x598>
 800d012:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d016:	4619      	mov	r1, r3
 800d018:	9b04      	ldr	r3, [sp, #16]
 800d01a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d01e:	e7a1      	b.n	800cf64 <__kernel_rem_pio2+0x4e4>
 800d020:	9c05      	ldr	r4, [sp, #20]
 800d022:	ab48      	add	r3, sp, #288	; 0x120
 800d024:	441c      	add	r4, r3
 800d026:	2000      	movs	r0, #0
 800d028:	2100      	movs	r1, #0
 800d02a:	2d00      	cmp	r5, #0
 800d02c:	da09      	bge.n	800d042 <__kernel_rem_pio2+0x5c2>
 800d02e:	f1bb 0f00 	cmp.w	fp, #0
 800d032:	d002      	beq.n	800d03a <__kernel_rem_pio2+0x5ba>
 800d034:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d038:	4619      	mov	r1, r3
 800d03a:	9b04      	ldr	r3, [sp, #16]
 800d03c:	e9c3 0100 	strd	r0, r1, [r3]
 800d040:	e790      	b.n	800cf64 <__kernel_rem_pio2+0x4e4>
 800d042:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d046:	f7f3 f929 	bl	800029c <__adddf3>
 800d04a:	3d01      	subs	r5, #1
 800d04c:	e7ed      	b.n	800d02a <__kernel_rem_pio2+0x5aa>
 800d04e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800d052:	f7f3 f923 	bl	800029c <__adddf3>
 800d056:	3c01      	subs	r4, #1
 800d058:	e7c3      	b.n	800cfe2 <__kernel_rem_pio2+0x562>
 800d05a:	4602      	mov	r2, r0
 800d05c:	460b      	mov	r3, r1
 800d05e:	e7c8      	b.n	800cff2 <__kernel_rem_pio2+0x572>
 800d060:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d064:	f7f3 f91a 	bl	800029c <__adddf3>
 800d068:	3401      	adds	r4, #1
 800d06a:	e7cd      	b.n	800d008 <__kernel_rem_pio2+0x588>
 800d06c:	e9da 8900 	ldrd	r8, r9, [sl]
 800d070:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800d074:	9b00      	ldr	r3, [sp, #0]
 800d076:	3b01      	subs	r3, #1
 800d078:	9300      	str	r3, [sp, #0]
 800d07a:	4632      	mov	r2, r6
 800d07c:	463b      	mov	r3, r7
 800d07e:	4640      	mov	r0, r8
 800d080:	4649      	mov	r1, r9
 800d082:	f7f3 f90b 	bl	800029c <__adddf3>
 800d086:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d08a:	4602      	mov	r2, r0
 800d08c:	460b      	mov	r3, r1
 800d08e:	4640      	mov	r0, r8
 800d090:	4649      	mov	r1, r9
 800d092:	f7f3 f901 	bl	8000298 <__aeabi_dsub>
 800d096:	4632      	mov	r2, r6
 800d098:	463b      	mov	r3, r7
 800d09a:	f7f3 f8ff 	bl	800029c <__adddf3>
 800d09e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800d0a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d0a6:	ed8a 7b00 	vstr	d7, [sl]
 800d0aa:	e770      	b.n	800cf8e <__kernel_rem_pio2+0x50e>
 800d0ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d0b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800d0b4:	4640      	mov	r0, r8
 800d0b6:	4632      	mov	r2, r6
 800d0b8:	463b      	mov	r3, r7
 800d0ba:	4649      	mov	r1, r9
 800d0bc:	f7f3 f8ee 	bl	800029c <__adddf3>
 800d0c0:	e9cd 0100 	strd	r0, r1, [sp]
 800d0c4:	4602      	mov	r2, r0
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	4640      	mov	r0, r8
 800d0ca:	4649      	mov	r1, r9
 800d0cc:	f7f3 f8e4 	bl	8000298 <__aeabi_dsub>
 800d0d0:	4632      	mov	r2, r6
 800d0d2:	463b      	mov	r3, r7
 800d0d4:	f7f3 f8e2 	bl	800029c <__adddf3>
 800d0d8:	ed9d 7b00 	vldr	d7, [sp]
 800d0dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d0e0:	ed84 7b00 	vstr	d7, [r4]
 800d0e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d0e8:	e757      	b.n	800cf9a <__kernel_rem_pio2+0x51a>
 800d0ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d0ee:	f7f3 f8d5 	bl	800029c <__adddf3>
 800d0f2:	3d01      	subs	r5, #1
 800d0f4:	e75c      	b.n	800cfb0 <__kernel_rem_pio2+0x530>
 800d0f6:	9b04      	ldr	r3, [sp, #16]
 800d0f8:	9a04      	ldr	r2, [sp, #16]
 800d0fa:	601f      	str	r7, [r3, #0]
 800d0fc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d100:	605c      	str	r4, [r3, #4]
 800d102:	609d      	str	r5, [r3, #8]
 800d104:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d108:	60d3      	str	r3, [r2, #12]
 800d10a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d10e:	6110      	str	r0, [r2, #16]
 800d110:	6153      	str	r3, [r2, #20]
 800d112:	e727      	b.n	800cf64 <__kernel_rem_pio2+0x4e4>
 800d114:	41700000 	.word	0x41700000
 800d118:	3e700000 	.word	0x3e700000
 800d11c:	00000000 	.word	0x00000000

0800d120 <scalbn>:
 800d120:	b570      	push	{r4, r5, r6, lr}
 800d122:	ec55 4b10 	vmov	r4, r5, d0
 800d126:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d12a:	4606      	mov	r6, r0
 800d12c:	462b      	mov	r3, r5
 800d12e:	b999      	cbnz	r1, 800d158 <scalbn+0x38>
 800d130:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d134:	4323      	orrs	r3, r4
 800d136:	d03f      	beq.n	800d1b8 <scalbn+0x98>
 800d138:	4b35      	ldr	r3, [pc, #212]	; (800d210 <scalbn+0xf0>)
 800d13a:	4629      	mov	r1, r5
 800d13c:	ee10 0a10 	vmov	r0, s0
 800d140:	2200      	movs	r2, #0
 800d142:	f7f3 fa61 	bl	8000608 <__aeabi_dmul>
 800d146:	4b33      	ldr	r3, [pc, #204]	; (800d214 <scalbn+0xf4>)
 800d148:	429e      	cmp	r6, r3
 800d14a:	4604      	mov	r4, r0
 800d14c:	460d      	mov	r5, r1
 800d14e:	da10      	bge.n	800d172 <scalbn+0x52>
 800d150:	a327      	add	r3, pc, #156	; (adr r3, 800d1f0 <scalbn+0xd0>)
 800d152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d156:	e01f      	b.n	800d198 <scalbn+0x78>
 800d158:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d15c:	4291      	cmp	r1, r2
 800d15e:	d10c      	bne.n	800d17a <scalbn+0x5a>
 800d160:	ee10 2a10 	vmov	r2, s0
 800d164:	4620      	mov	r0, r4
 800d166:	4629      	mov	r1, r5
 800d168:	f7f3 f898 	bl	800029c <__adddf3>
 800d16c:	4604      	mov	r4, r0
 800d16e:	460d      	mov	r5, r1
 800d170:	e022      	b.n	800d1b8 <scalbn+0x98>
 800d172:	460b      	mov	r3, r1
 800d174:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d178:	3936      	subs	r1, #54	; 0x36
 800d17a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d17e:	4296      	cmp	r6, r2
 800d180:	dd0d      	ble.n	800d19e <scalbn+0x7e>
 800d182:	2d00      	cmp	r5, #0
 800d184:	a11c      	add	r1, pc, #112	; (adr r1, 800d1f8 <scalbn+0xd8>)
 800d186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d18a:	da02      	bge.n	800d192 <scalbn+0x72>
 800d18c:	a11c      	add	r1, pc, #112	; (adr r1, 800d200 <scalbn+0xe0>)
 800d18e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d192:	a319      	add	r3, pc, #100	; (adr r3, 800d1f8 <scalbn+0xd8>)
 800d194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d198:	f7f3 fa36 	bl	8000608 <__aeabi_dmul>
 800d19c:	e7e6      	b.n	800d16c <scalbn+0x4c>
 800d19e:	1872      	adds	r2, r6, r1
 800d1a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d1a4:	428a      	cmp	r2, r1
 800d1a6:	dcec      	bgt.n	800d182 <scalbn+0x62>
 800d1a8:	2a00      	cmp	r2, #0
 800d1aa:	dd08      	ble.n	800d1be <scalbn+0x9e>
 800d1ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d1b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d1b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d1b8:	ec45 4b10 	vmov	d0, r4, r5
 800d1bc:	bd70      	pop	{r4, r5, r6, pc}
 800d1be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d1c2:	da08      	bge.n	800d1d6 <scalbn+0xb6>
 800d1c4:	2d00      	cmp	r5, #0
 800d1c6:	a10a      	add	r1, pc, #40	; (adr r1, 800d1f0 <scalbn+0xd0>)
 800d1c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1cc:	dac0      	bge.n	800d150 <scalbn+0x30>
 800d1ce:	a10e      	add	r1, pc, #56	; (adr r1, 800d208 <scalbn+0xe8>)
 800d1d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1d4:	e7bc      	b.n	800d150 <scalbn+0x30>
 800d1d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d1da:	3236      	adds	r2, #54	; 0x36
 800d1dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d1e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	4b0c      	ldr	r3, [pc, #48]	; (800d218 <scalbn+0xf8>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	e7d5      	b.n	800d198 <scalbn+0x78>
 800d1ec:	f3af 8000 	nop.w
 800d1f0:	c2f8f359 	.word	0xc2f8f359
 800d1f4:	01a56e1f 	.word	0x01a56e1f
 800d1f8:	8800759c 	.word	0x8800759c
 800d1fc:	7e37e43c 	.word	0x7e37e43c
 800d200:	8800759c 	.word	0x8800759c
 800d204:	fe37e43c 	.word	0xfe37e43c
 800d208:	c2f8f359 	.word	0xc2f8f359
 800d20c:	81a56e1f 	.word	0x81a56e1f
 800d210:	43500000 	.word	0x43500000
 800d214:	ffff3cb0 	.word	0xffff3cb0
 800d218:	3c900000 	.word	0x3c900000
 800d21c:	00000000 	.word	0x00000000

0800d220 <floor>:
 800d220:	ec51 0b10 	vmov	r0, r1, d0
 800d224:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d22c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800d230:	2e13      	cmp	r6, #19
 800d232:	ee10 5a10 	vmov	r5, s0
 800d236:	ee10 8a10 	vmov	r8, s0
 800d23a:	460c      	mov	r4, r1
 800d23c:	dc31      	bgt.n	800d2a2 <floor+0x82>
 800d23e:	2e00      	cmp	r6, #0
 800d240:	da14      	bge.n	800d26c <floor+0x4c>
 800d242:	a333      	add	r3, pc, #204	; (adr r3, 800d310 <floor+0xf0>)
 800d244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d248:	f7f3 f828 	bl	800029c <__adddf3>
 800d24c:	2200      	movs	r2, #0
 800d24e:	2300      	movs	r3, #0
 800d250:	f7f3 fc6a 	bl	8000b28 <__aeabi_dcmpgt>
 800d254:	b138      	cbz	r0, 800d266 <floor+0x46>
 800d256:	2c00      	cmp	r4, #0
 800d258:	da53      	bge.n	800d302 <floor+0xe2>
 800d25a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800d25e:	4325      	orrs	r5, r4
 800d260:	d052      	beq.n	800d308 <floor+0xe8>
 800d262:	4c2d      	ldr	r4, [pc, #180]	; (800d318 <floor+0xf8>)
 800d264:	2500      	movs	r5, #0
 800d266:	4621      	mov	r1, r4
 800d268:	4628      	mov	r0, r5
 800d26a:	e024      	b.n	800d2b6 <floor+0x96>
 800d26c:	4f2b      	ldr	r7, [pc, #172]	; (800d31c <floor+0xfc>)
 800d26e:	4137      	asrs	r7, r6
 800d270:	ea01 0307 	and.w	r3, r1, r7
 800d274:	4303      	orrs	r3, r0
 800d276:	d01e      	beq.n	800d2b6 <floor+0x96>
 800d278:	a325      	add	r3, pc, #148	; (adr r3, 800d310 <floor+0xf0>)
 800d27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27e:	f7f3 f80d 	bl	800029c <__adddf3>
 800d282:	2200      	movs	r2, #0
 800d284:	2300      	movs	r3, #0
 800d286:	f7f3 fc4f 	bl	8000b28 <__aeabi_dcmpgt>
 800d28a:	2800      	cmp	r0, #0
 800d28c:	d0eb      	beq.n	800d266 <floor+0x46>
 800d28e:	2c00      	cmp	r4, #0
 800d290:	bfbe      	ittt	lt
 800d292:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d296:	4133      	asrlt	r3, r6
 800d298:	18e4      	addlt	r4, r4, r3
 800d29a:	ea24 0407 	bic.w	r4, r4, r7
 800d29e:	2500      	movs	r5, #0
 800d2a0:	e7e1      	b.n	800d266 <floor+0x46>
 800d2a2:	2e33      	cmp	r6, #51	; 0x33
 800d2a4:	dd0b      	ble.n	800d2be <floor+0x9e>
 800d2a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d2aa:	d104      	bne.n	800d2b6 <floor+0x96>
 800d2ac:	ee10 2a10 	vmov	r2, s0
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	f7f2 fff3 	bl	800029c <__adddf3>
 800d2b6:	ec41 0b10 	vmov	d0, r0, r1
 800d2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2be:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800d2c2:	f04f 37ff 	mov.w	r7, #4294967295
 800d2c6:	40df      	lsrs	r7, r3
 800d2c8:	4238      	tst	r0, r7
 800d2ca:	d0f4      	beq.n	800d2b6 <floor+0x96>
 800d2cc:	a310      	add	r3, pc, #64	; (adr r3, 800d310 <floor+0xf0>)
 800d2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d2:	f7f2 ffe3 	bl	800029c <__adddf3>
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	2300      	movs	r3, #0
 800d2da:	f7f3 fc25 	bl	8000b28 <__aeabi_dcmpgt>
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	d0c1      	beq.n	800d266 <floor+0x46>
 800d2e2:	2c00      	cmp	r4, #0
 800d2e4:	da0a      	bge.n	800d2fc <floor+0xdc>
 800d2e6:	2e14      	cmp	r6, #20
 800d2e8:	d101      	bne.n	800d2ee <floor+0xce>
 800d2ea:	3401      	adds	r4, #1
 800d2ec:	e006      	b.n	800d2fc <floor+0xdc>
 800d2ee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	40b3      	lsls	r3, r6
 800d2f6:	441d      	add	r5, r3
 800d2f8:	45a8      	cmp	r8, r5
 800d2fa:	d8f6      	bhi.n	800d2ea <floor+0xca>
 800d2fc:	ea25 0507 	bic.w	r5, r5, r7
 800d300:	e7b1      	b.n	800d266 <floor+0x46>
 800d302:	2500      	movs	r5, #0
 800d304:	462c      	mov	r4, r5
 800d306:	e7ae      	b.n	800d266 <floor+0x46>
 800d308:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d30c:	e7ab      	b.n	800d266 <floor+0x46>
 800d30e:	bf00      	nop
 800d310:	8800759c 	.word	0x8800759c
 800d314:	7e37e43c 	.word	0x7e37e43c
 800d318:	bff00000 	.word	0xbff00000
 800d31c:	000fffff 	.word	0x000fffff

0800d320 <_init>:
 800d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d322:	bf00      	nop
 800d324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d326:	bc08      	pop	{r3}
 800d328:	469e      	mov	lr, r3
 800d32a:	4770      	bx	lr

0800d32c <_fini>:
 800d32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32e:	bf00      	nop
 800d330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d332:	bc08      	pop	{r3}
 800d334:	469e      	mov	lr, r3
 800d336:	4770      	bx	lr
